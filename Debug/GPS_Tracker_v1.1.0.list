
GPS_Tracker_v1.1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a604  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023e8  0801a7b8  0801a7b8  0002a7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cba0  0801cba0  00030584  2**0
                  CONTENTS
  4 .ARM          00000008  0801cba0  0801cba0  0002cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cba8  0801cba8  00030584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cba8  0801cba8  0002cba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cbac  0801cbac  0002cbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000584  20000000  0801cbb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000333ec  20000588  0801d134  00030588  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20033974  0801d134  00033974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c08d  00000000  00000000  000305b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a43  00000000  00000000  0007c641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002408  00000000  00000000  00083088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021c0  00000000  00000000  00085490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032be9  00000000  00000000  00087650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031df1  00000000  00000000  000ba239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bd53  00000000  00000000  000ec02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00207d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2bc  00000000  00000000  00207dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000588 	.word	0x20000588
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a79c 	.word	0x0801a79c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000058c 	.word	0x2000058c
 80001ec:	0801a79c 	.word	0x0801a79c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f918 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103c:	2000      	movs	r0, #0
 800103e:	f011 fea5 	bl	8012d8c <HAL_InitTick>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	e001      	b.n	8001052 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104e:	f011 fbd9 	bl	8012804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001052:	79fb      	ldrb	r3, [r7, #7]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000004 	.word	0x20000004
 8001080:	20032108 	.word	0x20032108

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20032108 	.word	0x20032108

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000004 	.word	0x20000004

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <__NVIC_EnableIRQ+0x38>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001244:	f3bf 8f4f 	dsb	sy
}
 8001248:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <__NVIC_SystemReset+0x24>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001252:	4904      	ldr	r1, [pc, #16]	; (8001264 <__NVIC_SystemReset+0x24>)
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_SystemReset+0x28>)
 8001256:	4313      	orrs	r3, r2
 8001258:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800125a:	f3bf 8f4f 	dsb	sy
}
 800125e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <__NVIC_SystemReset+0x20>
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	05fa0004 	.word	0x05fa0004

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d00f      	beq.n	800129a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d00c      	beq.n	800129a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d009      	beq.n	800129a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d006      	beq.n	800129a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d003      	beq.n	800129a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001292:	21a7      	movs	r1, #167	; 0xa7
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001296:	f011 f9ce 	bl	8012636 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff22 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0801a7b8 	.word	0x0801a7b8

080012ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d903      	bls.n	80012cc <HAL_NVIC_SetPriority+0x20>
 80012c4:	21bf      	movs	r1, #191	; 0xbf
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <HAL_NVIC_SetPriority+0x54>)
 80012c8:	f011 f9b5 	bl	8012636 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	d903      	bls.n	80012da <HAL_NVIC_SetPriority+0x2e>
 80012d2:	21c0      	movs	r1, #192	; 0xc0
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <HAL_NVIC_SetPriority+0x54>)
 80012d6:	f011 f9ae 	bl	8012636 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80012da:	f7ff ff27 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f7ff ff77 	bl	80011d8 <NVIC_EncodePriority>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff46 	bl	8001184 <__NVIC_SetPriority>
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0801a7b8 	.word	0x0801a7b8

08001304 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da03      	bge.n	800131e <HAL_NVIC_EnableIRQ+0x1a>
 8001316:	21d3      	movs	r1, #211	; 0xd3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_NVIC_EnableIRQ+0x2c>)
 800131a:	f011 f98c 	bl	8012636 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff10 	bl	8001148 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0801a7b8 	.word	0x0801a7b8

08001334 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001338:	f7ff ff82 	bl	8001240 <__NVIC_SystemReset>

0800133c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e19d      	b.n	800168a <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a79      	ldr	r2, [pc, #484]	; (8001538 <HAL_DMA_Init+0x1fc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d044      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a77      	ldr	r2, [pc, #476]	; (800153c <HAL_DMA_Init+0x200>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d03f      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a76      	ldr	r2, [pc, #472]	; (8001540 <HAL_DMA_Init+0x204>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d03a      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a74      	ldr	r2, [pc, #464]	; (8001544 <HAL_DMA_Init+0x208>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d035      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a73      	ldr	r2, [pc, #460]	; (8001548 <HAL_DMA_Init+0x20c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d030      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_DMA_Init+0x210>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a70      	ldr	r2, [pc, #448]	; (8001550 <HAL_DMA_Init+0x214>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d026      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_DMA_Init+0x218>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d021      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6d      	ldr	r2, [pc, #436]	; (8001558 <HAL_DMA_Init+0x21c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d01c      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6b      	ldr	r2, [pc, #428]	; (800155c <HAL_DMA_Init+0x220>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d017      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <HAL_DMA_Init+0x224>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d012      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a68      	ldr	r2, [pc, #416]	; (8001564 <HAL_DMA_Init+0x228>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a67      	ldr	r2, [pc, #412]	; (8001568 <HAL_DMA_Init+0x22c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d008      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a65      	ldr	r2, [pc, #404]	; (800156c <HAL_DMA_Init+0x230>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d003      	beq.n	80013e2 <HAL_DMA_Init+0xa6>
 80013da:	21a4      	movs	r1, #164	; 0xa4
 80013dc:	4864      	ldr	r0, [pc, #400]	; (8001570 <HAL_DMA_Init+0x234>)
 80013de:	f011 f92a 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <HAL_DMA_Init+0xc8>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d008      	beq.n	8001404 <HAL_DMA_Init+0xc8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013fa:	d003      	beq.n	8001404 <HAL_DMA_Init+0xc8>
 80013fc:	21a5      	movs	r1, #165	; 0xa5
 80013fe:	485c      	ldr	r0, [pc, #368]	; (8001570 <HAL_DMA_Init+0x234>)
 8001400:	f011 f919 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b40      	cmp	r3, #64	; 0x40
 800140a:	d007      	beq.n	800141c <HAL_DMA_Init+0xe0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_DMA_Init+0xe0>
 8001414:	21a6      	movs	r1, #166	; 0xa6
 8001416:	4856      	ldr	r0, [pc, #344]	; (8001570 <HAL_DMA_Init+0x234>)
 8001418:	f011 f90d 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b80      	cmp	r3, #128	; 0x80
 8001422:	d007      	beq.n	8001434 <HAL_DMA_Init+0xf8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_DMA_Init+0xf8>
 800142c:	21a7      	movs	r1, #167	; 0xa7
 800142e:	4850      	ldr	r0, [pc, #320]	; (8001570 <HAL_DMA_Init+0x234>)
 8001430:	f011 f901 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <HAL_DMA_Init+0x11c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001444:	d008      	beq.n	8001458 <HAL_DMA_Init+0x11c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144e:	d003      	beq.n	8001458 <HAL_DMA_Init+0x11c>
 8001450:	21a8      	movs	r1, #168	; 0xa8
 8001452:	4847      	ldr	r0, [pc, #284]	; (8001570 <HAL_DMA_Init+0x234>)
 8001454:	f011 f8ef 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00d      	beq.n	800147c <HAL_DMA_Init+0x140>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001468:	d008      	beq.n	800147c <HAL_DMA_Init+0x140>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001472:	d003      	beq.n	800147c <HAL_DMA_Init+0x140>
 8001474:	21a9      	movs	r1, #169	; 0xa9
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <HAL_DMA_Init+0x234>)
 8001478:	f011 f8dd 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_DMA_Init+0x158>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b20      	cmp	r3, #32
 800148a:	d003      	beq.n	8001494 <HAL_DMA_Init+0x158>
 800148c:	21aa      	movs	r1, #170	; 0xaa
 800148e:	4838      	ldr	r0, [pc, #224]	; (8001570 <HAL_DMA_Init+0x234>)
 8001490:	f011 f8d1 	bl	8012636 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d012      	beq.n	80014c2 <HAL_DMA_Init+0x186>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a4:	d00d      	beq.n	80014c2 <HAL_DMA_Init+0x186>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_Init+0x186>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80014b8:	d003      	beq.n	80014c2 <HAL_DMA_Init+0x186>
 80014ba:	21ab      	movs	r1, #171	; 0xab
 80014bc:	482c      	ldr	r0, [pc, #176]	; (8001570 <HAL_DMA_Init+0x234>)
 80014be:	f011 f8ba 	bl	8012636 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01f      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d01b      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d017      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d013      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d00f      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d00b      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d007      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b07      	cmp	r3, #7
 8001500:	d003      	beq.n	800150a <HAL_DMA_Init+0x1ce>
 8001502:	21ad      	movs	r1, #173	; 0xad
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <HAL_DMA_Init+0x234>)
 8001506:	f011 f896 	bl	8012636 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_DMA_Init+0x238>)
 8001512:	429a      	cmp	r2, r3
 8001514:	d836      	bhi.n	8001584 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_DMA_Init+0x23c>)
 800151e:	4413      	add	r3, r2
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_DMA_Init+0x240>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	009a      	lsls	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_DMA_Init+0x244>)
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
 8001534:	e035      	b.n	80015a2 <HAL_DMA_Init+0x266>
 8001536:	bf00      	nop
 8001538:	40020008 	.word	0x40020008
 800153c:	4002001c 	.word	0x4002001c
 8001540:	40020030 	.word	0x40020030
 8001544:	40020044 	.word	0x40020044
 8001548:	40020058 	.word	0x40020058
 800154c:	4002006c 	.word	0x4002006c
 8001550:	40020080 	.word	0x40020080
 8001554:	40020408 	.word	0x40020408
 8001558:	4002041c 	.word	0x4002041c
 800155c:	40020430 	.word	0x40020430
 8001560:	40020444 	.word	0x40020444
 8001564:	40020458 	.word	0x40020458
 8001568:	4002046c 	.word	0x4002046c
 800156c:	40020480 	.word	0x40020480
 8001570:	0801a7f4 	.word	0x0801a7f4
 8001574:	40020407 	.word	0x40020407
 8001578:	bffdfff8 	.word	0xbffdfff8
 800157c:	cccccccd 	.word	0xcccccccd
 8001580:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b42      	ldr	r3, [pc, #264]	; (8001694 <HAL_DMA_Init+0x358>)
 800158c:	4413      	add	r3, r2
 800158e:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_DMA_Init+0x35c>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	009a      	lsls	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3f      	ldr	r2, [pc, #252]	; (800169c <HAL_DMA_Init+0x360>)
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015fc:	d039      	beq.n	8001672 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_DMA_Init+0x364>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d11a      	bne.n	800163e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_DMA_Init+0x368>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f003 031c 	and.w	r3, r3, #28
 8001614:	210f      	movs	r1, #15
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	4921      	ldr	r1, [pc, #132]	; (80016a4 <HAL_DMA_Init+0x368>)
 800161e:	4013      	ands	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_DMA_Init+0x368>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6859      	ldr	r1, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031c 	and.w	r3, r3, #28
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_DMA_Init+0x368>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e019      	b.n	8001672 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_DMA_Init+0x36c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f003 031c 	and.w	r3, r3, #28
 800164a:	210f      	movs	r1, #15
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	4915      	ldr	r1, [pc, #84]	; (80016a8 <HAL_DMA_Init+0x36c>)
 8001654:	4013      	ands	r3, r2
 8001656:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_DMA_Init+0x36c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f003 031c 	and.w	r3, r3, #28
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_DMA_Init+0x36c>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	bffdfbf8 	.word	0xbffdfbf8
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020000 	.word	0x40020000
 80016a4:	400200a8 	.word	0x400200a8
 80016a8:	400204a8 	.word	0x400204a8

080016ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_Start_IT+0x20>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d304      	bcc.n	80016d6 <HAL_DMA_Start_IT+0x2a>
 80016cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80016d0:	482c      	ldr	r0, [pc, #176]	; (8001784 <HAL_DMA_Start_IT+0xd8>)
 80016d2:	f010 ffb0 	bl	8012636 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_DMA_Start_IT+0x38>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e04b      	b.n	800177c <HAL_DMA_Start_IT+0xd0>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d13a      	bne.n	800176e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f961 	bl	80019e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 020e 	orr.w	r2, r2, #14
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00f      	b.n	800175c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 020a 	orr.w	r2, r2, #10
 800175a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	0801a7f4 	.word	0x0801a7f4

08001788 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d008      	beq.n	80017b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2204      	movs	r2, #4
 80017a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e022      	b.n	80017f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 020e 	bic.w	r2, r2, #14
 80017c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f003 021c 	and.w	r2, r3, #28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d005      	beq.n	8001828 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2204      	movs	r2, #4
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	e029      	b.n	800187c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020e 	bic.w	r2, r2, #14
 8001836:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	f003 021c 	and.w	r2, r3, #28
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
    }
  }
  return status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f003 031c 	and.w	r3, r3, #28
 80018a6:	2204      	movs	r2, #4
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d026      	beq.n	8001900 <HAL_DMA_IRQHandler+0x7a>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0204 	bic.w	r2, r2, #4
 80018d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 021c 	and.w	r2, r3, #28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2104      	movs	r1, #4
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d071      	beq.n	80019da <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80018fe:	e06c      	b.n	80019da <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f003 031c 	and.w	r3, r3, #28
 8001908:	2202      	movs	r2, #2
 800190a:	409a      	lsls	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d02e      	beq.n	8001972 <HAL_DMA_IRQHandler+0xec>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d029      	beq.n	8001972 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10b      	bne.n	8001944 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020a 	bic.w	r2, r2, #10
 800193a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f003 021c 	and.w	r2, r3, #28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2102      	movs	r1, #2
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d038      	beq.n	80019da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001970:	e033      	b.n	80019da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 031c 	and.w	r3, r3, #28
 800197a:	2208      	movs	r2, #8
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d02a      	beq.n	80019dc <HAL_DMA_IRQHandler+0x156>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d025      	beq.n	80019dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020e 	bic.w	r2, r2, #14
 800199e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f003 021c 	and.w	r2, r3, #28
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
}
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f003 021c 	and.w	r2, r3, #28
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d108      	bne.n	8001a28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a26:	e007      	b.n	8001a38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a58:	d023      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <HAL_GPIO_Init+0x120>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_GPIO_Init+0x124>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01b      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a3f      	ldr	r2, [pc, #252]	; (8001b6c <HAL_GPIO_Init+0x128>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d017      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <HAL_GPIO_Init+0x12c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <HAL_GPIO_Init+0x130>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00f      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <HAL_GPIO_Init+0x134>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00b      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_GPIO_Init+0x138>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <HAL_GPIO_Init+0x13c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x5e>
 8001a9a:	21b3      	movs	r1, #179	; 0xb3
 8001a9c:	4839      	ldr	r0, [pc, #228]	; (8001b84 <HAL_GPIO_Init+0x140>)
 8001a9e:	f010 fdca 	bl	8012636 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_GPIO_Init+0x74>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x7c>
 8001ab8:	21b4      	movs	r1, #180	; 0xb4
 8001aba:	4832      	ldr	r0, [pc, #200]	; (8001b84 <HAL_GPIO_Init+0x140>)
 8001abc:	f010 fdbb 	bl	8012636 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d039      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d035      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b11      	cmp	r3, #17
 8001ad6:	d031      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d02d      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d029      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_GPIO_Init+0x144>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d024      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <HAL_GPIO_Init+0x148>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d01f      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x14c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01a      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_GPIO_Init+0x150>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d015      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_GPIO_Init+0x154>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d010      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <HAL_GPIO_Init+0x158>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00b      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b0b      	cmp	r3, #11
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0xf8>
 8001b34:	21b5      	movs	r1, #181	; 0xb5
 8001b36:	4813      	ldr	r0, [pc, #76]	; (8001b84 <HAL_GPIO_Init+0x140>)
 8001b38:	f010 fd7d 	bl	8012636 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 81ee 	beq.w	8001f22 <HAL_GPIO_Init+0x4de>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f000 81e9 	beq.w	8001f22 <HAL_GPIO_Init+0x4de>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	f000 81e4 	beq.w	8001f22 <HAL_GPIO_Init+0x4de>
 8001b5a:	21b6      	movs	r1, #182	; 0xb6
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_GPIO_Init+0x140>)
 8001b5e:	f010 fd6a 	bl	8012636 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e1de      	b.n	8001f22 <HAL_GPIO_Init+0x4de>
 8001b64:	48000400 	.word	0x48000400
 8001b68:	48000800 	.word	0x48000800
 8001b6c:	48000c00 	.word	0x48000c00
 8001b70:	48001000 	.word	0x48001000
 8001b74:	48001400 	.word	0x48001400
 8001b78:	48001800 	.word	0x48001800
 8001b7c:	48001c00 	.word	0x48001c00
 8001b80:	48002000 	.word	0x48002000
 8001b84:	0801a82c 	.word	0x0801a82c
 8001b88:	10110000 	.word	0x10110000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10310000 	.word	0x10310000
 8001b94:	10120000 	.word	0x10120000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 81b2 	beq.w	8001f1c <HAL_GPIO_Init+0x4d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_GPIO_Init+0x194>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x194>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bcc:	2b11      	cmp	r3, #17
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x194>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b12      	cmp	r3, #18
 8001bd6:	d144      	bne.n	8001c62 <HAL_GPIO_Init+0x21e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00f      	beq.n	8001c00 <HAL_GPIO_Init+0x1bc>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d00b      	beq.n	8001c00 <HAL_GPIO_Init+0x1bc>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x1bc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x1bc>
 8001bf8:	21c6      	movs	r1, #198	; 0xc6
 8001bfa:	488b      	ldr	r0, [pc, #556]	; (8001e28 <HAL_GPIO_Init+0x3e4>)
 8001bfc:	f010 fd1b 	bl	8012636 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c36:	2201      	movs	r2, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0201 	and.w	r2, r3, #1
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x25e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d153      	bne.n	8001d4a <HAL_GPIO_Init+0x306>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca8:	d023      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a5f      	ldr	r2, [pc, #380]	; (8001e2c <HAL_GPIO_Init+0x3e8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a5e      	ldr	r2, [pc, #376]	; (8001e30 <HAL_GPIO_Init+0x3ec>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01b      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a5d      	ldr	r2, [pc, #372]	; (8001e34 <HAL_GPIO_Init+0x3f0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d017      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a5c      	ldr	r2, [pc, #368]	; (8001e38 <HAL_GPIO_Init+0x3f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a5b      	ldr	r2, [pc, #364]	; (8001e3c <HAL_GPIO_Init+0x3f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00f      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x3fc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a59      	ldr	r2, [pc, #356]	; (8001e44 <HAL_GPIO_Init+0x400>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_GPIO_Init+0x404>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ae>
 8001cea:	21ec      	movs	r1, #236	; 0xec
 8001cec:	484e      	ldr	r0, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x3e4>)
 8001cee:	f010 fca2 	bl	8012636 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	d903      	bls.n	8001d02 <HAL_GPIO_Init+0x2be>
 8001cfa:	21ed      	movs	r1, #237	; 0xed
 8001cfc:	484a      	ldr	r0, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x3e4>)
 8001cfe:	f010 fc9a 	bl	8012636 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	6939      	ldr	r1, [r7, #16]
 8001d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0203 	and.w	r2, r3, #3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80c8 	beq.w	8001f1c <HAL_GPIO_Init+0x4d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_GPIO_Init+0x408>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_GPIO_Init+0x408>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6613      	str	r3, [r2, #96]	; 0x60
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_GPIO_Init+0x408>)
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_GPIO_Init+0x40c>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dce:	d041      	beq.n	8001e54 <HAL_GPIO_Init+0x410>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <HAL_GPIO_Init+0x3e8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d025      	beq.n	8001e24 <HAL_GPIO_Init+0x3e0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_GPIO_Init+0x3ec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01f      	beq.n	8001e20 <HAL_GPIO_Init+0x3dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_GPIO_Init+0x3f0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d019      	beq.n	8001e1c <HAL_GPIO_Init+0x3d8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_GPIO_Init+0x3f4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_GPIO_Init+0x3d4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_GPIO_Init+0x3f8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x3d0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_GPIO_Init+0x3fc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x3cc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_GPIO_Init+0x400>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x3c8>
 8001e08:	2307      	movs	r3, #7
 8001e0a:	e024      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	e022      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e10:	2306      	movs	r3, #6
 8001e12:	e020      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e14:	2305      	movs	r3, #5
 8001e16:	e01e      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e01c      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e01a      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e018      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e016      	b.n	8001e56 <HAL_GPIO_Init+0x412>
 8001e28:	0801a82c 	.word	0x0801a82c
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	48000800 	.word	0x48000800
 8001e34:	48000c00 	.word	0x48000c00
 8001e38:	48001000 	.word	0x48001000
 8001e3c:	48001400 	.word	0x48001400
 8001e40:	48001800 	.word	0x48001800
 8001e44:	48001c00 	.word	0x48001c00
 8001e48:	48002000 	.word	0x48002000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	2300      	movs	r3, #0
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e66:	4935      	ldr	r1, [pc, #212]	; (8001f3c <HAL_GPIO_Init+0x4f8>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x4a8>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x4d2>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_GPIO_Init+0x4fc>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f ae37 	bne.w	8001ba0 <HAL_GPIO_Init+0x15c>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_GPIO_ReadPin+0x1c>
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_GPIO_ReadPin+0x26>
 8001f60:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8001f64:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_GPIO_ReadPin+0x48>)
 8001f66:	f010 fb66 	bl	8012636 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e001      	b.n	8001f80 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	0801a82c 	.word	0x0801a82c

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_GPIO_WritePin+0x20>
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_GPIO_WritePin+0x2a>
 8001fb0:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <HAL_GPIO_WritePin+0x5c>)
 8001fb6:	f010 fb3e 	bl	8012636 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001fba:	787b      	ldrb	r3, [r7, #1]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_WritePin+0x40>
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d004      	beq.n	8001fd0 <HAL_GPIO_WritePin+0x40>
 8001fc6:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001fca:	4808      	ldr	r0, [pc, #32]	; (8001fec <HAL_GPIO_WritePin+0x5c>)
 8001fcc:	f010 fb33 	bl	8012636 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	0801a82c 	.word	0x0801a82c

08001ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e109      	b.n	8002216 <HAL_I2C_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a86      	ldr	r2, [pc, #536]	; (8002220 <HAL_I2C_Init+0x230>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_I2C_Init+0x44>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a84      	ldr	r2, [pc, #528]	; (8002224 <HAL_I2C_Init+0x234>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00e      	beq.n	8002034 <HAL_I2C_Init+0x44>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a83      	ldr	r2, [pc, #524]	; (8002228 <HAL_I2C_Init+0x238>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d009      	beq.n	8002034 <HAL_I2C_Init+0x44>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a81      	ldr	r2, [pc, #516]	; (800222c <HAL_I2C_Init+0x23c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_I2C_Init+0x44>
 800202a:	f240 11e5 	movw	r1, #485	; 0x1e5
 800202e:	4880      	ldr	r0, [pc, #512]	; (8002230 <HAL_I2C_Init+0x240>)
 8002030:	f010 fb01 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203c:	d304      	bcc.n	8002048 <HAL_I2C_Init+0x58>
 800203e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8002042:	487b      	ldr	r0, [pc, #492]	; (8002230 <HAL_I2C_Init+0x240>)
 8002044:	f010 faf7 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d008      	beq.n	8002062 <HAL_I2C_Init+0x72>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d004      	beq.n	8002062 <HAL_I2C_Init+0x72>
 8002058:	f240 11e7 	movw	r1, #487	; 0x1e7
 800205c:	4874      	ldr	r0, [pc, #464]	; (8002230 <HAL_I2C_Init+0x240>)
 800205e:	f010 faea 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_I2C_Init+0x8e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002072:	d004      	beq.n	800207e <HAL_I2C_Init+0x8e>
 8002074:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8002078:	486d      	ldr	r0, [pc, #436]	; (8002230 <HAL_I2C_Init+0x240>)
 800207a:	f010 fadc 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d904      	bls.n	8002090 <HAL_I2C_Init+0xa0>
 8002086:	f240 11e9 	movw	r1, #489	; 0x1e9
 800208a:	4869      	ldr	r0, [pc, #420]	; (8002230 <HAL_I2C_Init+0x240>)
 800208c:	f010 fad3 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_I2C_Init+0xea>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d01c      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d018      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d014      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d010      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d00c      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d008      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b07      	cmp	r3, #7
 80020ce:	d004      	beq.n	80020da <HAL_I2C_Init+0xea>
 80020d0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80020d4:	4856      	ldr	r0, [pc, #344]	; (8002230 <HAL_I2C_Init+0x240>)
 80020d6:	f010 faae 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_I2C_Init+0x106>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ea:	d004      	beq.n	80020f6 <HAL_I2C_Init+0x106>
 80020ec:	f240 11eb 	movw	r1, #491	; 0x1eb
 80020f0:	484f      	ldr	r0, [pc, #316]	; (8002230 <HAL_I2C_Init+0x240>)
 80020f2:	f010 faa0 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_I2C_Init+0x122>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002106:	d004      	beq.n	8002112 <HAL_I2C_Init+0x122>
 8002108:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800210c:	4848      	ldr	r0, [pc, #288]	; (8002230 <HAL_I2C_Init+0x240>)
 800210e:	f010 fa92 	bl	8012636 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f010 fb94 	bl	8012854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2224      	movs	r2, #36	; 0x24
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	e006      	b.n	8002188 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d104      	bne.n	800219a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	ea42 0103 	orr.w	r1, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	021a      	lsls	r2, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69d9      	ldr	r1, [r3, #28]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40005800 	.word	0x40005800
 8002228:	40005c00 	.word	0x40005c00
 800222c:	40008400 	.word	0x40008400
 8002230:	0801a868 	.word	0x0801a868

08002234 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	461a      	mov	r2, r3
 8002240:	460b      	mov	r3, r1
 8002242:	817b      	strh	r3, [r7, #10]
 8002244:	4613      	mov	r3, r2
 8002246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	f040 80da 	bne.w	800240a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_I2C_Master_Transmit+0x30>
 8002260:	2302      	movs	r3, #2
 8002262:	e0d3      	b.n	800240c <HAL_I2C_Master_Transmit+0x1d8>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800226c:	f7fe ff0a 	bl	8001084 <HAL_GetTick>
 8002270:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2319      	movs	r3, #25
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fcd8 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0be      	b.n	800240c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2221      	movs	r2, #33	; 0x21
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2210      	movs	r2, #16
 800229a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	893a      	ldrh	r2, [r7, #8]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2bff      	cmp	r3, #255	; 0xff
 80022be:	d90e      	bls.n	80022de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	8979      	ldrh	r1, [r7, #10]
 80022ce:	4b51      	ldr	r3, [pc, #324]	; (8002414 <HAL_I2C_Master_Transmit+0x1e0>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fe3a 	bl	8002f50 <I2C_TransferConfig>
 80022dc:	e06c      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <HAL_I2C_Master_Transmit+0x1e0>)
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fe29 	bl	8002f50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80022fe:	e05b      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6a39      	ldr	r1, [r7, #32]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fcd5 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e07b      	b.n	800240c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d034      	beq.n	80023b8 <HAL_I2C_Master_Transmit+0x184>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d130      	bne.n	80023b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	2200      	movs	r2, #0
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fc67 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e04d      	b.n	800240c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	2bff      	cmp	r3, #255	; 0xff
 8002378:	d90e      	bls.n	8002398 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	b2da      	uxtb	r2, r3
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	2300      	movs	r3, #0
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fddd 	bl	8002f50 <I2C_TransferConfig>
 8002396:	e00f      	b.n	80023b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fdcc 	bl	8002f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d19e      	bne.n	8002300 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	6a39      	ldr	r1, [r7, #32]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fcb4 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e01a      	b.n	800240c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2220      	movs	r2, #32
 80023dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_I2C_Master_Transmit+0x1e4>)
 80023ea:	400b      	ands	r3, r1
 80023ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	80002000 	.word	0x80002000
 8002418:	fe00e800 	.word	0xfe00e800

0800241c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
 800242c:	4613      	mov	r3, r2
 800242e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 80db 	bne.w	80025f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2C_Master_Receive+0x30>
 8002448:	2302      	movs	r3, #2
 800244a:	e0d4      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fe16 	bl	8001084 <HAL_GetTick>
 8002458:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fbe4 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0bf      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2222      	movs	r2, #34	; 0x22
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2210      	movs	r2, #16
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bff      	cmp	r3, #255	; 0xff
 80024a6:	d90e      	bls.n	80024c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	8979      	ldrh	r1, [r7, #10]
 80024b6:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_I2C_Master_Receive+0x1e4>)
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fd46 	bl	8002f50 <I2C_TransferConfig>
 80024c4:	e06d      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_I2C_Master_Receive+0x1e4>)
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fd35 	bl	8002f50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80024e6:	e05c      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fc5d 	bl	8002dac <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e07c      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d034      	beq.n	80025a2 <HAL_I2C_Master_Receive+0x186>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d130      	bne.n	80025a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fb72 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e04d      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2bff      	cmp	r3, #255	; 0xff
 8002562:	d90e      	bls.n	8002582 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	22ff      	movs	r2, #255	; 0xff
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	b2da      	uxtb	r2, r3
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fce8 	bl	8002f50 <I2C_TransferConfig>
 8002580:	e00f      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	b2da      	uxtb	r2, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	2300      	movs	r3, #0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fcd7 	bl	8002f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d19d      	bne.n	80024e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fbbf 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e01a      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2220      	movs	r2, #32
 80025c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_I2C_Master_Receive+0x1e8>)
 80025d4:	400b      	ands	r3, r1
 80025d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	80002400 	.word	0x80002400
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d007      	beq.n	8002638 <HAL_I2C_Mem_Write+0x30>
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d004      	beq.n	8002638 <HAL_I2C_Mem_Write+0x30>
 800262e:	f640 01fb 	movw	r1, #2299	; 0x8fb
 8002632:	4884      	ldr	r0, [pc, #528]	; (8002844 <HAL_I2C_Mem_Write+0x23c>)
 8002634:	f00f ffff 	bl	8012636 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b20      	cmp	r3, #32
 8002642:	f040 80f9 	bne.w	8002838 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_I2C_Mem_Write+0x4a>
 800264c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0ed      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2C_Mem_Write+0x64>
 8002668:	2302      	movs	r3, #2
 800266a:	e0e6      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fd06 	bl	8001084 <HAL_GetTick>
 8002678:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2319      	movs	r3, #25
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fad4 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0d1      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2221      	movs	r2, #33	; 0x21
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2240      	movs	r2, #64	; 0x40
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026be:	88f8      	ldrh	r0, [r7, #6]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	8979      	ldrh	r1, [r7, #10]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f9e4 	bl	8002a9c <I2C_RequestMemoryWrite>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0a9      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2bff      	cmp	r3, #255	; 0xff
 80026ee:	d90e      	bls.n	800270e <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fc22 	bl	8002f50 <I2C_TransferConfig>
 800270c:	e00f      	b.n	800272e <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fc11 	bl	8002f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fabe 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e07b      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d034      	beq.n	80027e6 <HAL_I2C_Mem_Write+0x1de>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d130      	bne.n	80027e6 <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	2200      	movs	r2, #0
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa50 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e04d      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2bff      	cmp	r3, #255	; 0xff
 80027a6:	d90e      	bls.n	80027c6 <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	22ff      	movs	r2, #255	; 0xff
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	8979      	ldrh	r1, [r7, #10]
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fbc6 	bl	8002f50 <I2C_TransferConfig>
 80027c4:	e00f      	b.n	80027e6 <HAL_I2C_Mem_Write+0x1de>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fbb5 	bl	8002f50 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d19e      	bne.n	800272e <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fa9d 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e01a      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2220      	movs	r2, #32
 800280a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_I2C_Mem_Write+0x240>)
 8002818:	400b      	ands	r3, r1
 800281a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	0801a868 	.word	0x0801a868
 8002848:	fe00e800 	.word	0xfe00e800

0800284c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d007      	beq.n	800287c <HAL_I2C_Mem_Read+0x30>
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d004      	beq.n	800287c <HAL_I2C_Mem_Read+0x30>
 8002872:	f640 1182 	movw	r1, #2434	; 0x982
 8002876:	4886      	ldr	r0, [pc, #536]	; (8002a90 <HAL_I2C_Mem_Read+0x244>)
 8002878:	f00f fedd 	bl	8012636 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b20      	cmp	r3, #32
 8002886:	f040 80fd 	bne.w	8002a84 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_I2C_Mem_Read+0x4a>
 8002890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0f1      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_I2C_Mem_Read+0x64>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0ea      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fbe4 	bl	8001084 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2319      	movs	r3, #25
 80028c4:	2201      	movs	r2, #1
 80028c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f9b2 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0d5      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2222      	movs	r2, #34	; 0x22
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a3a      	ldr	r2, [r7, #32]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002902:	88f8      	ldrh	r0, [r7, #6]
 8002904:	893a      	ldrh	r2, [r7, #8]
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4603      	mov	r3, r0
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f916 	bl	8002b44 <I2C_RequestMemoryRead>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0ad      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d90e      	bls.n	8002952 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	22ff      	movs	r2, #255	; 0xff
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	b2da      	uxtb	r2, r3
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	4b54      	ldr	r3, [pc, #336]	; (8002a94 <HAL_I2C_Mem_Read+0x248>)
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fb00 	bl	8002f50 <I2C_TransferConfig>
 8002950:	e00f      	b.n	8002972 <HAL_I2C_Mem_Read+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	b2da      	uxtb	r2, r3
 8002962:	8979      	ldrh	r1, [r7, #10]
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_I2C_Mem_Read+0x248>)
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 faef 	bl	8002f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	2200      	movs	r2, #0
 800297a:	2104      	movs	r1, #4
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f959 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e07c      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d034      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x1e6>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d130      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f92a 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e04d      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2bff      	cmp	r3, #255	; 0xff
 80029f2:	d90e      	bls.n	8002a12 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 faa0 	bl	8002f50 <I2C_TransferConfig>
 8002a10:	e00f      	b.n	8002a32 <HAL_I2C_Mem_Read+0x1e6>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	2300      	movs	r3, #0
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fa8f 	bl	8002f50 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d19a      	bne.n	8002972 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f977 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e01a      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2220      	movs	r2, #32
 8002a56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_I2C_Mem_Read+0x24c>)
 8002a64:	400b      	ands	r3, r1
 8002a66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	0801a868 	.word	0x0801a868
 8002a94:	80002400 	.word	0x80002400
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	813b      	strh	r3, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <I2C_RequestMemoryWrite+0xa4>)
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fa43 	bl	8002f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	69b9      	ldr	r1, [r7, #24]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f8f0 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e02c      	b.n	8002b38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae4:	893b      	ldrh	r3, [r7, #8]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
 8002aee:	e015      	b.n	8002b1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002af0:	893b      	ldrh	r3, [r7, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8d6 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e012      	b.n	8002b38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b12:	893b      	ldrh	r3, [r7, #8]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f884 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80002000 	.word	0x80002000

08002b44 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	460b      	mov	r3, r1
 8002b58:	813b      	strh	r3, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	8979      	ldrh	r1, [r7, #10]
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <I2C_RequestMemoryRead+0xa4>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f9f0 	bl	8002f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f89d 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02c      	b.n	8002bde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
 8002b94:	e015      	b.n	8002bc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	69b9      	ldr	r1, [r7, #24]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f883 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e012      	b.n	8002bde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2140      	movs	r1, #64	; 0x40
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f831 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	80002000 	.word	0x80002000

08002bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d103      	bne.n	8002c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d007      	beq.n	8002c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	619a      	str	r2, [r3, #24]
  }
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e022      	b.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d01e      	beq.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fa19 	bl	8001084 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d113      	bne.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e00f      	b.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d0cd      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cc0:	e02c      	b.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f8dc 	bl	8002e84 <I2C_IsAcknowledgeFailed>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e02a      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cdc:	d01e      	beq.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe f9d1 	bl	8001084 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d113      	bne.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d1cb      	bne.n	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d40:	e028      	b.n	8002d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f89c 	bl	8002e84 <I2C_IsAcknowledgeFailed>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e026      	b.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe f995 	bl	8001084 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d113      	bne.n	8002d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e007      	b.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d1cf      	bne.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db8:	e055      	b.n	8002e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f860 	bl	8002e84 <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e053      	b.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d129      	bne.n	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d105      	bne.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e03f      	b.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e022      	b.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe f928 	bl	8001084 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e007      	b.n	8002e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d1a2      	bne.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d151      	bne.n	8002f42 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9e:	e022      	b.n	8002ee6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea6:	d01e      	beq.n	8002ee6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe f8ec 	bl	8001084 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_IsAcknowledgeFailed+0x3a>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02e      	b.n	8002f44 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d1d5      	bne.n	8002ea0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2220      	movs	r2, #32
 8002f02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe71 	bl	8002bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <I2C_IsAcknowledgeFailed+0xc8>)
 8002f16:	400b      	ands	r3, r1
 8002f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f043 0204 	orr.w	r2, r3, #4
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	fe00e800 	.word	0xfe00e800

08002f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2d      	ldr	r2, [pc, #180]	; (800301c <I2C_TransferConfig+0xcc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <I2C_TransferConfig+0x44>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <I2C_TransferConfig+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <I2C_TransferConfig+0x44>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <I2C_TransferConfig+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <I2C_TransferConfig+0x44>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a28      	ldr	r2, [pc, #160]	; (8003028 <I2C_TransferConfig+0xd8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <I2C_TransferConfig+0x44>
 8002f8a:	f641 1139 	movw	r1, #6457	; 0x1939
 8002f8e:	4827      	ldr	r0, [pc, #156]	; (800302c <I2C_TransferConfig+0xdc>)
 8002f90:	f00f fb51 	bl	8012636 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f9a:	d00b      	beq.n	8002fb4 <I2C_TransferConfig+0x64>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fa2:	d007      	beq.n	8002fb4 <I2C_TransferConfig+0x64>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <I2C_TransferConfig+0x64>
 8002faa:	f641 113a 	movw	r1, #6458	; 0x193a
 8002fae:	481f      	ldr	r0, [pc, #124]	; (800302c <I2C_TransferConfig+0xdc>)
 8002fb0:	f00f fb41 	bl	8012636 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <I2C_TransferConfig+0xe0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <I2C_TransferConfig+0x8c>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <I2C_TransferConfig+0xe4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <I2C_TransferConfig+0x8c>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <I2C_TransferConfig+0xe8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <I2C_TransferConfig+0x8c>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <I2C_TransferConfig+0x8c>
 8002fd2:	f641 113b 	movw	r1, #6459	; 0x193b
 8002fd6:	4815      	ldr	r0, [pc, #84]	; (800302c <I2C_TransferConfig+0xdc>)
 8002fd8:	f00f fb2d 	bl	8012636 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	0d5b      	lsrs	r3, r3, #21
 8002fe6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <I2C_TransferConfig+0xec>)
 8002fec:	430b      	orrs	r3, r1
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	ea02 0103 	and.w	r1, r2, r3
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ffa:	7a7b      	ldrb	r3, [r7, #9]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	431a      	orrs	r2, r3
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	431a      	orrs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40005400 	.word	0x40005400
 8003020:	40005800 	.word	0x40005800
 8003024:	40005c00 	.word	0x40005c00
 8003028:	40008400 	.word	0x40008400
 800302c:	0801a868 	.word	0x0801a868
 8003030:	80004000 	.word	0x80004000
 8003034:	80002400 	.word	0x80002400
 8003038:	80002000 	.word	0x80002000
 800303c:	03ff63ff 	.word	0x03ff63ff

08003040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a32      	ldr	r2, [pc, #200]	; (8003118 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d012      	beq.n	800307a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a30      	ldr	r2, [pc, #192]	; (800311c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d008      	beq.n	800307a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003072:	2164      	movs	r1, #100	; 0x64
 8003074:	482c      	ldr	r0, [pc, #176]	; (8003128 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8003076:	f00f fade 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d003      	beq.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003088:	2165      	movs	r1, #101	; 0x65
 800308a:	4827      	ldr	r0, [pc, #156]	; (8003128 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800308c:	f00f fad3 	bl	8012636 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d138      	bne.n	800310e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e032      	b.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2224      	movs	r2, #36	; 0x24
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40005400 	.word	0x40005400
 800311c:	40005800 	.word	0x40005800
 8003120:	40005c00 	.word	0x40005c00
 8003124:	40008400 	.word	0x40008400
 8003128:	0801a8a0 	.word	0x0801a8a0

0800312c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a31      	ldr	r2, [pc, #196]	; (8003200 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d008      	beq.n	8003166 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2c      	ldr	r2, [pc, #176]	; (800320c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800315e:	2192      	movs	r1, #146	; 0x92
 8003160:	482b      	ldr	r0, [pc, #172]	; (8003210 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003162:	f00f fa68 	bl	8012636 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d903      	bls.n	8003174 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 800316c:	2193      	movs	r1, #147	; 0x93
 800316e:	4828      	ldr	r0, [pc, #160]	; (8003210 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003170:	f00f fa61 	bl	8012636 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	d139      	bne.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800318a:	2302      	movs	r3, #2
 800318c:	e033      	b.n	80031f6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2224      	movs	r2, #36	; 0x24
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40005400 	.word	0x40005400
 8003204:	40005800 	.word	0x40005800
 8003208:	40005c00 	.word	0x40005c00
 800320c:	40008400 	.word	0x40008400
 8003210:	0801a8a0 	.word	0x0801a8a0

08003214 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_I2CEx_EnableFastModePlus+0x9c>)
 8003220:	4013      	ands	r3, r2
 8003222:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <HAL_I2CEx_EnableFastModePlus+0x9c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d027      	beq.n	8003278 <HAL_I2CEx_EnableFastModePlus+0x64>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d127      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d122      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11d      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d118      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d113      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_I2CEx_EnableFastModePlus+0x6e>
 8003278:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <HAL_I2CEx_EnableFastModePlus+0xa0>)
 800327e:	f00f f9da 	bl	8012636 <assert_failed>

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_I2CEx_EnableFastModePlus+0xa4>)
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_I2CEx_EnableFastModePlus+0xa4>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6613      	str	r3, [r2, #96]	; 0x60
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_I2CEx_EnableFastModePlus+0xa4>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_I2CEx_EnableFastModePlus+0xa8>)
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4907      	ldr	r1, [pc, #28]	; (80032bc <HAL_I2CEx_EnableFastModePlus+0xa8>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	aaaa0000 	.word	0xaaaa0000
 80032b4:	0801a8a0 	.word	0x0801a8a0
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010000 	.word	0x40010000

080032c0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e073      	b.n	80033ba <HAL_IWDG_Init+0xfa>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3b      	ldr	r2, [pc, #236]	; (80033c4 <HAL_IWDG_Init+0x104>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <HAL_IWDG_Init+0x24>
 80032dc:	21b3      	movs	r1, #179	; 0xb3
 80032de:	483a      	ldr	r0, [pc, #232]	; (80033c8 <HAL_IWDG_Init+0x108>)
 80032e0:	f00f f9a9 	bl	8012636 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d017      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d013      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d00f      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d00b      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d007      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d003      	beq.n	8003324 <HAL_IWDG_Init+0x64>
 800331c:	21b4      	movs	r1, #180	; 0xb4
 800331e:	482a      	ldr	r0, [pc, #168]	; (80033c8 <HAL_IWDG_Init+0x108>)
 8003320:	f00f f989 	bl	8012636 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d303      	bcc.n	8003336 <HAL_IWDG_Init+0x76>
 800332e:	21b5      	movs	r1, #181	; 0xb5
 8003330:	4825      	ldr	r0, [pc, #148]	; (80033c8 <HAL_IWDG_Init+0x108>)
 8003332:	f00f f980 	bl	8012636 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	d303      	bcc.n	8003348 <HAL_IWDG_Init+0x88>
 8003340:	21b6      	movs	r1, #182	; 0xb6
 8003342:	4821      	ldr	r0, [pc, #132]	; (80033c8 <HAL_IWDG_Init+0x108>)
 8003344:	f00f f977 	bl	8012636 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003350:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f245 5255 	movw	r2, #21845	; 0x5555
 800335a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6852      	ldr	r2, [r2, #4]
 8003364:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6892      	ldr	r2, [r2, #8]
 800336e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003370:	f7fd fe88 	bl	8001084 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003376:	e008      	b.n	800338a <HAL_IWDG_Init+0xca>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003378:	f7fd fe84 	bl	8001084 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	d901      	bls.n	800338a <HAL_IWDG_Init+0xca>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e017      	b.n	80033ba <HAL_IWDG_Init+0xfa>
  while (hiwdg->Instance->SR != 0x00u)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f1      	bne.n	8003378 <HAL_IWDG_Init+0xb8>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d005      	beq.n	80033ae <HAL_IWDG_Init+0xee>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	e004      	b.n	80033b8 <HAL_IWDG_Init+0xf8>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40003000 	.word	0x40003000
 80033c8:	0801a8dc 	.word	0x0801a8dc

080033cc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80033dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_PWREx_GetVoltageRange+0x18>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d007      	beq.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d003      	beq.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003440:	21a8      	movs	r1, #168	; 0xa8
 8003442:	4826      	ldr	r0, [pc, #152]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003444:	f00f f8f7 	bl	8012636 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344e:	d130      	bne.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d038      	beq.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003466:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2232      	movs	r2, #50	; 0x32
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0c9b      	lsrs	r3, r3, #18
 8003480:	3301      	adds	r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003484:	e002      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b01      	subs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003498:	d102      	bne.n	80034a0 <HAL_PWREx_ControlVoltageScaling+0x78>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f2      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ac:	d110      	bne.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e00f      	b.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034be:	d007      	beq.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80034ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	0801a918 	.word	0x0801a918
 80034e0:	40007000 	.word	0x40007000
 80034e4:	200003a8 	.word	0x200003a8
 80034e8:	431bde83 	.word	0x431bde83

080034ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f000 bd6b 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d028      	beq.n	800355a <HAL_RCC_OscConfig+0x6e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d122      	bne.n	800355a <HAL_RCC_OscConfig+0x6e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11c      	bne.n	800355a <HAL_RCC_OscConfig+0x6e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <HAL_RCC_OscConfig+0x6e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d110      	bne.n	800355a <HAL_RCC_OscConfig+0x6e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCC_OscConfig+0x6e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_RCC_OscConfig+0x6e>
 8003550:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003554:	48a3      	ldr	r0, [pc, #652]	; (80037e4 <HAL_RCC_OscConfig+0x2f8>)
 8003556:	f00f f86e 	bl	8012636 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4ba3      	ldr	r3, [pc, #652]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	4ba0      	ldr	r3, [pc, #640]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 813f 	beq.w	80037fa <HAL_RCC_OscConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_OscConfig+0xaa>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d004      	beq.n	8003596 <HAL_RCC_OscConfig+0xaa>
 800358c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8003590:	4894      	ldr	r0, [pc, #592]	; (80037e4 <HAL_RCC_OscConfig+0x2f8>)
 8003592:	f00f f850 	bl	8012636 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	d904      	bls.n	80035a8 <HAL_RCC_OscConfig+0xbc>
 800359e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80035a2:	4890      	ldr	r0, [pc, #576]	; (80037e4 <HAL_RCC_OscConfig+0x2f8>)
 80035a4:	f00f f847 	bl	8012636 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d030      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d02c      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d028      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	2b30      	cmp	r3, #48	; 0x30
 80035c6:	d024      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2b50      	cmp	r3, #80	; 0x50
 80035d6:	d01c      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	2b60      	cmp	r3, #96	; 0x60
 80035de:	d018      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	2b70      	cmp	r3, #112	; 0x70
 80035e6:	d014      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	2b90      	cmp	r3, #144	; 0x90
 80035f6:	d00c      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	2ba0      	cmp	r3, #160	; 0xa0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	2bb0      	cmp	r3, #176	; 0xb0
 8003606:	d004      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
 8003608:	f240 11ad 	movw	r1, #429	; 0x1ad
 800360c:	4875      	ldr	r0, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x2f8>)
 800360e:	f00f f812 	bl	8012636 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_RCC_OscConfig+0x13c>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	f040 808f 	bne.w	800373e <HAL_RCC_OscConfig+0x252>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b01      	cmp	r3, #1
 8003624:	f040 808b 	bne.w	800373e <HAL_RCC_OscConfig+0x252>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_RCC_OscConfig+0x156>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f000 bcca 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d004      	beq.n	800365c <HAL_RCC_OscConfig+0x170>
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365a:	e005      	b.n	8003668 <HAL_RCC_OscConfig+0x17c>
 800365c:	4b62      	ldr	r3, [pc, #392]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	4293      	cmp	r3, r2
 800366a:	d224      	bcs.n	80036b6 <HAL_RCC_OscConfig+0x1ca>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 ff3f 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_RCC_OscConfig+0x196>
          {
            return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f000 bcaa 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003682:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a58      	ldr	r2, [pc, #352]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4953      	ldr	r1, [pc, #332]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a0:	4b51      	ldr	r3, [pc, #324]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	494e      	ldr	r1, [pc, #312]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	e026      	b.n	8003704 <HAL_RCC_OscConfig+0x218>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b6:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4946      	ldr	r1, [pc, #280]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d4:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	4941      	ldr	r1, [pc, #260]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_RCC_OscConfig+0x218>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fefe 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_RCC_OscConfig+0x218>
            {
              return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f000 bc69 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003704:	f000 fdf0 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	4935      	ldr	r1, [pc, #212]	; (80037ec <HAL_RCC_OscConfig+0x300>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	4a33      	ldr	r2, [pc, #204]	; (80037f0 <HAL_RCC_OscConfig+0x304>)
 8003722:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_RCC_OscConfig+0x308>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f00f fb2f 	bl	8012d8c <HAL_InitTick>
 800372e:	4603      	mov	r3, r0
 8003730:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05f      	beq.n	80037f8 <HAL_RCC_OscConfig+0x30c>
        {
          return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	f000 bc4c 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d033      	beq.n	80037ae <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003746:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003752:	f7fd fc97 	bl	8001084 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003758:	e009      	b.n	800376e <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800375a:	f7fd fc93 	bl	8001084 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bc34 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ef      	beq.n	800375a <HAL_RCC_OscConfig+0x26e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4915      	ldr	r1, [pc, #84]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4910      	ldr	r1, [pc, #64]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e025      	b.n	80037fa <HAL_RCC_OscConfig+0x30e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ba:	f7fd fc63 	bl	8001084 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037c0:	e009      	b.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c2:	f7fd fc5f 	bl	8001084 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d902      	bls.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	f000 bc00 	b.w	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_RCC_OscConfig+0x2fc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_OscConfig+0x2d6>
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_OscConfig+0x30e>
 80037e4:	0801a954 	.word	0x0801a954
 80037e8:	40021000 	.word	0x40021000
 80037ec:	0801c404 	.word	0x0801c404
 80037f0:	200003a8 	.word	0x200003a8
 80037f4:	20000000 	.word	0x20000000
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07e      	beq.n	8003904 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <HAL_RCC_OscConfig+0x340>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003816:	d009      	beq.n	800382c <HAL_RCC_OscConfig+0x340>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003820:	d004      	beq.n	800382c <HAL_RCC_OscConfig+0x340>
 8003822:	f240 2119 	movw	r1, #537	; 0x219
 8003826:	489b      	ldr	r0, [pc, #620]	; (8003a94 <HAL_RCC_OscConfig+0x5a8>)
 8003828:	f00e ff05 	bl	8012636 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x352>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d10e      	bne.n	8003856 <HAL_RCC_OscConfig+0x36a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d10b      	bne.n	8003856 <HAL_RCC_OscConfig+0x36a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383e:	4b96      	ldr	r3, [pc, #600]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d05b      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d157      	bne.n	8003902 <HAL_RCC_OscConfig+0x416>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e3bf      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385e:	d106      	bne.n	800386e <HAL_RCC_OscConfig+0x382>
 8003860:	4b8d      	ldr	r3, [pc, #564]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a8c      	ldr	r2, [pc, #560]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	e01d      	b.n	80038aa <HAL_RCC_OscConfig+0x3be>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003876:	d10c      	bne.n	8003892 <HAL_RCC_OscConfig+0x3a6>
 8003878:	4b87      	ldr	r3, [pc, #540]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a86      	ldr	r2, [pc, #536]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 800387e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b84      	ldr	r3, [pc, #528]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a83      	ldr	r2, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e00b      	b.n	80038aa <HAL_RCC_OscConfig+0x3be>
 8003892:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7d      	ldr	r2, [pc, #500]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d013      	beq.n	80038da <HAL_RCC_OscConfig+0x3ee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fbe7 	bl	8001084 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ba:	f7fd fbe3 	bl	8001084 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	; 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x3e0>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e384      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038cc:	4b72      	ldr	r3, [pc, #456]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x3ce>
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x418>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fbd3 	bl	8001084 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e2:	f7fd fbcf 	bl	8001084 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e370      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f4:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3f6>
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x418>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d077      	beq.n	8003a00 <HAL_RCC_OscConfig+0x514>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_RCC_OscConfig+0x440>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003920:	d004      	beq.n	800392c <HAL_RCC_OscConfig+0x440>
 8003922:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003926:	485b      	ldr	r0, [pc, #364]	; (8003a94 <HAL_RCC_OscConfig+0x5a8>)
 8003928:	f00e fe85 	bl	8012636 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b7f      	cmp	r3, #127	; 0x7f
 8003932:	d904      	bls.n	800393e <HAL_RCC_OscConfig+0x452>
 8003934:	f240 214d 	movw	r1, #589	; 0x24d
 8003938:	4856      	ldr	r0, [pc, #344]	; (8003a94 <HAL_RCC_OscConfig+0x5a8>)
 800393a:	f00e fe7c 	bl	8012636 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d005      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d119      	bne.n	800397e <HAL_RCC_OscConfig+0x492>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d116      	bne.n	800397e <HAL_RCC_OscConfig+0x492>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x47c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e336      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	4948      	ldr	r1, [pc, #288]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	e040      	b.n	8003a00 <HAL_RCC_OscConfig+0x514>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d023      	beq.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003986:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fb77 	bl	8001084 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399a:	f7fd fb73 	bl	8001084 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e314      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ac:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x4ae>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b8:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	4934      	ldr	r1, [pc, #208]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
 80039cc:	e018      	b.n	8003a00 <HAL_RCC_OscConfig+0x514>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a31      	ldr	r2, [pc, #196]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80039d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd fb53 	bl	8001084 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fd fb4f 	bl	8001084 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e2f0      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d04e      	beq.n	8003aaa <HAL_RCC_OscConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_OscConfig+0x53a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d004      	beq.n	8003a26 <HAL_RCC_OscConfig+0x53a>
 8003a1c:	f240 218d 	movw	r1, #653	; 0x28d
 8003a20:	481c      	ldr	r0, [pc, #112]	; (8003a94 <HAL_RCC_OscConfig+0x5a8>)
 8003a22:	f00e fe08 	bl	8012636 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x57c>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fd fb21 	bl	8001084 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fd fb1d 	bl	8001084 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e2be      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ef      	beq.n	8003a46 <HAL_RCC_OscConfig+0x55a>
 8003a66:	e020      	b.n	8003aaa <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <HAL_RCC_OscConfig+0x5ac>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fd fb04 	bl	8001084 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fd fb00 	bl	8001084 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d906      	bls.n	8003a9c <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e2a1      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
 8003a92:	bf00      	nop
 8003a94:	0801a954 	.word	0x0801a954
 8003a98:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a9c:	4b84      	ldr	r3, [pc, #528]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1ea      	bne.n	8003a80 <HAL_RCC_OscConfig+0x594>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80b2 	beq.w	8003c1c <HAL_RCC_OscConfig+0x730>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCC_OscConfig+0x5f2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_OscConfig+0x5f2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d004      	beq.n	8003ade <HAL_RCC_OscConfig+0x5f2>
 8003ad4:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003ad8:	4876      	ldr	r0, [pc, #472]	; (8003cb4 <HAL_RCC_OscConfig+0x7c8>)
 8003ada:	f00e fdac 	bl	8012636 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ade:	4b74      	ldr	r3, [pc, #464]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_RCC_OscConfig+0x61a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	4b71      	ldr	r3, [pc, #452]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	4a70      	ldr	r2, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af4:	6593      	str	r3, [r2, #88]	; 0x58
 8003af6:	4b6e      	ldr	r3, [pc, #440]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b02:	2301      	movs	r3, #1
 8003b04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b06:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <HAL_RCC_OscConfig+0x7cc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d118      	bne.n	8003b44 <HAL_RCC_OscConfig+0x658>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b12:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_RCC_OscConfig+0x7cc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a68      	ldr	r2, [pc, #416]	; (8003cb8 <HAL_RCC_OscConfig+0x7cc>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fab1 	bl	8001084 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b26:	f7fd faad 	bl	8001084 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e24e      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b38:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_OscConfig+0x7cc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x63a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d108      	bne.n	8003b5e <HAL_RCC_OscConfig+0x672>
 8003b4c:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	4a57      	ldr	r2, [pc, #348]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5c:	e024      	b.n	8003ba8 <HAL_RCC_OscConfig+0x6bc>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d110      	bne.n	8003b88 <HAL_RCC_OscConfig+0x69c>
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b76:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x6bc>
 8003b88:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a48      	ldr	r2, [pc, #288]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b98:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_RCC_OscConfig+0x6f2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fa68 	bl	8001084 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_OscConfig+0x6e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fa64 	bl	8001084 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e203      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ed      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x6cc>
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fa51 	bl	8001084 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x710>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fa4d 	bl	8001084 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x710>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1ec      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ed      	bne.n	8003be6 <HAL_RCC_OscConfig+0x6fa>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x730>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d050      	beq.n	8003cca <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_OscConfig+0x756>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d004      	beq.n	8003c42 <HAL_RCC_OscConfig+0x756>
 8003c38:	f240 3145 	movw	r1, #837	; 0x345
 8003c3c:	481d      	ldr	r0, [pc, #116]	; (8003cb4 <HAL_RCC_OscConfig+0x7c8>)
 8003c3e:	f00e fcfa 	bl	8012636 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fa13 	bl	8001084 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x788>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c62:	f7fd fa0f 	bl	8001084 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1b0      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ef      	beq.n	8003c62 <HAL_RCC_OscConfig+0x776>
 8003c82:	e022      	b.n	8003cca <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_RCC_OscConfig+0x7c4>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd f9f6 	bl	8001084 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCC_OscConfig+0x7d0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c9c:	f7fd f9f2 	bl	8001084 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d908      	bls.n	8003cbc <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e193      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	0801a954 	.word	0x0801a954
 8003cb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cbc:	4ba5      	ldr	r3, [pc, #660]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e8      	bne.n	8003c9c <HAL_RCC_OscConfig+0x7b0>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <HAL_RCC_OscConfig+0x800>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d008      	beq.n	8003cec <HAL_RCC_OscConfig+0x800>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d004      	beq.n	8003cec <HAL_RCC_OscConfig+0x800>
 8003ce2:	f240 316e 	movw	r1, #878	; 0x36e
 8003ce6:	489c      	ldr	r0, [pc, #624]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003ce8:	f00e fca5 	bl	8012636 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 816f 	beq.w	8003fd4 <HAL_RCC_OscConfig+0xae8>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	f040 8137 	bne.w	8003f6e <HAL_RCC_OscConfig+0xa82>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_RCC_OscConfig+0x83e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d00c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x83e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_OscConfig+0x83e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d004      	beq.n	8003d2a <HAL_RCC_OscConfig+0x83e>
 8003d20:	f240 3176 	movw	r1, #886	; 0x376
 8003d24:	488c      	ldr	r0, [pc, #560]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003d26:	f00e fc86 	bl	8012636 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_OscConfig+0x84e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d904      	bls.n	8003d44 <HAL_RCC_OscConfig+0x858>
 8003d3a:	f240 3177 	movw	r1, #887	; 0x377
 8003d3e:	4886      	ldr	r0, [pc, #536]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003d40:	f00e fc79 	bl	8012636 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	2b07      	cmp	r3, #7
 8003d4a:	d903      	bls.n	8003d54 <HAL_RCC_OscConfig+0x868>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	2b56      	cmp	r3, #86	; 0x56
 8003d52:	d904      	bls.n	8003d5e <HAL_RCC_OscConfig+0x872>
 8003d54:	f44f 715e 	mov.w	r1, #888	; 0x378
 8003d58:	487f      	ldr	r0, [pc, #508]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003d5a:	f00e fc6c 	bl	8012636 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d903      	bls.n	8003d6e <HAL_RCC_OscConfig+0x882>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	2b1f      	cmp	r3, #31
 8003d6c:	d904      	bls.n	8003d78 <HAL_RCC_OscConfig+0x88c>
 8003d6e:	f240 317a 	movw	r1, #890	; 0x37a
 8003d72:	4879      	ldr	r0, [pc, #484]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003d74:	f00e fc5f 	bl	8012636 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d010      	beq.n	8003da2 <HAL_RCC_OscConfig+0x8b6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d00c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x8b6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_OscConfig+0x8b6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d004      	beq.n	8003da2 <HAL_RCC_OscConfig+0x8b6>
 8003d98:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8003d9c:	486e      	ldr	r0, [pc, #440]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003d9e:	f00e fc4a 	bl	8012636 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d010      	beq.n	8003dcc <HAL_RCC_OscConfig+0x8e0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x8e0>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d008      	beq.n	8003dcc <HAL_RCC_OscConfig+0x8e0>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d004      	beq.n	8003dcc <HAL_RCC_OscConfig+0x8e0>
 8003dc2:	f240 317d 	movw	r1, #893	; 0x37d
 8003dc6:	4864      	ldr	r0, [pc, #400]	; (8003f58 <HAL_RCC_OscConfig+0xa6c>)
 8003dc8:	f00e fc35 	bl	8012636 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dcc:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d12c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	3b01      	subs	r3, #1
 8003dec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d123      	bne.n	8003e3a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d11b      	bne.n	8003e3a <HAL_RCC_OscConfig+0x94e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d113      	bne.n	8003e3a <HAL_RCC_OscConfig+0x94e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d109      	bne.n	8003e3a <HAL_RCC_OscConfig+0x94e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d06d      	beq.n	8003f16 <HAL_RCC_OscConfig+0xa2a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	d068      	beq.n	8003f12 <HAL_RCC_OscConfig+0xa26>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e40:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x96c>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x970>
#endif
            )
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0bc      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a3c      	ldr	r2, [pc, #240]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e68:	f7fd f90c 	bl	8001084 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x996>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd f908 	bl	8001084 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x996>
              {
                return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0a9      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x984>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	4b32      	ldr	r3, [pc, #200]	; (8003f5c <HAL_RCC_OscConfig+0xa70>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ea8:	0212      	lsls	r2, r2, #8
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eb0:	0852      	lsrs	r2, r2, #1
 8003eb2:	3a01      	subs	r2, #1
 8003eb4:	0552      	lsls	r2, r2, #21
 8003eb6:	4311      	orrs	r1, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ebc:	0852      	lsrs	r2, r2, #1
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0652      	lsls	r2, r2, #25
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec8:	06d2      	lsls	r2, r2, #27
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	4921      	ldr	r1, [pc, #132]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ee8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eea:	f7fd f8cb 	bl	8001084 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0xa18>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fd f8c7 	bl	8001084 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0xa18>
              {
                return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e068      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0xa06>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f10:	e060      	b.n	8003fd4 <HAL_RCC_OscConfig+0xae8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e05f      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d158      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xae8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_RCC_OscConfig+0xa68>)
 8003f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f38:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f3a:	f7fd f8a3 	bl	8001084 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f40:	e00e      	b.n	8003f60 <HAL_RCC_OscConfig+0xa74>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd f89f 	bl	8001084 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d907      	bls.n	8003f60 <HAL_RCC_OscConfig+0xa74>
            {
              return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e040      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
 8003f54:	40021000 	.word	0x40021000
 8003f58:	0801a954 	.word	0x0801a954
 8003f5c:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ea      	beq.n	8003f42 <HAL_RCC_OscConfig+0xa56>
 8003f6c:	e032      	b.n	8003fd4 <HAL_RCC_OscConfig+0xae8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	d02d      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xae4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCC_OscConfig+0xaac>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003f9e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd f86c 	bl	8001084 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd f868 	bl	8001084 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e009      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_RCC_OscConfig+0xaf4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xac4>
 8003fce:	e001      	b.n	8003fd4 <HAL_RCC_OscConfig+0xae8>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0xaea>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e168      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_RCC_ClockConfig+0x24>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d904      	bls.n	8004012 <HAL_RCC_ClockConfig+0x2e>
 8004008:	f240 4162 	movw	r1, #1122	; 0x462
 800400c:	4873      	ldr	r0, [pc, #460]	; (80041dc <HAL_RCC_ClockConfig+0x1f8>)
 800400e:	f00e fb12 	bl	8012636 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x56>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d00d      	beq.n	800403a <HAL_RCC_ClockConfig+0x56>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d00a      	beq.n	800403a <HAL_RCC_ClockConfig+0x56>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d007      	beq.n	800403a <HAL_RCC_ClockConfig+0x56>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d004      	beq.n	800403a <HAL_RCC_ClockConfig+0x56>
 8004030:	f240 4163 	movw	r1, #1123	; 0x463
 8004034:	4869      	ldr	r0, [pc, #420]	; (80041dc <HAL_RCC_ClockConfig+0x1f8>)
 8004036:	f00e fafe 	bl	8012636 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403a:	4b69      	ldr	r3, [pc, #420]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d910      	bls.n	800406a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004048:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	4963      	ldr	r1, [pc, #396]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e12f      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d061      	beq.n	800413a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCC_ClockConfig+0xbc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d00c      	beq.n	80040a0 <HAL_RCC_ClockConfig+0xbc>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d008      	beq.n	80040a0 <HAL_RCC_ClockConfig+0xbc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d004      	beq.n	80040a0 <HAL_RCC_ClockConfig+0xbc>
 8004096:	f240 417a 	movw	r1, #1146	; 0x47a
 800409a:	4850      	ldr	r0, [pc, #320]	; (80041dc <HAL_RCC_ClockConfig+0x1f8>)
 800409c:	f00e facb 	bl	8012636 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	4b4e      	ldr	r3, [pc, #312]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d121      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e108      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c0:	4b48      	ldr	r3, [pc, #288]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d115      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0fc      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d8:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0f0      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e8:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0e8      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f8:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4937      	ldr	r1, [pc, #220]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410a:	f7fc ffbb 	bl	8001084 <HAL_GetTick>
 800410e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004110:	e00a      	b.n	8004128 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004112:	f7fc ffb7 	bl	8001084 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0d0      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 020c 	and.w	r2, r3, #12
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	429a      	cmp	r2, r3
 8004138:	d1eb      	bne.n	8004112 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d031      	beq.n	80041aa <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d024      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d020      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b90      	cmp	r3, #144	; 0x90
 800415c:	d01c      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2ba0      	cmp	r3, #160	; 0xa0
 8004164:	d018      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2bb0      	cmp	r3, #176	; 0xb0
 800416c:	d014      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2bc0      	cmp	r3, #192	; 0xc0
 8004174:	d010      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2bd0      	cmp	r3, #208	; 0xd0
 800417c:	d00c      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2be0      	cmp	r3, #224	; 0xe0
 8004184:	d008      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2bf0      	cmp	r3, #240	; 0xf0
 800418c:	d004      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
 800418e:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8004192:	4812      	ldr	r0, [pc, #72]	; (80041dc <HAL_RCC_ClockConfig+0x1f8>)
 8004194:	f00e fa4f 	bl	8012636 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	490f      	ldr	r1, [pc, #60]	; (80041e4 <HAL_RCC_ClockConfig+0x200>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d217      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 0207 	bic.w	r2, r3, #7
 80041c0:	4907      	ldr	r1, [pc, #28]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d008      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e077      	b.n	80042ca <HAL_RCC_ClockConfig+0x2e6>
 80041da:	bf00      	nop
 80041dc:	0801a954 	.word	0x0801a954
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d025      	beq.n	8004240 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d018      	beq.n	800422e <HAL_RCC_ClockConfig+0x24a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d013      	beq.n	800422e <HAL_RCC_ClockConfig+0x24a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800420e:	d00e      	beq.n	800422e <HAL_RCC_ClockConfig+0x24a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x24a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004222:	d004      	beq.n	800422e <HAL_RCC_ClockConfig+0x24a>
 8004224:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8004228:	482a      	ldr	r0, [pc, #168]	; (80042d4 <HAL_RCC_ClockConfig+0x2f0>)
 800422a:	f00e fa04 	bl	8012636 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_ClockConfig+0x2f4>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4927      	ldr	r1, [pc, #156]	; (80042d8 <HAL_RCC_ClockConfig+0x2f4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d026      	beq.n	800429a <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d018      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2a2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425c:	d013      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2a2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004266:	d00e      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2a2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2a2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427a:	d004      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2a2>
 800427c:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8004280:	4814      	ldr	r0, [pc, #80]	; (80042d4 <HAL_RCC_ClockConfig+0x2f0>)
 8004282:	f00e f9d8 	bl	8012636 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCC_ClockConfig+0x2f4>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4910      	ldr	r1, [pc, #64]	; (80042d8 <HAL_RCC_ClockConfig+0x2f4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429a:	f000 f825 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800429e:	4602      	mov	r2, r0
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCC_ClockConfig+0x2f4>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	490c      	ldr	r1, [pc, #48]	; (80042dc <HAL_RCC_ClockConfig+0x2f8>)
 80042ac:	5ccb      	ldrb	r3, [r1, r3]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x2fc>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x300>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f00e fd64 	bl	8012d8c <HAL_InitTick>
 80042c4:	4603      	mov	r3, r0
 80042c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	0801a954 	.word	0x0801a954
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0801c404 	.word	0x0801c404
 80042e0:	200003a8 	.word	0x200003a8
 80042e4:	20000000 	.word	0x20000000

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d121      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d11e      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800431c:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004328:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e005      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d102      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e004      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d101      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 800436e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d134      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004376:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0xa6>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d003      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xac>
 800438c:	e005      	b.n	800439a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004390:	617b      	str	r3, [r7, #20]
      break;
 8004392:	e005      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004396:	617b      	str	r3, [r7, #20]
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	617b      	str	r3, [r7, #20]
      break;
 800439e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a0:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	3301      	adds	r3, #1
 80043ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	fb02 f203 	mul.w	r2, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	0e5b      	lsrs	r3, r3, #25
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	3301      	adds	r3, #1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043e0:	69bb      	ldr	r3, [r7, #24]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3724      	adds	r7, #36	; 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	0801c41c 	.word	0x0801c41c
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200003a8 	.word	0x200003a8

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4904      	ldr	r1, [pc, #16]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	0801c414 	.word	0x0801c414

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004448:	f7ff ffda 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0adb      	lsrs	r3, r3, #11
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4904      	ldr	r1, [pc, #16]	; (800446c <HAL_RCC_GetPCLK2Freq+0x28>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	0801c414 	.word	0x0801c414

08004470 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <HAL_RCC_GetClockConfig+0x1a>
 8004480:	f240 6197 	movw	r1, #1687	; 0x697
 8004484:	4818      	ldr	r0, [pc, #96]	; (80044e8 <HAL_RCC_GetClockConfig+0x78>)
 8004486:	f00e f8d6 	bl	8012636 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_RCC_GetClockConfig+0x2a>
 8004490:	f44f 61d3 	mov.w	r1, #1688	; 0x698
 8004494:	4814      	ldr	r0, [pc, #80]	; (80044e8 <HAL_RCC_GetClockConfig+0x78>)
 8004496:	f00e f8ce 	bl	8012636 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	220f      	movs	r2, #15
 800449e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_RCC_GetClockConfig+0x7c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0203 	and.w	r2, r3, #3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCC_GetClockConfig+0x7c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_RCC_GetClockConfig+0x7c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_RCC_GetClockConfig+0x7c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RCC_GetClockConfig+0x80>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0207 	and.w	r2, r3, #7
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	601a      	str	r2, [r3, #0]
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0801a954 	.word	0x0801a954
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40022000 	.word	0x40022000

080044f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800450c:	f7fe ff7e 	bl	800340c <HAL_PWREx_GetVoltageRange>
 8004510:	6178      	str	r0, [r7, #20]
 8004512:	e014      	b.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6593      	str	r3, [r2, #88]	; 0x58
 8004520:	4b22      	ldr	r3, [pc, #136]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800452c:	f7fe ff6e 	bl	800340c <HAL_PWREx_GetVoltageRange>
 8004530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004544:	d10b      	bne.n	800455e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d919      	bls.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2ba0      	cmp	r3, #160	; 0xa0
 8004550:	d902      	bls.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004552:	2302      	movs	r3, #2
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e013      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004558:	2301      	movs	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e010      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d902      	bls.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004564:	2303      	movs	r3, #3
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e00a      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d102      	bne.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004570:	2302      	movs	r3, #2
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e004      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b70      	cmp	r3, #112	; 0x70
 800457a:	d101      	bne.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800457c:	2301      	movs	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	4909      	ldr	r1, [pc, #36]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40022000 	.word	0x40022000

080045b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045bc:	2300      	movs	r3, #0
 80045be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045c0:	2300      	movs	r3, #0
 80045c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d17b      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d175      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d16f      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d169      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d163      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d15d      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d157      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d151      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14b      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d145      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004644:	2b00      	cmp	r3, #0
 8004646:	d13f      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d139      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d133      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d12d      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d127      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d121      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11b      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d115      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10f      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80046c0:	21cb      	movs	r1, #203	; 0xcb
 80046c2:	48ad      	ldr	r0, [pc, #692]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80046c4:	f00d ffb7 	bl	8012636 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d058      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d012      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e4:	d00d      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046f8:	d003      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046fa:	21d3      	movs	r1, #211	; 0xd3
 80046fc:	489e      	ldr	r0, [pc, #632]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80046fe:	f00d ff9a 	bl	8012636 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800470a:	d02a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800470c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004710:	d824      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004716:	d008      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800471c:	d81e      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004726:	d010      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004728:	e018      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800472a:	4b94      	ldr	r3, [pc, #592]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4a93      	ldr	r2, [pc, #588]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004736:	e015      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fc8c 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004748:	e00c      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3320      	adds	r3, #32
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fe01 	bl	8005358 <RCCEx_PLLSAI2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	74fb      	strb	r3, [r7, #19]
      break;
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      break;
 8004762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800476a:	4b84      	ldr	r3, [pc, #528]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004778:	4980      	ldr	r1, [pc, #512]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004780:	e001      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	7cfb      	ldrb	r3, [r7, #19]
 8004784:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d059      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d013      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a2:	d00e      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ac:	d009      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b6:	d004      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 80047b8:	f240 1111 	movw	r1, #273	; 0x111
 80047bc:	486e      	ldr	r0, [pc, #440]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80047be:	f00d ff3a 	bl	8012636 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ca:	d02a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80047cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047d0:	d824      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x268>
 80047d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047d6:	d008      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x236>
 80047d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047dc:	d81e      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x268>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80047e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e6:	d010      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80047e8:	e018      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ea:	4b64      	ldr	r3, [pc, #400]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4a63      	ldr	r2, [pc, #396]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047f6:	e015      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x270>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fc2c 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004808:	e00c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x270>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3320      	adds	r3, #32
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fda1 	bl	8005358 <RCCEx_PLLSAI2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x270>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	74fb      	strb	r3, [r7, #19]
      break;
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x270>
      break;
 8004822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800482a:	4b54      	ldr	r3, [pc, #336]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004838:	4950      	ldr	r1, [pc, #320]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004840:	e001      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x292>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80bf 	beq.w	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004854:	2300      	movs	r3, #0
 8004856:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486c:	d010      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004884:	d004      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004886:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800488a:	483b      	ldr	r0, [pc, #236]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800488c:	f00d fed3 	bl	8012636 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004890:	4b3a      	ldr	r3, [pc, #232]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b35      	ldr	r3, [pc, #212]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	4a34      	ldr	r2, [pc, #208]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
 80048b2:	4b32      	ldr	r3, [pc, #200]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2e      	ldr	r2, [pc, #184]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ce:	f7fc fbd9 	bl	8001084 <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d4:	e009      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d6:	f7fc fbd5 	bl	8001084 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d902      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        ret = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	74fb      	strb	r3, [r7, #19]
        break;
 80048e8:	e005      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048ea:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ef      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x322>
      }
    }

    if(ret == HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d15f      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01f      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	429a      	cmp	r2, r3
 8004918:	d019      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004924:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800492e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	4a0f      	ldr	r2, [pc, #60]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004946:	4a0d      	ldr	r2, [pc, #52]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01c      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fc fb94 	bl	8001084 <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fc fb90 	bl	8001084 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d908      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
          {
            ret = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	74fb      	strb	r3, [r7, #19]
            break;
 8004976:	e00c      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004978:	0801a98c 	.word	0x0801a98c
 800497c:	40021000 	.word	0x40021000
 8004980:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0e6      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
          }
        }
      }

      if(ret == HAL_OK)
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10c      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	4903      	ldr	r1, [pc, #12]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049b0:	e006      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	74bb      	strb	r3, [r7, #18]
 80049b6:	e003      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80049b8:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c0:	7c7b      	ldrb	r3, [r7, #17]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d105      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c6:	4ba1      	ldr	r3, [pc, #644]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	4aa0      	ldr	r2, [pc, #640]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 80049cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01f      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d010      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x454>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d00c      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x454>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d008      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x454>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d004      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x454>
 80049fe:	f240 119b 	movw	r1, #411	; 0x19b
 8004a02:	4893      	ldr	r0, [pc, #588]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004a04:	f00d fe17 	bl	8012636 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a08:	4b90      	ldr	r3, [pc, #576]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	498d      	ldr	r1, [pc, #564]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01f      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d010      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d00c      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d008      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d004      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004a4a:	f240 11a5 	movw	r1, #421	; 0x1a5
 8004a4e:	4880      	ldr	r0, [pc, #512]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004a50:	f00d fdf1 	bl	8012636 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a54:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f023 020c 	bic.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	497a      	ldr	r1, [pc, #488]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01f      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d010      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d00c      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d004      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004a96:	f240 11b1 	movw	r1, #433	; 0x1b1
 8004a9a:	486d      	ldr	r0, [pc, #436]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004a9c:	f00d fdcb 	bl	8012636 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4967      	ldr	r1, [pc, #412]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01f      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d010      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d00c      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d004      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004ae2:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004ae6:	485a      	ldr	r0, [pc, #360]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004ae8:	f00d fda5 	bl	8012636 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aec:	4b57      	ldr	r3, [pc, #348]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4954      	ldr	r1, [pc, #336]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d022      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d013      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1e:	d00e      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b28:	d009      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d004      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004b34:	f240 11cd 	movw	r1, #461	; 0x1cd
 8004b38:	4845      	ldr	r0, [pc, #276]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004b3a:	f00d fd7c 	bl	8012636 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b3e:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	493f      	ldr	r1, [pc, #252]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d022      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b70:	d00e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7a:	d009      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b84:	d004      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004b86:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b8a:	4831      	ldr	r0, [pc, #196]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004b8c:	f00d fd53 	bl	8012636 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b90:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9e:	492b      	ldr	r1, [pc, #172]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d022      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d013      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bc2:	d00e      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bd6:	d004      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004bd8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004bdc:	481c      	ldr	r0, [pc, #112]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004bde:	f00d fd2a 	bl	8012636 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf0:	4916      	ldr	r1, [pc, #88]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d027      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c14:	d00e      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c1e:	d009      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c28:	d004      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004c2a:	f240 11e9 	movw	r1, #489	; 0x1e9
 8004c2e:	4808      	ldr	r0, [pc, #32]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
 8004c30:	f00d fd01 	bl	8012636 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c42:	4902      	ldr	r1, [pc, #8]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c4a:	e003      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	0801a98c 	.word	0x0801a98c
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c70:	d009      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8004c7c:	f240 11f1 	movw	r1, #497	; 0x1f1
 8004c80:	489d      	ldr	r0, [pc, #628]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004c82:	f00d fcd8 	bl	8012636 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c86:	4b9d      	ldr	r3, [pc, #628]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	4999      	ldr	r1, [pc, #612]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb8:	d009      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d004      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004cc4:	f240 11fd 	movw	r1, #509	; 0x1fd
 8004cc8:	488b      	ldr	r0, [pc, #556]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004cca:	f00d fcb4 	bl	8012636 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cce:	4b8b      	ldr	r3, [pc, #556]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	4987      	ldr	r1, [pc, #540]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01d      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x778>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d009      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d0a:	d004      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8004d0c:	f240 2109 	movw	r1, #521	; 0x209
 8004d10:	4879      	ldr	r0, [pc, #484]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004d12:	f00d fc90 	bl	8012636 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d16:	4b79      	ldr	r3, [pc, #484]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	4975      	ldr	r1, [pc, #468]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d008      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d004      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004d50:	f240 2115 	movw	r1, #533	; 0x215
 8004d54:	4868      	ldr	r0, [pc, #416]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004d56:	f00d fc6e 	bl	8012636 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d5a:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d60:	f023 0203 	bic.w	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	4964      	ldr	r1, [pc, #400]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d040      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x84a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8c:	d00e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d96:	d009      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004da0:	d004      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8004da2:	f240 2122 	movw	r1, #546	; 0x222
 8004da6:	4854      	ldr	r0, [pc, #336]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004da8:	f00d fc45 	bl	8012636 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4950      	ldr	r1, [pc, #320]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dca:	d106      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x826>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dcc:	4b4b      	ldr	r3, [pc, #300]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4a4a      	ldr	r2, [pc, #296]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd6:	60d3      	str	r3, [r2, #12]
 8004dd8:	e011      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x84a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	2101      	movs	r1, #1
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f936 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        {
          /* set overall return value */
          status = ret;
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d040      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e1a:	d00e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e24:	d009      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e2e:	d004      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004e30:	f240 2143 	movw	r1, #579	; 0x243
 8004e34:	4830      	ldr	r0, [pc, #192]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004e36:	f00d fbfe 	bl	8012636 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	492c      	ldr	r1, [pc, #176]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e58:	d106      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5a:	4b28      	ldr	r3, [pc, #160]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4a27      	ldr	r2, [pc, #156]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e64:	60d3      	str	r3, [r2, #12]
 8004e66:	e011      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	2101      	movs	r1, #1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f8ef 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e82:	7cfb      	ldrb	r3, [r7, #19]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      {
        /* set overall return value */
        status = ret;
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d045      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8004ebe:	f44f 711a 	mov.w	r1, #616	; 0x268
 8004ec2:	480d      	ldr	r0, [pc, #52]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8004ec4:	f00d fbb7 	bl	8012636 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed6:	4909      	ldr	r1, [pc, #36]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x94c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a03      	ldr	r2, [pc, #12]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
 8004ef4:	e016      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8004ef6:	bf00      	nop
 8004ef8:	0801a98c 	.word	0x0801a98c
 8004efc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f8a3 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f1a:	7cfb      	ldrb	r3, [r7, #19]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      {
        /* set overall return value */
        status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d047      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f40:	d00e      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4a:	d009      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f54:	d004      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004f56:	f44f 7122 	mov.w	r1, #648	; 0x288
 8004f5a:	483e      	ldr	r0, [pc, #248]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xaa0>)
 8004f5c:	f00d fb6b 	bl	8012636 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f60:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6e:	493a      	ldr	r1, [pc, #232]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7e:	d10d      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	2102      	movs	r1, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f868 	bl	800505c <RCCEx_PLLSAI1_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d014      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      {
        /* set overall return value */
        status = ret;
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	74bb      	strb	r3, [r7, #18]
 8004f9a:	e011      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3320      	adds	r3, #32
 8004faa:	2102      	movs	r1, #2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f9d3 	bl	8005358 <RCCEx_PLLSAI2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      {
        /* set overall return value */
        status = ret;
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d004      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8004fe2:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004fe6:	481b      	ldr	r0, [pc, #108]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xaa0>)
 8004fe8:	f00d fb25 	bl	8012636 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffc:	4916      	ldr	r1, [pc, #88]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005024:	d004      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 8005026:	f240 21c2 	movw	r1, #706	; 0x2c2
 800502a:	480a      	ldr	r0, [pc, #40]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0xaa0>)
 800502c:	f00d fb03 	bl	8012636 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005040:	4905      	ldr	r1, [pc, #20]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005048:	7cbb      	ldrb	r3, [r7, #18]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	0801a98c 	.word	0x0801a98c
 8005058:	40021000 	.word	0x40021000

0800505c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <RCCEx_PLLSAI1_Config+0x38>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00c      	beq.n	8005094 <RCCEx_PLLSAI1_Config+0x38>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d008      	beq.n	8005094 <RCCEx_PLLSAI1_Config+0x38>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d004      	beq.n	8005094 <RCCEx_PLLSAI1_Config+0x38>
 800508a:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800508e:	48a4      	ldr	r0, [pc, #656]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005090:	f00d fad1 	bl	8012636 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <RCCEx_PLLSAI1_Config+0x48>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d904      	bls.n	80050ae <RCCEx_PLLSAI1_Config+0x52>
 80050a4:	f640 3161 	movw	r1, #2913	; 0xb61
 80050a8:	489d      	ldr	r0, [pc, #628]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 80050aa:	f00d fac4 	bl	8012636 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	d903      	bls.n	80050be <RCCEx_PLLSAI1_Config+0x62>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b56      	cmp	r3, #86	; 0x56
 80050bc:	d904      	bls.n	80050c8 <RCCEx_PLLSAI1_Config+0x6c>
 80050be:	f640 3162 	movw	r1, #2914	; 0xb62
 80050c2:	4897      	ldr	r0, [pc, #604]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 80050c4:	f00d fab7 	bl	8012636 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0x90>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0x90>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <RCCEx_PLLSAI1_Config+0xa0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <RCCEx_PLLSAI1_Config+0xaa>
 80050fc:	f640 3163 	movw	r1, #2915	; 0xb63
 8005100:	4887      	ldr	r0, [pc, #540]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005102:	f00d fa98 	bl	8012636 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005106:	4b87      	ldr	r3, [pc, #540]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005112:	4b84      	ldr	r3, [pc, #528]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0203 	and.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d10d      	bne.n	800513e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
       ||
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800512a:	4b7e      	ldr	r3, [pc, #504]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
       ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d047      	beq.n	80051ce <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e044      	b.n	80051ce <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d018      	beq.n	800517e <RCCEx_PLLSAI1_Config+0x122>
 800514c:	2b03      	cmp	r3, #3
 800514e:	d825      	bhi.n	800519c <RCCEx_PLLSAI1_Config+0x140>
 8005150:	2b01      	cmp	r3, #1
 8005152:	d002      	beq.n	800515a <RCCEx_PLLSAI1_Config+0xfe>
 8005154:	2b02      	cmp	r3, #2
 8005156:	d009      	beq.n	800516c <RCCEx_PLLSAI1_Config+0x110>
 8005158:	e020      	b.n	800519c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800515a:	4b72      	ldr	r3, [pc, #456]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11d      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800516a:	e01a      	b.n	80051a2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800516c:	4b6d      	ldr	r3, [pc, #436]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d116      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517c:	e013      	b.n	80051a6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800517e:	4b69      	ldr	r3, [pc, #420]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800518a:	4b66      	ldr	r3, [pc, #408]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800519a:	e006      	b.n	80051aa <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	e004      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x150>
      break;
 80051a2:	bf00      	nop
 80051a4:	e002      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x150>
      break;
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x150>
      break;
 80051aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051b2:	4b5c      	ldr	r3, [pc, #368]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6819      	ldr	r1, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	430b      	orrs	r3, r1
 80051c8:	4956      	ldr	r1, [pc, #344]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f040 80b9 	bne.w	8005348 <RCCEx_PLLSAI1_Config+0x2ec>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051d6:	4b53      	ldr	r3, [pc, #332]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a52      	ldr	r2, [pc, #328]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80051dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e2:	f7fb ff4f 	bl	8001084 <HAL_GetTick>
 80051e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051e8:	e009      	b.n	80051fe <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ea:	f7fb ff4b 	bl	8001084 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d902      	bls.n	80051fe <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	73fb      	strb	r3, [r7, #15]
        break;
 80051fc:	e005      	b.n	800520a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051fe:	4b49      	ldr	r3, [pc, #292]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1ef      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 809b 	bne.w	8005348 <RCCEx_PLLSAI1_Config+0x2ec>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11d      	bne.n	8005254 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d903      	bls.n	8005228 <RCCEx_PLLSAI1_Config+0x1cc>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b1f      	cmp	r3, #31
 8005226:	d904      	bls.n	8005232 <RCCEx_PLLSAI1_Config+0x1d6>
 8005228:	f640 31b6 	movw	r1, #2998	; 0xbb6
 800522c:	483c      	ldr	r0, [pc, #240]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 800522e:	f00d fa02 	bl	8012636 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005232:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800523a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6892      	ldr	r2, [r2, #8]
 8005242:	0211      	lsls	r1, r2, #8
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68d2      	ldr	r2, [r2, #12]
 8005248:	06d2      	lsls	r2, r2, #27
 800524a:	430a      	orrs	r2, r1
 800524c:	4935      	ldr	r1, [pc, #212]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	610b      	str	r3, [r1, #16]
 8005252:	e051      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0x29c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d127      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0x24e>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d010      	beq.n	8005284 <RCCEx_PLLSAI1_Config+0x228>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d00c      	beq.n	8005284 <RCCEx_PLLSAI1_Config+0x228>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b06      	cmp	r3, #6
 8005270:	d008      	beq.n	8005284 <RCCEx_PLLSAI1_Config+0x228>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b08      	cmp	r3, #8
 8005278:	d004      	beq.n	8005284 <RCCEx_PLLSAI1_Config+0x228>
 800527a:	f640 31da 	movw	r1, #3034	; 0xbda
 800527e:	4828      	ldr	r0, [pc, #160]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 8005280:	f00d f9d9 	bl	8012636 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800528c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	0211      	lsls	r1, r2, #8
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6912      	ldr	r2, [r2, #16]
 800529a:	0852      	lsrs	r2, r2, #1
 800529c:	3a01      	subs	r2, #1
 800529e:	0552      	lsls	r2, r2, #21
 80052a0:	430a      	orrs	r2, r1
 80052a2:	4920      	ldr	r1, [pc, #128]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	610b      	str	r3, [r1, #16]
 80052a8:	e026      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0x29c>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d010      	beq.n	80052d4 <RCCEx_PLLSAI1_Config+0x278>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d00c      	beq.n	80052d4 <RCCEx_PLLSAI1_Config+0x278>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d008      	beq.n	80052d4 <RCCEx_PLLSAI1_Config+0x278>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d004      	beq.n	80052d4 <RCCEx_PLLSAI1_Config+0x278>
 80052ca:	f640 31ec 	movw	r1, #3052	; 0xbec
 80052ce:	4814      	ldr	r0, [pc, #80]	; (8005320 <RCCEx_PLLSAI1_Config+0x2c4>)
 80052d0:	f00d f9b1 	bl	8012636 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6892      	ldr	r2, [r2, #8]
 80052e4:	0211      	lsls	r1, r2, #8
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6952      	ldr	r2, [r2, #20]
 80052ea:	0852      	lsrs	r2, r2, #1
 80052ec:	3a01      	subs	r2, #1
 80052ee:	0652      	lsls	r2, r2, #25
 80052f0:	430a      	orrs	r2, r1
 80052f2:	490c      	ldr	r1, [pc, #48]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <RCCEx_PLLSAI1_Config+0x2c8>)
 80052fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fb febe 	bl	8001084 <HAL_GetTick>
 8005308:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800530a:	e00d      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800530c:	f7fb feba 	bl	8001084 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d906      	bls.n	8005328 <RCCEx_PLLSAI1_Config+0x2cc>
        {
          status = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	73fb      	strb	r3, [r7, #15]
          break;
 800531e:	e009      	b.n	8005334 <RCCEx_PLLSAI1_Config+0x2d8>
 8005320:	0801a98c 	.word	0x0801a98c
 8005324:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <RCCEx_PLLSAI1_Config+0x2f8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0eb      	beq.n	800530c <RCCEx_PLLSAI1_Config+0x2b0>
        }
      }

      if(status == HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <RCCEx_PLLSAI1_Config+0x2ec>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <RCCEx_PLLSAI1_Config+0x2f8>)
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	4904      	ldr	r1, [pc, #16]	; (8005354 <RCCEx_PLLSAI1_Config+0x2f8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000

08005358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <RCCEx_PLLSAI2_Config+0x38>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d00c      	beq.n	8005390 <RCCEx_PLLSAI2_Config+0x38>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d008      	beq.n	8005390 <RCCEx_PLLSAI2_Config+0x38>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d004      	beq.n	8005390 <RCCEx_PLLSAI2_Config+0x38>
 8005386:	f640 412d 	movw	r1, #3117	; 0xc2d
 800538a:	4896      	ldr	r0, [pc, #600]	; (80055e4 <RCCEx_PLLSAI2_Config+0x28c>)
 800538c:	f00d f953 	bl	8012636 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <RCCEx_PLLSAI2_Config+0x48>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d904      	bls.n	80053aa <RCCEx_PLLSAI2_Config+0x52>
 80053a0:	f640 412e 	movw	r1, #3118	; 0xc2e
 80053a4:	488f      	ldr	r0, [pc, #572]	; (80055e4 <RCCEx_PLLSAI2_Config+0x28c>)
 80053a6:	f00d f946 	bl	8012636 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	d903      	bls.n	80053ba <RCCEx_PLLSAI2_Config+0x62>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b56      	cmp	r3, #86	; 0x56
 80053b8:	d904      	bls.n	80053c4 <RCCEx_PLLSAI2_Config+0x6c>
 80053ba:	f640 412f 	movw	r1, #3119	; 0xc2f
 80053be:	4889      	ldr	r0, [pc, #548]	; (80055e4 <RCCEx_PLLSAI2_Config+0x28c>)
 80053c0:	f00d f939 	bl	8012636 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <RCCEx_PLLSAI2_Config+0x84>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <RCCEx_PLLSAI2_Config+0x94>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <RCCEx_PLLSAI2_Config+0x9e>
 80053ec:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 80053f0:	487c      	ldr	r0, [pc, #496]	; (80055e4 <RCCEx_PLLSAI2_Config+0x28c>)
 80053f2:	f00d f920 	bl	8012636 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053f6:	4b7c      	ldr	r3, [pc, #496]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005402:	4b79      	ldr	r3, [pc, #484]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0203 	and.w	r2, r3, #3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d10d      	bne.n	800542e <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
       ||
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800541a:	4b73      	ldr	r3, [pc, #460]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
       ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d047      	beq.n	80054be <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	e044      	b.n	80054be <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d018      	beq.n	800546e <RCCEx_PLLSAI2_Config+0x116>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d825      	bhi.n	800548c <RCCEx_PLLSAI2_Config+0x134>
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <RCCEx_PLLSAI2_Config+0xf2>
 8005444:	2b02      	cmp	r3, #2
 8005446:	d009      	beq.n	800545c <RCCEx_PLLSAI2_Config+0x104>
 8005448:	e020      	b.n	800548c <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800544a:	4b67      	ldr	r3, [pc, #412]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11d      	bne.n	8005492 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800545a:	e01a      	b.n	8005492 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800545c:	4b62      	ldr	r3, [pc, #392]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d116      	bne.n	8005496 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800546c:	e013      	b.n	8005496 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800546e:	4b5e      	ldr	r3, [pc, #376]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800547a:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800548a:	e006      	b.n	800549a <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
      break;
 8005490:	e004      	b.n	800549c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <RCCEx_PLLSAI2_Config+0x144>
      break;
 800549a:	bf00      	nop
    }

    if(status == HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054a2:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6819      	ldr	r1, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	430b      	orrs	r3, r1
 80054b8:	494b      	ldr	r1, [pc, #300]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f040 8089 	bne.w	80055d8 <RCCEx_PLLSAI2_Config+0x280>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054c6:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a47      	ldr	r2, [pc, #284]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80054cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d2:	f7fb fdd7 	bl	8001084 <HAL_GetTick>
 80054d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054d8:	e009      	b.n	80054ee <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054da:	f7fb fdd3 	bl	8001084 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d902      	bls.n	80054ee <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	73fb      	strb	r3, [r7, #15]
        break;
 80054ec:	e005      	b.n	80054fa <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054ee:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ef      	bne.n	80054da <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d16b      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0x280>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11d      	bne.n	8005542 <RCCEx_PLLSAI2_Config+0x1ea>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d903      	bls.n	8005516 <RCCEx_PLLSAI2_Config+0x1be>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b1f      	cmp	r3, #31
 8005514:	d904      	bls.n	8005520 <RCCEx_PLLSAI2_Config+0x1c8>
 8005516:	f640 4183 	movw	r1, #3203	; 0xc83
 800551a:	4832      	ldr	r0, [pc, #200]	; (80055e4 <RCCEx_PLLSAI2_Config+0x28c>)
 800551c:	f00d f88b 	bl	8012636 <assert_failed>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005520:	4b31      	ldr	r3, [pc, #196]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005528:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	0211      	lsls	r1, r2, #8
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68d2      	ldr	r2, [r2, #12]
 8005536:	06d2      	lsls	r2, r2, #27
 8005538:	430a      	orrs	r2, r1
 800553a:	492b      	ldr	r1, [pc, #172]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800553c:	4313      	orrs	r3, r2
 800553e:	614b      	str	r3, [r1, #20]
 8005540:	e026      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x238>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d010      	beq.n	800556c <RCCEx_PLLSAI2_Config+0x214>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b04      	cmp	r3, #4
 8005550:	d00c      	beq.n	800556c <RCCEx_PLLSAI2_Config+0x214>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b06      	cmp	r3, #6
 8005558:	d008      	beq.n	800556c <RCCEx_PLLSAI2_Config+0x214>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b08      	cmp	r3, #8
 8005560:	d004      	beq.n	800556c <RCCEx_PLLSAI2_Config+0x214>
 8005562:	f640 41bb 	movw	r1, #3259	; 0xcbb
 8005566:	481f      	ldr	r0, [pc, #124]	; (80055e4 <RCCEx_PLLSAI2_Config+0x28c>)
 8005568:	f00d f865 	bl	8012636 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800556c:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	0211      	lsls	r1, r2, #8
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6912      	ldr	r2, [r2, #16]
 8005582:	0852      	lsrs	r2, r2, #1
 8005584:	3a01      	subs	r2, #1
 8005586:	0652      	lsls	r2, r2, #25
 8005588:	430a      	orrs	r2, r1
 800558a:	4917      	ldr	r1, [pc, #92]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 800558c:	4313      	orrs	r3, r2
 800558e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fb fd72 	bl	8001084 <HAL_GetTick>
 80055a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055a2:	e009      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0x260>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055a4:	f7fb fd6e 	bl	8001084 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d902      	bls.n	80055b8 <RCCEx_PLLSAI2_Config+0x260>
        {
          status = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	73fb      	strb	r3, [r7, #15]
          break;
 80055b6:	e005      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x26c>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ef      	beq.n	80055a4 <RCCEx_PLLSAI2_Config+0x24c>
        }
      }

      if(status == HAL_OK)
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0x280>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055ca:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4905      	ldr	r1, [pc, #20]	; (80055e8 <RCCEx_PLLSAI2_Config+0x290>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0801a98c 	.word	0x0801a98c
 80055e8:	40021000 	.word	0x40021000

080055ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80d5 	beq.w	80057aa <HAL_RTC_Init+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a6b      	ldr	r2, [pc, #428]	; (80057b4 <HAL_RTC_Init+0x1c8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <HAL_RTC_Init+0x26>
 800560a:	21fe      	movs	r1, #254	; 0xfe
 800560c:	486a      	ldr	r0, [pc, #424]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 800560e:	f00d f812 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d007      	beq.n	800562a <HAL_RTC_Init+0x3e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_RTC_Init+0x3e>
 8005622:	21ff      	movs	r1, #255	; 0xff
 8005624:	4864      	ldr	r0, [pc, #400]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 8005626:	f00d f806 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b7f      	cmp	r3, #127	; 0x7f
 8005630:	d904      	bls.n	800563c <HAL_RTC_Init+0x50>
 8005632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005636:	4860      	ldr	r0, [pc, #384]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 8005638:	f00c fffd 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005644:	d304      	bcc.n	8005650 <HAL_RTC_Init+0x64>
 8005646:	f240 1101 	movw	r1, #257	; 0x101
 800564a:	485b      	ldr	r0, [pc, #364]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 800564c:	f00c fff3 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d013      	beq.n	8005680 <HAL_RTC_Init+0x94>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005660:	d00e      	beq.n	8005680 <HAL_RTC_Init+0x94>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566a:	d009      	beq.n	8005680 <HAL_RTC_Init+0x94>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005674:	d004      	beq.n	8005680 <HAL_RTC_Init+0x94>
 8005676:	f44f 7181 	mov.w	r1, #258	; 0x102
 800567a:	484f      	ldr	r0, [pc, #316]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 800567c:	f00c ffdb 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RTC_Init+0xae>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d004      	beq.n	800569a <HAL_RTC_Init+0xae>
 8005690:	f240 1103 	movw	r1, #259	; 0x103
 8005694:	4848      	ldr	r0, [pc, #288]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 8005696:	f00c ffce 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_RTC_Init+0xca>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056aa:	d004      	beq.n	80056b6 <HAL_RTC_Init+0xca>
 80056ac:	f44f 7182 	mov.w	r1, #260	; 0x104
 80056b0:	4841      	ldr	r0, [pc, #260]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 80056b2:	f00c ffc0 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RTC_Init+0xe4>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d004      	beq.n	80056d0 <HAL_RTC_Init+0xe4>
 80056c6:	f240 1105 	movw	r1, #261	; 0x105
 80056ca:	483b      	ldr	r0, [pc, #236]	; (80057b8 <HAL_RTC_Init+0x1cc>)
 80056cc:	f00c ffb3 	bl	8012636 <assert_failed>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_RTC_Init+0xfe>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f00d fb2f 	bl	8012d48 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22ca      	movs	r2, #202	; 0xca
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2253      	movs	r2, #83	; 0x53
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fe94 	bl	8006430 <RTC_EnterInitMode>
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d14b      	bne.n	80057aa <HAL_RTC_Init+0x1be>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68d2      	ldr	r2, [r2, #12]
 800574c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6919      	ldr	r1, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	041a      	lsls	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fe98 	bl	8006498 <RTC_ExitInitMode>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11b      	bne.n	80057aa <HAL_RTC_Init+0x1be>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0203 	bic.w	r2, r2, #3
 8005780:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40002800 	.word	0x40002800
 80057b8:	0801a9c8 	.word	0x0801a9c8

080057bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <HAL_RTC_SetTime+0x22>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d004      	beq.n	80057de <HAL_RTC_SetTime+0x22>
 80057d4:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
 80057d8:	489d      	ldr	r0, [pc, #628]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80057da:	f00c ff2c 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e6:	d00d      	beq.n	8005804 <HAL_RTC_SetTime+0x48>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f0:	d008      	beq.n	8005804 <HAL_RTC_SetTime+0x48>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_RTC_SetTime+0x48>
 80057fa:	f240 51a9 	movw	r1, #1449	; 0x5a9
 80057fe:	4894      	ldr	r0, [pc, #592]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 8005800:	f00c ff19 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_RTC_SetTime+0x64>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005814:	d004      	beq.n	8005820 <HAL_RTC_SetTime+0x64>
 8005816:	f240 51aa 	movw	r1, #1450	; 0x5aa
 800581a:	488d      	ldr	r0, [pc, #564]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 800581c:	f00c ff0b 	bl	8012636 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_RTC_SetTime+0x72>
 800582a:	2302      	movs	r3, #2
 800582c:	e10c      	b.n	8005a48 <HAL_RTC_SetTime+0x28c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	22ca      	movs	r2, #202	; 0xca
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2253      	movs	r2, #83	; 0x53
 800584c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fdee 	bl	8006430 <RTC_EnterInitMode>
 8005854:	4603      	mov	r3, r0
 8005856:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 80e4 	bne.w	8005a28 <HAL_RTC_SetTime+0x26c>
  {
    if (Format == RTC_FORMAT_BIN)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d15c      	bne.n	8005920 <HAL_RTC_SetTime+0x164>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01a      	beq.n	80058aa <HAL_RTC_SetTime+0xee>
      {
        assert_param(IS_RTC_HOUR12(sTime->Hours));
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_RTC_SetTime+0xc8>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d904      	bls.n	800588e <HAL_RTC_SetTime+0xd2>
 8005884:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8005888:	4871      	ldr	r0, [pc, #452]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 800588a:	f00c fed4 	bl	8012636 <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d015      	beq.n	80058c2 <HAL_RTC_SetTime+0x106>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d011      	beq.n	80058c2 <HAL_RTC_SetTime+0x106>
 800589e:	f240 51bd 	movw	r1, #1469	; 0x5bd
 80058a2:	486b      	ldr	r0, [pc, #428]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80058a4:	f00c fec7 	bl	8012636 <assert_failed>
 80058a8:	e00b      	b.n	80058c2 <HAL_RTC_SetTime+0x106>
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b17      	cmp	r3, #23
 80058b6:	d904      	bls.n	80058c2 <HAL_RTC_SetTime+0x106>
 80058b8:	f240 51c2 	movw	r1, #1474	; 0x5c2
 80058bc:	4864      	ldr	r0, [pc, #400]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80058be:	f00c feba 	bl	8012636 <assert_failed>
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b3b      	cmp	r3, #59	; 0x3b
 80058c8:	d904      	bls.n	80058d4 <HAL_RTC_SetTime+0x118>
 80058ca:	f240 51c4 	movw	r1, #1476	; 0x5c4
 80058ce:	4860      	ldr	r0, [pc, #384]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80058d0:	f00c feb1 	bl	8012636 <assert_failed>
      assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	789b      	ldrb	r3, [r3, #2]
 80058d8:	2b3b      	cmp	r3, #59	; 0x3b
 80058da:	d904      	bls.n	80058e6 <HAL_RTC_SetTime+0x12a>
 80058dc:	f240 51c5 	movw	r1, #1477	; 0x5c5
 80058e0:	485b      	ldr	r0, [pc, #364]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80058e2:	f00c fea8 	bl	8012636 <assert_failed>

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fe12 	bl	8006514 <RTC_ByteToBcd2>
 80058f0:	4603      	mov	r3, r0
 80058f2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fe0b 	bl	8006514 <RTC_ByteToBcd2>
 80058fe:	4603      	mov	r3, r0
 8005900:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005902:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	789b      	ldrb	r3, [r3, #2]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fe03 	bl	8006514 <RTC_ByteToBcd2>
 800590e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005910:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	78db      	ldrb	r3, [r3, #3]
 8005918:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e062      	b.n	80059e6 <HAL_RTC_SetTime+0x22a>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d022      	beq.n	8005974 <HAL_RTC_SetTime+0x1b8>
      {
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fe0e 	bl	8006554 <RTC_Bcd2ToByte>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_RTC_SetTime+0x192>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fe06 	bl	8006554 <RTC_Bcd2ToByte>
 8005948:	4603      	mov	r3, r0
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d904      	bls.n	8005958 <HAL_RTC_SetTime+0x19c>
 800594e:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8005952:	483f      	ldr	r0, [pc, #252]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 8005954:	f00c fe6f 	bl	8012636 <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	78db      	ldrb	r3, [r3, #3]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d019      	beq.n	8005994 <HAL_RTC_SetTime+0x1d8>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	78db      	ldrb	r3, [r3, #3]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d015      	beq.n	8005994 <HAL_RTC_SetTime+0x1d8>
 8005968:	f240 51d1 	movw	r1, #1489	; 0x5d1
 800596c:	4838      	ldr	r0, [pc, #224]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 800596e:	f00c fe62 	bl	8012636 <assert_failed>
 8005972:	e00f      	b.n	8005994 <HAL_RTC_SetTime+0x1d8>
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fde8 	bl	8006554 <RTC_Bcd2ToByte>
 8005984:	4603      	mov	r3, r0
 8005986:	2b17      	cmp	r3, #23
 8005988:	d904      	bls.n	8005994 <HAL_RTC_SetTime+0x1d8>
 800598a:	f240 51d6 	movw	r1, #1494	; 0x5d6
 800598e:	4830      	ldr	r0, [pc, #192]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 8005990:	f00c fe51 	bl	8012636 <assert_failed>
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fddb 	bl	8006554 <RTC_Bcd2ToByte>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b3b      	cmp	r3, #59	; 0x3b
 80059a2:	d904      	bls.n	80059ae <HAL_RTC_SetTime+0x1f2>
 80059a4:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
 80059a8:	4829      	ldr	r0, [pc, #164]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80059aa:	f00c fe44 	bl	8012636 <assert_failed>
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	789b      	ldrb	r3, [r3, #2]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fdce 	bl	8006554 <RTC_Bcd2ToByte>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b3b      	cmp	r3, #59	; 0x3b
 80059bc:	d904      	bls.n	80059c8 <HAL_RTC_SetTime+0x20c>
 80059be:	f240 51d9 	movw	r1, #1497	; 0x5d9
 80059c2:	4823      	ldr	r0, [pc, #140]	; (8005a50 <HAL_RTC_SetTime+0x294>)
 80059c4:	f00c fe37 	bl	8012636 <assert_failed>
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059d4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059da:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80059f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80059f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fd3a 	bl	8006498 <RTC_ExitInitMode>
 8005a24:	4603      	mov	r3, r0
 8005a26:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	22ff      	movs	r2, #255	; 0xff
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d103      	bne.n	8005a3e <HAL_RTC_SetTime+0x282>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005a46:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd90      	pop	{r4, r7, pc}
 8005a50:	0801a9c8 	.word	0x0801a9c8

08005a54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_RTC_GetTime+0x22>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d004      	beq.n	8005a76 <HAL_RTC_GetTime+0x22>
 8005a6c:	f240 6115 	movw	r1, #1557	; 0x615
 8005a70:	482c      	ldr	r0, [pc, #176]	; (8005b24 <HAL_RTC_GetTime+0xd0>)
 8005a72:	f00c fde0 	bl	8012636 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a98:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	0d9b      	lsrs	r3, r3, #22
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11a      	bne.n	8005b18 <HAL_RTC_GetTime+0xc4>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fd34 	bl	8006554 <RTC_Bcd2ToByte>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fd2b 	bl	8006554 <RTC_Bcd2ToByte>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	789b      	ldrb	r3, [r3, #2]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fd22 	bl	8006554 <RTC_Bcd2ToByte>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	0801a9c8 	.word	0x0801a9c8

08005b28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_RTC_SetDate+0x22>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d004      	beq.n	8005b4a <HAL_RTC_SetDate+0x22>
 8005b40:	f240 6142 	movw	r1, #1602	; 0x642
 8005b44:	487f      	ldr	r0, [pc, #508]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005b46:	f00c fd76 	bl	8012636 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_RTC_SetDate+0x30>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0f0      	b.n	8005d3a <HAL_RTC_SetDate+0x212>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10e      	bne.n	8005b8c <HAL_RTC_SetDate+0x64>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_RTC_SetDate+0x64>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	f023 0310 	bic.w	r3, r3, #16
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	330a      	adds	r3, #10
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d01c      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d018      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d014      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d010      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d00c      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d008      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d004      	beq.n	8005bce <HAL_RTC_SetDate+0xa6>
 8005bc4:	f240 614e 	movw	r1, #1614	; 0x64e
 8005bc8:	485e      	ldr	r0, [pc, #376]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005bca:	f00c fd34 	bl	8012636 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d13f      	bne.n	8005c54 <HAL_RTC_SetDate+0x12c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	78db      	ldrb	r3, [r3, #3]
 8005bd8:	2b63      	cmp	r3, #99	; 0x63
 8005bda:	d904      	bls.n	8005be6 <HAL_RTC_SetDate+0xbe>
 8005bdc:	f240 6152 	movw	r1, #1618	; 0x652
 8005be0:	4858      	ldr	r0, [pc, #352]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005be2:	f00c fd28 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_RTC_SetDate+0xce>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b0c      	cmp	r3, #12
 8005bf4:	d904      	bls.n	8005c00 <HAL_RTC_SetDate+0xd8>
 8005bf6:	f240 6153 	movw	r1, #1619	; 0x653
 8005bfa:	4852      	ldr	r0, [pc, #328]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005bfc:	f00c fd1b 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	789b      	ldrb	r3, [r3, #2]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_RTC_SetDate+0xe8>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	789b      	ldrb	r3, [r3, #2]
 8005c0c:	2b1f      	cmp	r3, #31
 8005c0e:	d904      	bls.n	8005c1a <HAL_RTC_SetDate+0xf2>
 8005c10:	f240 6154 	movw	r1, #1620	; 0x654
 8005c14:	484b      	ldr	r0, [pc, #300]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005c16:	f00c fd0e 	bl	8012636 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fc78 	bl	8006514 <RTC_ByteToBcd2>
 8005c24:	4603      	mov	r3, r0
 8005c26:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fc71 	bl	8006514 <RTC_ByteToBcd2>
 8005c32:	4603      	mov	r3, r0
 8005c34:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c36:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	789b      	ldrb	r3, [r3, #2]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fc69 	bl	8006514 <RTC_ByteToBcd2>
 8005c42:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c44:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e045      	b.n	8005ce0 <HAL_RTC_SetDate+0x1b8>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	78db      	ldrb	r3, [r3, #3]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fc7b 	bl	8006554 <RTC_Bcd2ToByte>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b63      	cmp	r3, #99	; 0x63
 8005c62:	d904      	bls.n	8005c6e <HAL_RTC_SetDate+0x146>
 8005c64:	f240 615d 	movw	r1, #1629	; 0x65d
 8005c68:	4836      	ldr	r0, [pc, #216]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005c6a:	f00c fce4 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fc6e 	bl	8006554 <RTC_Bcd2ToByte>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <HAL_RTC_SetDate+0x166>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fc66 	bl	8006554 <RTC_Bcd2ToByte>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b0c      	cmp	r3, #12
 8005c8c:	d904      	bls.n	8005c98 <HAL_RTC_SetDate+0x170>
 8005c8e:	f240 615e 	movw	r1, #1630	; 0x65e
 8005c92:	482c      	ldr	r0, [pc, #176]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005c94:	f00c fccf 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	789b      	ldrb	r3, [r3, #2]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fc59 	bl	8006554 <RTC_Bcd2ToByte>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_RTC_SetDate+0x190>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	789b      	ldrb	r3, [r3, #2]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fc51 	bl	8006554 <RTC_Bcd2ToByte>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b1f      	cmp	r3, #31
 8005cb6:	d904      	bls.n	8005cc2 <HAL_RTC_SetDate+0x19a>
 8005cb8:	f240 615f 	movw	r1, #1631	; 0x65f
 8005cbc:	4821      	ldr	r0, [pc, #132]	; (8005d44 <HAL_RTC_SetDate+0x21c>)
 8005cbe:	f00c fcba 	bl	8012636 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	78db      	ldrb	r3, [r3, #3]
 8005cc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	22ca      	movs	r2, #202	; 0xca
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2253      	movs	r2, #83	; 0x53
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fb9d 	bl	8006430 <RTC_EnterInitMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <HAL_RTC_SetDate+0x1f2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d0e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fbc1 	bl	8006498 <RTC_ExitInitMode>
 8005d16:	4603      	mov	r3, r0
 8005d18:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	22ff      	movs	r2, #255	; 0xff
 8005d20:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d22:	7cfb      	ldrb	r3, [r7, #19]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <HAL_RTC_SetDate+0x208>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d38:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}
 8005d42:	bf00      	nop
 8005d44:	0801a9c8 	.word	0x0801a9c8

08005d48 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_RTC_GetDate+0x22>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d004      	beq.n	8005d6a <HAL_RTC_GetDate+0x22>
 8005d60:	f240 6195 	movw	r1, #1685	; 0x695
 8005d64:	4824      	ldr	r0, [pc, #144]	; (8005df8 <HAL_RTC_GetDate+0xb0>)
 8005d66:	f00c fc66 	bl	8012636 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	0b5b      	lsrs	r3, r3, #13
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11a      	bne.n	8005dee <HAL_RTC_GetDate+0xa6>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fbc9 	bl	8006554 <RTC_Bcd2ToByte>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fbc0 	bl	8006554 <RTC_Bcd2ToByte>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	789b      	ldrb	r3, [r3, #2]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fbb7 	bl	8006554 <RTC_Bcd2ToByte>
 8005de6:	4603      	mov	r3, r0
 8005de8:	461a      	mov	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	0801a9c8 	.word	0x0801a9c8

08005dfc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b089      	sub	sp, #36	; 0x24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg, subsecondtmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_RTC_SetAlarm_IT+0x22>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d004      	beq.n	8005e1e <HAL_RTC_SetAlarm_IT+0x22>
 8005e14:	f240 7186 	movw	r1, #1926	; 0x786
 8005e18:	4897      	ldr	r0, [pc, #604]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e1a:	f00c fc0c 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e26:	d009      	beq.n	8005e3c <HAL_RTC_SetAlarm_IT+0x40>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e30:	d004      	beq.n	8005e3c <HAL_RTC_SetAlarm_IT+0x40>
 8005e32:	f240 7187 	movw	r1, #1927	; 0x787
 8005e36:	4890      	ldr	r0, [pc, #576]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e38:	f00c fbfd 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <HAL_RTC_SetAlarm_IT+0x56>
 8005e48:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8005e4c:	488a      	ldr	r0, [pc, #552]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e4e:	f00c fbf2 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <HAL_RTC_SetAlarm_IT+0x72>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d004      	beq.n	8005e6e <HAL_RTC_SetAlarm_IT+0x72>
 8005e64:	f240 7189 	movw	r1, #1929	; 0x789
 8005e68:	4883      	ldr	r0, [pc, #524]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e6a:	f00c fbe4 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e76:	d304      	bcc.n	8005e82 <HAL_RTC_SetAlarm_IT+0x86>
 8005e78:	f240 718a 	movw	r1, #1930	; 0x78a
 8005e7c:	487e      	ldr	r0, [pc, #504]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e7e:	f00c fbda 	bl	8012636 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00e      	beq.n	8005ea8 <HAL_RTC_SetAlarm_IT+0xac>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e92:	d304      	bcc.n	8005e9e <HAL_RTC_SetAlarm_IT+0xa2>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e9c:	d904      	bls.n	8005ea8 <HAL_RTC_SetAlarm_IT+0xac>
 8005e9e:	f240 718b 	movw	r1, #1931	; 0x78b
 8005ea2:	4875      	ldr	r0, [pc, #468]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005ea4:	f00c fbc7 	bl	8012636 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RTC_SetAlarm_IT+0xba>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e24a      	b.n	800634c <HAL_RTC_SetAlarm_IT+0x550>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 80aa 	bne.w	8006022 <HAL_RTC_SetAlarm_IT+0x226>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <HAL_RTC_SetAlarm_IT+0x116>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_RTC_SetAlarm_IT+0xf0>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d904      	bls.n	8005ef6 <HAL_RTC_SetAlarm_IT+0xfa>
 8005eec:	f240 7196 	movw	r1, #1942	; 0x796
 8005ef0:	4861      	ldr	r0, [pc, #388]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005ef2:	f00c fba0 	bl	8012636 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d015      	beq.n	8005f2a <HAL_RTC_SetAlarm_IT+0x12e>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d011      	beq.n	8005f2a <HAL_RTC_SetAlarm_IT+0x12e>
 8005f06:	f240 7197 	movw	r1, #1943	; 0x797
 8005f0a:	485b      	ldr	r0, [pc, #364]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f0c:	f00c fb93 	bl	8012636 <assert_failed>
 8005f10:	e00b      	b.n	8005f2a <HAL_RTC_SetAlarm_IT+0x12e>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b17      	cmp	r3, #23
 8005f1e:	d904      	bls.n	8005f2a <HAL_RTC_SetAlarm_IT+0x12e>
 8005f20:	f240 719c 	movw	r1, #1948	; 0x79c
 8005f24:	4854      	ldr	r0, [pc, #336]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f26:	f00c fb86 	bl	8012636 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	2b3b      	cmp	r3, #59	; 0x3b
 8005f30:	d904      	bls.n	8005f3c <HAL_RTC_SetAlarm_IT+0x140>
 8005f32:	f240 719e 	movw	r1, #1950	; 0x79e
 8005f36:	4850      	ldr	r0, [pc, #320]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f38:	f00c fb7d 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	789b      	ldrb	r3, [r3, #2]
 8005f40:	2b3b      	cmp	r3, #59	; 0x3b
 8005f42:	d904      	bls.n	8005f4e <HAL_RTC_SetAlarm_IT+0x152>
 8005f44:	f240 719f 	movw	r1, #1951	; 0x79f
 8005f48:	484b      	ldr	r0, [pc, #300]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f4a:	f00c fb74 	bl	8012636 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10f      	bne.n	8005f76 <HAL_RTC_SetAlarm_IT+0x17a>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_RTC_SetAlarm_IT+0x16e>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f66:	2b1f      	cmp	r3, #31
 8005f68:	d92d      	bls.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005f6a:	f240 71a3 	movw	r1, #1955	; 0x7a3
 8005f6e:	4842      	ldr	r0, [pc, #264]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f70:	f00c fb61 	bl	8012636 <assert_failed>
 8005f74:	e027      	b.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d022      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d018      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d013      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fa4:	2b05      	cmp	r3, #5
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d009      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fb8:	2b07      	cmp	r3, #7
 8005fba:	d004      	beq.n	8005fc6 <HAL_RTC_SetAlarm_IT+0x1ca>
 8005fbc:	f240 71a7 	movw	r1, #1959	; 0x7a7
 8005fc0:	482d      	ldr	r0, [pc, #180]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005fc2:	f00c fb38 	bl	8012636 <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 faa2 	bl	8006514 <RTC_ByteToBcd2>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fa9b 	bl	8006514 <RTC_ByteToBcd2>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fe2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	789b      	ldrb	r3, [r3, #2]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fa93 	bl	8006514 <RTC_ByteToBcd2>
 8005fee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ff0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005ffa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fa85 	bl	8006514 <RTC_ByteToBcd2>
 800600a:	4603      	mov	r3, r0
 800600c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800600e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006016:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800601c:	4313      	orrs	r3, r2
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	e0d0      	b.n	80061c4 <HAL_RTC_SetAlarm_IT+0x3c8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d025      	beq.n	800607c <HAL_RTC_SetAlarm_IT+0x280>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fa8d 	bl	8006554 <RTC_Bcd2ToByte>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <HAL_RTC_SetAlarm_IT+0x254>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fa85 	bl	8006554 <RTC_Bcd2ToByte>
 800604a:	4603      	mov	r3, r0
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d904      	bls.n	800605a <HAL_RTC_SetAlarm_IT+0x25e>
 8006050:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8006054:	4808      	ldr	r0, [pc, #32]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006056:	f00c faee 	bl	8012636 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01c      	beq.n	800609c <HAL_RTC_SetAlarm_IT+0x2a0>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d018      	beq.n	800609c <HAL_RTC_SetAlarm_IT+0x2a0>
 800606a:	f240 71b7 	movw	r1, #1975	; 0x7b7
 800606e:	4802      	ldr	r0, [pc, #8]	; (8006078 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006070:	f00c fae1 	bl	8012636 <assert_failed>
 8006074:	e012      	b.n	800609c <HAL_RTC_SetAlarm_IT+0x2a0>
 8006076:	bf00      	nop
 8006078:	0801a9c8 	.word	0x0801a9c8
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fa64 	bl	8006554 <RTC_Bcd2ToByte>
 800608c:	4603      	mov	r3, r0
 800608e:	2b17      	cmp	r3, #23
 8006090:	d904      	bls.n	800609c <HAL_RTC_SetAlarm_IT+0x2a0>
 8006092:	f240 71bc 	movw	r1, #1980	; 0x7bc
 8006096:	4890      	ldr	r0, [pc, #576]	; (80062d8 <HAL_RTC_SetAlarm_IT+0x4dc>)
 8006098:	f00c facd 	bl	8012636 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fa57 	bl	8006554 <RTC_Bcd2ToByte>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b3b      	cmp	r3, #59	; 0x3b
 80060aa:	d904      	bls.n	80060b6 <HAL_RTC_SetAlarm_IT+0x2ba>
 80060ac:	f240 71bf 	movw	r1, #1983	; 0x7bf
 80060b0:	4889      	ldr	r0, [pc, #548]	; (80062d8 <HAL_RTC_SetAlarm_IT+0x4dc>)
 80060b2:	f00c fac0 	bl	8012636 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	789b      	ldrb	r3, [r3, #2]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fa4a 	bl	8006554 <RTC_Bcd2ToByte>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b3b      	cmp	r3, #59	; 0x3b
 80060c4:	d904      	bls.n	80060d0 <HAL_RTC_SetAlarm_IT+0x2d4>
 80060c6:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80060ca:	4883      	ldr	r0, [pc, #524]	; (80062d8 <HAL_RTC_SetAlarm_IT+0x4dc>)
 80060cc:	f00c fab3 	bl	8012636 <assert_failed>

#ifdef  USE_FULL_ASSERT
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d117      	bne.n	8006108 <HAL_RTC_SetAlarm_IT+0x30c>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fa38 	bl	8006554 <RTC_Bcd2ToByte>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_RTC_SetAlarm_IT+0x300>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fa2f 	bl	8006554 <RTC_Bcd2ToByte>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b1f      	cmp	r3, #31
 80060fa:	d949      	bls.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 80060fc:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8006100:	4875      	ldr	r0, [pc, #468]	; (80062d8 <HAL_RTC_SetAlarm_IT+0x4dc>)
 8006102:	f00c fa98 	bl	8012636 <assert_failed>
 8006106:	e043      	b.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fa20 	bl	8006554 <RTC_Bcd2ToByte>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d03a      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fa17 	bl	8006554 <RTC_Bcd2ToByte>
 8006126:	4603      	mov	r3, r0
 8006128:	2b02      	cmp	r3, #2
 800612a:	d031      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa0e 	bl	8006554 <RTC_Bcd2ToByte>
 8006138:	4603      	mov	r3, r0
 800613a:	2b03      	cmp	r3, #3
 800613c:	d028      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fa05 	bl	8006554 <RTC_Bcd2ToByte>
 800614a:	4603      	mov	r3, r0
 800614c:	2b04      	cmp	r3, #4
 800614e:	d01f      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f9fc 	bl	8006554 <RTC_Bcd2ToByte>
 800615c:	4603      	mov	r3, r0
 800615e:	2b05      	cmp	r3, #5
 8006160:	d016      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f9f3 	bl	8006554 <RTC_Bcd2ToByte>
 800616e:	4603      	mov	r3, r0
 8006170:	2b06      	cmp	r3, #6
 8006172:	d00d      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f9ea 	bl	8006554 <RTC_Bcd2ToByte>
 8006180:	4603      	mov	r3, r0
 8006182:	2b07      	cmp	r3, #7
 8006184:	d004      	beq.n	8006190 <HAL_RTC_SetAlarm_IT+0x394>
 8006186:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800618a:	4853      	ldr	r0, [pc, #332]	; (80062d8 <HAL_RTC_SetAlarm_IT+0x4dc>)
 800618c:	f00c fa53 	bl	8012636 <assert_failed>
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800619c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	22ca      	movs	r2, #202	; 0xca
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2253      	movs	r2, #83	; 0x53
 80061de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e8:	d14a      	bne.n	8006280 <HAL_RTC_SetAlarm_IT+0x484>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061f8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800620a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800620c:	f7fa ff3a 	bl	8001084 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006212:	e015      	b.n	8006240 <HAL_RTC_SetAlarm_IT+0x444>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006214:	f7fa ff36 	bl	8001084 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006222:	d90d      	bls.n	8006240 <HAL_RTC_SetAlarm_IT+0x444>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	22ff      	movs	r2, #255	; 0xff
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2203      	movs	r2, #3
 8006230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e085      	b.n	800634c <HAL_RTC_SetAlarm_IT+0x550>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0e2      	beq.n	8006214 <HAL_RTC_SetAlarm_IT+0x418>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800626c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800627c:	609a      	str	r2, [r3, #8]
 800627e:	e04c      	b.n	800631a <HAL_RTC_SetAlarm_IT+0x51e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800628e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f462 7220 	orn	r2, r2, #640	; 0x280
 80062a0:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80062a2:	f7fa feef 	bl	8001084 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80062a8:	e018      	b.n	80062dc <HAL_RTC_SetAlarm_IT+0x4e0>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062aa:	f7fa feeb 	bl	8001084 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b8:	d910      	bls.n	80062dc <HAL_RTC_SetAlarm_IT+0x4e0>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2203      	movs	r2, #3
 80062c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e03a      	b.n	800634c <HAL_RTC_SetAlarm_IT+0x550>
 80062d6:	bf00      	nop
 80062d8:	0801a9c8 	.word	0x0801a9c8
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0df      	beq.n	80062aa <HAL_RTC_SetAlarm_IT+0x4ae>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006308:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006318:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800631a:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <HAL_RTC_SetAlarm_IT+0x558>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a0d      	ldr	r2, [pc, #52]	; (8006354 <HAL_RTC_SetAlarm_IT+0x558>)
 8006320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006324:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RTC_SetAlarm_IT+0x558>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <HAL_RTC_SetAlarm_IT+0x558>)
 800632c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006330:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	22ff      	movs	r2, #255	; 0xff
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3724      	adds	r7, #36	; 0x24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd90      	pop	{r4, r7, pc}
 8006354:	40010400 	.word	0x40010400

08006358 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006360:	4b1f      	ldr	r3, [pc, #124]	; (80063e0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006362:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006366:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d012      	beq.n	800639c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006394:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f00b fbe8 	bl	8011b6c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d012      	beq.n	80063d0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80063c8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8dc 	bl	8006588 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40010400 	.word	0x40010400

080063e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063fa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80063fc:	f7fa fe42 	bl	8001084 <HAL_GetTick>
 8006400:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006402:	e009      	b.n	8006418 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006404:	f7fa fe3e 	bl	8001084 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006412:	d901      	bls.n	8006418 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e007      	b.n	8006428 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0ee      	beq.n	8006404 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d120      	bne.n	800648c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006452:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006454:	f7fa fe16 	bl	8001084 <HAL_GetTick>
 8006458:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800645a:	e00d      	b.n	8006478 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800645c:	f7fa fe12 	bl	8001084 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646a:	d905      	bls.n	8006478 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2203      	movs	r2, #3
 8006474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <RTC_EnterInitMode+0x5c>
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d1e7      	bne.n	800645c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80064a4:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <RTC_ExitInitMode+0x78>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <RTC_ExitInitMode+0x78>)
 80064aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80064b0:	4b17      	ldr	r3, [pc, #92]	; (8006510 <RTC_ExitInitMode+0x78>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10c      	bne.n	80064d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ff91 	bl	80063e4 <HAL_RTC_WaitForSynchro>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01e      	beq.n	8006506 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2203      	movs	r2, #3
 80064cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	73fb      	strb	r3, [r7, #15]
 80064d4:	e017      	b.n	8006506 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064d6:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <RTC_ExitInitMode+0x78>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <RTC_ExitInitMode+0x78>)
 80064dc:	f023 0320 	bic.w	r3, r3, #32
 80064e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ff7e 	bl	80063e4 <HAL_RTC_WaitForSynchro>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064fa:	4b05      	ldr	r3, [pc, #20]	; (8006510 <RTC_ExitInitMode+0x78>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <RTC_ExitInitMode+0x78>)
 8006500:	f043 0320 	orr.w	r3, r3, #32
 8006504:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40002800 	.word	0x40002800

08006514 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006526:	e005      	b.n	8006534 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	3b0a      	subs	r3, #10
 8006532:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	2b09      	cmp	r3, #9
 8006538:	d8f6      	bhi.n	8006528 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	b2da      	uxtb	r2, r3
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	4313      	orrs	r3, r2
 8006546:	b2db      	uxtb	r3, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	0092      	lsls	r2, r2, #2
 8006568:	4413      	add	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	b2da      	uxtb	r2, r3
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	4413      	add	r3, r2
 800657a:	b2db      	uxtb	r3, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e0be      	b.n	800672c <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a60      	ldr	r2, [pc, #384]	; (8006734 <HAL_TIM_Base_Init+0x198>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d036      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c0:	d031      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5c      	ldr	r2, [pc, #368]	; (8006738 <HAL_TIM_Base_Init+0x19c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d02c      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a5a      	ldr	r2, [pc, #360]	; (800673c <HAL_TIM_Base_Init+0x1a0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d027      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a59      	ldr	r2, [pc, #356]	; (8006740 <HAL_TIM_Base_Init+0x1a4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d022      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a57      	ldr	r2, [pc, #348]	; (8006744 <HAL_TIM_Base_Init+0x1a8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d01d      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a56      	ldr	r2, [pc, #344]	; (8006748 <HAL_TIM_Base_Init+0x1ac>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d018      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a54      	ldr	r2, [pc, #336]	; (800674c <HAL_TIM_Base_Init+0x1b0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a53      	ldr	r2, [pc, #332]	; (8006750 <HAL_TIM_Base_Init+0x1b4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00e      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a51      	ldr	r2, [pc, #324]	; (8006754 <HAL_TIM_Base_Init+0x1b8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a50      	ldr	r2, [pc, #320]	; (8006758 <HAL_TIM_Base_Init+0x1bc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d004      	beq.n	8006626 <HAL_TIM_Base_Init+0x8a>
 800661c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006620:	484e      	ldr	r0, [pc, #312]	; (800675c <HAL_TIM_Base_Init+0x1c0>)
 8006622:	f00c f808 	bl	8012636 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d014      	beq.n	8006658 <HAL_TIM_Base_Init+0xbc>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b10      	cmp	r3, #16
 8006634:	d010      	beq.n	8006658 <HAL_TIM_Base_Init+0xbc>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b20      	cmp	r3, #32
 800663c:	d00c      	beq.n	8006658 <HAL_TIM_Base_Init+0xbc>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d008      	beq.n	8006658 <HAL_TIM_Base_Init+0xbc>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b60      	cmp	r3, #96	; 0x60
 800664c:	d004      	beq.n	8006658 <HAL_TIM_Base_Init+0xbc>
 800664e:	f240 1117 	movw	r1, #279	; 0x117
 8006652:	4842      	ldr	r0, [pc, #264]	; (800675c <HAL_TIM_Base_Init+0x1c0>)
 8006654:	f00b ffef 	bl	8012636 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <HAL_TIM_Base_Init+0xe2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006668:	d009      	beq.n	800667e <HAL_TIM_Base_Init+0xe2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006672:	d004      	beq.n	800667e <HAL_TIM_Base_Init+0xe2>
 8006674:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006678:	4838      	ldr	r0, [pc, #224]	; (800675c <HAL_TIM_Base_Init+0x1c0>)
 800667a:	f00b ffdc 	bl	8012636 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_TIM_Base_Init+0xfc>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b80      	cmp	r3, #128	; 0x80
 800668c:	d004      	beq.n	8006698 <HAL_TIM_Base_Init+0xfc>
 800668e:	f240 1119 	movw	r1, #281	; 0x119
 8006692:	4832      	ldr	r0, [pc, #200]	; (800675c <HAL_TIM_Base_Init+0x1c0>)
 8006694:	f00b ffcf 	bl	8012636 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f857 	bl	8006760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 fa51 	bl	8006b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40000400 	.word	0x40000400
 800673c:	40000800 	.word	0x40000800
 8006740:	40000c00 	.word	0x40000c00
 8006744:	40001000 	.word	0x40001000
 8006748:	40001400 	.word	0x40001400
 800674c:	40013400 	.word	0x40013400
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800
 800675c:	0801aa00 	.word	0x0801aa00

08006760 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a4a      	ldr	r2, [pc, #296]	; (80068ac <HAL_TIM_Base_Start_IT+0x138>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d036      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d031      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a46      	ldr	r2, [pc, #280]	; (80068b0 <HAL_TIM_Base_Start_IT+0x13c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02c      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a45      	ldr	r2, [pc, #276]	; (80068b4 <HAL_TIM_Base_Start_IT+0x140>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d027      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a43      	ldr	r2, [pc, #268]	; (80068b8 <HAL_TIM_Base_Start_IT+0x144>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d022      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a42      	ldr	r2, [pc, #264]	; (80068bc <HAL_TIM_Base_Start_IT+0x148>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d01d      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a40      	ldr	r2, [pc, #256]	; (80068c0 <HAL_TIM_Base_Start_IT+0x14c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d018      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a3f      	ldr	r2, [pc, #252]	; (80068c4 <HAL_TIM_Base_Start_IT+0x150>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a3d      	ldr	r2, [pc, #244]	; (80068c8 <HAL_TIM_Base_Start_IT+0x154>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00e      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <HAL_TIM_Base_Start_IT+0x158>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d009      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <HAL_TIM_Base_Start_IT+0x15c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067ea:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80067ee:	4839      	ldr	r0, [pc, #228]	; (80068d4 <HAL_TIM_Base_Start_IT+0x160>)
 80067f0:	f00b ff21 	bl	8012636 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d001      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e04f      	b.n	80068a4 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a22      	ldr	r2, [pc, #136]	; (80068ac <HAL_TIM_Base_Start_IT+0x138>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01d      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0xee>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d018      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0xee>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_TIM_Base_Start_IT+0x13c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0xee>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_TIM_Base_Start_IT+0x140>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0xee>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <HAL_TIM_Base_Start_IT+0x144>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0xee>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1c      	ldr	r2, [pc, #112]	; (80068c4 <HAL_TIM_Base_Start_IT+0x150>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_TIM_Base_Start_IT+0xee>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1a      	ldr	r2, [pc, #104]	; (80068c8 <HAL_TIM_Base_Start_IT+0x154>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d115      	bne.n	800688e <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <HAL_TIM_Base_Start_IT+0x164>)
 800686a:	4013      	ands	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b06      	cmp	r3, #6
 8006872:	d015      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x12c>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687a:	d011      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	e008      	b.n	80068a0 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e000      	b.n	80068a2 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40001000 	.word	0x40001000
 80068c0:	40001400 	.word	0x40001400
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40014400 	.word	0x40014400
 80068d0:	40014800 	.word	0x40014800
 80068d4:	0801aa00 	.word	0x0801aa00
 80068d8:	00010007 	.word	0x00010007

080068dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d122      	bne.n	8006938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d11b      	bne.n	8006938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0202 	mvn.w	r2, #2
 8006908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f905 	bl	8006b2e <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f8f7 	bl	8006b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f908 	bl	8006b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b04      	cmp	r3, #4
 8006944:	d122      	bne.n	800698c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b04      	cmp	r3, #4
 8006952:	d11b      	bne.n	800698c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0204 	mvn.w	r2, #4
 800695c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f8db 	bl	8006b2e <HAL_TIM_IC_CaptureCallback>
 8006978:	e005      	b.n	8006986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f8cd 	bl	8006b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8de 	bl	8006b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b08      	cmp	r3, #8
 8006998:	d122      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d11b      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0208 	mvn.w	r2, #8
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2204      	movs	r2, #4
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8b1 	bl	8006b2e <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8a3 	bl	8006b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8b4 	bl	8006b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b10      	cmp	r3, #16
 80069ec:	d122      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d11b      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0210 	mvn.w	r2, #16
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f887 	bl	8006b2e <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f879 	bl	8006b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f88a 	bl	8006b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d10e      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0201 	mvn.w	r2, #1
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f00b fdd6 	bl	801260c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b80      	cmp	r3, #128	; 0x80
 8006a6c:	d10e      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a78:	2b80      	cmp	r3, #128	; 0x80
 8006a7a:	d107      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f914 	bl	8006cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9a:	d10e      	bne.n	8006aba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d107      	bne.n	8006aba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f907 	bl	8006cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b40      	cmp	r3, #64	; 0x40
 8006ac6:	d10e      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d107      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f838 	bl	8006b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d10e      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d107      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f06f 0220 	mvn.w	r2, #32
 8006b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f8c7 	bl	8006ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a40      	ldr	r2, [pc, #256]	; (8006c80 <TIM_Base_SetConfig+0x114>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8a:	d00f      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3d      	ldr	r2, [pc, #244]	; (8006c84 <TIM_Base_SetConfig+0x118>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00b      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <TIM_Base_SetConfig+0x11c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3b      	ldr	r2, [pc, #236]	; (8006c8c <TIM_Base_SetConfig+0x120>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3a      	ldr	r2, [pc, #232]	; (8006c90 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2f      	ldr	r2, [pc, #188]	; (8006c80 <TIM_Base_SetConfig+0x114>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01f      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d01b      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2c      	ldr	r2, [pc, #176]	; (8006c84 <TIM_Base_SetConfig+0x118>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d017      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2b      	ldr	r2, [pc, #172]	; (8006c88 <TIM_Base_SetConfig+0x11c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2a      	ldr	r2, [pc, #168]	; (8006c8c <TIM_Base_SetConfig+0x120>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00f      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <TIM_Base_SetConfig+0x124>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00b      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <TIM_Base_SetConfig+0x128>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d007      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a27      	ldr	r2, [pc, #156]	; (8006c98 <TIM_Base_SetConfig+0x12c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <TIM_Base_SetConfig+0x9a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a26      	ldr	r2, [pc, #152]	; (8006c9c <TIM_Base_SetConfig+0x130>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d108      	bne.n	8006c18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a10      	ldr	r2, [pc, #64]	; (8006c80 <TIM_Base_SetConfig+0x114>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00f      	beq.n	8006c64 <TIM_Base_SetConfig+0xf8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <TIM_Base_SetConfig+0x124>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <TIM_Base_SetConfig+0xf8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <TIM_Base_SetConfig+0x128>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d007      	beq.n	8006c64 <TIM_Base_SetConfig+0xf8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a10      	ldr	r2, [pc, #64]	; (8006c98 <TIM_Base_SetConfig+0x12c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_Base_SetConfig+0xf8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a0f      	ldr	r2, [pc, #60]	; (8006c9c <TIM_Base_SetConfig+0x130>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d103      	bne.n	8006c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	615a      	str	r2, [r3, #20]
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40000800 	.word	0x40000800
 8006c8c:	40000c00 	.word	0x40000c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e08b      	b.n	8006e06 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d023      	beq.n	8006d3e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a45      	ldr	r2, [pc, #276]	; (8006e10 <HAL_UART_Init+0x134>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d041      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a43      	ldr	r2, [pc, #268]	; (8006e14 <HAL_UART_Init+0x138>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d03c      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a42      	ldr	r2, [pc, #264]	; (8006e18 <HAL_UART_Init+0x13c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d037      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <HAL_UART_Init+0x140>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d032      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a3f      	ldr	r2, [pc, #252]	; (8006e20 <HAL_UART_Init+0x144>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d02d      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a3d      	ldr	r2, [pc, #244]	; (8006e24 <HAL_UART_Init+0x148>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d028      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d32:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006d36:	483c      	ldr	r0, [pc, #240]	; (8006e28 <HAL_UART_Init+0x14c>)
 8006d38:	f00b fc7d 	bl	8012636 <assert_failed>
 8006d3c:	e022      	b.n	8006d84 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a33      	ldr	r2, [pc, #204]	; (8006e10 <HAL_UART_Init+0x134>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d01d      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a31      	ldr	r2, [pc, #196]	; (8006e14 <HAL_UART_Init+0x138>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d018      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a30      	ldr	r2, [pc, #192]	; (8006e18 <HAL_UART_Init+0x13c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2e      	ldr	r2, [pc, #184]	; (8006e1c <HAL_UART_Init+0x140>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00e      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <HAL_UART_Init+0x144>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a2b      	ldr	r2, [pc, #172]	; (8006e24 <HAL_UART_Init+0x148>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_UART_Init+0xa8>
 8006d7a:	f240 1151 	movw	r1, #337	; 0x151
 8006d7e:	482a      	ldr	r0, [pc, #168]	; (8006e28 <HAL_UART_Init+0x14c>)
 8006d80:	f00b fc59 	bl	8012636 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f00b fe37 	bl	8012a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2224      	movs	r2, #36	; 0x24
 8006d9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb91 	bl	80074d8 <UART_SetConfig>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_UART_Init+0xe4>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e022      	b.n	8006e06 <HAL_UART_Init+0x12a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_UART_Init+0xf2>
  {
    UART_AdvFeatureConfig(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 feb3 	bl	8007b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ddc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fff6 	bl	8007df0 <UART_CheckIdleState>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40013800 	.word	0x40013800
 8006e14:	40004400 	.word	0x40004400
 8006e18:	40004800 	.word	0x40004800
 8006e1c:	40004c00 	.word	0x40004c00
 8006e20:	40005000 	.word	0x40005000
 8006e24:	40008000 	.word	0x40008000
 8006e28:	0801aa38 	.word	0x0801aa38

08006e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	f040 8082 	bne.w	8006f4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_UART_Transmit+0x26>
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e07a      	b.n	8006f4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_UART_Transmit+0x38>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e073      	b.n	8006f4c <HAL_UART_Transmit+0x120>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2221      	movs	r2, #33	; 0x21
 8006e78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e7a:	f7fa f903 	bl	8001084 <HAL_GetTick>
 8006e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d108      	bne.n	8006eac <HAL_UART_Transmit+0x80>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	e003      	b.n	8006eb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006ebc:	e02d      	b.n	8006f1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 ffda 	bl	8007e82 <UART_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e039      	b.n	8006f4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	881a      	ldrh	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eea:	b292      	uxth	r2, r2
 8006eec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e008      	b.n	8006f08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	b292      	uxth	r2, r2
 8006f00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3301      	adds	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1cb      	bne.n	8006ebe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2140      	movs	r1, #64	; 0x40
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 ffa6 	bl	8007e82 <UART_WaitOnFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e005      	b.n	8006f4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006f4a:	2302      	movs	r3, #2
  }
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d145      	bne.n	8006ff6 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_UART_Transmit_IT+0x22>
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e03e      	b.n	8006ff8 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Transmit_IT+0x34>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e037      	b.n	8006ff8 <HAL_UART_Transmit_IT+0xa4>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	88fa      	ldrh	r2, [r7, #6]
 8006fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2221      	movs	r2, #33	; 0x21
 8006fb8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	d107      	bne.n	8006fd4 <HAL_UART_Transmit_IT+0x80>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <HAL_UART_Transmit_IT+0xb0>)
 8006fd0:	669a      	str	r2, [r3, #104]	; 0x68
 8006fd2:	e002      	b.n	8006fda <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a0c      	ldr	r2, [pc, #48]	; (8007008 <HAL_UART_Transmit_IT+0xb4>)
 8006fd8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ff0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
  }
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	080082c9 	.word	0x080082c9
 8007008:	08008255 	.word	0x08008255

0800700c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701e:	2b20      	cmp	r3, #32
 8007020:	d131      	bne.n	8007086 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_UART_Receive_DMA+0x22>
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e02a      	b.n	8007088 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_UART_Receive_DMA+0x34>
 800703c:	2302      	movs	r3, #2
 800703e:	e023      	b.n	8007088 <HAL_UART_Receive_DMA+0x7c>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a0f      	ldr	r2, [pc, #60]	; (8007090 <HAL_UART_Receive_DMA+0x84>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007074:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	461a      	mov	r2, r3
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 ff7d 	bl	8007f7c <UART_Start_Receive_DMA>
 8007082:	4603      	mov	r3, r0
 8007084:	e000      	b.n	8007088 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007086:	2302      	movs	r3, #2
  }
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40008000 	.word	0x40008000

08007094 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80070ba:	4013      	ands	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d113      	bne.n	80070ec <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00e      	beq.n	80070ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 81ce 	beq.w	800747e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
      }
      return;
 80070ea:	e1c8      	b.n	800747e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80e3 	beq.w	80072ba <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d105      	bne.n	800710a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4ba6      	ldr	r3, [pc, #664]	; (800739c <HAL_UART_IRQHandler+0x308>)
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80d8 	beq.w	80072ba <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d010      	beq.n	8007136 <HAL_UART_IRQHandler+0xa2>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2201      	movs	r2, #1
 8007124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800712c:	f043 0201 	orr.w	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d010      	beq.n	8007162 <HAL_UART_IRQHandler+0xce>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2202      	movs	r2, #2
 8007150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007158:	f043 0204 	orr.w	r2, r3, #4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <HAL_UART_IRQHandler+0xfa>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2204      	movs	r2, #4
 800717c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007184:	f043 0202 	orr.w	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d015      	beq.n	80071c4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2208      	movs	r2, #8
 80071b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ba:	f043 0208 	orr.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d011      	beq.n	80071f2 <HAL_UART_IRQHandler+0x15e>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00c      	beq.n	80071f2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e8:	f043 0220 	orr.w	r2, r3, #32
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8142 	beq.w	8007482 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007228:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d004      	beq.n	8007242 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800723e:	2b00      	cmp	r3, #0
 8007240:	d031      	beq.n	80072a6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 ff1b 	bl	800807e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b40      	cmp	r3, #64	; 0x40
 8007254:	d123      	bne.n	800729e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007264:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	2b00      	cmp	r3, #0
 800726c:	d013      	beq.n	8007296 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a4b      	ldr	r2, [pc, #300]	; (80073a0 <HAL_UART_IRQHandler+0x30c>)
 8007274:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	4618      	mov	r0, r3
 800727c:	f7fa fac2 	bl	8001804 <HAL_DMA_Abort_IT>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d017      	beq.n	80072b6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	e00f      	b.n	80072b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f00a fc2e 	bl	8011af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	e00b      	b.n	80072b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f00a fc2a 	bl	8011af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	e007      	b.n	80072b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f00a fc26 	bl	8011af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072b4:	e0e5      	b.n	8007482 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b6:	bf00      	nop
    return;
 80072b8:	e0e3      	b.n	8007482 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072be:	2b01      	cmp	r3, #1
 80072c0:	f040 80a9 	bne.w	8007416 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80a3 	beq.w	8007416 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 809d 	beq.w	8007416 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2210      	movs	r2, #16
 80072e2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d158      	bne.n	80073a4 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80072fc:	893b      	ldrh	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80c1 	beq.w	8007486 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800730a:	893a      	ldrh	r2, [r7, #8]
 800730c:	429a      	cmp	r2, r3
 800730e:	f080 80ba 	bcs.w	8007486 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	893a      	ldrh	r2, [r7, #8]
 8007316:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d12a      	bne.n	8007380 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007338:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0201 	bic.w	r2, r2, #1
 8007348:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007358:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0210 	bic.w	r2, r2, #16
 8007374:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	4618      	mov	r0, r3
 800737c:	f7fa fa04 	bl	8001788 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800738c:	b29b      	uxth	r3, r3
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	b29b      	uxth	r3, r3
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f893 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800739a:	e074      	b.n	8007486 <HAL_UART_IRQHandler+0x3f2>
 800739c:	04000120 	.word	0x04000120
 80073a0:	08008229 	.word	0x08008229
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d063      	beq.n	800748a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80073c2:	897b      	ldrh	r3, [r7, #10]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d060      	beq.n	800748a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0201 	bic.w	r2, r2, #1
 80073e6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0210 	bic.w	r2, r2, #16
 8007408:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f856 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007414:	e039      	b.n	800748a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <HAL_UART_IRQHandler+0x3a8>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 ff9e 	bl	8008376 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800743a:	e029      	b.n	8007490 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00d      	beq.n	8007462 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01a      	beq.n	800748e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
    }
    return;
 8007460:	e015      	b.n	800748e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d011      	beq.n	8007490 <HAL_UART_IRQHandler+0x3fc>
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 ff64 	bl	8008344 <UART_EndTransmit_IT>
    return;
 800747c:	e008      	b.n	8007490 <HAL_UART_IRQHandler+0x3fc>
      return;
 800747e:	bf00      	nop
 8007480:	e006      	b.n	8007490 <HAL_UART_IRQHandler+0x3fc>
    return;
 8007482:	bf00      	nop
 8007484:	e004      	b.n	8007490 <HAL_UART_IRQHandler+0x3fc>
      return;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <HAL_UART_IRQHandler+0x3fc>
      return;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_UART_IRQHandler+0x3fc>
    return;
 800748e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop

08007498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d8:	b5b0      	push	{r4, r5, r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	4aa9      	ldr	r2, [pc, #676]	; (8007790 <UART_SetConfig+0x2b8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d904      	bls.n	80074f8 <UART_SetConfig+0x20>
 80074ee:	f640 4145 	movw	r1, #3141	; 0xc45
 80074f2:	48a8      	ldr	r0, [pc, #672]	; (8007794 <UART_SetConfig+0x2bc>)
 80074f4:	f00b f89f 	bl	8012636 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007500:	d00d      	beq.n	800751e <UART_SetConfig+0x46>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <UART_SetConfig+0x46>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007512:	d004      	beq.n	800751e <UART_SetConfig+0x46>
 8007514:	f640 4146 	movw	r1, #3142	; 0xc46
 8007518:	489e      	ldr	r0, [pc, #632]	; (8007794 <UART_SetConfig+0x2bc>)
 800751a:	f00b f88c 	bl	8012636 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a9d      	ldr	r2, [pc, #628]	; (8007798 <UART_SetConfig+0x2c0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d10e      	bne.n	8007546 <UART_SetConfig+0x6e>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d030      	beq.n	8007592 <UART_SetConfig+0xba>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007538:	d02b      	beq.n	8007592 <UART_SetConfig+0xba>
 800753a:	f640 4149 	movw	r1, #3145	; 0xc49
 800753e:	4895      	ldr	r0, [pc, #596]	; (8007794 <UART_SetConfig+0x2bc>)
 8007540:	f00b f879 	bl	8012636 <assert_failed>
 8007544:	e025      	b.n	8007592 <UART_SetConfig+0xba>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754e:	d012      	beq.n	8007576 <UART_SetConfig+0x9e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00e      	beq.n	8007576 <UART_SetConfig+0x9e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007560:	d009      	beq.n	8007576 <UART_SetConfig+0x9e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800756a:	d004      	beq.n	8007576 <UART_SetConfig+0x9e>
 800756c:	f640 414d 	movw	r1, #3149	; 0xc4d
 8007570:	4888      	ldr	r0, [pc, #544]	; (8007794 <UART_SetConfig+0x2bc>)
 8007572:	f00b f860 	bl	8012636 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0xba>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007586:	d004      	beq.n	8007592 <UART_SetConfig+0xba>
 8007588:	f640 414e 	movw	r1, #3150	; 0xc4e
 800758c:	4881      	ldr	r0, [pc, #516]	; (8007794 <UART_SetConfig+0x2bc>)
 800758e:	f00b f852 	bl	8012636 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00e      	beq.n	80075b8 <UART_SetConfig+0xe0>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a2:	d009      	beq.n	80075b8 <UART_SetConfig+0xe0>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075ac:	d004      	beq.n	80075b8 <UART_SetConfig+0xe0>
 80075ae:	f640 4151 	movw	r1, #3153	; 0xc51
 80075b2:	4878      	ldr	r0, [pc, #480]	; (8007794 <UART_SetConfig+0x2bc>)
 80075b4:	f00b f83f 	bl	8012636 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f023 030c 	bic.w	r3, r3, #12
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d103      	bne.n	80075cc <UART_SetConfig+0xf4>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <UART_SetConfig+0xfe>
 80075cc:	f640 4152 	movw	r1, #3154	; 0xc52
 80075d0:	4870      	ldr	r0, [pc, #448]	; (8007794 <UART_SetConfig+0x2bc>)
 80075d2:	f00b f830 	bl	8012636 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <UART_SetConfig+0x12e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d00e      	beq.n	8007606 <UART_SetConfig+0x12e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f0:	d009      	beq.n	8007606 <UART_SetConfig+0x12e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fa:	d004      	beq.n	8007606 <UART_SetConfig+0x12e>
 80075fc:	f640 4153 	movw	r1, #3155	; 0xc53
 8007600:	4864      	ldr	r0, [pc, #400]	; (8007794 <UART_SetConfig+0x2bc>)
 8007602:	f00b f818 	bl	8012636 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <UART_SetConfig+0x14a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007616:	d004      	beq.n	8007622 <UART_SetConfig+0x14a>
 8007618:	f640 4154 	movw	r1, #3156	; 0xc54
 800761c:	485d      	ldr	r0, [pc, #372]	; (8007794 <UART_SetConfig+0x2bc>)
 800761e:	f00b f80a 	bl	8012636 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	4313      	orrs	r3, r2
 8007638:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b56      	ldr	r3, [pc, #344]	; (800779c <UART_SetConfig+0x2c4>)
 8007642:	4013      	ands	r3, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	69f9      	ldr	r1, [r7, #28]
 800764a:	430b      	orrs	r3, r1
 800764c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a4a      	ldr	r2, [pc, #296]	; (8007798 <UART_SetConfig+0x2c0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d004      	beq.n	800767e <UART_SetConfig+0x1a6>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	4313      	orrs	r3, r2
 800767c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a42      	ldr	r2, [pc, #264]	; (80077a0 <UART_SetConfig+0x2c8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d120      	bne.n	80076de <UART_SetConfig+0x206>
 800769c:	4b41      	ldr	r3, [pc, #260]	; (80077a4 <UART_SetConfig+0x2cc>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d816      	bhi.n	80076d8 <UART_SetConfig+0x200>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0x1d8>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	080076c7 	.word	0x080076c7
 80076bc:	080076d3 	.word	0x080076d3
 80076c0:	2301      	movs	r3, #1
 80076c2:	76fb      	strb	r3, [r7, #27]
 80076c4:	e0f8      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80076c6:	2302      	movs	r3, #2
 80076c8:	76fb      	strb	r3, [r7, #27]
 80076ca:	e0f5      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80076cc:	2304      	movs	r3, #4
 80076ce:	76fb      	strb	r3, [r7, #27]
 80076d0:	e0f2      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80076d2:	2308      	movs	r3, #8
 80076d4:	76fb      	strb	r3, [r7, #27]
 80076d6:	e0ef      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80076d8:	2310      	movs	r3, #16
 80076da:	76fb      	strb	r3, [r7, #27]
 80076dc:	e0ec      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a31      	ldr	r2, [pc, #196]	; (80077a8 <UART_SetConfig+0x2d0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d132      	bne.n	800774e <UART_SetConfig+0x276>
 80076e8:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <UART_SetConfig+0x2cc>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	f003 030c 	and.w	r3, r3, #12
 80076f2:	2b0c      	cmp	r3, #12
 80076f4:	d828      	bhi.n	8007748 <UART_SetConfig+0x270>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x224>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007731 	.word	0x08007731
 8007700:	08007749 	.word	0x08007749
 8007704:	08007749 	.word	0x08007749
 8007708:	08007749 	.word	0x08007749
 800770c:	0800773d 	.word	0x0800773d
 8007710:	08007749 	.word	0x08007749
 8007714:	08007749 	.word	0x08007749
 8007718:	08007749 	.word	0x08007749
 800771c:	08007737 	.word	0x08007737
 8007720:	08007749 	.word	0x08007749
 8007724:	08007749 	.word	0x08007749
 8007728:	08007749 	.word	0x08007749
 800772c:	08007743 	.word	0x08007743
 8007730:	2300      	movs	r3, #0
 8007732:	76fb      	strb	r3, [r7, #27]
 8007734:	e0c0      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007736:	2302      	movs	r3, #2
 8007738:	76fb      	strb	r3, [r7, #27]
 800773a:	e0bd      	b.n	80078b8 <UART_SetConfig+0x3e0>
 800773c:	2304      	movs	r3, #4
 800773e:	76fb      	strb	r3, [r7, #27]
 8007740:	e0ba      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007742:	2308      	movs	r3, #8
 8007744:	76fb      	strb	r3, [r7, #27]
 8007746:	e0b7      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007748:	2310      	movs	r3, #16
 800774a:	76fb      	strb	r3, [r7, #27]
 800774c:	e0b4      	b.n	80078b8 <UART_SetConfig+0x3e0>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a16      	ldr	r2, [pc, #88]	; (80077ac <UART_SetConfig+0x2d4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d131      	bne.n	80077bc <UART_SetConfig+0x2e4>
 8007758:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <UART_SetConfig+0x2cc>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007762:	2b30      	cmp	r3, #48	; 0x30
 8007764:	d024      	beq.n	80077b0 <UART_SetConfig+0x2d8>
 8007766:	2b30      	cmp	r3, #48	; 0x30
 8007768:	d825      	bhi.n	80077b6 <UART_SetConfig+0x2de>
 800776a:	2b20      	cmp	r3, #32
 800776c:	d009      	beq.n	8007782 <UART_SetConfig+0x2aa>
 800776e:	2b20      	cmp	r3, #32
 8007770:	d821      	bhi.n	80077b6 <UART_SetConfig+0x2de>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <UART_SetConfig+0x2a4>
 8007776:	2b10      	cmp	r3, #16
 8007778:	d006      	beq.n	8007788 <UART_SetConfig+0x2b0>
 800777a:	e01c      	b.n	80077b6 <UART_SetConfig+0x2de>
 800777c:	2300      	movs	r3, #0
 800777e:	76fb      	strb	r3, [r7, #27]
 8007780:	e09a      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007782:	2302      	movs	r3, #2
 8007784:	76fb      	strb	r3, [r7, #27]
 8007786:	e097      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007788:	2304      	movs	r3, #4
 800778a:	76fb      	strb	r3, [r7, #27]
 800778c:	e094      	b.n	80078b8 <UART_SetConfig+0x3e0>
 800778e:	bf00      	nop
 8007790:	00989680 	.word	0x00989680
 8007794:	0801aa38 	.word	0x0801aa38
 8007798:	40008000 	.word	0x40008000
 800779c:	efff69f3 	.word	0xefff69f3
 80077a0:	40013800 	.word	0x40013800
 80077a4:	40021000 	.word	0x40021000
 80077a8:	40004400 	.word	0x40004400
 80077ac:	40004800 	.word	0x40004800
 80077b0:	2308      	movs	r3, #8
 80077b2:	76fb      	strb	r3, [r7, #27]
 80077b4:	e080      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80077b6:	2310      	movs	r3, #16
 80077b8:	76fb      	strb	r3, [r7, #27]
 80077ba:	e07d      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4aaa      	ldr	r2, [pc, #680]	; (8007a6c <UART_SetConfig+0x594>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d120      	bne.n	8007808 <UART_SetConfig+0x330>
 80077c6:	4baa      	ldr	r3, [pc, #680]	; (8007a70 <UART_SetConfig+0x598>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077d0:	2bc0      	cmp	r3, #192	; 0xc0
 80077d2:	d013      	beq.n	80077fc <UART_SetConfig+0x324>
 80077d4:	2bc0      	cmp	r3, #192	; 0xc0
 80077d6:	d814      	bhi.n	8007802 <UART_SetConfig+0x32a>
 80077d8:	2b80      	cmp	r3, #128	; 0x80
 80077da:	d009      	beq.n	80077f0 <UART_SetConfig+0x318>
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d810      	bhi.n	8007802 <UART_SetConfig+0x32a>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <UART_SetConfig+0x312>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d006      	beq.n	80077f6 <UART_SetConfig+0x31e>
 80077e8:	e00b      	b.n	8007802 <UART_SetConfig+0x32a>
 80077ea:	2300      	movs	r3, #0
 80077ec:	76fb      	strb	r3, [r7, #27]
 80077ee:	e063      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80077f0:	2302      	movs	r3, #2
 80077f2:	76fb      	strb	r3, [r7, #27]
 80077f4:	e060      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80077f6:	2304      	movs	r3, #4
 80077f8:	76fb      	strb	r3, [r7, #27]
 80077fa:	e05d      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80077fc:	2308      	movs	r3, #8
 80077fe:	76fb      	strb	r3, [r7, #27]
 8007800:	e05a      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007802:	2310      	movs	r3, #16
 8007804:	76fb      	strb	r3, [r7, #27]
 8007806:	e057      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a99      	ldr	r2, [pc, #612]	; (8007a74 <UART_SetConfig+0x59c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d125      	bne.n	800785e <UART_SetConfig+0x386>
 8007812:	4b97      	ldr	r3, [pc, #604]	; (8007a70 <UART_SetConfig+0x598>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007820:	d017      	beq.n	8007852 <UART_SetConfig+0x37a>
 8007822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007826:	d817      	bhi.n	8007858 <UART_SetConfig+0x380>
 8007828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782c:	d00b      	beq.n	8007846 <UART_SetConfig+0x36e>
 800782e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007832:	d811      	bhi.n	8007858 <UART_SetConfig+0x380>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <UART_SetConfig+0x368>
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d006      	beq.n	800784c <UART_SetConfig+0x374>
 800783e:	e00b      	b.n	8007858 <UART_SetConfig+0x380>
 8007840:	2300      	movs	r3, #0
 8007842:	76fb      	strb	r3, [r7, #27]
 8007844:	e038      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007846:	2302      	movs	r3, #2
 8007848:	76fb      	strb	r3, [r7, #27]
 800784a:	e035      	b.n	80078b8 <UART_SetConfig+0x3e0>
 800784c:	2304      	movs	r3, #4
 800784e:	76fb      	strb	r3, [r7, #27]
 8007850:	e032      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007852:	2308      	movs	r3, #8
 8007854:	76fb      	strb	r3, [r7, #27]
 8007856:	e02f      	b.n	80078b8 <UART_SetConfig+0x3e0>
 8007858:	2310      	movs	r3, #16
 800785a:	76fb      	strb	r3, [r7, #27]
 800785c:	e02c      	b.n	80078b8 <UART_SetConfig+0x3e0>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a85      	ldr	r2, [pc, #532]	; (8007a78 <UART_SetConfig+0x5a0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d125      	bne.n	80078b4 <UART_SetConfig+0x3dc>
 8007868:	4b81      	ldr	r3, [pc, #516]	; (8007a70 <UART_SetConfig+0x598>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007876:	d017      	beq.n	80078a8 <UART_SetConfig+0x3d0>
 8007878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800787c:	d817      	bhi.n	80078ae <UART_SetConfig+0x3d6>
 800787e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007882:	d00b      	beq.n	800789c <UART_SetConfig+0x3c4>
 8007884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007888:	d811      	bhi.n	80078ae <UART_SetConfig+0x3d6>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <UART_SetConfig+0x3be>
 800788e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007892:	d006      	beq.n	80078a2 <UART_SetConfig+0x3ca>
 8007894:	e00b      	b.n	80078ae <UART_SetConfig+0x3d6>
 8007896:	2300      	movs	r3, #0
 8007898:	76fb      	strb	r3, [r7, #27]
 800789a:	e00d      	b.n	80078b8 <UART_SetConfig+0x3e0>
 800789c:	2302      	movs	r3, #2
 800789e:	76fb      	strb	r3, [r7, #27]
 80078a0:	e00a      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80078a2:	2304      	movs	r3, #4
 80078a4:	76fb      	strb	r3, [r7, #27]
 80078a6:	e007      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80078a8:	2308      	movs	r3, #8
 80078aa:	76fb      	strb	r3, [r7, #27]
 80078ac:	e004      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80078ae:	2310      	movs	r3, #16
 80078b0:	76fb      	strb	r3, [r7, #27]
 80078b2:	e001      	b.n	80078b8 <UART_SetConfig+0x3e0>
 80078b4:	2310      	movs	r3, #16
 80078b6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6e      	ldr	r2, [pc, #440]	; (8007a78 <UART_SetConfig+0x5a0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d173      	bne.n	80079aa <UART_SetConfig+0x4d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c2:	7efb      	ldrb	r3, [r7, #27]
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d824      	bhi.n	8007912 <UART_SetConfig+0x43a>
 80078c8:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <UART_SetConfig+0x3f8>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078f5 	.word	0x080078f5
 80078d4:	08007913 	.word	0x08007913
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007913 	.word	0x08007913
 80078e0:	08007903 	.word	0x08007903
 80078e4:	08007913 	.word	0x08007913
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007913 	.word	0x08007913
 80078f0:	0800790b 	.word	0x0800790b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f4:	f7fc fd90 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80078f8:	6178      	str	r0, [r7, #20]
        break;
 80078fa:	e00f      	b.n	800791c <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078fc:	4b5f      	ldr	r3, [pc, #380]	; (8007a7c <UART_SetConfig+0x5a4>)
 80078fe:	617b      	str	r3, [r7, #20]
        break;
 8007900:	e00c      	b.n	800791c <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007902:	f7fc fcf1 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8007906:	6178      	str	r0, [r7, #20]
        break;
 8007908:	e008      	b.n	800791c <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800790e:	617b      	str	r3, [r7, #20]
        break;
 8007910:	e004      	b.n	800791c <UART_SetConfig+0x444>
      default:
        pclk = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	76bb      	strb	r3, [r7, #26]
        break;
 800791a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80fa 	beq.w	8007b18 <UART_SetConfig+0x640>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	4413      	add	r3, r2
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	429a      	cmp	r2, r3
 8007932:	d305      	bcc.n	8007940 <UART_SetConfig+0x468>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	429a      	cmp	r2, r3
 800793e:	d902      	bls.n	8007946 <UART_SetConfig+0x46e>
      {
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	76bb      	strb	r3, [r7, #26]
 8007944:	e0e8      	b.n	8007b18 <UART_SetConfig+0x640>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	4618      	mov	r0, r3
 800794a:	f04f 0100 	mov.w	r1, #0
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	020b      	lsls	r3, r1, #8
 8007958:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800795c:	0202      	lsls	r2, r0, #8
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	6849      	ldr	r1, [r1, #4]
 8007962:	0849      	lsrs	r1, r1, #1
 8007964:	4608      	mov	r0, r1
 8007966:	f04f 0100 	mov.w	r1, #0
 800796a:	1814      	adds	r4, r2, r0
 800796c:	eb43 0501 	adc.w	r5, r3, r1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	461a      	mov	r2, r3
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	4620      	mov	r0, r4
 800797c:	4629      	mov	r1, r5
 800797e:	f7f9 f9a3 	bl	8000cc8 <__aeabi_uldivmod>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4613      	mov	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007990:	d308      	bcc.n	80079a4 <UART_SetConfig+0x4cc>
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007998:	d204      	bcs.n	80079a4 <UART_SetConfig+0x4cc>
        {
          huart->Instance->BRR = usartdiv;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	e0b9      	b.n	8007b18 <UART_SetConfig+0x640>
        }
        else
        {
          ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	76bb      	strb	r3, [r7, #26]
 80079a8:	e0b6      	b.n	8007b18 <UART_SetConfig+0x640>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b2:	d165      	bne.n	8007a80 <UART_SetConfig+0x5a8>
  {
    switch (clocksource)
 80079b4:	7efb      	ldrb	r3, [r7, #27]
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d827      	bhi.n	8007a0a <UART_SetConfig+0x532>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UART_SetConfig+0x4e8>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	08007a0b 	.word	0x08007a0b
 80079d8:	08007a0b 	.word	0x08007a0b
 80079dc:	08007a0b 	.word	0x08007a0b
 80079e0:	08007a03 	.word	0x08007a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fc fd18 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80079e8:	6178      	str	r0, [r7, #20]
        break;
 80079ea:	e013      	b.n	8007a14 <UART_SetConfig+0x53c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ec:	f7fc fd2a 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80079f0:	6178      	str	r0, [r7, #20]
        break;
 80079f2:	e00f      	b.n	8007a14 <UART_SetConfig+0x53c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b21      	ldr	r3, [pc, #132]	; (8007a7c <UART_SetConfig+0x5a4>)
 80079f6:	617b      	str	r3, [r7, #20]
        break;
 80079f8:	e00c      	b.n	8007a14 <UART_SetConfig+0x53c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fa:	f7fc fc75 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80079fe:	6178      	str	r0, [r7, #20]
        break;
 8007a00:	e008      	b.n	8007a14 <UART_SetConfig+0x53c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a06:	617b      	str	r3, [r7, #20]
        break;
 8007a08:	e004      	b.n	8007a14 <UART_SetConfig+0x53c>
      default:
        pclk = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	76bb      	strb	r3, [r7, #26]
        break;
 8007a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d07e      	beq.n	8007b18 <UART_SetConfig+0x640>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	005a      	lsls	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d916      	bls.n	8007a66 <UART_SetConfig+0x58e>
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3e:	d212      	bcs.n	8007a66 <UART_SetConfig+0x58e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f023 030f 	bic.w	r3, r3, #15
 8007a48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	89fb      	ldrh	r3, [r7, #14]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	89fa      	ldrh	r2, [r7, #14]
 8007a62:	60da      	str	r2, [r3, #12]
 8007a64:	e058      	b.n	8007b18 <UART_SetConfig+0x640>
      }
      else
      {
        ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	76bb      	strb	r3, [r7, #26]
 8007a6a:	e055      	b.n	8007b18 <UART_SetConfig+0x640>
 8007a6c:	40004c00 	.word	0x40004c00
 8007a70:	40021000 	.word	0x40021000
 8007a74:	40005000 	.word	0x40005000
 8007a78:	40008000 	.word	0x40008000
 8007a7c:	00f42400 	.word	0x00f42400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a80:	7efb      	ldrb	r3, [r7, #27]
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d827      	bhi.n	8007ad6 <UART_SetConfig+0x5fe>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <UART_SetConfig+0x5b4>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	08007ad7 	.word	0x08007ad7
 8007a9c:	08007ac7 	.word	0x08007ac7
 8007aa0:	08007ad7 	.word	0x08007ad7
 8007aa4:	08007ad7 	.word	0x08007ad7
 8007aa8:	08007ad7 	.word	0x08007ad7
 8007aac:	08007acf 	.word	0x08007acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f7fc fcb2 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8007ab4:	6178      	str	r0, [r7, #20]
        break;
 8007ab6:	e013      	b.n	8007ae0 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ab8:	f7fc fcc4 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 8007abc:	6178      	str	r0, [r7, #20]
        break;
 8007abe:	e00f      	b.n	8007ae0 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac0:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <UART_SetConfig+0x658>)
 8007ac2:	617b      	str	r3, [r7, #20]
        break;
 8007ac4:	e00c      	b.n	8007ae0 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ac6:	f7fc fc0f 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8007aca:	6178      	str	r0, [r7, #20]
        break;
 8007acc:	e008      	b.n	8007ae0 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad2:	617b      	str	r3, [r7, #20]
        break;
 8007ad4:	e004      	b.n	8007ae0 <UART_SetConfig+0x608>
      default:
        pclk = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	76bb      	strb	r3, [r7, #26]
        break;
 8007ade:	bf00      	nop
    }

    if (pclk != 0U)
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d018      	beq.n	8007b18 <UART_SetConfig+0x640>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085a      	lsrs	r2, r3, #1
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	441a      	add	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d908      	bls.n	8007b14 <UART_SetConfig+0x63c>
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d204      	bcs.n	8007b14 <UART_SetConfig+0x63c>
      {
        huart->Instance->BRR = usartdiv;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	60da      	str	r2, [r3, #12]
 8007b12:	e001      	b.n	8007b18 <UART_SetConfig+0x640>
      }
      else
      {
        ret = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b24:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	00f42400 	.word	0x00f42400

08007b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2bff      	cmp	r3, #255	; 0xff
 8007b42:	d904      	bls.n	8007b4e <UART_AdvFeatureConfig+0x1a>
 8007b44:	f640 513a 	movw	r1, #3386	; 0xd3a
 8007b48:	489b      	ldr	r0, [pc, #620]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007b4a:	f00a fd74 	bl	8012636 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d018      	beq.n	8007b8c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <UART_AdvFeatureConfig+0x42>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6a:	d004      	beq.n	8007b76 <UART_AdvFeatureConfig+0x42>
 8007b6c:	f640 513f 	movw	r1, #3391	; 0xd3f
 8007b70:	4891      	ldr	r0, [pc, #580]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007b72:	f00a fd60 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d018      	beq.n	8007bca <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x80>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba8:	d004      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x80>
 8007baa:	f640 5146 	movw	r1, #3398	; 0xd46
 8007bae:	4882      	ldr	r0, [pc, #520]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007bb0:	f00a fd41 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d018      	beq.n	8007c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <UART_AdvFeatureConfig+0xbe>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be6:	d004      	beq.n	8007bf2 <UART_AdvFeatureConfig+0xbe>
 8007be8:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007bec:	4872      	ldr	r0, [pc, #456]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007bee:	f00a fd22 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d018      	beq.n	8007c46 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <UART_AdvFeatureConfig+0xfc>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c24:	d004      	beq.n	8007c30 <UART_AdvFeatureConfig+0xfc>
 8007c26:	f640 5154 	movw	r1, #3412	; 0xd54
 8007c2a:	4863      	ldr	r0, [pc, #396]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007c2c:	f00a fd03 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d018      	beq.n	8007c84 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <UART_AdvFeatureConfig+0x13a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c62:	d004      	beq.n	8007c6e <UART_AdvFeatureConfig+0x13a>
 8007c64:	f640 515b 	movw	r1, #3419	; 0xd5b
 8007c68:	4853      	ldr	r0, [pc, #332]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007c6a:	f00a fce4 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d018      	beq.n	8007cc2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <UART_AdvFeatureConfig+0x178>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca0:	d004      	beq.n	8007cac <UART_AdvFeatureConfig+0x178>
 8007ca2:	f640 5162 	movw	r1, #3426	; 0xd62
 8007ca6:	4844      	ldr	r0, [pc, #272]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007ca8:	f00a fcc5 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d05e      	beq.n	8007d8c <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a3a      	ldr	r2, [pc, #232]	; (8007dbc <UART_AdvFeatureConfig+0x288>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d018      	beq.n	8007d0a <UART_AdvFeatureConfig+0x1d6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a38      	ldr	r2, [pc, #224]	; (8007dc0 <UART_AdvFeatureConfig+0x28c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <UART_AdvFeatureConfig+0x1d6>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a37      	ldr	r2, [pc, #220]	; (8007dc4 <UART_AdvFeatureConfig+0x290>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00e      	beq.n	8007d0a <UART_AdvFeatureConfig+0x1d6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a35      	ldr	r2, [pc, #212]	; (8007dc8 <UART_AdvFeatureConfig+0x294>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d009      	beq.n	8007d0a <UART_AdvFeatureConfig+0x1d6>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <UART_AdvFeatureConfig+0x298>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <UART_AdvFeatureConfig+0x1d6>
 8007d00:	f640 5169 	movw	r1, #3433	; 0xd69
 8007d04:	482c      	ldr	r0, [pc, #176]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007d06:	f00a fc96 	bl	8012636 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <UART_AdvFeatureConfig+0x1f2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1a:	d004      	beq.n	8007d26 <UART_AdvFeatureConfig+0x1f2>
 8007d1c:	f640 516a 	movw	r1, #3434	; 0xd6a
 8007d20:	4825      	ldr	r0, [pc, #148]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007d22:	f00a fc88 	bl	8012636 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d44:	d122      	bne.n	8007d8c <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d013      	beq.n	8007d76 <UART_AdvFeatureConfig+0x242>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d56:	d00e      	beq.n	8007d76 <UART_AdvFeatureConfig+0x242>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d60:	d009      	beq.n	8007d76 <UART_AdvFeatureConfig+0x242>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d6a:	d004      	beq.n	8007d76 <UART_AdvFeatureConfig+0x242>
 8007d6c:	f640 516f 	movw	r1, #3439	; 0xd6f
 8007d70:	4811      	ldr	r0, [pc, #68]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007d72:	f00a fc60 	bl	8012636 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d026      	beq.n	8007de6 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x29c>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007da8:	d012      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x29c>
 8007daa:	f640 5177 	movw	r1, #3447	; 0xd77
 8007dae:	4802      	ldr	r0, [pc, #8]	; (8007db8 <UART_AdvFeatureConfig+0x284>)
 8007db0:	f00a fc41 	bl	8012636 <assert_failed>
 8007db4:	e00c      	b.n	8007dd0 <UART_AdvFeatureConfig+0x29c>
 8007db6:	bf00      	nop
 8007db8:	0801aa38 	.word	0x0801aa38
 8007dbc:	40013800 	.word	0x40013800
 8007dc0:	40004400 	.word	0x40004400
 8007dc4:	40004800 	.word	0x40004800
 8007dc8:	40004c00 	.word	0x40004c00
 8007dcc:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  }
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e00:	f7f9 f940 	bl	8001084 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d10e      	bne.n	8007e32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f82d 	bl	8007e82 <UART_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e023      	b.n	8007e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d10e      	bne.n	8007e5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f817 	bl	8007e82 <UART_WaitOnFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e00d      	b.n	8007e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	603b      	str	r3, [r7, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e92:	e05e      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e9a:	d05a      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9c:	f7f9 f8f2 	bl	8001084 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d11b      	bne.n	8007eea <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ec0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e043      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02c      	beq.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f06:	d124      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f10:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f20:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0201 	bic.w	r2, r2, #1
 8007f30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2220      	movs	r2, #32
 8007f36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e00f      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	bf0c      	ite	eq
 8007f62:	2301      	moveq	r3, #1
 8007f64:	2300      	movne	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d091      	beq.n	8007e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	88fa      	ldrh	r2, [r7, #6]
 8007f94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2222      	movs	r2, #34	; 0x22
 8007fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d02b      	beq.n	8008006 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	4a25      	ldr	r2, [pc, #148]	; (8008048 <UART_Start_Receive_DMA+0xcc>)
 8007fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	4a24      	ldr	r2, [pc, #144]	; (800804c <UART_Start_Receive_DMA+0xd0>)
 8007fbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a23      	ldr	r2, [pc, #140]	; (8008050 <UART_Start_Receive_DMA+0xd4>)
 8007fc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	2200      	movs	r2, #0
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3324      	adds	r3, #36	; 0x24
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	461a      	mov	r2, r3
 8007fe0:	88fb      	ldrh	r3, [r7, #6]
 8007fe2:	f7f9 fb63 	bl	80016ac <HAL_DMA_Start_IT>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00c      	beq.n	8008006 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e01c      	b.n	8008040 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800801c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0201 	orr.w	r2, r2, #1
 800802c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800803c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	080080dd 	.word	0x080080dd
 800804c:	08008175 	.word	0x08008175
 8008050:	080081ad 	.word	0x080081ad

08008054 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800806a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008094:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0201 	bic.w	r2, r2, #1
 80080a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d107      	bne.n	80080be <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0210 	bic.w	r2, r2, #16
 80080bc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d12a      	bne.n	800814e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800810e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0201 	bic.w	r2, r2, #1
 800811e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800812e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813a:	2b01      	cmp	r3, #1
 800813c:	d107      	bne.n	800814e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0210 	bic.w	r2, r2, #16
 800814c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008152:	2b01      	cmp	r3, #1
 8008154:	d107      	bne.n	8008166 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800815c:	4619      	mov	r1, r3
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff f9ae 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008164:	e002      	b.n	800816c <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f009 fc96 	bl	8011a98 <HAL_UART_RxCpltCallback>
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008186:	2b01      	cmp	r3, #1
 8008188:	d109      	bne.n	800819e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff f992 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800819c:	e002      	b.n	80081a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff f984 	bl	80074ac <HAL_UART_RxHalfCpltCallback>
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d0:	2b80      	cmp	r3, #128	; 0x80
 80081d2:	d109      	bne.n	80081e8 <UART_DMAError+0x3c>
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b21      	cmp	r3, #33	; 0x21
 80081d8:	d106      	bne.n	80081e8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80081e2:	6978      	ldr	r0, [r7, #20]
 80081e4:	f7ff ff36 	bl	8008054 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d109      	bne.n	800820a <UART_DMAError+0x5e>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b22      	cmp	r3, #34	; 0x22
 80081fa:	d106      	bne.n	800820a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008204:	6978      	ldr	r0, [r7, #20]
 8008206:	f7ff ff3a 	bl	800807e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008210:	f043 0210 	orr.w	r2, r3, #16
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f009 fc6c 	bl	8011af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008220:	bf00      	nop
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f009 fc56 	bl	8011af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008260:	2b21      	cmp	r3, #33	; 0x21
 8008262:	d12b      	bne.n	80082bc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800826a:	b29b      	uxth	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d110      	bne.n	8008292 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800827e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800828e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008290:	e014      	b.n	80082bc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	781a      	ldrb	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	b292      	uxth	r2, r2
 800829e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d4:	2b21      	cmp	r3, #33	; 0x21
 80082d6:	d12f      	bne.n	8008338 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d110      	bne.n	8008306 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008302:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008304:	e018      	b.n	8008338 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	881a      	ldrh	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008318:	b292      	uxth	r2, r2
 800831a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008320:	1c9a      	adds	r2, r3, #2
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800832c:	b29b      	uxth	r3, r3
 800832e:	3b01      	subs	r3, #1
 8008330:	b29a      	uxth	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff f895 	bl	8007498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <__NVIC_SetPriority>:
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839c:	2b00      	cmp	r3, #0
 800839e:	db0a      	blt.n	80083b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	490c      	ldr	r1, [pc, #48]	; (80083d8 <__NVIC_SetPriority+0x4c>)
 80083a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083aa:	0112      	lsls	r2, r2, #4
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	440b      	add	r3, r1
 80083b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083b4:	e00a      	b.n	80083cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	4908      	ldr	r1, [pc, #32]	; (80083dc <__NVIC_SetPriority+0x50>)
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	3b04      	subs	r3, #4
 80083c4:	0112      	lsls	r2, r2, #4
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	440b      	add	r3, r1
 80083ca:	761a      	strb	r2, [r3, #24]
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	e000e100 	.word	0xe000e100
 80083dc:	e000ed00 	.word	0xe000ed00

080083e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083e4:	4b05      	ldr	r3, [pc, #20]	; (80083fc <SysTick_Handler+0x1c>)
 80083e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083e8:	f002 fb14 	bl	800aa14 <xTaskGetSchedulerState>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d001      	beq.n	80083f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083f2:	f003 f9f9 	bl	800b7e8 <xPortSysTickHandler>
  }
}
 80083f6:	bf00      	nop
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	e000e010 	.word	0xe000e010

08008400 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008404:	2100      	movs	r1, #0
 8008406:	f06f 0004 	mvn.w	r0, #4
 800840a:	f7ff ffbf 	bl	800838c <__NVIC_SetPriority>
#endif
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800841a:	f3ef 8305 	mrs	r3, IPSR
 800841e:	603b      	str	r3, [r7, #0]
  return(result);
 8008420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008426:	f06f 0305 	mvn.w	r3, #5
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	e00c      	b.n	8008448 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <osKernelInitialize+0x44>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008436:	4b08      	ldr	r3, [pc, #32]	; (8008458 <osKernelInitialize+0x44>)
 8008438:	2201      	movs	r2, #1
 800843a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800843c:	2300      	movs	r3, #0
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	e002      	b.n	8008448 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008448:	687b      	ldr	r3, [r7, #4]
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	200005a4 	.word	0x200005a4

0800845c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008462:	f3ef 8305 	mrs	r3, IPSR
 8008466:	603b      	str	r3, [r7, #0]
  return(result);
 8008468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <osKernelStart+0x1a>
    stat = osErrorISR;
 800846e:	f06f 0305 	mvn.w	r3, #5
 8008472:	607b      	str	r3, [r7, #4]
 8008474:	e010      	b.n	8008498 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <osKernelStart+0x48>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d109      	bne.n	8008492 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800847e:	f7ff ffbf 	bl	8008400 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008482:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <osKernelStart+0x48>)
 8008484:	2202      	movs	r2, #2
 8008486:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008488:	f001 fe6a 	bl	800a160 <vTaskStartScheduler>
      stat = osOK;
 800848c:	2300      	movs	r3, #0
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	e002      	b.n	8008498 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008498:	687b      	ldr	r3, [r7, #4]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200005a4 	.word	0x200005a4

080084a8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	603b      	str	r3, [r7, #0]
  return(result);
 80084b4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80084ba:	f001 ff73 	bl	800a3a4 <xTaskGetTickCountFromISR>
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	e002      	b.n	80084c8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80084c2:	f001 ff5f 	bl	800a384 <xTaskGetTickCount>
 80084c6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80084c8:	687b      	ldr	r3, [r7, #4]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b08e      	sub	sp, #56	; 0x38
 80084d6:	af04      	add	r7, sp, #16
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e2:	f3ef 8305 	mrs	r3, IPSR
 80084e6:	617b      	str	r3, [r7, #20]
  return(result);
 80084e8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d17e      	bne.n	80085ec <osThreadNew+0x11a>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d07b      	beq.n	80085ec <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084f8:	2318      	movs	r3, #24
 80084fa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008504:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d045      	beq.n	8008598 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <osThreadNew+0x48>
        name = attr->name;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <osThreadNew+0x6e>
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b38      	cmp	r3, #56	; 0x38
 8008532:	d805      	bhi.n	8008540 <osThreadNew+0x6e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <osThreadNew+0x72>
        return (NULL);
 8008540:	2300      	movs	r3, #0
 8008542:	e054      	b.n	80085ee <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	089b      	lsrs	r3, r3, #2
 8008552:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00e      	beq.n	800857a <osThreadNew+0xa8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b5b      	cmp	r3, #91	; 0x5b
 8008562:	d90a      	bls.n	800857a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008568:	2b00      	cmp	r3, #0
 800856a:	d006      	beq.n	800857a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <osThreadNew+0xa8>
        mem = 1;
 8008574:	2301      	movs	r3, #1
 8008576:	61bb      	str	r3, [r7, #24]
 8008578:	e010      	b.n	800859c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10c      	bne.n	800859c <osThreadNew+0xca>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d108      	bne.n	800859c <osThreadNew+0xca>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <osThreadNew+0xca>
          mem = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	e001      	b.n	800859c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d110      	bne.n	80085c4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085aa:	9202      	str	r2, [sp, #8]
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6a3a      	ldr	r2, [r7, #32]
 80085b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f001 fbfb 	bl	8009db4 <xTaskCreateStatic>
 80085be:	4603      	mov	r3, r0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e013      	b.n	80085ec <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d110      	bne.n	80085ec <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f107 0310 	add.w	r3, r7, #16
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f001 fc46 	bl	8009e6e <xTaskCreate>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d001      	beq.n	80085ec <osThreadNew+0x11a>
            hTask = NULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085ec:	693b      	ldr	r3, [r7, #16]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3728      	adds	r7, #40	; 0x28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085fe:	f3ef 8305 	mrs	r3, IPSR
 8008602:	60bb      	str	r3, [r7, #8]
  return(result);
 8008604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <osDelay+0x1c>
    stat = osErrorISR;
 800860a:	f06f 0305 	mvn.w	r3, #5
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e007      	b.n	8008622 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <osDelay+0x2c>
      vTaskDelay(ticks);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fd6b 	bl	800a0f8 <vTaskDelay>
    }
  }

  return (stat);
 8008622:	68fb      	ldr	r3, [r7, #12]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b08a      	sub	sp, #40	; 0x28
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800863c:	f3ef 8305 	mrs	r3, IPSR
 8008640:	613b      	str	r3, [r7, #16]
  return(result);
 8008642:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008644:	2b00      	cmp	r3, #0
 8008646:	d175      	bne.n	8008734 <osSemaphoreNew+0x108>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d072      	beq.n	8008734 <osSemaphoreNew+0x108>
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d86e      	bhi.n	8008734 <osSemaphoreNew+0x108>
    mem = -1;
 8008656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800865a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d015      	beq.n	800868e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d006      	beq.n	8008678 <osSemaphoreNew+0x4c>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b4f      	cmp	r3, #79	; 0x4f
 8008670:	d902      	bls.n	8008678 <osSemaphoreNew+0x4c>
        mem = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	e00c      	b.n	8008692 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d108      	bne.n	8008692 <osSemaphoreNew+0x66>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <osSemaphoreNew+0x66>
          mem = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	61bb      	str	r3, [r7, #24]
 800868c:	e001      	b.n	8008692 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008698:	d04c      	beq.n	8008734 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d128      	bne.n	80086f2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10a      	bne.n	80086bc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2203      	movs	r2, #3
 80086ac:	9200      	str	r2, [sp, #0]
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	2001      	movs	r0, #1
 80086b4:	f000 fb9c 	bl	8008df0 <xQueueGenericCreateStatic>
 80086b8:	61f8      	str	r0, [r7, #28]
 80086ba:	e005      	b.n	80086c8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80086bc:	2203      	movs	r2, #3
 80086be:	2100      	movs	r1, #0
 80086c0:	2001      	movs	r0, #1
 80086c2:	f000 fc0d 	bl	8008ee0 <xQueueGenericCreate>
 80086c6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d022      	beq.n	8008714 <osSemaphoreNew+0xe8>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01f      	beq.n	8008714 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086d4:	2300      	movs	r3, #0
 80086d6:	2200      	movs	r2, #0
 80086d8:	2100      	movs	r1, #0
 80086da:	69f8      	ldr	r0, [r7, #28]
 80086dc:	f000 fcc8 	bl	8009070 <xQueueGenericSend>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d016      	beq.n	8008714 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80086e6:	69f8      	ldr	r0, [r7, #28]
 80086e8:	f001 f990 	bl	8009a0c <vQueueDelete>
            hSemaphore = NULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	e010      	b.n	8008714 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d108      	bne.n	800870a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	461a      	mov	r2, r3
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fc4a 	bl	8008f9a <xQueueCreateCountingSemaphoreStatic>
 8008706:	61f8      	str	r0, [r7, #28]
 8008708:	e004      	b.n	8008714 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fc7b 	bl	8009008 <xQueueCreateCountingSemaphore>
 8008712:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00c      	beq.n	8008734 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e001      	b.n	800872c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800872c:	6979      	ldr	r1, [r7, #20]
 800872e:	69f8      	ldr	r0, [r7, #28]
 8008730:	f001 fab8 	bl	8009ca4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008734:	69fb      	ldr	r3, [r7, #28]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008758:	f06f 0303 	mvn.w	r3, #3
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e039      	b.n	80087d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008760:	f3ef 8305 	mrs	r3, IPSR
 8008764:	60fb      	str	r3, [r7, #12]
  return(result);
 8008766:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008768:	2b00      	cmp	r3, #0
 800876a:	d022      	beq.n	80087b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008772:	f06f 0303 	mvn.w	r3, #3
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e02c      	b.n	80087d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800877a:	2300      	movs	r3, #0
 800877c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	461a      	mov	r2, r3
 8008784:	2100      	movs	r1, #0
 8008786:	6938      	ldr	r0, [r7, #16]
 8008788:	f001 f884 	bl	8009894 <xQueueReceiveFromISR>
 800878c:	4603      	mov	r3, r0
 800878e:	2b01      	cmp	r3, #1
 8008790:	d003      	beq.n	800879a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008792:	f06f 0302 	mvn.w	r3, #2
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	e01c      	b.n	80087d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d019      	beq.n	80087d4 <osSemaphoreAcquire+0x94>
 80087a0:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <osSemaphoreAcquire+0xa0>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	e010      	b.n	80087d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6938      	ldr	r0, [r7, #16]
 80087b6:	f000 ff61 	bl	800967c <xQueueSemaphoreTake>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d009      	beq.n	80087d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80087c6:	f06f 0301 	mvn.w	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e002      	b.n	80087d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80087ce:	f06f 0302 	mvn.w	r3, #2
 80087d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80087d4:	697b      	ldr	r3, [r7, #20]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	e000ed04 	.word	0xe000ed04

080087e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80087fa:	f06f 0303 	mvn.w	r3, #3
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	e02c      	b.n	800885c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008802:	f3ef 8305 	mrs	r3, IPSR
 8008806:	60fb      	str	r3, [r7, #12]
  return(result);
 8008808:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01a      	beq.n	8008844 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800880e:	2300      	movs	r3, #0
 8008810:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008812:	f107 0308 	add.w	r3, r7, #8
 8008816:	4619      	mov	r1, r3
 8008818:	6938      	ldr	r0, [r7, #16]
 800881a:	f000 fdc2 	bl	80093a2 <xQueueGiveFromISR>
 800881e:	4603      	mov	r3, r0
 8008820:	2b01      	cmp	r3, #1
 8008822:	d003      	beq.n	800882c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008824:	f06f 0302 	mvn.w	r3, #2
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e017      	b.n	800885c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d014      	beq.n	800885c <osSemaphoreRelease+0x78>
 8008832:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <osSemaphoreRelease+0x84>)
 8008834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	e00b      	b.n	800885c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008844:	2300      	movs	r3, #0
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	6938      	ldr	r0, [r7, #16]
 800884c:	f000 fc10 	bl	8009070 <xQueueGenericSend>
 8008850:	4603      	mov	r3, r0
 8008852:	2b01      	cmp	r3, #1
 8008854:	d002      	beq.n	800885c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008856:	f06f 0302 	mvn.w	r3, #2
 800885a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800885c:	697b      	ldr	r3, [r7, #20]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <osSemaphoreGetCount+0x18>
    count = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e00e      	b.n	80088a2 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008884:	f3ef 8305 	mrs	r3, IPSR
 8008888:	60fb      	str	r3, [r7, #12]
  return(result);
 800888a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8008890:	6938      	ldr	r0, [r7, #16]
 8008892:	f001 f89d 	bl	80099d0 <uxQueueMessagesWaitingFromISR>
 8008896:	6178      	str	r0, [r7, #20]
 8008898:	e003      	b.n	80088a2 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f001 f87a 	bl	8009994 <uxQueueMessagesWaiting>
 80088a0:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088bc:	f3ef 8305 	mrs	r3, IPSR
 80088c0:	613b      	str	r3, [r7, #16]
  return(result);
 80088c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d15f      	bne.n	8008988 <osMessageQueueNew+0xdc>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d05c      	beq.n	8008988 <osMessageQueueNew+0xdc>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d059      	beq.n	8008988 <osMessageQueueNew+0xdc>
    mem = -1;
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d029      	beq.n	8008934 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d012      	beq.n	800890e <osMessageQueueNew+0x62>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b4f      	cmp	r3, #79	; 0x4f
 80088ee:	d90e      	bls.n	800890e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	429a      	cmp	r2, r3
 8008906:	d302      	bcc.n	800890e <osMessageQueueNew+0x62>
        mem = 1;
 8008908:	2301      	movs	r3, #1
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	e014      	b.n	8008938 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d110      	bne.n	8008938 <osMessageQueueNew+0x8c>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008922:	2b00      	cmp	r3, #0
 8008924:	d108      	bne.n	8008938 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d104      	bne.n	8008938 <osMessageQueueNew+0x8c>
          mem = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	e001      	b.n	8008938 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d10b      	bne.n	8008956 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2100      	movs	r1, #0
 8008948:	9100      	str	r1, [sp, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fa4f 	bl	8008df0 <xQueueGenericCreateStatic>
 8008952:	61f8      	str	r0, [r7, #28]
 8008954:	e008      	b.n	8008968 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800895c:	2200      	movs	r2, #0
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 fabd 	bl	8008ee0 <xQueueGenericCreate>
 8008966:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	e001      	b.n	8008980 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008980:	6979      	ldr	r1, [r7, #20]
 8008982:	69f8      	ldr	r0, [r7, #28]
 8008984:	f001 f98e 	bl	8009ca4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008988:	69fb      	ldr	r3, [r7, #28]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3720      	adds	r7, #32
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	4613      	mov	r3, r2
 80089a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ac:	f3ef 8305 	mrs	r3, IPSR
 80089b0:	617b      	str	r3, [r7, #20]
  return(result);
 80089b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d028      	beq.n	8008a0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <osMessageQueuePut+0x36>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <osMessageQueuePut+0x36>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80089ca:	f06f 0303 	mvn.w	r3, #3
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	e038      	b.n	8008a44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80089d6:	f107 0210 	add.w	r2, r7, #16
 80089da:	2300      	movs	r3, #0
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	69b8      	ldr	r0, [r7, #24]
 80089e0:	f000 fc44 	bl	800926c <xQueueGenericSendFromISR>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d003      	beq.n	80089f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80089ea:	f06f 0302 	mvn.w	r3, #2
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e028      	b.n	8008a44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d025      	beq.n	8008a44 <osMessageQueuePut+0xb0>
 80089f8:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <osMessageQueuePut+0xbc>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	e01c      	b.n	8008a44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <osMessageQueuePut+0x82>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008a16:	f06f 0303 	mvn.w	r3, #3
 8008a1a:	61fb      	str	r3, [r7, #28]
 8008a1c:	e012      	b.n	8008a44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a1e:	2300      	movs	r3, #0
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	69b8      	ldr	r0, [r7, #24]
 8008a26:	f000 fb23 	bl	8009070 <xQueueGenericSend>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d009      	beq.n	8008a44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008a36:	f06f 0301 	mvn.w	r3, #1
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e002      	b.n	8008a44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008a3e:	f06f 0302 	mvn.w	r3, #2
 8008a42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008a44:	69fb      	ldr	r3, [r7, #28]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6a:	f3ef 8305 	mrs	r3, IPSR
 8008a6e:	617b      	str	r3, [r7, #20]
  return(result);
 8008a70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d028      	beq.n	8008ac8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d005      	beq.n	8008a88 <osMessageQueueGet+0x34>
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <osMessageQueueGet+0x34>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a88:	f06f 0303 	mvn.w	r3, #3
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	e037      	b.n	8008b00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008a90:	2300      	movs	r3, #0
 8008a92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a94:	f107 0310 	add.w	r3, r7, #16
 8008a98:	461a      	mov	r2, r3
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	69b8      	ldr	r0, [r7, #24]
 8008a9e:	f000 fef9 	bl	8009894 <xQueueReceiveFromISR>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d003      	beq.n	8008ab0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008aa8:	f06f 0302 	mvn.w	r3, #2
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	e027      	b.n	8008b00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d024      	beq.n	8008b00 <osMessageQueueGet+0xac>
 8008ab6:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <osMessageQueueGet+0xb8>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	e01b      	b.n	8008b00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <osMessageQueueGet+0x80>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d103      	bne.n	8008adc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008ad4:	f06f 0303 	mvn.w	r3, #3
 8008ad8:	61fb      	str	r3, [r7, #28]
 8008ada:	e011      	b.n	8008b00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	69b8      	ldr	r0, [r7, #24]
 8008ae2:	f000 fceb 	bl	80094bc <xQueueReceive>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d009      	beq.n	8008b00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008af2:	f06f 0301 	mvn.w	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	e002      	b.n	8008b00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008afa:	f06f 0302 	mvn.w	r3, #2
 8008afe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b00:	69fb      	ldr	r3, [r7, #28]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	e000ed04 	.word	0xe000ed04

08008b10 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	e00e      	b.n	8008b46 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b28:	f3ef 8305 	mrs	r3, IPSR
 8008b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008b34:	6938      	ldr	r0, [r7, #16]
 8008b36:	f000 ff4b 	bl	80099d0 <uxQueueMessagesWaitingFromISR>
 8008b3a:	6178      	str	r0, [r7, #20]
 8008b3c:	e003      	b.n	8008b46 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008b3e:	6938      	ldr	r0, [r7, #16]
 8008b40:	f000 ff28 	bl	8009994 <uxQueueMessagesWaiting>
 8008b44:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008b46:	697b      	ldr	r3, [r7, #20]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4a07      	ldr	r2, [pc, #28]	; (8008b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8008b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a06      	ldr	r2, [pc, #24]	; (8008b80 <vApplicationGetIdleTaskMemory+0x30>)
 8008b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2280      	movs	r2, #128	; 0x80
 8008b6c:	601a      	str	r2, [r3, #0]
}
 8008b6e:	bf00      	nop
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	200005a8 	.word	0x200005a8
 8008b80:	20000604 	.word	0x20000604

08008b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a07      	ldr	r2, [pc, #28]	; (8008bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a06      	ldr	r2, [pc, #24]	; (8008bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8008b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000804 	.word	0x20000804
 8008bb4:	20000860 	.word	0x20000860

08008bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0208 	add.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f103 0208 	add.w	r2, r3, #8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c12:	b480      	push	{r7}
 8008c14:	b085      	sub	sp, #20
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c70:	d103      	bne.n	8008c7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e00c      	b.n	8008c94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e002      	b.n	8008c88 <vListInsert+0x2e>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d2f6      	bcs.n	8008c82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	601a      	str	r2, [r3, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6892      	ldr	r2, [r2, #8]
 8008ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6852      	ldr	r2, [r2, #4]
 8008cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d103      	bne.n	8008d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	1e5a      	subs	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d4a:	f002 fcbb 	bl	800b6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	441a      	add	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	441a      	add	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	22ff      	movs	r2, #255	; 0xff
 8008d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	22ff      	movs	r2, #255	; 0xff
 8008d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d114      	bne.n	8008dca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01a      	beq.n	8008dde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3310      	adds	r3, #16
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 fc73 	bl	800a698 <xTaskRemoveFromEventList>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <xQueueGenericReset+0xcc>)
 8008dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	e009      	b.n	8008dde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3310      	adds	r3, #16
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fef2 	bl	8008bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3324      	adds	r3, #36	; 0x24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff feed 	bl	8008bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008dde:	f002 fca1 	bl	800b724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008de2:	2301      	movs	r3, #1
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	; 0x38
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <xQueueGenericCreateStatic+0x52>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <xQueueGenericCreateStatic+0x56>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <xQueueGenericCreateStatic+0x58>
 8008e46:	2300      	movs	r3, #0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	623b      	str	r3, [r7, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <xQueueGenericCreateStatic+0x7e>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <xQueueGenericCreateStatic+0x82>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e000      	b.n	8008e74 <xQueueGenericCreateStatic+0x84>
 8008e72:	2300      	movs	r3, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	61fb      	str	r3, [r7, #28]
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e8e:	2350      	movs	r3, #80	; 0x50
 8008e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b50      	cmp	r3, #80	; 0x50
 8008e96:	d00a      	beq.n	8008eae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	61bb      	str	r3, [r7, #24]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008eae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00d      	beq.n	8008ed6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ec2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 f83f 	bl	8008f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3730      	adds	r7, #48	; 0x30
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	613b      	str	r3, [r7, #16]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	fb02 f303 	mul.w	r3, r2, r3
 8008f12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	3350      	adds	r3, #80	; 0x50
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f002 fcf5 	bl	800b908 <pvPortMalloc>
 8008f1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d011      	beq.n	8008f4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	3350      	adds	r3, #80	; 0x50
 8008f2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f38:	79fa      	ldrb	r2, [r7, #7]
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f805 	bl	8008f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d103      	bne.n	8008f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e002      	b.n	8008f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f82:	2101      	movs	r1, #1
 8008f84:	69b8      	ldr	r0, [r7, #24]
 8008f86:	f7ff fecb 	bl	8008d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08a      	sub	sp, #40	; 0x28
 8008f9e:	af02      	add	r7, sp, #8
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	61bb      	str	r3, [r7, #24]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d90a      	bls.n	8008fe0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	617b      	str	r3, [r7, #20]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2100      	movs	r1, #0
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f7ff ff00 	bl	8008df0 <xQueueGenericCreateStatic>
 8008ff0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
	}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	613b      	str	r3, [r7, #16]
}
 800902a:	bf00      	nop
 800902c:	e7fe      	b.n	800902c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	429a      	cmp	r2, r3
 8009034:	d90a      	bls.n	800904c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	60fb      	str	r3, [r7, #12]
}
 8009048:	bf00      	nop
 800904a:	e7fe      	b.n	800904a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800904c:	2202      	movs	r2, #2
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff ff45 	bl	8008ee0 <xQueueGenericCreate>
 8009056:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009064:	697b      	ldr	r3, [r7, #20]
	}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08e      	sub	sp, #56	; 0x38
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800907e:	2300      	movs	r3, #0
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xQueueGenericSend+0x32>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <xQueueGenericSend+0x40>
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <xQueueGenericSend+0x44>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <xQueueGenericSend+0x46>
 80090b4:	2300      	movs	r3, #0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <xQueueGenericSend+0x60>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d103      	bne.n	80090de <xQueueGenericSend+0x6e>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d101      	bne.n	80090e2 <xQueueGenericSend+0x72>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueGenericSend+0x74>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueGenericSend+0x8e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	623b      	str	r3, [r7, #32]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090fe:	f001 fc89 	bl	800aa14 <xTaskGetSchedulerState>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <xQueueGenericSend+0x9e>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <xQueueGenericSend+0xa2>
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <xQueueGenericSend+0xa4>
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <xQueueGenericSend+0xbe>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	61fb      	str	r3, [r7, #28]
}
 800912a:	bf00      	nop
 800912c:	e7fe      	b.n	800912c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800912e:	f002 fac9 	bl	800b6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913a:	429a      	cmp	r2, r3
 800913c:	d302      	bcc.n	8009144 <xQueueGenericSend+0xd4>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b02      	cmp	r3, #2
 8009142:	d129      	bne.n	8009198 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800914a:	f000 fc9a 	bl	8009a82 <prvCopyDataToQueue>
 800914e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	d010      	beq.n	800917a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915a:	3324      	adds	r3, #36	; 0x24
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fa9b 	bl	800a698 <xTaskRemoveFromEventList>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d013      	beq.n	8009190 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009168:	4b3f      	ldr	r3, [pc, #252]	; (8009268 <xQueueGenericSend+0x1f8>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	e00a      	b.n	8009190 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009180:	4b39      	ldr	r3, [pc, #228]	; (8009268 <xQueueGenericSend+0x1f8>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009190:	f002 fac8 	bl	800b724 <vPortExitCritical>
				return pdPASS;
 8009194:	2301      	movs	r3, #1
 8009196:	e063      	b.n	8009260 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800919e:	f002 fac1 	bl	800b724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e05c      	b.n	8009260 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d106      	bne.n	80091ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fad5 	bl	800a760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091b6:	2301      	movs	r3, #1
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ba:	f002 fab3 	bl	800b724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091be:	f001 f835 	bl	800a22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091c2:	f002 fa7f 	bl	800b6c4 <vPortEnterCritical>
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091cc:	b25b      	sxtb	r3, r3
 80091ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091d2:	d103      	bne.n	80091dc <xQueueGenericSend+0x16c>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091e2:	b25b      	sxtb	r3, r3
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091e8:	d103      	bne.n	80091f2 <xQueueGenericSend+0x182>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091f2:	f002 fa97 	bl	800b724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091f6:	1d3a      	adds	r2, r7, #4
 80091f8:	f107 0314 	add.w	r3, r7, #20
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 fac4 	bl	800a78c <xTaskCheckForTimeOut>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d124      	bne.n	8009254 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800920a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800920c:	f000 fd31 	bl	8009c72 <prvIsQueueFull>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d018      	beq.n	8009248 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	3310      	adds	r3, #16
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f001 f9ea 	bl	800a5f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009226:	f000 fcbc 	bl	8009ba2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800922a:	f001 f80d 	bl	800a248 <xTaskResumeAll>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	f47f af7c 	bne.w	800912e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009236:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <xQueueGenericSend+0x1f8>)
 8009238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	e772      	b.n	800912e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924a:	f000 fcaa 	bl	8009ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800924e:	f000 fffb 	bl	800a248 <xTaskResumeAll>
 8009252:	e76c      	b.n	800912e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009256:	f000 fca4 	bl	8009ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800925a:	f000 fff5 	bl	800a248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800925e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009260:	4618      	mov	r0, r3
 8009262:	3738      	adds	r7, #56	; 0x38
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b090      	sub	sp, #64	; 0x40
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <xQueueGenericSendFromISR+0x3c>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <xQueueGenericSendFromISR+0x40>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <xQueueGenericSendFromISR+0x42>
 80092ac:	2300      	movs	r3, #0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d103      	bne.n	80092d6 <xQueueGenericSendFromISR+0x6a>
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <xQueueGenericSendFromISR+0x6e>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <xQueueGenericSendFromISR+0x70>
 80092da:	2300      	movs	r3, #0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	623b      	str	r3, [r7, #32]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092f6:	f002 fac7 	bl	800b888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092fa:	f3ef 8211 	mrs	r2, BASEPRI
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	61fa      	str	r2, [r7, #28]
 8009310:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009312:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	429a      	cmp	r2, r3
 8009320:	d302      	bcc.n	8009328 <xQueueGenericSendFromISR+0xbc>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b02      	cmp	r3, #2
 8009326:	d12f      	bne.n	8009388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800933e:	f000 fba0 	bl	8009a82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800934a:	d112      	bne.n	8009372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	d016      	beq.n	8009382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	3324      	adds	r3, #36	; 0x24
 8009358:	4618      	mov	r0, r3
 800935a:	f001 f99d 	bl	800a698 <xTaskRemoveFromEventList>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00e      	beq.n	8009382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	e007      	b.n	8009382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009376:	3301      	adds	r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	b25a      	sxtb	r2, r3
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009382:	2301      	movs	r3, #1
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009386:	e001      	b.n	800938c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009388:	2300      	movs	r3, #0
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800939a:	4618      	mov	r0, r3
 800939c:	3740      	adds	r7, #64	; 0x40
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b08e      	sub	sp, #56	; 0x38
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80093b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	623b      	str	r3, [r7, #32]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <xQueueGiveFromISR+0x48>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	61fb      	str	r3, [r7, #28]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d103      	bne.n	80093fa <xQueueGiveFromISR+0x58>
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <xQueueGiveFromISR+0x5c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <xQueueGiveFromISR+0x5e>
 80093fe:	2300      	movs	r3, #0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	61bb      	str	r3, [r7, #24]
}
 8009416:	bf00      	nop
 8009418:	e7fe      	b.n	8009418 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800941a:	f002 fa35 	bl	800b888 <vPortValidateInterruptPriority>
	__asm volatile
 800941e:	f3ef 8211 	mrs	r2, BASEPRI
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	617a      	str	r2, [r7, #20]
 8009434:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009436:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009446:	429a      	cmp	r2, r3
 8009448:	d22b      	bcs.n	80094a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800945c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009464:	d112      	bne.n	800948c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	2b00      	cmp	r3, #0
 800946c:	d016      	beq.n	800949c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	3324      	adds	r3, #36	; 0x24
 8009472:	4618      	mov	r0, r3
 8009474:	f001 f910 	bl	800a698 <xTaskRemoveFromEventList>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00e      	beq.n	800949c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2201      	movs	r2, #1
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	e007      	b.n	800949c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800948c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009490:	3301      	adds	r3, #1
 8009492:	b2db      	uxtb	r3, r3
 8009494:	b25a      	sxtb	r2, r3
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800949c:	2301      	movs	r3, #1
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
 80094a0:	e001      	b.n	80094a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f383 8811 	msr	BASEPRI, r3
}
 80094b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3738      	adds	r7, #56	; 0x38
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <xQueueReceive+0x30>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	623b      	str	r3, [r7, #32]
}
 80094e8:	bf00      	nop
 80094ea:	e7fe      	b.n	80094ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d103      	bne.n	80094fa <xQueueReceive+0x3e>
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <xQueueReceive+0x42>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <xQueueReceive+0x44>
 80094fe:	2300      	movs	r3, #0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <xQueueReceive+0x5e>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	61fb      	str	r3, [r7, #28]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800951a:	f001 fa7b 	bl	800aa14 <xTaskGetSchedulerState>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <xQueueReceive+0x6e>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <xQueueReceive+0x72>
 800952a:	2301      	movs	r3, #1
 800952c:	e000      	b.n	8009530 <xQueueReceive+0x74>
 800952e:	2300      	movs	r3, #0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <xQueueReceive+0x8e>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	61bb      	str	r3, [r7, #24]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800954a:	f002 f8bb 	bl	800b6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009552:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01f      	beq.n	800959a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800955e:	f000 fafa 	bl	8009b56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	1e5a      	subs	r2, r3, #1
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00f      	beq.n	8009592 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	3310      	adds	r3, #16
 8009576:	4618      	mov	r0, r3
 8009578:	f001 f88e 	bl	800a698 <xTaskRemoveFromEventList>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d007      	beq.n	8009592 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009582:	4b3d      	ldr	r3, [pc, #244]	; (8009678 <xQueueReceive+0x1bc>)
 8009584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009592:	f002 f8c7 	bl	800b724 <vPortExitCritical>
				return pdPASS;
 8009596:	2301      	movs	r3, #1
 8009598:	e069      	b.n	800966e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d103      	bne.n	80095a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095a0:	f002 f8c0 	bl	800b724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095a4:	2300      	movs	r3, #0
 80095a6:	e062      	b.n	800966e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095ae:	f107 0310 	add.w	r3, r7, #16
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 f8d4 	bl	800a760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095b8:	2301      	movs	r3, #1
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095bc:	f002 f8b2 	bl	800b724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095c0:	f000 fe34 	bl	800a22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095c4:	f002 f87e 	bl	800b6c4 <vPortEnterCritical>
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095ce:	b25b      	sxtb	r3, r3
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d4:	d103      	bne.n	80095de <xQueueReceive+0x122>
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095e4:	b25b      	sxtb	r3, r3
 80095e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ea:	d103      	bne.n	80095f4 <xQueueReceive+0x138>
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095f4:	f002 f896 	bl	800b724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095f8:	1d3a      	adds	r2, r7, #4
 80095fa:	f107 0310 	add.w	r3, r7, #16
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f001 f8c3 	bl	800a78c <xTaskCheckForTimeOut>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d123      	bne.n	8009654 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800960c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960e:	f000 fb1a 	bl	8009c46 <prvIsQueueEmpty>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d017      	beq.n	8009648 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	3324      	adds	r3, #36	; 0x24
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	4611      	mov	r1, r2
 8009620:	4618      	mov	r0, r3
 8009622:	f000 ffe9 	bl	800a5f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009628:	f000 fabb 	bl	8009ba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800962c:	f000 fe0c 	bl	800a248 <xTaskResumeAll>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d189      	bne.n	800954a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009636:	4b10      	ldr	r3, [pc, #64]	; (8009678 <xQueueReceive+0x1bc>)
 8009638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	e780      	b.n	800954a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964a:	f000 faaa 	bl	8009ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800964e:	f000 fdfb 	bl	800a248 <xTaskResumeAll>
 8009652:	e77a      	b.n	800954a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009656:	f000 faa4 	bl	8009ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800965a:	f000 fdf5 	bl	800a248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800965e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009660:	f000 faf1 	bl	8009c46 <prvIsQueueEmpty>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	f43f af6f 	beq.w	800954a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800966c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800966e:	4618      	mov	r0, r3
 8009670:	3730      	adds	r7, #48	; 0x30
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08e      	sub	sp, #56	; 0x38
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009686:	2300      	movs	r3, #0
 8009688:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800968e:	2300      	movs	r3, #0
 8009690:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	623b      	str	r3, [r7, #32]
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	61fb      	str	r3, [r7, #28]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096cc:	f001 f9a2 	bl	800aa14 <xTaskGetSchedulerState>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d102      	bne.n	80096dc <xQueueSemaphoreTake+0x60>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <xQueueSemaphoreTake+0x64>
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <xQueueSemaphoreTake+0x66>
 80096e0:	2300      	movs	r3, #0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	61bb      	str	r3, [r7, #24]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096fc:	f001 ffe2 	bl	800b6c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	2b00      	cmp	r3, #0
 800970a:	d024      	beq.n	8009756 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	1e5a      	subs	r2, r3, #1
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d104      	bne.n	8009726 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800971c:	f001 faf0 	bl	800ad00 <pvTaskIncrementMutexHeldCount>
 8009720:	4602      	mov	r2, r0
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00f      	beq.n	800974e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	3310      	adds	r3, #16
 8009732:	4618      	mov	r0, r3
 8009734:	f000 ffb0 	bl	800a698 <xTaskRemoveFromEventList>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d007      	beq.n	800974e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800973e:	4b54      	ldr	r3, [pc, #336]	; (8009890 <xQueueSemaphoreTake+0x214>)
 8009740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800974e:	f001 ffe9 	bl	800b724 <vPortExitCritical>
				return pdPASS;
 8009752:	2301      	movs	r3, #1
 8009754:	e097      	b.n	8009886 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d111      	bne.n	8009780 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	617b      	str	r3, [r7, #20]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009778:	f001 ffd4 	bl	800b724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800977c:	2300      	movs	r3, #0
 800977e:	e082      	b.n	8009886 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009786:	f107 030c 	add.w	r3, r7, #12
 800978a:	4618      	mov	r0, r3
 800978c:	f000 ffe8 	bl	800a760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009790:	2301      	movs	r3, #1
 8009792:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009794:	f001 ffc6 	bl	800b724 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009798:	f000 fd48 	bl	800a22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800979c:	f001 ff92 	bl	800b6c4 <vPortEnterCritical>
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097a6:	b25b      	sxtb	r3, r3
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ac:	d103      	bne.n	80097b6 <xQueueSemaphoreTake+0x13a>
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097bc:	b25b      	sxtb	r3, r3
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c2:	d103      	bne.n	80097cc <xQueueSemaphoreTake+0x150>
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097cc:	f001 ffaa 	bl	800b724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097d0:	463a      	mov	r2, r7
 80097d2:	f107 030c 	add.w	r3, r7, #12
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 ffd7 	bl	800a78c <xTaskCheckForTimeOut>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d132      	bne.n	800984a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097e6:	f000 fa2e 	bl	8009c46 <prvIsQueueEmpty>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d026      	beq.n	800983e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d109      	bne.n	800980c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80097f8:	f001 ff64 	bl	800b6c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	4618      	mov	r0, r3
 8009802:	f001 f925 	bl	800aa50 <xTaskPriorityInherit>
 8009806:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009808:	f001 ff8c 	bl	800b724 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	3324      	adds	r3, #36	; 0x24
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	4611      	mov	r1, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f000 feef 	bl	800a5f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800981a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800981c:	f000 f9c1 	bl	8009ba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009820:	f000 fd12 	bl	800a248 <xTaskResumeAll>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	f47f af68 	bne.w	80096fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800982c:	4b18      	ldr	r3, [pc, #96]	; (8009890 <xQueueSemaphoreTake+0x214>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	e75e      	b.n	80096fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800983e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009840:	f000 f9af 	bl	8009ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009844:	f000 fd00 	bl	800a248 <xTaskResumeAll>
 8009848:	e758      	b.n	80096fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800984a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800984c:	f000 f9a9 	bl	8009ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009850:	f000 fcfa 	bl	800a248 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009856:	f000 f9f6 	bl	8009c46 <prvIsQueueEmpty>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	f43f af4d 	beq.w	80096fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00d      	beq.n	8009884 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009868:	f001 ff2c 	bl	800b6c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800986c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800986e:	f000 f8f0 	bl	8009a52 <prvGetDisinheritPriorityAfterTimeout>
 8009872:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800987a:	4618      	mov	r0, r3
 800987c:	f001 f9be 	bl	800abfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009880:	f001 ff50 	bl	800b724 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009884:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009886:	4618      	mov	r0, r3
 8009888:	3738      	adds	r7, #56	; 0x38
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08e      	sub	sp, #56	; 0x38
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	623b      	str	r3, [r7, #32]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <xQueueReceiveFromISR+0x3a>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <xQueueReceiveFromISR+0x3e>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <xQueueReceiveFromISR+0x40>
 80098d2:	2300      	movs	r3, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	61fb      	str	r3, [r7, #28]
}
 80098ea:	bf00      	nop
 80098ec:	e7fe      	b.n	80098ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098ee:	f001 ffcb 	bl	800b888 <vPortValidateInterruptPriority>
	__asm volatile
 80098f2:	f3ef 8211 	mrs	r2, BASEPRI
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61ba      	str	r2, [r7, #24]
 8009908:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800990a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	2b00      	cmp	r3, #0
 8009918:	d02f      	beq.n	800997a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009928:	f000 f915 	bl	8009b56 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	1e5a      	subs	r2, r3, #1
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800993c:	d112      	bne.n	8009964 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d016      	beq.n	8009974 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	3310      	adds	r3, #16
 800994a:	4618      	mov	r0, r3
 800994c:	f000 fea4 	bl	800a698 <xTaskRemoveFromEventList>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00e      	beq.n	8009974 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	e007      	b.n	8009974 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009968:	3301      	adds	r3, #1
 800996a:	b2db      	uxtb	r3, r3
 800996c:	b25a      	sxtb	r2, r3
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009974:	2301      	movs	r3, #1
 8009976:	637b      	str	r3, [r7, #52]	; 0x34
 8009978:	e001      	b.n	800997e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800997a:	2300      	movs	r3, #0
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f383 8811 	msr	BASEPRI, r3
}
 8009988:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800998a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800998c:	4618      	mov	r0, r3
 800998e:	3738      	adds	r7, #56	; 0x38
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	60bb      	str	r3, [r7, #8]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80099b8:	f001 fe84 	bl	800b6c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80099c2:	f001 feaf 	bl	800b724 <vPortExitCritical>

	return uxReturn;
 80099c6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	60fb      	str	r3, [r7, #12]
}
 80099f4:	bf00      	nop
 80099f6:	e7fe      	b.n	80099f6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80099fe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <vQueueDelete+0x28>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60bb      	str	r3, [r7, #8]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f95f 	bl	8009cf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f002 f82b 	bl	800baa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d006      	beq.n	8009a70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e001      	b.n	8009a74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a74:	68fb      	ldr	r3, [r7, #12]
	}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b086      	sub	sp, #24
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10d      	bne.n	8009abc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d14d      	bne.n	8009b44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f001 f837 	bl	800ab20 <xTaskPriorityDisinherit>
 8009ab2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	609a      	str	r2, [r3, #8]
 8009aba:	e043      	b.n	8009b44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d119      	bne.n	8009af6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6858      	ldr	r0, [r3, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	461a      	mov	r2, r3
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	f009 fb8f 	bl	80131f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	441a      	add	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d32b      	bcc.n	8009b44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	605a      	str	r2, [r3, #4]
 8009af4:	e026      	b.n	8009b44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	68d8      	ldr	r0, [r3, #12]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	461a      	mov	r2, r3
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	f009 fb75 	bl	80131f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	425b      	negs	r3, r3
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d207      	bcs.n	8009b32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	425b      	negs	r3, r3
 8009b2c:	441a      	add	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d105      	bne.n	8009b44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b4c:	697b      	ldr	r3, [r7, #20]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d018      	beq.n	8009b9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	441a      	add	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d303      	bcc.n	8009b8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68d9      	ldr	r1, [r3, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	461a      	mov	r2, r3
 8009b94:	6838      	ldr	r0, [r7, #0]
 8009b96:	f009 fb2b 	bl	80131f0 <memcpy>
	}
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009baa:	f001 fd8b 	bl	800b6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bb4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bb6:	e011      	b.n	8009bdc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d012      	beq.n	8009be6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3324      	adds	r3, #36	; 0x24
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fd67 	bl	800a698 <xTaskRemoveFromEventList>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bd0:	f000 fe3e 	bl	800a850 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dce9      	bgt.n	8009bb8 <prvUnlockQueue+0x16>
 8009be4:	e000      	b.n	8009be8 <prvUnlockQueue+0x46>
					break;
 8009be6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	22ff      	movs	r2, #255	; 0xff
 8009bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bf0:	f001 fd98 	bl	800b724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bf4:	f001 fd66 	bl	800b6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bfe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c00:	e011      	b.n	8009c26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d012      	beq.n	8009c30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3310      	adds	r3, #16
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 fd42 	bl	800a698 <xTaskRemoveFromEventList>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c1a:	f000 fe19 	bl	800a850 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	dce9      	bgt.n	8009c02 <prvUnlockQueue+0x60>
 8009c2e:	e000      	b.n	8009c32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	22ff      	movs	r2, #255	; 0xff
 8009c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c3a:	f001 fd73 	bl	800b724 <vPortExitCritical>
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c4e:	f001 fd39 	bl	800b6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e001      	b.n	8009c64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c64:	f001 fd5e 	bl	800b724 <vPortExitCritical>

	return xReturn;
 8009c68:	68fb      	ldr	r3, [r7, #12]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c7a:	f001 fd23 	bl	800b6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d102      	bne.n	8009c90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e001      	b.n	8009c94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c94:	f001 fd46 	bl	800b724 <vPortExitCritical>

	return xReturn;
 8009c98:	68fb      	ldr	r3, [r7, #12]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	e014      	b.n	8009cde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cb4:	4a0f      	ldr	r2, [pc, #60]	; (8009cf4 <vQueueAddToRegistry+0x50>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10b      	bne.n	8009cd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cc0:	490c      	ldr	r1, [pc, #48]	; (8009cf4 <vQueueAddToRegistry+0x50>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cca:	4a0a      	ldr	r2, [pc, #40]	; (8009cf4 <vQueueAddToRegistry+0x50>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cd6:	e006      	b.n	8009ce6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b07      	cmp	r3, #7
 8009ce2:	d9e7      	bls.n	8009cb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	2003210c 	.word	0x2003210c

08009cf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e016      	b.n	8009d34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009d06:	4a10      	ldr	r2, [pc, #64]	; (8009d48 <vQueueUnregisterQueue+0x50>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	4413      	add	r3, r2
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d10b      	bne.n	8009d2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009d16:	4a0c      	ldr	r2, [pc, #48]	; (8009d48 <vQueueUnregisterQueue+0x50>)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <vQueueUnregisterQueue+0x50>)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	4413      	add	r3, r2
 8009d28:	2200      	movs	r2, #0
 8009d2a:	605a      	str	r2, [r3, #4]
				break;
 8009d2c:	e006      	b.n	8009d3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3301      	adds	r3, #1
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b07      	cmp	r3, #7
 8009d38:	d9e5      	bls.n	8009d06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	2003210c 	.word	0x2003210c

08009d4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d5c:	f001 fcb2 	bl	800b6c4 <vPortEnterCritical>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d66:	b25b      	sxtb	r3, r3
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6c:	d103      	bne.n	8009d76 <vQueueWaitForMessageRestricted+0x2a>
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d7c:	b25b      	sxtb	r3, r3
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d82:	d103      	bne.n	8009d8c <vQueueWaitForMessageRestricted+0x40>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d8c:	f001 fcca 	bl	800b724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d106      	bne.n	8009da6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	3324      	adds	r3, #36	; 0x24
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fc4d 	bl	800a640 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009da6:	6978      	ldr	r0, [r7, #20]
 8009da8:	f7ff fefb 	bl	8009ba2 <prvUnlockQueue>
	}
 8009dac:	bf00      	nop
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08e      	sub	sp, #56	; 0x38
 8009db8:	af04      	add	r7, sp, #16
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	623b      	str	r3, [r7, #32]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	61fb      	str	r3, [r7, #28]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dfa:	235c      	movs	r3, #92	; 0x5c
 8009dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b5c      	cmp	r3, #92	; 0x5c
 8009e02:	d00a      	beq.n	8009e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	61bb      	str	r3, [r7, #24]
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d01e      	beq.n	8009e60 <xTaskCreateStatic+0xac>
 8009e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01b      	beq.n	8009e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	2202      	movs	r2, #2
 8009e36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9303      	str	r3, [sp, #12]
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	9302      	str	r3, [sp, #8]
 8009e42:	f107 0314 	add.w	r3, r7, #20
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	68b9      	ldr	r1, [r7, #8]
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f850 	bl	8009ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e5a:	f000 f8dd 	bl	800a018 <prvAddNewTaskToReadyList>
 8009e5e:	e001      	b.n	8009e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e64:	697b      	ldr	r3, [r7, #20]
	}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3728      	adds	r7, #40	; 0x28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b08c      	sub	sp, #48	; 0x30
 8009e72:	af04      	add	r7, sp, #16
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	603b      	str	r3, [r7, #0]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 fd40 	bl	800b908 <pvPortMalloc>
 8009e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00e      	beq.n	8009eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e90:	205c      	movs	r0, #92	; 0x5c
 8009e92:	f001 fd39 	bl	800b908 <pvPortMalloc>
 8009e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ea4:	e005      	b.n	8009eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ea6:	6978      	ldr	r0, [r7, #20]
 8009ea8:	f001 fdfa 	bl	800baa0 <vPortFree>
 8009eac:	e001      	b.n	8009eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d017      	beq.n	8009ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ec0:	88fa      	ldrh	r2, [r7, #6]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	9302      	str	r3, [sp, #8]
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 f80e 	bl	8009ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009edc:	69f8      	ldr	r0, [r7, #28]
 8009ede:	f000 f89b 	bl	800a018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	e002      	b.n	8009eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009eee:	69bb      	ldr	r3, [r7, #24]
	}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3720      	adds	r7, #32
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	461a      	mov	r2, r3
 8009f10:	21a5      	movs	r1, #165	; 0xa5
 8009f12:	f009 f97b 	bl	801320c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f20:	3b01      	subs	r3, #1
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f023 0307 	bic.w	r3, r3, #7
 8009f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	617b      	str	r3, [r7, #20]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01f      	beq.n	8009f96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f56:	2300      	movs	r3, #0
 8009f58:	61fb      	str	r3, [r7, #28]
 8009f5a:	e012      	b.n	8009f82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	4413      	add	r3, r2
 8009f62:	7819      	ldrb	r1, [r3, #0]
 8009f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	4413      	add	r3, r2
 8009f6a:	3334      	adds	r3, #52	; 0x34
 8009f6c:	460a      	mov	r2, r1
 8009f6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	4413      	add	r3, r2
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d006      	beq.n	8009f8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	61fb      	str	r3, [r7, #28]
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	2b0f      	cmp	r3, #15
 8009f86:	d9e9      	bls.n	8009f5c <prvInitialiseNewTask+0x64>
 8009f88:	e000      	b.n	8009f8c <prvInitialiseNewTask+0x94>
			{
				break;
 8009f8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f94:	e003      	b.n	8009f9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	2b37      	cmp	r3, #55	; 0x37
 8009fa2:	d901      	bls.n	8009fa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fa4:	2337      	movs	r3, #55	; 0x37
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fe1a 	bl	8008bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	3318      	adds	r3, #24
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe fe15 	bl	8008bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	68f9      	ldr	r1, [r7, #12]
 8009ff6:	69b8      	ldr	r0, [r7, #24]
 8009ff8:	f001 fa38 	bl	800b46c <pxPortInitialiseStack>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a00c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a00e:	bf00      	nop
 800a010:	3720      	adds	r7, #32
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a020:	f001 fb50 	bl	800b6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a024:	4b2d      	ldr	r3, [pc, #180]	; (800a0dc <prvAddNewTaskToReadyList+0xc4>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	4a2c      	ldr	r2, [pc, #176]	; (800a0dc <prvAddNewTaskToReadyList+0xc4>)
 800a02c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a02e:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d109      	bne.n	800a04a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a036:	4a2a      	ldr	r2, [pc, #168]	; (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a03c:	4b27      	ldr	r3, [pc, #156]	; (800a0dc <prvAddNewTaskToReadyList+0xc4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d110      	bne.n	800a066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a044:	f000 fc28 	bl	800a898 <prvInitialiseTaskLists>
 800a048:	e00d      	b.n	800a066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a04a:	4b26      	ldr	r3, [pc, #152]	; (800a0e4 <prvAddNewTaskToReadyList+0xcc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d109      	bne.n	800a066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a052:	4b23      	ldr	r3, [pc, #140]	; (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d802      	bhi.n	800a066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a060:	4a1f      	ldr	r2, [pc, #124]	; (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a066:	4b20      	ldr	r3, [pc, #128]	; (800a0e8 <prvAddNewTaskToReadyList+0xd0>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <prvAddNewTaskToReadyList+0xd0>)
 800a06e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a070:	4b1d      	ldr	r3, [pc, #116]	; (800a0e8 <prvAddNewTaskToReadyList+0xd0>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4b1b      	ldr	r3, [pc, #108]	; (800a0ec <prvAddNewTaskToReadyList+0xd4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d903      	bls.n	800a08c <prvAddNewTaskToReadyList+0x74>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	4a18      	ldr	r2, [pc, #96]	; (800a0ec <prvAddNewTaskToReadyList+0xd4>)
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4a15      	ldr	r2, [pc, #84]	; (800a0f0 <prvAddNewTaskToReadyList+0xd8>)
 800a09a:	441a      	add	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f7fe fdb5 	bl	8008c12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0a8:	f001 fb3c 	bl	800b724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <prvAddNewTaskToReadyList+0xcc>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00e      	beq.n	800a0d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d207      	bcs.n	800a0d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <prvAddNewTaskToReadyList+0xdc>)
 800a0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20001134 	.word	0x20001134
 800a0e0:	20000c60 	.word	0x20000c60
 800a0e4:	20001140 	.word	0x20001140
 800a0e8:	20001150 	.word	0x20001150
 800a0ec:	2000113c 	.word	0x2000113c
 800a0f0:	20000c64 	.word	0x20000c64
 800a0f4:	e000ed04 	.word	0xe000ed04

0800a0f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d017      	beq.n	800a13a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a10a:	4b13      	ldr	r3, [pc, #76]	; (800a158 <vTaskDelay+0x60>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <vTaskDelay+0x30>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60bb      	str	r3, [r7, #8]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a128:	f000 f880 	bl	800a22c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a12c:	2100      	movs	r1, #0
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fdfa 	bl	800ad28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a134:	f000 f888 	bl	800a248 <xTaskResumeAll>
 800a138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d107      	bne.n	800a150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <vTaskDelay+0x64>)
 800a142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	2000115c 	.word	0x2000115c
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	; 0x28
 800a164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a166:	2300      	movs	r3, #0
 800a168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a16e:	463a      	mov	r2, r7
 800a170:	1d39      	adds	r1, r7, #4
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fcea 	bl	8008b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	9202      	str	r2, [sp, #8]
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	2300      	movs	r3, #0
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	2300      	movs	r3, #0
 800a18c:	460a      	mov	r2, r1
 800a18e:	4921      	ldr	r1, [pc, #132]	; (800a214 <vTaskStartScheduler+0xb4>)
 800a190:	4821      	ldr	r0, [pc, #132]	; (800a218 <vTaskStartScheduler+0xb8>)
 800a192:	f7ff fe0f 	bl	8009db4 <xTaskCreateStatic>
 800a196:	4603      	mov	r3, r0
 800a198:	4a20      	ldr	r2, [pc, #128]	; (800a21c <vTaskStartScheduler+0xbc>)
 800a19a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a19c:	4b1f      	ldr	r3, [pc, #124]	; (800a21c <vTaskStartScheduler+0xbc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	e001      	b.n	800a1ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d102      	bne.n	800a1ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1b4:	f000 fe0c 	bl	800add0 <xTimerCreateTimerTask>
 800a1b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d116      	bne.n	800a1ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	613b      	str	r3, [r7, #16]
}
 800a1d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1d4:	4b12      	ldr	r3, [pc, #72]	; (800a220 <vTaskStartScheduler+0xc0>)
 800a1d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1dc:	4b11      	ldr	r3, [pc, #68]	; (800a224 <vTaskStartScheduler+0xc4>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1e2:	4b11      	ldr	r3, [pc, #68]	; (800a228 <vTaskStartScheduler+0xc8>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1e8:	f001 f9ca 	bl	800b580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1ec:	e00e      	b.n	800a20c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1f4:	d10a      	bne.n	800a20c <vTaskStartScheduler+0xac>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <vTaskStartScheduler+0xaa>
}
 800a20c:	bf00      	nop
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	0801aa74 	.word	0x0801aa74
 800a218:	0800a869 	.word	0x0800a869
 800a21c:	20001158 	.word	0x20001158
 800a220:	20001154 	.word	0x20001154
 800a224:	20001140 	.word	0x20001140
 800a228:	20001138 	.word	0x20001138

0800a22c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <vTaskSuspendAll+0x18>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3301      	adds	r3, #1
 800a236:	4a03      	ldr	r2, [pc, #12]	; (800a244 <vTaskSuspendAll+0x18>)
 800a238:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a23a:	bf00      	nop
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	2000115c 	.word	0x2000115c

0800a248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a252:	2300      	movs	r3, #0
 800a254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a256:	4b42      	ldr	r3, [pc, #264]	; (800a360 <xTaskResumeAll+0x118>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <xTaskResumeAll+0x2c>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	603b      	str	r3, [r7, #0]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a274:	f001 fa26 	bl	800b6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a278:	4b39      	ldr	r3, [pc, #228]	; (800a360 <xTaskResumeAll+0x118>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	4a38      	ldr	r2, [pc, #224]	; (800a360 <xTaskResumeAll+0x118>)
 800a280:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a282:	4b37      	ldr	r3, [pc, #220]	; (800a360 <xTaskResumeAll+0x118>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d162      	bne.n	800a350 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a28a:	4b36      	ldr	r3, [pc, #216]	; (800a364 <xTaskResumeAll+0x11c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d05e      	beq.n	800a350 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a292:	e02f      	b.n	800a2f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a294:	4b34      	ldr	r3, [pc, #208]	; (800a368 <xTaskResumeAll+0x120>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3318      	adds	r3, #24
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe fd13 	bl	8008ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe fd0e 	bl	8008ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4b2d      	ldr	r3, [pc, #180]	; (800a36c <xTaskResumeAll+0x124>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d903      	bls.n	800a2c4 <xTaskResumeAll+0x7c>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	4a2a      	ldr	r2, [pc, #168]	; (800a36c <xTaskResumeAll+0x124>)
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4a27      	ldr	r2, [pc, #156]	; (800a370 <xTaskResumeAll+0x128>)
 800a2d2:	441a      	add	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f7fe fc99 	bl	8008c12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e4:	4b23      	ldr	r3, [pc, #140]	; (800a374 <xTaskResumeAll+0x12c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d302      	bcc.n	800a2f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a2ee:	4b22      	ldr	r3, [pc, #136]	; (800a378 <xTaskResumeAll+0x130>)
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2f4:	4b1c      	ldr	r3, [pc, #112]	; (800a368 <xTaskResumeAll+0x120>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1cb      	bne.n	800a294 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a302:	f000 fb67 	bl	800a9d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a306:	4b1d      	ldr	r3, [pc, #116]	; (800a37c <xTaskResumeAll+0x134>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d010      	beq.n	800a334 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a312:	f000 f859 	bl	800a3c8 <xTaskIncrementTick>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a31c:	4b16      	ldr	r3, [pc, #88]	; (800a378 <xTaskResumeAll+0x130>)
 800a31e:	2201      	movs	r2, #1
 800a320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3b01      	subs	r3, #1
 800a326:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f1      	bne.n	800a312 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <xTaskResumeAll+0x134>)
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a334:	4b10      	ldr	r3, [pc, #64]	; (800a378 <xTaskResumeAll+0x130>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a340:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <xTaskResumeAll+0x138>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a350:	f001 f9e8 	bl	800b724 <vPortExitCritical>

	return xAlreadyYielded;
 800a354:	68bb      	ldr	r3, [r7, #8]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	2000115c 	.word	0x2000115c
 800a364:	20001134 	.word	0x20001134
 800a368:	200010f4 	.word	0x200010f4
 800a36c:	2000113c 	.word	0x2000113c
 800a370:	20000c64 	.word	0x20000c64
 800a374:	20000c60 	.word	0x20000c60
 800a378:	20001148 	.word	0x20001148
 800a37c:	20001144 	.word	0x20001144
 800a380:	e000ed04 	.word	0xe000ed04

0800a384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a38a:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <xTaskGetTickCount+0x1c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a390:	687b      	ldr	r3, [r7, #4]
}
 800a392:	4618      	mov	r0, r3
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20001138 	.word	0x20001138

0800a3a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3aa:	f001 fa6d 	bl	800b888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <xTaskGetTickCountFromISR+0x20>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3b8:	683b      	ldr	r3, [r7, #0]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20001138 	.word	0x20001138

0800a3c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3d2:	4b4f      	ldr	r3, [pc, #316]	; (800a510 <xTaskIncrementTick+0x148>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f040 808f 	bne.w	800a4fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3dc:	4b4d      	ldr	r3, [pc, #308]	; (800a514 <xTaskIncrementTick+0x14c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3e4:	4a4b      	ldr	r2, [pc, #300]	; (800a514 <xTaskIncrementTick+0x14c>)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d120      	bne.n	800a432 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3f0:	4b49      	ldr	r3, [pc, #292]	; (800a518 <xTaskIncrementTick+0x150>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <xTaskIncrementTick+0x48>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	603b      	str	r3, [r7, #0]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <xTaskIncrementTick+0x46>
 800a410:	4b41      	ldr	r3, [pc, #260]	; (800a518 <xTaskIncrementTick+0x150>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	4b41      	ldr	r3, [pc, #260]	; (800a51c <xTaskIncrementTick+0x154>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a3f      	ldr	r2, [pc, #252]	; (800a518 <xTaskIncrementTick+0x150>)
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	4a3f      	ldr	r2, [pc, #252]	; (800a51c <xTaskIncrementTick+0x154>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	4b3e      	ldr	r3, [pc, #248]	; (800a520 <xTaskIncrementTick+0x158>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a3d      	ldr	r2, [pc, #244]	; (800a520 <xTaskIncrementTick+0x158>)
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	f000 fad1 	bl	800a9d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a432:	4b3c      	ldr	r3, [pc, #240]	; (800a524 <xTaskIncrementTick+0x15c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d349      	bcc.n	800a4d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a43c:	4b36      	ldr	r3, [pc, #216]	; (800a518 <xTaskIncrementTick+0x150>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d104      	bne.n	800a450 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a446:	4b37      	ldr	r3, [pc, #220]	; (800a524 <xTaskIncrementTick+0x15c>)
 800a448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a44c:	601a      	str	r2, [r3, #0]
					break;
 800a44e:	e03f      	b.n	800a4d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a450:	4b31      	ldr	r3, [pc, #196]	; (800a518 <xTaskIncrementTick+0x150>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d203      	bcs.n	800a470 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a468:	4a2e      	ldr	r2, [pc, #184]	; (800a524 <xTaskIncrementTick+0x15c>)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a46e:	e02f      	b.n	800a4d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3304      	adds	r3, #4
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fc29 	bl	8008ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d004      	beq.n	800a48c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	3318      	adds	r3, #24
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fc20 	bl	8008ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a490:	4b25      	ldr	r3, [pc, #148]	; (800a528 <xTaskIncrementTick+0x160>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	429a      	cmp	r2, r3
 800a496:	d903      	bls.n	800a4a0 <xTaskIncrementTick+0xd8>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	4a22      	ldr	r2, [pc, #136]	; (800a528 <xTaskIncrementTick+0x160>)
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4a1f      	ldr	r2, [pc, #124]	; (800a52c <xTaskIncrementTick+0x164>)
 800a4ae:	441a      	add	r2, r3
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	f7fe fbab 	bl	8008c12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c0:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <xTaskIncrementTick+0x168>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d3b8      	bcc.n	800a43c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ce:	e7b5      	b.n	800a43c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4d0:	4b17      	ldr	r3, [pc, #92]	; (800a530 <xTaskIncrementTick+0x168>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d6:	4915      	ldr	r1, [pc, #84]	; (800a52c <xTaskIncrementTick+0x164>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d901      	bls.n	800a4ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4ec:	4b11      	ldr	r3, [pc, #68]	; (800a534 <xTaskIncrementTick+0x16c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	e004      	b.n	800a504 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4fa:	4b0f      	ldr	r3, [pc, #60]	; (800a538 <xTaskIncrementTick+0x170>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3301      	adds	r3, #1
 800a500:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <xTaskIncrementTick+0x170>)
 800a502:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a504:	697b      	ldr	r3, [r7, #20]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	2000115c 	.word	0x2000115c
 800a514:	20001138 	.word	0x20001138
 800a518:	200010ec 	.word	0x200010ec
 800a51c:	200010f0 	.word	0x200010f0
 800a520:	2000114c 	.word	0x2000114c
 800a524:	20001154 	.word	0x20001154
 800a528:	2000113c 	.word	0x2000113c
 800a52c:	20000c64 	.word	0x20000c64
 800a530:	20000c60 	.word	0x20000c60
 800a534:	20001148 	.word	0x20001148
 800a538:	20001144 	.word	0x20001144

0800a53c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a542:	4b28      	ldr	r3, [pc, #160]	; (800a5e4 <vTaskSwitchContext+0xa8>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a54a:	4b27      	ldr	r3, [pc, #156]	; (800a5e8 <vTaskSwitchContext+0xac>)
 800a54c:	2201      	movs	r2, #1
 800a54e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a550:	e041      	b.n	800a5d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a552:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <vTaskSwitchContext+0xac>)
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a558:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <vTaskSwitchContext+0xb0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e010      	b.n	800a582 <vTaskSwitchContext+0x46>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10a      	bne.n	800a57c <vTaskSwitchContext+0x40>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	607b      	str	r3, [r7, #4]
}
 800a578:	bf00      	nop
 800a57a:	e7fe      	b.n	800a57a <vTaskSwitchContext+0x3e>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3b01      	subs	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	491b      	ldr	r1, [pc, #108]	; (800a5f0 <vTaskSwitchContext+0xb4>)
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4613      	mov	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4413      	add	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0e4      	beq.n	800a560 <vTaskSwitchContext+0x24>
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4a13      	ldr	r2, [pc, #76]	; (800a5f0 <vTaskSwitchContext+0xb4>)
 800a5a2:	4413      	add	r3, r2
 800a5a4:	60bb      	str	r3, [r7, #8]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	605a      	str	r2, [r3, #4]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d104      	bne.n	800a5c6 <vTaskSwitchContext+0x8a>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <vTaskSwitchContext+0xb8>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	4a06      	ldr	r2, [pc, #24]	; (800a5ec <vTaskSwitchContext+0xb0>)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6013      	str	r3, [r2, #0]
}
 800a5d6:	bf00      	nop
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	2000115c 	.word	0x2000115c
 800a5e8:	20001148 	.word	0x20001148
 800a5ec:	2000113c 	.word	0x2000113c
 800a5f0:	20000c64 	.word	0x20000c64
 800a5f4:	20000c60 	.word	0x20000c60

0800a5f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60fb      	str	r3, [r7, #12]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <vTaskPlaceOnEventList+0x44>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3318      	adds	r3, #24
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fe fb17 	bl	8008c5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a62c:	2101      	movs	r1, #1
 800a62e:	6838      	ldr	r0, [r7, #0]
 800a630:	f000 fb7a 	bl	800ad28 <prvAddCurrentTaskToDelayedList>
}
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20000c60 	.word	0x20000c60

0800a640 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10a      	bne.n	800a668 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	617b      	str	r3, [r7, #20]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <vTaskPlaceOnEventListRestricted+0x54>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3318      	adds	r3, #24
 800a66e:	4619      	mov	r1, r3
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7fe face 	bl	8008c12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a680:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	68b8      	ldr	r0, [r7, #8]
 800a686:	f000 fb4f 	bl	800ad28 <prvAddCurrentTaskToDelayedList>
	}
 800a68a:	bf00      	nop
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000c60 	.word	0x20000c60

0800a698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10a      	bne.n	800a6c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	60fb      	str	r3, [r7, #12]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	3318      	adds	r3, #24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe faff 	bl	8008ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	; (800a748 <xTaskRemoveFromEventList+0xb0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d11d      	bne.n	800a712 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe faf6 	bl	8008ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	4b19      	ldr	r3, [pc, #100]	; (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d903      	bls.n	800a6f4 <xTaskRemoveFromEventList+0x5c>
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	4a16      	ldr	r2, [pc, #88]	; (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4a13      	ldr	r2, [pc, #76]	; (800a750 <xTaskRemoveFromEventList+0xb8>)
 800a702:	441a      	add	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	3304      	adds	r3, #4
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f7fe fa81 	bl	8008c12 <vListInsertEnd>
 800a710:	e005      	b.n	800a71e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	3318      	adds	r3, #24
 800a716:	4619      	mov	r1, r3
 800a718:	480e      	ldr	r0, [pc, #56]	; (800a754 <xTaskRemoveFromEventList+0xbc>)
 800a71a:	f7fe fa7a 	bl	8008c12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <xTaskRemoveFromEventList+0xc0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	429a      	cmp	r2, r3
 800a72a:	d905      	bls.n	800a738 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a730:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <xTaskRemoveFromEventList+0xc4>)
 800a732:	2201      	movs	r2, #1
 800a734:	601a      	str	r2, [r3, #0]
 800a736:	e001      	b.n	800a73c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a73c:	697b      	ldr	r3, [r7, #20]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2000115c 	.word	0x2000115c
 800a74c:	2000113c 	.word	0x2000113c
 800a750:	20000c64 	.word	0x20000c64
 800a754:	200010f4 	.word	0x200010f4
 800a758:	20000c60 	.word	0x20000c60
 800a75c:	20001148 	.word	0x20001148

0800a760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a768:	4b06      	ldr	r3, [pc, #24]	; (800a784 <vTaskInternalSetTimeOutState+0x24>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <vTaskInternalSetTimeOutState+0x28>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	605a      	str	r2, [r3, #4]
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	2000114c 	.word	0x2000114c
 800a788:	20001138 	.word	0x20001138

0800a78c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	613b      	str	r3, [r7, #16]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10a      	bne.n	800a7ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	60fb      	str	r3, [r7, #12]
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a7ce:	f000 ff79 	bl	800b6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	; (800a848 <xTaskCheckForTimeOut+0xbc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ea:	d102      	bne.n	800a7f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	e023      	b.n	800a83a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	4b15      	ldr	r3, [pc, #84]	; (800a84c <xTaskCheckForTimeOut+0xc0>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d007      	beq.n	800a80e <xTaskCheckForTimeOut+0x82>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	429a      	cmp	r2, r3
 800a806:	d302      	bcc.n	800a80e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	61fb      	str	r3, [r7, #28]
 800a80c:	e015      	b.n	800a83a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	429a      	cmp	r2, r3
 800a816:	d20b      	bcs.n	800a830 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	1ad2      	subs	r2, r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff ff9b 	bl	800a760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	61fb      	str	r3, [r7, #28]
 800a82e:	e004      	b.n	800a83a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a836:	2301      	movs	r3, #1
 800a838:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a83a:	f000 ff73 	bl	800b724 <vPortExitCritical>

	return xReturn;
 800a83e:	69fb      	ldr	r3, [r7, #28]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3720      	adds	r7, #32
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20001138 	.word	0x20001138
 800a84c:	2000114c 	.word	0x2000114c

0800a850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a850:	b480      	push	{r7}
 800a852:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a854:	4b03      	ldr	r3, [pc, #12]	; (800a864 <vTaskMissedYield+0x14>)
 800a856:	2201      	movs	r2, #1
 800a858:	601a      	str	r2, [r3, #0]
}
 800a85a:	bf00      	nop
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	20001148 	.word	0x20001148

0800a868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a870:	f000 f852 	bl	800a918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a874:	4b06      	ldr	r3, [pc, #24]	; (800a890 <prvIdleTask+0x28>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d9f9      	bls.n	800a870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a87c:	4b05      	ldr	r3, [pc, #20]	; (800a894 <prvIdleTask+0x2c>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a88c:	e7f0      	b.n	800a870 <prvIdleTask+0x8>
 800a88e:	bf00      	nop
 800a890:	20000c64 	.word	0x20000c64
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a89e:	2300      	movs	r3, #0
 800a8a0:	607b      	str	r3, [r7, #4]
 800a8a2:	e00c      	b.n	800a8be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4a12      	ldr	r2, [pc, #72]	; (800a8f8 <prvInitialiseTaskLists+0x60>)
 800a8b0:	4413      	add	r3, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe f980 	bl	8008bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b37      	cmp	r3, #55	; 0x37
 800a8c2:	d9ef      	bls.n	800a8a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8c4:	480d      	ldr	r0, [pc, #52]	; (800a8fc <prvInitialiseTaskLists+0x64>)
 800a8c6:	f7fe f977 	bl	8008bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8ca:	480d      	ldr	r0, [pc, #52]	; (800a900 <prvInitialiseTaskLists+0x68>)
 800a8cc:	f7fe f974 	bl	8008bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8d0:	480c      	ldr	r0, [pc, #48]	; (800a904 <prvInitialiseTaskLists+0x6c>)
 800a8d2:	f7fe f971 	bl	8008bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8d6:	480c      	ldr	r0, [pc, #48]	; (800a908 <prvInitialiseTaskLists+0x70>)
 800a8d8:	f7fe f96e 	bl	8008bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8dc:	480b      	ldr	r0, [pc, #44]	; (800a90c <prvInitialiseTaskLists+0x74>)
 800a8de:	f7fe f96b 	bl	8008bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <prvInitialiseTaskLists+0x78>)
 800a8e4:	4a05      	ldr	r2, [pc, #20]	; (800a8fc <prvInitialiseTaskLists+0x64>)
 800a8e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8e8:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <prvInitialiseTaskLists+0x7c>)
 800a8ea:	4a05      	ldr	r2, [pc, #20]	; (800a900 <prvInitialiseTaskLists+0x68>)
 800a8ec:	601a      	str	r2, [r3, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20000c64 	.word	0x20000c64
 800a8fc:	200010c4 	.word	0x200010c4
 800a900:	200010d8 	.word	0x200010d8
 800a904:	200010f4 	.word	0x200010f4
 800a908:	20001108 	.word	0x20001108
 800a90c:	20001120 	.word	0x20001120
 800a910:	200010ec 	.word	0x200010ec
 800a914:	200010f0 	.word	0x200010f0

0800a918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a91e:	e019      	b.n	800a954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a920:	f000 fed0 	bl	800b6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a924:	4b10      	ldr	r3, [pc, #64]	; (800a968 <prvCheckTasksWaitingTermination+0x50>)
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3304      	adds	r3, #4
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe f9cb 	bl	8008ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a936:	4b0d      	ldr	r3, [pc, #52]	; (800a96c <prvCheckTasksWaitingTermination+0x54>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	4a0b      	ldr	r2, [pc, #44]	; (800a96c <prvCheckTasksWaitingTermination+0x54>)
 800a93e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a940:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <prvCheckTasksWaitingTermination+0x58>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3b01      	subs	r3, #1
 800a946:	4a0a      	ldr	r2, [pc, #40]	; (800a970 <prvCheckTasksWaitingTermination+0x58>)
 800a948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a94a:	f000 feeb 	bl	800b724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f810 	bl	800a974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a954:	4b06      	ldr	r3, [pc, #24]	; (800a970 <prvCheckTasksWaitingTermination+0x58>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e1      	bne.n	800a920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20001108 	.word	0x20001108
 800a96c:	20001134 	.word	0x20001134
 800a970:	2000111c 	.word	0x2000111c

0800a974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a982:	2b00      	cmp	r3, #0
 800a984:	d108      	bne.n	800a998 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 f888 	bl	800baa0 <vPortFree>
				vPortFree( pxTCB );
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 f885 	bl	800baa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a996:	e018      	b.n	800a9ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d103      	bne.n	800a9aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 f87c 	bl	800baa0 <vPortFree>
	}
 800a9a8:	e00f      	b.n	800a9ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d00a      	beq.n	800a9ca <prvDeleteTCB+0x56>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	60fb      	str	r3, [r7, #12]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <prvDeleteTCB+0x54>
	}
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9da:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <prvResetNextTaskUnblockTime+0x38>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d104      	bne.n	800a9ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <prvResetNextTaskUnblockTime+0x3c>)
 800a9e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9ec:	e008      	b.n	800aa00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ee:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <prvResetNextTaskUnblockTime+0x38>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	4a04      	ldr	r2, [pc, #16]	; (800aa10 <prvResetNextTaskUnblockTime+0x3c>)
 800a9fe:	6013      	str	r3, [r2, #0]
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	200010ec 	.word	0x200010ec
 800aa10:	20001154 	.word	0x20001154

0800aa14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <xTaskGetSchedulerState+0x34>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d102      	bne.n	800aa28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa22:	2301      	movs	r3, #1
 800aa24:	607b      	str	r3, [r7, #4]
 800aa26:	e008      	b.n	800aa3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa28:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <xTaskGetSchedulerState+0x38>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d102      	bne.n	800aa36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa30:	2302      	movs	r3, #2
 800aa32:	607b      	str	r3, [r7, #4]
 800aa34:	e001      	b.n	800aa3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa36:	2300      	movs	r3, #0
 800aa38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa3a:	687b      	ldr	r3, [r7, #4]
	}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	20001140 	.word	0x20001140
 800aa4c:	2000115c 	.word	0x2000115c

0800aa50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d051      	beq.n	800ab0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6a:	4b2a      	ldr	r3, [pc, #168]	; (800ab14 <xTaskPriorityInherit+0xc4>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d241      	bcs.n	800aaf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db06      	blt.n	800aa8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa7c:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <xTaskPriorityInherit+0xc4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	6959      	ldr	r1, [r3, #20]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4a1f      	ldr	r2, [pc, #124]	; (800ab18 <xTaskPriorityInherit+0xc8>)
 800aa9c:	4413      	add	r3, r2
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	d122      	bne.n	800aae8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe f910 	bl	8008ccc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aaac:	4b19      	ldr	r3, [pc, #100]	; (800ab14 <xTaskPriorityInherit+0xc4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaba:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <xTaskPriorityInherit+0xcc>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d903      	bls.n	800aaca <xTaskPriorityInherit+0x7a>
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	4a15      	ldr	r2, [pc, #84]	; (800ab1c <xTaskPriorityInherit+0xcc>)
 800aac8:	6013      	str	r3, [r2, #0]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4a10      	ldr	r2, [pc, #64]	; (800ab18 <xTaskPriorityInherit+0xc8>)
 800aad8:	441a      	add	r2, r3
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	3304      	adds	r3, #4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f7fe f896 	bl	8008c12 <vListInsertEnd>
 800aae6:	e004      	b.n	800aaf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aae8:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <xTaskPriorityInherit+0xc4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	e008      	b.n	800ab0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aafc:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <xTaskPriorityInherit+0xc4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d201      	bcs.n	800ab0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab06:	2301      	movs	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
	}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20000c60 	.word	0x20000c60
 800ab18:	20000c64 	.word	0x20000c64
 800ab1c:	2000113c 	.word	0x2000113c

0800ab20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d056      	beq.n	800abe4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab36:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <xTaskPriorityDisinherit+0xd0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d00a      	beq.n	800ab56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60fb      	str	r3, [r7, #12]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	60bb      	str	r3, [r7, #8]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d02c      	beq.n	800abe4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d128      	bne.n	800abe4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe f898 	bl	8008ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	4b0f      	ldr	r3, [pc, #60]	; (800abf4 <xTaskPriorityDisinherit+0xd4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d903      	bls.n	800abc4 <xTaskPriorityDisinherit+0xa4>
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	4a0c      	ldr	r2, [pc, #48]	; (800abf4 <xTaskPriorityDisinherit+0xd4>)
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <xTaskPriorityDisinherit+0xd8>)
 800abd2:	441a      	add	r2, r3
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	3304      	adds	r3, #4
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f7fe f819 	bl	8008c12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abe0:	2301      	movs	r3, #1
 800abe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abe4:	697b      	ldr	r3, [r7, #20]
	}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000c60 	.word	0x20000c60
 800abf4:	2000113c 	.word	0x2000113c
 800abf8:	20000c64 	.word	0x20000c64

0800abfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d06a      	beq.n	800acea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	60fb      	str	r3, [r7, #12]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d902      	bls.n	800ac42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	61fb      	str	r3, [r7, #28]
 800ac40:	e002      	b.n	800ac48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	69fa      	ldr	r2, [r7, #28]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d04b      	beq.n	800acea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d146      	bne.n	800acea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ac5c:	4b25      	ldr	r3, [pc, #148]	; (800acf4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69ba      	ldr	r2, [r7, #24]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d10a      	bne.n	800ac7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	60bb      	str	r3, [r7, #8]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	db04      	blt.n	800ac9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	6959      	ldr	r1, [r3, #20]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4a13      	ldr	r2, [pc, #76]	; (800acf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800acaa:	4413      	add	r3, r2
 800acac:	4299      	cmp	r1, r3
 800acae:	d11c      	bne.n	800acea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe f809 	bl	8008ccc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d903      	bls.n	800acce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acca:	4a0c      	ldr	r2, [pc, #48]	; (800acfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4a07      	ldr	r2, [pc, #28]	; (800acf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800acdc:	441a      	add	r2, r3
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4619      	mov	r1, r3
 800ace4:	4610      	mov	r0, r2
 800ace6:	f7fd ff94 	bl	8008c12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acea:	bf00      	nop
 800acec:	3720      	adds	r7, #32
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20000c60 	.word	0x20000c60
 800acf8:	20000c64 	.word	0x20000c64
 800acfc:	2000113c 	.word	0x2000113c

0800ad00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad04:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d004      	beq.n	800ad16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad0c:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad12:	3201      	adds	r2, #1
 800ad14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ad16:	4b03      	ldr	r3, [pc, #12]	; (800ad24 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad18:	681b      	ldr	r3, [r3, #0]
	}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000c60 	.word	0x20000c60

0800ad28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad32:	4b21      	ldr	r3, [pc, #132]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad38:	4b20      	ldr	r3, [pc, #128]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fd ffc4 	bl	8008ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad4a:	d10a      	bne.n	800ad62 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d007      	beq.n	800ad62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad52:	4b1a      	ldr	r3, [pc, #104]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4819      	ldr	r0, [pc, #100]	; (800adc0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad5c:	f7fd ff59 	bl	8008c12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad60:	e026      	b.n	800adb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4413      	add	r3, r2
 800ad68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad6a:	4b14      	ldr	r3, [pc, #80]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d209      	bcs.n	800ad8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f7fd ff67 	bl	8008c5a <vListInsert>
}
 800ad8c:	e010      	b.n	800adb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8e:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fd ff5d 	bl	8008c5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d202      	bcs.n	800adb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adaa:	4a08      	ldr	r2, [pc, #32]	; (800adcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6013      	str	r3, [r2, #0]
}
 800adb0:	bf00      	nop
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20001138 	.word	0x20001138
 800adbc:	20000c60 	.word	0x20000c60
 800adc0:	20001120 	.word	0x20001120
 800adc4:	200010f0 	.word	0x200010f0
 800adc8:	200010ec 	.word	0x200010ec
 800adcc:	20001154 	.word	0x20001154

0800add0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08a      	sub	sp, #40	; 0x28
 800add4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adda:	f000 fb07 	bl	800b3ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adde:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <xTimerCreateTimerTask+0x80>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d021      	beq.n	800ae2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adee:	1d3a      	adds	r2, r7, #4
 800adf0:	f107 0108 	add.w	r1, r7, #8
 800adf4:	f107 030c 	add.w	r3, r7, #12
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fd fec3 	bl	8008b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	9202      	str	r2, [sp, #8]
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	2302      	movs	r3, #2
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	460a      	mov	r2, r1
 800ae10:	4910      	ldr	r1, [pc, #64]	; (800ae54 <xTimerCreateTimerTask+0x84>)
 800ae12:	4811      	ldr	r0, [pc, #68]	; (800ae58 <xTimerCreateTimerTask+0x88>)
 800ae14:	f7fe ffce 	bl	8009db4 <xTaskCreateStatic>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4a10      	ldr	r2, [pc, #64]	; (800ae5c <xTimerCreateTimerTask+0x8c>)
 800ae1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <xTimerCreateTimerTask+0x8c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae26:	2301      	movs	r3, #1
 800ae28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	613b      	str	r3, [r7, #16]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae46:	697b      	ldr	r3, [r7, #20]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20001190 	.word	0x20001190
 800ae54:	0801aa7c 	.word	0x0801aa7c
 800ae58:	0800af95 	.word	0x0800af95
 800ae5c:	20001194 	.word	0x20001194

0800ae60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08a      	sub	sp, #40	; 0x28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10a      	bne.n	800ae8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	623b      	str	r3, [r7, #32]
}
 800ae8a:	bf00      	nop
 800ae8c:	e7fe      	b.n	800ae8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <xTimerGenericCommand+0x98>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d02a      	beq.n	800aeec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b05      	cmp	r3, #5
 800aea6:	dc18      	bgt.n	800aeda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aea8:	f7ff fdb4 	bl	800aa14 <xTaskGetSchedulerState>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d109      	bne.n	800aec6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <xTimerGenericCommand+0x98>)
 800aeb4:	6818      	ldr	r0, [r3, #0]
 800aeb6:	f107 0110 	add.w	r1, r7, #16
 800aeba:	2300      	movs	r3, #0
 800aebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aebe:	f7fe f8d7 	bl	8009070 <xQueueGenericSend>
 800aec2:	6278      	str	r0, [r7, #36]	; 0x24
 800aec4:	e012      	b.n	800aeec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aec6:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <xTimerGenericCommand+0x98>)
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	f107 0110 	add.w	r1, r7, #16
 800aece:	2300      	movs	r3, #0
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7fe f8cd 	bl	8009070 <xQueueGenericSend>
 800aed6:	6278      	str	r0, [r7, #36]	; 0x24
 800aed8:	e008      	b.n	800aeec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeda:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <xTimerGenericCommand+0x98>)
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f107 0110 	add.w	r1, r7, #16
 800aee2:	2300      	movs	r3, #0
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	f7fe f9c1 	bl	800926c <xQueueGenericSendFromISR>
 800aeea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3728      	adds	r7, #40	; 0x28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20001190 	.word	0x20001190

0800aefc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af02      	add	r7, sp, #8
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af06:	4b22      	ldr	r3, [pc, #136]	; (800af90 <prvProcessExpiredTimer+0x94>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3304      	adds	r3, #4
 800af14:	4618      	mov	r0, r3
 800af16:	f7fd fed9 	bl	8008ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b00      	cmp	r3, #0
 800af26:	d022      	beq.n	800af6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	699a      	ldr	r2, [r3, #24]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	18d1      	adds	r1, r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	6978      	ldr	r0, [r7, #20]
 800af36:	f000 f8d1 	bl	800b0dc <prvInsertTimerInActiveList>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01f      	beq.n	800af80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af40:	2300      	movs	r3, #0
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	2300      	movs	r3, #0
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	2100      	movs	r1, #0
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f7ff ff88 	bl	800ae60 <xTimerGenericCommand>
 800af50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d113      	bne.n	800af80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60fb      	str	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	6978      	ldr	r0, [r7, #20]
 800af86:	4798      	blx	r3
}
 800af88:	bf00      	nop
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20001188 	.word	0x20001188

0800af94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 f857 	bl	800b054 <prvGetNextExpireTime>
 800afa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4619      	mov	r1, r3
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f803 	bl	800afb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afb2:	f000 f8d5 	bl	800b160 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afb6:	e7f1      	b.n	800af9c <prvTimerTask+0x8>

0800afb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afc2:	f7ff f933 	bl	800a22c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 f866 	bl	800b09c <prvSampleTimeNow>
 800afd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d130      	bne.n	800b03a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10a      	bne.n	800aff4 <prvProcessTimerOrBlockTask+0x3c>
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d806      	bhi.n	800aff4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afe6:	f7ff f92f 	bl	800a248 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afea:	68f9      	ldr	r1, [r7, #12]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ff85 	bl	800aefc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aff2:	e024      	b.n	800b03e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d008      	beq.n	800b00c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <prvProcessTimerOrBlockTask+0x90>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <prvProcessTimerOrBlockTask+0x50>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <prvProcessTimerOrBlockTask+0x52>
 800b008:	2300      	movs	r3, #0
 800b00a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b00c:	4b0f      	ldr	r3, [pc, #60]	; (800b04c <prvProcessTimerOrBlockTask+0x94>)
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	4619      	mov	r1, r3
 800b01a:	f7fe fe97 	bl	8009d4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b01e:	f7ff f913 	bl	800a248 <xTaskResumeAll>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b028:	4b09      	ldr	r3, [pc, #36]	; (800b050 <prvProcessTimerOrBlockTask+0x98>)
 800b02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	f3bf 8f6f 	isb	sy
}
 800b038:	e001      	b.n	800b03e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b03a:	f7ff f905 	bl	800a248 <xTaskResumeAll>
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	2000118c 	.word	0x2000118c
 800b04c:	20001190 	.word	0x20001190
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b05c:	4b0e      	ldr	r3, [pc, #56]	; (800b098 <prvGetNextExpireTime+0x44>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <prvGetNextExpireTime+0x16>
 800b066:	2201      	movs	r2, #1
 800b068:	e000      	b.n	800b06c <prvGetNextExpireTime+0x18>
 800b06a:	2200      	movs	r2, #0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d105      	bne.n	800b084 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b078:	4b07      	ldr	r3, [pc, #28]	; (800b098 <prvGetNextExpireTime+0x44>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	e001      	b.n	800b088 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b088:	68fb      	ldr	r3, [r7, #12]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	20001188 	.word	0x20001188

0800b09c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0a4:	f7ff f96e 	bl	800a384 <xTaskGetTickCount>
 800b0a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <prvSampleTimeNow+0x3c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d205      	bcs.n	800b0c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0b4:	f000 f936 	bl	800b324 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0c6:	4a04      	ldr	r2, [pc, #16]	; (800b0d8 <prvSampleTimeNow+0x3c>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20001198 	.word	0x20001198

0800b0dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d812      	bhi.n	800b128 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	1ad2      	subs	r2, r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d302      	bcc.n	800b116 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b110:	2301      	movs	r3, #1
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e01b      	b.n	800b14e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b116:	4b10      	ldr	r3, [pc, #64]	; (800b158 <prvInsertTimerInActiveList+0x7c>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3304      	adds	r3, #4
 800b11e:	4619      	mov	r1, r3
 800b120:	4610      	mov	r0, r2
 800b122:	f7fd fd9a 	bl	8008c5a <vListInsert>
 800b126:	e012      	b.n	800b14e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d206      	bcs.n	800b13e <prvInsertTimerInActiveList+0x62>
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d302      	bcc.n	800b13e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	e007      	b.n	800b14e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <prvInsertTimerInActiveList+0x80>)
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3304      	adds	r3, #4
 800b146:	4619      	mov	r1, r3
 800b148:	4610      	mov	r0, r2
 800b14a:	f7fd fd86 	bl	8008c5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b14e:	697b      	ldr	r3, [r7, #20]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	2000118c 	.word	0x2000118c
 800b15c:	20001188 	.word	0x20001188

0800b160 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	; 0x38
 800b164:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b166:	e0ca      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da18      	bge.n	800b1a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b16e:	1d3b      	adds	r3, r7, #4
 800b170:	3304      	adds	r3, #4
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	61fb      	str	r3, [r7, #28]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b196:	6850      	ldr	r0, [r2, #4]
 800b198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19a:	6892      	ldr	r2, [r2, #8]
 800b19c:	4611      	mov	r1, r2
 800b19e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f2c0 80aa 	blt.w	800b2fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d004      	beq.n	800b1be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fd fd87 	bl	8008ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ff6b 	bl	800b09c <prvSampleTimeNow>
 800b1c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b09      	cmp	r3, #9
 800b1cc:	f200 8097 	bhi.w	800b2fe <prvProcessReceivedCommands+0x19e>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <prvProcessReceivedCommands+0x78>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b201 	.word	0x0800b201
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b201 	.word	0x0800b201
 800b1e4:	0800b275 	.word	0x0800b275
 800b1e8:	0800b289 	.word	0x0800b289
 800b1ec:	0800b2d3 	.word	0x0800b2d3
 800b1f0:	0800b201 	.word	0x0800b201
 800b1f4:	0800b201 	.word	0x0800b201
 800b1f8:	0800b275 	.word	0x0800b275
 800b1fc:	0800b289 	.word	0x0800b289
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	18d1      	adds	r1, r2, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b220:	f7ff ff5c 	bl	800b0dc <prvInsertTimerInActiveList>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d069      	beq.n	800b2fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b230:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d05e      	beq.n	800b2fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	441a      	add	r2, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2300      	movs	r3, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b252:	f7ff fe05 	bl	800ae60 <xTimerGenericCommand>
 800b256:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d14f      	bne.n	800b2fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	61bb      	str	r3, [r7, #24]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b27a:	f023 0301 	bic.w	r3, r3, #1
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b286:	e03a      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b28e:	f043 0301 	orr.w	r3, r3, #1
 800b292:	b2da      	uxtb	r2, r3
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	699b      	ldr	r3, [r3, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	617b      	str	r3, [r7, #20]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	699a      	ldr	r2, [r3, #24]
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	18d1      	adds	r1, r2, r3
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2cc:	f7ff ff06 	bl	800b0dc <prvInsertTimerInActiveList>
					break;
 800b2d0:	e015      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d103      	bne.n	800b2e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e2:	f000 fbdd 	bl	800baa0 <vPortFree>
 800b2e6:	e00a      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ee:	f023 0301 	bic.w	r3, r3, #1
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2fa:	e000      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b2fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2fe:	4b08      	ldr	r3, [pc, #32]	; (800b320 <prvProcessReceivedCommands+0x1c0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	1d39      	adds	r1, r7, #4
 800b304:	2200      	movs	r2, #0
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe f8d8 	bl	80094bc <xQueueReceive>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f af2a 	bne.w	800b168 <prvProcessReceivedCommands+0x8>
	}
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop
 800b318:	3730      	adds	r7, #48	; 0x30
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20001190 	.word	0x20001190

0800b324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b32a:	e048      	b.n	800b3be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b32c:	4b2d      	ldr	r3, [pc, #180]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b336:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3304      	adds	r3, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f7fd fcc1 	bl	8008ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d02e      	beq.n	800b3be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4413      	add	r3, r2
 800b368:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d90e      	bls.n	800b390 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b37e:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3304      	adds	r3, #4
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fd fc66 	bl	8008c5a <vListInsert>
 800b38e:	e016      	b.n	800b3be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b390:	2300      	movs	r3, #0
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	2300      	movs	r3, #0
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	2100      	movs	r1, #0
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff fd60 	bl	800ae60 <xTimerGenericCommand>
 800b3a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	603b      	str	r3, [r7, #0]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3be:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1b1      	bne.n	800b32c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3c8:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <prvSwitchTimerLists+0xc4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a04      	ldr	r2, [pc, #16]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b3d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3d6:	4a04      	ldr	r2, [pc, #16]	; (800b3e8 <prvSwitchTimerLists+0xc4>)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	6013      	str	r3, [r2, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	20001188 	.word	0x20001188
 800b3e8:	2000118c 	.word	0x2000118c

0800b3ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3f2:	f000 f967 	bl	800b6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3f6:	4b15      	ldr	r3, [pc, #84]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d120      	bne.n	800b440 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3fe:	4814      	ldr	r0, [pc, #80]	; (800b450 <prvCheckForValidListAndQueue+0x64>)
 800b400:	f7fd fbda 	bl	8008bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b404:	4813      	ldr	r0, [pc, #76]	; (800b454 <prvCheckForValidListAndQueue+0x68>)
 800b406:	f7fd fbd7 	bl	8008bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b40a:	4b13      	ldr	r3, [pc, #76]	; (800b458 <prvCheckForValidListAndQueue+0x6c>)
 800b40c:	4a10      	ldr	r2, [pc, #64]	; (800b450 <prvCheckForValidListAndQueue+0x64>)
 800b40e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b410:	4b12      	ldr	r3, [pc, #72]	; (800b45c <prvCheckForValidListAndQueue+0x70>)
 800b412:	4a10      	ldr	r2, [pc, #64]	; (800b454 <prvCheckForValidListAndQueue+0x68>)
 800b414:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b416:	2300      	movs	r3, #0
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	4b11      	ldr	r3, [pc, #68]	; (800b460 <prvCheckForValidListAndQueue+0x74>)
 800b41c:	4a11      	ldr	r2, [pc, #68]	; (800b464 <prvCheckForValidListAndQueue+0x78>)
 800b41e:	2110      	movs	r1, #16
 800b420:	200a      	movs	r0, #10
 800b422:	f7fd fce5 	bl	8008df0 <xQueueGenericCreateStatic>
 800b426:	4603      	mov	r3, r0
 800b428:	4a08      	ldr	r2, [pc, #32]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b42a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	490b      	ldr	r1, [pc, #44]	; (800b468 <prvCheckForValidListAndQueue+0x7c>)
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fc32 	bl	8009ca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b440:	f000 f970 	bl	800b724 <vPortExitCritical>
}
 800b444:	bf00      	nop
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20001190 	.word	0x20001190
 800b450:	20001160 	.word	0x20001160
 800b454:	20001174 	.word	0x20001174
 800b458:	20001188 	.word	0x20001188
 800b45c:	2000118c 	.word	0x2000118c
 800b460:	2000123c 	.word	0x2000123c
 800b464:	2000119c 	.word	0x2000119c
 800b468:	0801aa84 	.word	0x0801aa84

0800b46c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3b04      	subs	r3, #4
 800b48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f023 0201 	bic.w	r2, r3, #1
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b49c:	4a0c      	ldr	r2, [pc, #48]	; (800b4d0 <pxPortInitialiseStack+0x64>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3b14      	subs	r3, #20
 800b4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f06f 0202 	mvn.w	r2, #2
 800b4ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3b20      	subs	r3, #32
 800b4c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	0800b4d5 	.word	0x0800b4d5

0800b4d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <prvTaskExitError+0x54>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e6:	d00a      	beq.n	800b4fe <prvTaskExitError+0x2a>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	60fb      	str	r3, [r7, #12]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <prvTaskExitError+0x28>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60bb      	str	r3, [r7, #8]
}
 800b510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b512:	bf00      	nop
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0fc      	beq.n	800b514 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b51a:	bf00      	nop
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	20000008 	.word	0x20000008
 800b52c:	00000000 	.word	0x00000000

0800b530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b530:	4b07      	ldr	r3, [pc, #28]	; (800b550 <pxCurrentTCBConst2>)
 800b532:	6819      	ldr	r1, [r3, #0]
 800b534:	6808      	ldr	r0, [r1, #0]
 800b536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53a:	f380 8809 	msr	PSP, r0
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f380 8811 	msr	BASEPRI, r0
 800b54a:	4770      	bx	lr
 800b54c:	f3af 8000 	nop.w

0800b550 <pxCurrentTCBConst2>:
 800b550:	20000c60 	.word	0x20000c60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop

0800b558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b558:	4808      	ldr	r0, [pc, #32]	; (800b57c <prvPortStartFirstTask+0x24>)
 800b55a:	6800      	ldr	r0, [r0, #0]
 800b55c:	6800      	ldr	r0, [r0, #0]
 800b55e:	f380 8808 	msr	MSP, r0
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8814 	msr	CONTROL, r0
 800b56a:	b662      	cpsie	i
 800b56c:	b661      	cpsie	f
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	df00      	svc	0
 800b578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b57a:	bf00      	nop
 800b57c:	e000ed08 	.word	0xe000ed08

0800b580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b586:	4b46      	ldr	r3, [pc, #280]	; (800b6a0 <xPortStartScheduler+0x120>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a46      	ldr	r2, [pc, #280]	; (800b6a4 <xPortStartScheduler+0x124>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d10a      	bne.n	800b5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	613b      	str	r3, [r7, #16]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5a6:	4b3e      	ldr	r3, [pc, #248]	; (800b6a0 <xPortStartScheduler+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a3f      	ldr	r2, [pc, #252]	; (800b6a8 <xPortStartScheduler+0x128>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5c6:	4b39      	ldr	r3, [pc, #228]	; (800b6ac <xPortStartScheduler+0x12c>)
 800b5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	22ff      	movs	r2, #255	; 0xff
 800b5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e0:	78fb      	ldrb	r3, [r7, #3]
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	4b31      	ldr	r3, [pc, #196]	; (800b6b0 <xPortStartScheduler+0x130>)
 800b5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5ee:	4b31      	ldr	r3, [pc, #196]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b5f0:	2207      	movs	r2, #7
 800b5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5f4:	e009      	b.n	800b60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b5f6:	4b2f      	ldr	r3, [pc, #188]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	4a2d      	ldr	r2, [pc, #180]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	b2db      	uxtb	r3, r3
 800b608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b612:	2b80      	cmp	r3, #128	; 0x80
 800b614:	d0ef      	beq.n	800b5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b616:	4b27      	ldr	r3, [pc, #156]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f1c3 0307 	rsb	r3, r3, #7
 800b61e:	2b04      	cmp	r3, #4
 800b620:	d00a      	beq.n	800b638 <xPortStartScheduler+0xb8>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60bb      	str	r3, [r7, #8]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b638:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	4a1d      	ldr	r2, [pc, #116]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b642:	4b1c      	ldr	r3, [pc, #112]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b64a:	4a1a      	ldr	r2, [pc, #104]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	b2da      	uxtb	r2, r3
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b656:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a14      	ldr	r2, [pc, #80]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b66e:	f000 f8dd 	bl	800b82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <xPortStartScheduler+0x13c>)
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b678:	f000 f8fc 	bl	800b874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b67c:	4b10      	ldr	r3, [pc, #64]	; (800b6c0 <xPortStartScheduler+0x140>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a0f      	ldr	r2, [pc, #60]	; (800b6c0 <xPortStartScheduler+0x140>)
 800b682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b688:	f7ff ff66 	bl	800b558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b68c:	f7fe ff56 	bl	800a53c <vTaskSwitchContext>
	prvTaskExitError();
 800b690:	f7ff ff20 	bl	800b4d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	e000ed00 	.word	0xe000ed00
 800b6a4:	410fc271 	.word	0x410fc271
 800b6a8:	410fc270 	.word	0x410fc270
 800b6ac:	e000e400 	.word	0xe000e400
 800b6b0:	2000128c 	.word	0x2000128c
 800b6b4:	20001290 	.word	0x20001290
 800b6b8:	e000ed20 	.word	0xe000ed20
 800b6bc:	20000008 	.word	0x20000008
 800b6c0:	e000ef34 	.word	0xe000ef34

0800b6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	607b      	str	r3, [r7, #4]
}
 800b6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6de:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <vPortEnterCritical+0x58>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	4a0d      	ldr	r2, [pc, #52]	; (800b71c <vPortEnterCritical+0x58>)
 800b6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <vPortEnterCritical+0x58>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d10f      	bne.n	800b710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <vPortEnterCritical+0x5c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <vPortEnterCritical+0x4c>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	603b      	str	r3, [r7, #0]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <vPortEnterCritical+0x4a>
	}
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	20000008 	.word	0x20000008
 800b720:	e000ed04 	.word	0xe000ed04

0800b724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b72a:	4b12      	ldr	r3, [pc, #72]	; (800b774 <vPortExitCritical+0x50>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <vPortExitCritical+0x24>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	607b      	str	r3, [r7, #4]
}
 800b744:	bf00      	nop
 800b746:	e7fe      	b.n	800b746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b748:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <vPortExitCritical+0x50>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	4a09      	ldr	r2, [pc, #36]	; (800b774 <vPortExitCritical+0x50>)
 800b750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b752:	4b08      	ldr	r3, [pc, #32]	; (800b774 <vPortExitCritical+0x50>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d105      	bne.n	800b766 <vPortExitCritical+0x42>
 800b75a:	2300      	movs	r3, #0
 800b75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	f383 8811 	msr	BASEPRI, r3
}
 800b764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	20000008 	.word	0x20000008
	...

0800b780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b780:	f3ef 8009 	mrs	r0, PSP
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	4b15      	ldr	r3, [pc, #84]	; (800b7e0 <pxCurrentTCBConst>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	f01e 0f10 	tst.w	lr, #16
 800b790:	bf08      	it	eq
 800b792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79a:	6010      	str	r0, [r2, #0]
 800b79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7a4:	f380 8811 	msr	BASEPRI, r0
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f7fe fec4 	bl	800a53c <vTaskSwitchContext>
 800b7b4:	f04f 0000 	mov.w	r0, #0
 800b7b8:	f380 8811 	msr	BASEPRI, r0
 800b7bc:	bc09      	pop	{r0, r3}
 800b7be:	6819      	ldr	r1, [r3, #0]
 800b7c0:	6808      	ldr	r0, [r1, #0]
 800b7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c6:	f01e 0f10 	tst.w	lr, #16
 800b7ca:	bf08      	it	eq
 800b7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7d0:	f380 8809 	msr	PSP, r0
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w

0800b7e0 <pxCurrentTCBConst>:
 800b7e0:	20000c60 	.word	0x20000c60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop

0800b7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	607b      	str	r3, [r7, #4]
}
 800b800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b802:	f7fe fde1 	bl	800a3c8 <xTaskIncrementTick>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b80c:	4b06      	ldr	r3, [pc, #24]	; (800b828 <xPortSysTickHandler+0x40>)
 800b80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	2300      	movs	r3, #0
 800b816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f383 8811 	msr	BASEPRI, r3
}
 800b81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <vPortSetupTimerInterrupt+0x34>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b836:	4b0b      	ldr	r3, [pc, #44]	; (800b864 <vPortSetupTimerInterrupt+0x38>)
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b83c:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <vPortSetupTimerInterrupt+0x3c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <vPortSetupTimerInterrupt+0x40>)
 800b842:	fba2 2303 	umull	r2, r3, r2, r3
 800b846:	099b      	lsrs	r3, r3, #6
 800b848:	4a09      	ldr	r2, [pc, #36]	; (800b870 <vPortSetupTimerInterrupt+0x44>)
 800b84a:	3b01      	subs	r3, #1
 800b84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b84e:	4b04      	ldr	r3, [pc, #16]	; (800b860 <vPortSetupTimerInterrupt+0x34>)
 800b850:	2207      	movs	r2, #7
 800b852:	601a      	str	r2, [r3, #0]
}
 800b854:	bf00      	nop
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	e000e010 	.word	0xe000e010
 800b864:	e000e018 	.word	0xe000e018
 800b868:	200003a8 	.word	0x200003a8
 800b86c:	10624dd3 	.word	0x10624dd3
 800b870:	e000e014 	.word	0xe000e014

0800b874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b884 <vPortEnableVFP+0x10>
 800b878:	6801      	ldr	r1, [r0, #0]
 800b87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b87e:	6001      	str	r1, [r0, #0]
 800b880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b882:	bf00      	nop
 800b884:	e000ed88 	.word	0xe000ed88

0800b888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b88e:	f3ef 8305 	mrs	r3, IPSR
 800b892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b0f      	cmp	r3, #15
 800b898:	d914      	bls.n	800b8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b89a:	4a17      	ldr	r2, [pc, #92]	; (800b8f8 <vPortValidateInterruptPriority+0x70>)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4413      	add	r3, r2
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8a4:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <vPortValidateInterruptPriority+0x74>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	7afa      	ldrb	r2, [r7, #11]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d20a      	bcs.n	800b8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	; (800b900 <vPortValidateInterruptPriority+0x78>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <vPortValidateInterruptPriority+0x7c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d90a      	bls.n	800b8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	603b      	str	r3, [r7, #0]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <vPortValidateInterruptPriority+0x60>
	}
 800b8ea:	bf00      	nop
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	e000e3f0 	.word	0xe000e3f0
 800b8fc:	2000128c 	.word	0x2000128c
 800b900:	e000ed0c 	.word	0xe000ed0c
 800b904:	20001290 	.word	0x20001290

0800b908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	; 0x28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b914:	f7fe fc8a 	bl	800a22c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b918:	4b5b      	ldr	r3, [pc, #364]	; (800ba88 <pvPortMalloc+0x180>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b920:	f000 f920 	bl	800bb64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b924:	4b59      	ldr	r3, [pc, #356]	; (800ba8c <pvPortMalloc+0x184>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4013      	ands	r3, r2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f040 8093 	bne.w	800ba58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01d      	beq.n	800b974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b938:	2208      	movs	r2, #8
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4413      	add	r3, r2
 800b93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b00      	cmp	r3, #0
 800b948:	d014      	beq.n	800b974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f023 0307 	bic.w	r3, r3, #7
 800b950:	3308      	adds	r3, #8
 800b952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <pvPortMalloc+0x6c>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	617b      	str	r3, [r7, #20]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d06e      	beq.n	800ba58 <pvPortMalloc+0x150>
 800b97a:	4b45      	ldr	r3, [pc, #276]	; (800ba90 <pvPortMalloc+0x188>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	429a      	cmp	r2, r3
 800b982:	d869      	bhi.n	800ba58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b984:	4b43      	ldr	r3, [pc, #268]	; (800ba94 <pvPortMalloc+0x18c>)
 800b986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b988:	4b42      	ldr	r3, [pc, #264]	; (800ba94 <pvPortMalloc+0x18c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b98e:	e004      	b.n	800b99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d903      	bls.n	800b9ac <pvPortMalloc+0xa4>
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f1      	bne.n	800b990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9ac:	4b36      	ldr	r3, [pc, #216]	; (800ba88 <pvPortMalloc+0x180>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d050      	beq.n	800ba58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2208      	movs	r2, #8
 800b9bc:	4413      	add	r3, r2
 800b9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	2308      	movs	r3, #8
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d91f      	bls.n	800ba18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <pvPortMalloc+0xf8>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	613b      	str	r3, [r7, #16]
}
 800b9fc:	bf00      	nop
 800b9fe:	e7fe      	b.n	800b9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba12:	69b8      	ldr	r0, [r7, #24]
 800ba14:	f000 f90a 	bl	800bc2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba18:	4b1d      	ldr	r3, [pc, #116]	; (800ba90 <pvPortMalloc+0x188>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <pvPortMalloc+0x188>)
 800ba24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba26:	4b1a      	ldr	r3, [pc, #104]	; (800ba90 <pvPortMalloc+0x188>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	4b1b      	ldr	r3, [pc, #108]	; (800ba98 <pvPortMalloc+0x190>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d203      	bcs.n	800ba3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba32:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <pvPortMalloc+0x188>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <pvPortMalloc+0x190>)
 800ba38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <pvPortMalloc+0x184>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	431a      	orrs	r2, r3
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <pvPortMalloc+0x194>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	4a11      	ldr	r2, [pc, #68]	; (800ba9c <pvPortMalloc+0x194>)
 800ba56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba58:	f7fe fbf6 	bl	800a248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	f003 0307 	and.w	r3, r3, #7
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <pvPortMalloc+0x174>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	60fb      	str	r3, [r7, #12]
}
 800ba78:	bf00      	nop
 800ba7a:	e7fe      	b.n	800ba7a <pvPortMalloc+0x172>
	return pvReturn;
 800ba7c:	69fb      	ldr	r3, [r7, #28]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3728      	adds	r7, #40	; 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20031fdc 	.word	0x20031fdc
 800ba8c:	20031ff0 	.word	0x20031ff0
 800ba90:	20031fe0 	.word	0x20031fe0
 800ba94:	20031fd4 	.word	0x20031fd4
 800ba98:	20031fe4 	.word	0x20031fe4
 800ba9c:	20031fe8 	.word	0x20031fe8

0800baa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d04d      	beq.n	800bb4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bab2:	2308      	movs	r3, #8
 800bab4:	425b      	negs	r3, r3
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <vPortFree+0xb8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4013      	ands	r3, r2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <vPortFree+0x44>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	60fb      	str	r3, [r7, #12]
}
 800bae0:	bf00      	nop
 800bae2:	e7fe      	b.n	800bae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00a      	beq.n	800bb02 <vPortFree+0x62>
	__asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	60bb      	str	r3, [r7, #8]
}
 800bafe:	bf00      	nop
 800bb00:	e7fe      	b.n	800bb00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <vPortFree+0xb8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d01e      	beq.n	800bb4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d11a      	bne.n	800bb4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0e      	ldr	r3, [pc, #56]	; (800bb58 <vPortFree+0xb8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	401a      	ands	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb28:	f7fe fb80 	bl	800a22c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <vPortFree+0xbc>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	4a09      	ldr	r2, [pc, #36]	; (800bb5c <vPortFree+0xbc>)
 800bb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f000 f876 	bl	800bc2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <vPortFree+0xc0>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	4a06      	ldr	r2, [pc, #24]	; (800bb60 <vPortFree+0xc0>)
 800bb48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb4a:	f7fe fb7d 	bl	800a248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb4e:	bf00      	nop
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20031ff0 	.word	0x20031ff0
 800bb5c:	20031fe0 	.word	0x20031fe0
 800bb60:	20031fec 	.word	0x20031fec

0800bb64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb6a:	4b29      	ldr	r3, [pc, #164]	; (800bc10 <prvHeapInit+0xac>)
 800bb6c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb6e:	4b29      	ldr	r3, [pc, #164]	; (800bc14 <prvHeapInit+0xb0>)
 800bb70:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f003 0307 	and.w	r3, r3, #7
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00c      	beq.n	800bb96 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3307      	adds	r3, #7
 800bb80:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f023 0307 	bic.w	r3, r3, #7
 800bb88:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	4a20      	ldr	r2, [pc, #128]	; (800bc14 <prvHeapInit+0xb0>)
 800bb92:	4413      	add	r3, r2
 800bb94:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb9a:	4a1f      	ldr	r2, [pc, #124]	; (800bc18 <prvHeapInit+0xb4>)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bba0:	4b1d      	ldr	r3, [pc, #116]	; (800bc18 <prvHeapInit+0xb4>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	4413      	add	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbae:	2208      	movs	r2, #8
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	1a9b      	subs	r3, r3, r2
 800bbb4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f023 0307 	bic.w	r3, r3, #7
 800bbbc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4a16      	ldr	r2, [pc, #88]	; (800bc1c <prvHeapInit+0xb8>)
 800bbc2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbc4:	4b15      	ldr	r3, [pc, #84]	; (800bc1c <prvHeapInit+0xb8>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbcc:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <prvHeapInit+0xb8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	1ad2      	subs	r2, r2, r3
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbe2:	4b0e      	ldr	r3, [pc, #56]	; (800bc1c <prvHeapInit+0xb8>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	4a0c      	ldr	r2, [pc, #48]	; (800bc20 <prvHeapInit+0xbc>)
 800bbf0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	4a0b      	ldr	r2, [pc, #44]	; (800bc24 <prvHeapInit+0xc0>)
 800bbf8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbfa:	4b0b      	ldr	r3, [pc, #44]	; (800bc28 <prvHeapInit+0xc4>)
 800bbfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc00:	601a      	str	r2, [r3, #0]
}
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	00030d40 	.word	0x00030d40
 800bc14:	20001294 	.word	0x20001294
 800bc18:	20031fd4 	.word	0x20031fd4
 800bc1c:	20031fdc 	.word	0x20031fdc
 800bc20:	20031fe4 	.word	0x20031fe4
 800bc24:	20031fe0 	.word	0x20031fe0
 800bc28:	20031ff0 	.word	0x20031ff0

0800bc2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc34:	4b28      	ldr	r3, [pc, #160]	; (800bcd8 <prvInsertBlockIntoFreeList+0xac>)
 800bc36:	60fb      	str	r3, [r7, #12]
 800bc38:	e002      	b.n	800bc40 <prvInsertBlockIntoFreeList+0x14>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d8f7      	bhi.n	800bc3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	4413      	add	r3, r2
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d108      	bne.n	800bc6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	441a      	add	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d118      	bne.n	800bcb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	4b15      	ldr	r3, [pc, #84]	; (800bcdc <prvInsertBlockIntoFreeList+0xb0>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d00d      	beq.n	800bcaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	441a      	add	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]
 800bca8:	e008      	b.n	800bcbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcaa:	4b0c      	ldr	r3, [pc, #48]	; (800bcdc <prvInsertBlockIntoFreeList+0xb0>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e003      	b.n	800bcbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d002      	beq.n	800bcca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcca:	bf00      	nop
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20031fd4 	.word	0x20031fd4
 800bcdc:	20031fdc 	.word	0x20031fdc

0800bce0 <BT_Init>:
extern _RTC rtcTEWS;

extern IRIDIUM_t IRIDIUM;
extern GPS_t GPS;

void BT_Init(void){
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
	BT.rxIndex=0;
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <BT_Init+0x1c>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_DMA(&_BT_USART,&BT.rxTmp,1);
 800bcec:	2201      	movs	r2, #1
 800bcee:	4904      	ldr	r1, [pc, #16]	; (800bd00 <BT_Init+0x20>)
 800bcf0:	4804      	ldr	r0, [pc, #16]	; (800bd04 <BT_Init+0x24>)
 800bcf2:	f7fb f98b 	bl	800700c <HAL_UART_Receive_DMA>
}
 800bcf6:	bf00      	nop
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20032154 	.word	0x20032154
 800bd00:	20032356 	.word	0x20032356
 800bd04:	20033768 	.word	0x20033768

0800bd08 <BT_Callback>:

void BT_Callback(void){
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
	if(BT.rxIndex < sizeof(BT.rxBuffer)-2)
 800bd0c:	4b1f      	ldr	r3, [pc, #124]	; (800bd8c <BT_Callback+0x84>)
 800bd0e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800bd12:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800bd16:	d210      	bcs.n	800bd3a <BT_Callback+0x32>
	{
		BT.rxBuffer[BT.rxIndex] = BT.rxTmp;
 800bd18:	4b1c      	ldr	r3, [pc, #112]	; (800bd8c <BT_Callback+0x84>)
 800bd1a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800bd1e:	461a      	mov	r2, r3
 800bd20:	4b1a      	ldr	r3, [pc, #104]	; (800bd8c <BT_Callback+0x84>)
 800bd22:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 800bd26:	4b19      	ldr	r3, [pc, #100]	; (800bd8c <BT_Callback+0x84>)
 800bd28:	5499      	strb	r1, [r3, r2]
		BT.rxIndex++;
 800bd2a:	4b18      	ldr	r3, [pc, #96]	; (800bd8c <BT_Callback+0x84>)
 800bd2c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800bd30:	3301      	adds	r3, #1
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	4b15      	ldr	r3, [pc, #84]	; (800bd8c <BT_Callback+0x84>)
 800bd36:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	if(BT.rxTmp == 13){
 800bd3a:	4b14      	ldr	r3, [pc, #80]	; (800bd8c <BT_Callback+0x84>)
 800bd3c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bd40:	2b0d      	cmp	r3, #13
 800bd42:	d11c      	bne.n	800bd7e <BT_Callback+0x76>
		if (HAL_GPIO_ReadPin(BT_CON_GPIO_Port, BT_CON_Pin)){
 800bd44:	2104      	movs	r1, #4
 800bd46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bd4a:	f7f6 f8fb 	bl	8001f44 <HAL_GPIO_ReadPin>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d003      	beq.n	800bd5c <BT_Callback+0x54>
			usb_printf("%s\r\n", BT.rxBuffer);
 800bd54:	490d      	ldr	r1, [pc, #52]	; (800bd8c <BT_Callback+0x84>)
 800bd56:	480e      	ldr	r0, [pc, #56]	; (800bd90 <BT_Callback+0x88>)
 800bd58:	f006 fc78 	bl	801264c <usb_printf>
		}
		osMessageQueuePut(usbQueueHandle, &BT.rxBuffer, 0U, 0U);
 800bd5c:	4b0d      	ldr	r3, [pc, #52]	; (800bd94 <BT_Callback+0x8c>)
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	2300      	movs	r3, #0
 800bd62:	2200      	movs	r2, #0
 800bd64:	4909      	ldr	r1, [pc, #36]	; (800bd8c <BT_Callback+0x84>)
 800bd66:	f7fc fe15 	bl	8008994 <osMessageQueuePut>
		memset(BT.rxBuffer,0,sizeof(BT.rxBuffer));
 800bd6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4806      	ldr	r0, [pc, #24]	; (800bd8c <BT_Callback+0x84>)
 800bd72:	f007 fa4b 	bl	801320c <memset>
		BT.rxIndex=0;
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <BT_Callback+0x84>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}

	HAL_UART_Receive_DMA(&_BT_USART,&BT.rxTmp,1);
 800bd7e:	2201      	movs	r2, #1
 800bd80:	4905      	ldr	r1, [pc, #20]	; (800bd98 <BT_Callback+0x90>)
 800bd82:	4806      	ldr	r0, [pc, #24]	; (800bd9c <BT_Callback+0x94>)
 800bd84:	f7fb f942 	bl	800700c <HAL_UART_Receive_DMA>
}
 800bd88:	bf00      	nop
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	20032154 	.word	0x20032154
 800bd90:	0801aa8c 	.word	0x0801aa8c
 800bd94:	20033898 	.word	0x20033898
 800bd98:	20032356 	.word	0x20032356
 800bd9c:	20033768 	.word	0x20033768

0800bda0 <payloadToBytesx>:
 *
 * bitVector	: variable bit vector
 * numBits		: size of bit vector
 * byteArray	x: variable byte array
 */
void payloadToBytesx(uint8_t *bitVector, uint16_t numBits, uint8_t *byteArray) {
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	817b      	strh	r3, [r7, #10]
	for (uint16_t i = 0; i < numBits; i += 8) {
 800bdae:	2300      	movs	r3, #0
 800bdb0:	82fb      	strh	r3, [r7, #22]
 800bdb2:	e028      	b.n	800be06 <payloadToBytesx+0x66>
		uint8_t byte = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	757b      	strb	r3, [r7, #21]
		for (uint8_t b = 0; b < 8; ++b) {
 800bdb8:	2300      	movs	r3, #0
 800bdba:	753b      	strb	r3, [r7, #20]
 800bdbc:	e015      	b.n	800bdea <payloadToBytesx+0x4a>
			byte |= (bitVector[i + b] << (7 - b));
 800bdbe:	8afa      	ldrh	r2, [r7, #22]
 800bdc0:	7d3b      	ldrb	r3, [r7, #20]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	7d3b      	ldrb	r3, [r7, #20]
 800bdd0:	f1c3 0307 	rsb	r3, r3, #7
 800bdd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd8:	b25a      	sxtb	r2, r3
 800bdda:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	757b      	strb	r3, [r7, #21]
		for (uint8_t b = 0; b < 8; ++b) {
 800bde4:	7d3b      	ldrb	r3, [r7, #20]
 800bde6:	3301      	adds	r3, #1
 800bde8:	753b      	strb	r3, [r7, #20]
 800bdea:	7d3b      	ldrb	r3, [r7, #20]
 800bdec:	2b07      	cmp	r3, #7
 800bdee:	d9e6      	bls.n	800bdbe <payloadToBytesx+0x1e>
		}
		byteArray[i / 8] = byte;
 800bdf0:	8afb      	ldrh	r3, [r7, #22]
 800bdf2:	08db      	lsrs	r3, r3, #3
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	7d7a      	ldrb	r2, [r7, #21]
 800bdfe:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < numBits; i += 8) {
 800be00:	8afb      	ldrh	r3, [r7, #22]
 800be02:	3308      	adds	r3, #8
 800be04:	82fb      	strh	r3, [r7, #22]
 800be06:	8afa      	ldrh	r2, [r7, #22]
 800be08:	897b      	ldrh	r3, [r7, #10]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d3d2      	bcc.n	800bdb4 <payloadToBytesx+0x14>
	}
}
 800be0e:	bf00      	nop
 800be10:	bf00      	nop
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <addBits>:
 * size			: size of bit vector
 * value		: value of variable you want to arrange to bit
 * numBits		: capacity of bits
 */
void addBits(uint8_t *bitVector, uint16_t *size, uint32_t value,
		uint8_t numBits) {
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	70fb      	strb	r3, [r7, #3]
	//ASSERT(numBits > 0  && numBits <= 32);
	uint16_t pos = *size;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	82bb      	strh	r3, [r7, #20]
	for (uint8_t bit = 0; bit < numBits; ++bit, value >>= 1) {
 800be30:	2300      	movs	r3, #0
 800be32:	75fb      	strb	r3, [r7, #23]
 800be34:	e013      	b.n	800be5e <addBits+0x42>
		bitVector[pos + numBits - bit - 1] = value & 1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	8ab9      	ldrh	r1, [r7, #20]
 800be3c:	78fb      	ldrb	r3, [r7, #3]
 800be3e:	4419      	add	r1, r3
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	1acb      	subs	r3, r1, r3
 800be44:	3b01      	subs	r3, #1
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	440b      	add	r3, r1
 800be4a:	f002 0201 	and.w	r2, r2, #1
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]
	for (uint8_t bit = 0; bit < numBits; ++bit, value >>= 1) {
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	3301      	adds	r3, #1
 800be56:	75fb      	strb	r3, [r7, #23]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	085b      	lsrs	r3, r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
 800be5e:	7dfa      	ldrb	r2, [r7, #23]
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	429a      	cmp	r2, r3
 800be64:	d3e7      	bcc.n	800be36 <addBits+0x1a>
	}

	*size += numBits;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	881a      	ldrh	r2, [r3, #0]
 800be6a:	78fb      	ldrb	r3, [r7, #3]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4413      	add	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	801a      	strh	r2, [r3, #0]
}
 800be76:	bf00      	nop
 800be78:	371c      	adds	r7, #28
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <EncodeDataEngBuoy>:
	crc_ok = ccrc16((unsigned char*) buffersixbit, strlen(buffersixbit));
	sprintf((char*) dataout, "#,%s,%04X", buffersixbit, crc_ok);

}

void EncodeDataEngBuoy(uint8_t *dataout, uint16_t *size,DataEngBuoy_t *DataEngBuoy) {
 800be82:	b580      	push	{r7, lr}
 800be84:	b0b8      	sub	sp, #224	; 0xe0
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	607a      	str	r2, [r7, #4]
	uint8_t payload[200];
	uint16_t sizebuf = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	*size = 0;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2200      	movs	r2, #0
 800be98:	801a      	strh	r2, [r3, #0]
	uint32_t value = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	value = DataEngBuoy->modekirim;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 4);   	// modekirim
 800bea8:	f107 0010 	add.w	r0, r7, #16
 800beac:	2304      	movs	r3, #4
 800beae:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	f7ff ffb2 	bl	800be1c <addBits>
	value = DataEngBuoy->idbuoy;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	785b      	ldrb	r3, [r3, #1]
 800bebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 8);   		// idobu
 800bec0:	f107 0010 	add.w	r0, r7, #16
 800bec4:	2308      	movs	r3, #8
 800bec6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800beca:	68b9      	ldr	r1, [r7, #8]
 800becc:	f7ff ffa6 	bl	800be1c <addBits>
	value = DataEngBuoy->statusbuoy;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	789b      	ldrb	r3, [r3, #2]
 800bed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 8);  	// statusobu
 800bed8:	f107 0010 	add.w	r0, r7, #16
 800bedc:	2308      	movs	r3, #8
 800bede:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	f7ff ff9a 	bl	800be1c <addBits>
	value = DataEngBuoy->bulan;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	78db      	ldrb	r3, [r3, #3]
 800beec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 4);  			//
 800bef0:	f107 0010 	add.w	r0, r7, #16
 800bef4:	2304      	movs	r3, #4
 800bef6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	f7ff ff8e 	bl	800be1c <addBits>
	value = DataEngBuoy->tanggal;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	791b      	ldrb	r3, [r3, #4]
 800bf04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 5);  		//
 800bf08:	f107 0010 	add.w	r0, r7, #16
 800bf0c:	2305      	movs	r3, #5
 800bf0e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	f7ff ff82 	bl	800be1c <addBits>
	value = DataEngBuoy->timestamp;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 17);  	//
 800bf20:	f107 0010 	add.w	r0, r7, #16
 800bf24:	2311      	movs	r3, #17
 800bf26:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bf2a:	68b9      	ldr	r1, [r7, #8]
 800bf2c:	f7ff ff76 	bl	800be1c <addBits>
	value = DataEngBuoy->SNR;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	899b      	ldrh	r3, [r3, #12]
 800bf34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 10);  			//
 800bf38:	f107 0010 	add.w	r0, r7, #16
 800bf3c:	230a      	movs	r3, #10
 800bf3e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	f7ff ff6a 	bl	800be1c <addBits>
	value = DataEngBuoy->MPD;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	89db      	ldrh	r3, [r3, #14]
 800bf4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 10);  			//
 800bf50:	f107 0010 	add.w	r0, r7, #16
 800bf54:	230a      	movs	r3, #10
 800bf56:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bf5a:	68b9      	ldr	r1, [r7, #8]
 800bf5c:	f7ff ff5e 	bl	800be1c <addBits>
	value = DataEngBuoy->AGC;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	8a1b      	ldrh	r3, [r3, #16]
 800bf64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 10);  			//
 800bf68:	f107 0010 	add.w	r0, r7, #16
 800bf6c:	230a      	movs	r3, #10
 800bf6e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bf72:	68b9      	ldr	r1, [r7, #8]
 800bf74:	f7ff ff52 	bl	800be1c <addBits>
	value = DataEngBuoy->batBuoy;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	8a5b      	ldrh	r3, [r3, #18]
 800bf7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 12);  		//
 800bf80:	f107 0010 	add.w	r0, r7, #16
 800bf84:	230c      	movs	r3, #12
 800bf86:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	f7ff ff46 	bl	800be1c <addBits>
	value = DataEngBuoy->tempBuoy;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	8a9b      	ldrh	r3, [r3, #20]
 800bf94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 12);  		//
 800bf98:	f107 0010 	add.w	r0, r7, #16
 800bf9c:	230c      	movs	r3, #12
 800bf9e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	f7ff ff3a 	bl	800be1c <addBits>
	value = DataEngBuoy->humBuoy;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8adb      	ldrh	r3, [r3, #22]
 800bfac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, value, 12);  		//
 800bfb0:	f107 0010 	add.w	r0, r7, #16
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bfba:	68b9      	ldr	r1, [r7, #8]
 800bfbc:	f7ff ff2e 	bl	800be1c <addBits>

	payloadToBytesx(payload, *size, (uint8_t*) dataout);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	8819      	ldrh	r1, [r3, #0]
 800bfc4:	f107 0310 	add.w	r3, r7, #16
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7ff fee8 	bl	800bda0 <payloadToBytesx>
	sizebuf = *size;
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	sizebuf = sizebuf / 8;
 800bfd8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800bfdc:	08db      	lsrs	r3, r3, #3
 800bfde:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	*size = sizebuf;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 800bfe8:	801a      	strh	r2, [r3, #0]
}
 800bfea:	bf00      	nop
 800bfec:	37e0      	adds	r7, #224	; 0xe0
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	0000      	movs	r0, r0
 800bff4:	0000      	movs	r0, r0
	...

0800bff8 <EncodeTEWSLoc>:

void EncodeTEWSLoc(uint8_t *dataout, uint16_t *size, DataLoc_t *DataLoc) {
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b0ba      	sub	sp, #232	; 0xe8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
	uint8_t payload[200];
	*size = 0;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2200      	movs	r2, #0
 800c008:	801a      	strh	r2, [r3, #0]
	uint16_t sizebuf = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	uint32_t value = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	value = DataLoc->modekirim;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 4);   	// modekirim
 800c01e:	f107 0010 	add.w	r0, r7, #16
 800c022:	2304      	movs	r3, #4
 800c024:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	f7ff fef7 	bl	800be1c <addBits>
	value = DataLoc->idbuoy;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	785b      	ldrb	r3, [r3, #1]
 800c032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 8);   		// idobu
 800c036:	f107 0010 	add.w	r0, r7, #16
 800c03a:	2308      	movs	r3, #8
 800c03c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c040:	68b9      	ldr	r1, [r7, #8]
 800c042:	f7ff feeb 	bl	800be1c <addBits>
	value = DataLoc->statusbuoy;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	789b      	ldrb	r3, [r3, #2]
 800c04a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 8);  	// statusobu
 800c04e:	f107 0010 	add.w	r0, r7, #16
 800c052:	2308      	movs	r3, #8
 800c054:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c058:	68b9      	ldr	r1, [r7, #8]
 800c05a:	f7ff fedf 	bl	800be1c <addBits>
	value = DataLoc->bulan;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	78db      	ldrb	r3, [r3, #3]
 800c062:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 4);  			//
 800c066:	f107 0010 	add.w	r0, r7, #16
 800c06a:	2304      	movs	r3, #4
 800c06c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	f7ff fed3 	bl	800be1c <addBits>
	value = DataLoc->tanggal;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	791b      	ldrb	r3, [r3, #4]
 800c07a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 5);  		//
 800c07e:	f107 0010 	add.w	r0, r7, #16
 800c082:	2305      	movs	r3, #5
 800c084:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c088:	68b9      	ldr	r1, [r7, #8]
 800c08a:	f7ff fec7 	bl	800be1c <addBits>
	value = DataLoc->timestamp;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 17);  	//
 800c096:	f107 0010 	add.w	r0, r7, #16
 800c09a:	2311      	movs	r3, #17
 800c09c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	f7ff febb 	bl	800be1c <addBits>
	if (DataLoc->lat > 0)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0ac:	f04f 0200 	mov.w	r2, #0
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	f7f4 fd50 	bl	8000b58 <__aeabi_dcmpgt>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d007      	beq.n	800c0ce <EncodeTEWSLoc+0xd6>
		addBits(payload, size, 1, 1);  // Latitude
 800c0be:	f107 0010 	add.w	r0, r7, #16
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	f7ff fea8 	bl	800be1c <addBits>
 800c0cc:	e006      	b.n	800c0dc <EncodeTEWSLoc+0xe4>
	else
		addBits(payload, size, 0, 1);  // Latitude
 800c0ce:	f107 0010 	add.w	r0, r7, #16
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	68b9      	ldr	r1, [r7, #8]
 800c0d8:	f7ff fea0 	bl	800be1c <addBits>
	uint32_t lat32 = (uint32_t) abs(DataLoc->lat * 1000000);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0e2:	a353      	add	r3, pc, #332	; (adr r3, 800c230 <EncodeTEWSLoc+0x238>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 faa6 	bl	8000638 <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	f7f4 fd50 	bl	8000b98 <__aeabi_d2iz>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bfb8      	it	lt
 800c0fe:	425b      	neglt	r3, r3
 800c100:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	addBits(payload, size, lat32, 27);  	//
 800c104:	f107 0010 	add.w	r0, r7, #16
 800c108:	231b      	movs	r3, #27
 800c10a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	f7ff fe84 	bl	800be1c <addBits>

	if (DataLoc->lng > 0)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c11a:	f04f 0200 	mov.w	r2, #0
 800c11e:	f04f 0300 	mov.w	r3, #0
 800c122:	f7f4 fd19 	bl	8000b58 <__aeabi_dcmpgt>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d007      	beq.n	800c13c <EncodeTEWSLoc+0x144>
		addBits(payload, size, 1, 1);  		// LNG
 800c12c:	f107 0010 	add.w	r0, r7, #16
 800c130:	2301      	movs	r3, #1
 800c132:	2201      	movs	r2, #1
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	f7ff fe71 	bl	800be1c <addBits>
 800c13a:	e006      	b.n	800c14a <EncodeTEWSLoc+0x152>
	else
		addBits(payload, size, 0, 1);  		// LNG
 800c13c:	f107 0010 	add.w	r0, r7, #16
 800c140:	2301      	movs	r3, #1
 800c142:	2200      	movs	r2, #0
 800c144:	68b9      	ldr	r1, [r7, #8]
 800c146:	f7ff fe69 	bl	800be1c <addBits>
	uint32_t lng32 = (uint32_t) abs(DataLoc->lng * 1000000);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c150:	a337      	add	r3, pc, #220	; (adr r3, 800c230 <EncodeTEWSLoc+0x238>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 fa6f 	bl	8000638 <__aeabi_dmul>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4610      	mov	r0, r2
 800c160:	4619      	mov	r1, r3
 800c162:	f7f4 fd19 	bl	8000b98 <__aeabi_d2iz>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	bfb8      	it	lt
 800c16c:	425b      	neglt	r3, r3
 800c16e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	addBits(payload, size, lng32, 28);  	//
 800c172:	f107 0010 	add.w	r0, r7, #16
 800c176:	231c      	movs	r3, #28
 800c178:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	f7ff fe4d 	bl	800be1c <addBits>

	value = DataLoc->altitude;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	8c1b      	ldrh	r3, [r3, #32]
 800c186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 12);  	//
 800c18a:	f107 0010 	add.w	r0, r7, #16
 800c18e:	230c      	movs	r3, #12
 800c190:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	f7ff fe41 	bl	800be1c <addBits>
	value = DataLoc->flagpengiriman;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 5); 		//
 800c1a4:	f107 0010 	add.w	r0, r7, #16
 800c1a8:	2305      	movs	r3, #5
 800c1aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	f7ff fe34 	bl	800be1c <addBits>
	value = DataLoc->satelit;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c1ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 5);  		//
 800c1be:	f107 0010 	add.w	r0, r7, #16
 800c1c2:	2305      	movs	r3, #5
 800c1c4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1c8:	68b9      	ldr	r1, [r7, #8]
 800c1ca:	f7ff fe27 	bl	800be1c <addBits>
	value = DataLoc->hdop;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c1d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 8);  		//
 800c1d8:	f107 0010 	add.w	r0, r7, #16
 800c1dc:	2308      	movs	r3, #8
 800c1de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	f7ff fe1a 	bl	800be1c <addBits>
	value = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	addBits(payload, size, value, 3);
 800c1ee:	f107 0010 	add.w	r0, r7, #16
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	f7ff fe0f 	bl	800be1c <addBits>

	payloadToBytesx(payload, *size, (uint8_t*) dataout);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	8819      	ldrh	r1, [r3, #0]
 800c202:	f107 0310 	add.w	r3, r7, #16
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff fdc9 	bl	800bda0 <payloadToBytesx>
	sizebuf = *size;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	sizebuf = sizebuf / 8;
 800c216:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 800c21a:	08db      	lsrs	r3, r3, #3
 800c21c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	*size = sizebuf;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 800c226:	801a      	strh	r2, [r3, #0]
}
 800c228:	bf00      	nop
 800c22a:	37e8      	adds	r7, #232	; 0xe8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	00000000 	.word	0x00000000
 800c234:	412e8480 	.word	0x412e8480

0800c238 <EncodeTEWSLocBuoy>:
	sizebit = sizebit * 8;
	*size = sizebit / 8;
	payloadToBytesx(dataarray, sizebit, dataout);
}

void EncodeTEWSLocBuoy(uint8_t flagkirim, uint8_t modekirim) {
 800c238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c23c:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 800c240:	af0c      	add	r7, sp, #48	; 0x30
 800c242:	4602      	mov	r2, r0
 800c244:	f107 0317 	add.w	r3, r7, #23
 800c248:	701a      	strb	r2, [r3, #0]
 800c24a:	f107 0316 	add.w	r3, r7, #22
 800c24e:	460a      	mov	r2, r1
 800c250:	701a      	strb	r2, [r3, #0]
	char tampung[512];

	uint8_t dataforiridium[200];
	uint16_t sizedatairidium;

	DS3231_GetTime(&rtcTEWS);
 800c252:	4872      	ldr	r0, [pc, #456]	; (800c41c <EncodeTEWSLocBuoy+0x1e4>)
 800c254:	f002 fbd0 	bl	800e9f8 <DS3231_GetTime>
	uint32_t timestamp = (rtcTEWS.Hour * 60 * 60) + (rtcTEWS.Min * 60)
 800c258:	4b70      	ldr	r3, [pc, #448]	; (800c41c <EncodeTEWSLocBuoy+0x1e4>)
 800c25a:	791b      	ldrb	r3, [r3, #4]
 800c25c:	461a      	mov	r2, r3
 800c25e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c262:	fb03 f202 	mul.w	r2, r3, r2
 800c266:	4b6d      	ldr	r3, [pc, #436]	; (800c41c <EncodeTEWSLocBuoy+0x1e4>)
 800c268:	795b      	ldrb	r3, [r3, #5]
 800c26a:	4619      	mov	r1, r3
 800c26c:	460b      	mov	r3, r1
 800c26e:	011b      	lsls	r3, r3, #4
 800c270:	1a5b      	subs	r3, r3, r1
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
			+ (rtcTEWS.Sec);
 800c276:	4a69      	ldr	r2, [pc, #420]	; (800c41c <EncodeTEWSLocBuoy+0x1e4>)
 800c278:	7992      	ldrb	r2, [r2, #6]
 800c27a:	4413      	add	r3, r2
	uint32_t timestamp = (rtcTEWS.Hour * 60 * 60) + (rtcTEWS.Min * 60)
 800c27c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	DataLoc.modekirim = modekirim;
 800c280:	4a67      	ldr	r2, [pc, #412]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c282:	f107 0316 	add.w	r3, r7, #22
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	7013      	strb	r3, [r2, #0]
	DataLoc.idbuoy = idBUOY;
 800c28a:	4b66      	ldr	r3, [pc, #408]	; (800c424 <EncodeTEWSLocBuoy+0x1ec>)
 800c28c:	781a      	ldrb	r2, [r3, #0]
 800c28e:	4b64      	ldr	r3, [pc, #400]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c290:	705a      	strb	r2, [r3, #1]
	DataLoc.statusbuoy = statusbuoy;
 800c292:	4b65      	ldr	r3, [pc, #404]	; (800c428 <EncodeTEWSLocBuoy+0x1f0>)
 800c294:	781a      	ldrb	r2, [r3, #0]
 800c296:	4b62      	ldr	r3, [pc, #392]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c298:	709a      	strb	r2, [r3, #2]
	DataLoc.bulan = rtcTEWS.Month;
 800c29a:	4b60      	ldr	r3, [pc, #384]	; (800c41c <EncodeTEWSLocBuoy+0x1e4>)
 800c29c:	785a      	ldrb	r2, [r3, #1]
 800c29e:	4b60      	ldr	r3, [pc, #384]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2a0:	70da      	strb	r2, [r3, #3]
	DataLoc.tanggal = rtcTEWS.Date;
 800c2a2:	4b5e      	ldr	r3, [pc, #376]	; (800c41c <EncodeTEWSLocBuoy+0x1e4>)
 800c2a4:	789a      	ldrb	r2, [r3, #2]
 800c2a6:	4b5e      	ldr	r3, [pc, #376]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2a8:	711a      	strb	r2, [r3, #4]
	DataLoc.timestamp = timestamp;
 800c2aa:	4a5d      	ldr	r2, [pc, #372]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2ac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800c2b0:	6093      	str	r3, [r2, #8]

	DataLoc.lat = GPS.latitude;
 800c2b2:	4b5e      	ldr	r3, [pc, #376]	; (800c42c <EncodeTEWSLocBuoy+0x1f4>)
 800c2b4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f4 f964 	bl	8000588 <__aeabi_f2d>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4956      	ldr	r1, [pc, #344]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataLoc.lng = GPS.longitude;
 800c2ca:	4b58      	ldr	r3, [pc, #352]	; (800c42c <EncodeTEWSLocBuoy+0x1f4>)
 800c2cc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f4 f958 	bl	8000588 <__aeabi_f2d>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4950      	ldr	r1, [pc, #320]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2de:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataLoc.altitude = GPS.altitude;
 800c2e2:	4b52      	ldr	r3, [pc, #328]	; (800c42c <EncodeTEWSLocBuoy+0x1f4>)
 800c2e4:	f8b3 2432 	ldrh.w	r2, [r3, #1074]	; 0x432
 800c2e8:	4b4d      	ldr	r3, [pc, #308]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2ea:	841a      	strh	r2, [r3, #32]
	DataLoc.flagpengiriman = flagkirim;
 800c2ec:	4a4c      	ldr	r2, [pc, #304]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c2ee:	f107 0317 	add.w	r3, r7, #23
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	DataLoc.satelit = GPS.numsat;
 800c2f8:	4b4c      	ldr	r3, [pc, #304]	; (800c42c <EncodeTEWSLocBuoy+0x1f4>)
 800c2fa:	f893 2430 	ldrb.w	r2, [r3, #1072]	; 0x430
 800c2fe:	4b48      	ldr	r3, [pc, #288]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c300:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	DataLoc.hdop = GPS.hdop;
 800c304:	4b49      	ldr	r3, [pc, #292]	; (800c42c <EncodeTEWSLocBuoy+0x1f4>)
 800c306:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 800c30a:	4b45      	ldr	r3, [pc, #276]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c30c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//usb_universal_printf("------ DATA POSISI BUOY ------\r\n");
	memset(tampung, 0, sizeof(tampung));
 800c310:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c314:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c318:	2100      	movs	r1, #0
 800c31a:	4618      	mov	r0, r3
 800c31c:	f006 ff76 	bl	801320c <memset>
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c320:	4b3f      	ldr	r3, [pc, #252]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	469c      	mov	ip, r3
			DataLoc.idbuoy, DataLoc.statusbuoy, DataLoc.bulan, DataLoc.tanggal,
 800c326:	4b3e      	ldr	r3, [pc, #248]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c328:	785b      	ldrb	r3, [r3, #1]
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c32a:	469e      	mov	lr, r3
			DataLoc.idbuoy, DataLoc.statusbuoy, DataLoc.bulan, DataLoc.tanggal,
 800c32c:	4b3c      	ldr	r3, [pc, #240]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c32e:	789b      	ldrb	r3, [r3, #2]
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c330:	4619      	mov	r1, r3
			DataLoc.idbuoy, DataLoc.statusbuoy, DataLoc.bulan, DataLoc.tanggal,
 800c332:	4b3b      	ldr	r3, [pc, #236]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c334:	78db      	ldrb	r3, [r3, #3]
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c336:	461e      	mov	r6, r3
			DataLoc.idbuoy, DataLoc.statusbuoy, DataLoc.bulan, DataLoc.tanggal,
 800c338:	4b39      	ldr	r3, [pc, #228]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c33a:	791b      	ldrb	r3, [r3, #4]
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	4b38      	ldr	r3, [pc, #224]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	4b37      	ldr	r3, [pc, #220]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c344:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c348:	4b35      	ldr	r3, [pc, #212]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c34a:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
			DataLoc.timestamp, DataLoc.lat, DataLoc.lng, DataLoc.altitude,
 800c34e:	4b34      	ldr	r3, [pc, #208]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c350:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c352:	60fb      	str	r3, [r7, #12]
			DataLoc.flagpengiriman, DataLoc.satelit, DataLoc.hdop);
 800c354:	4b32      	ldr	r3, [pc, #200]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c356:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c35a:	60bb      	str	r3, [r7, #8]
			DataLoc.flagpengiriman, DataLoc.satelit, DataLoc.hdop);
 800c35c:	4b30      	ldr	r3, [pc, #192]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c35e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c362:	607b      	str	r3, [r7, #4]
			DataLoc.flagpengiriman, DataLoc.satelit, DataLoc.hdop);
 800c364:	4b2e      	ldr	r3, [pc, #184]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(tampung, "%d,%d,%d,%d,%d,%lu,%f,%f,%d,%d,%d,%d", DataLoc.modekirim,
 800c36a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800c36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	930a      	str	r3, [sp, #40]	; 0x28
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	9309      	str	r3, [sp, #36]	; 0x24
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	9308      	str	r3, [sp, #32]
 800c37c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c380:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c384:	9203      	str	r2, [sp, #12]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	9302      	str	r3, [sp, #8]
 800c38a:	9601      	str	r6, [sp, #4]
 800c38c:	9100      	str	r1, [sp, #0]
 800c38e:	4673      	mov	r3, lr
 800c390:	4662      	mov	r2, ip
 800c392:	4927      	ldr	r1, [pc, #156]	; (800c430 <EncodeTEWSLocBuoy+0x1f8>)
 800c394:	f007 fe7c 	bl	8014090 <siprintf>
	usb_universal_printf("%s\r\n", tampung);
 800c398:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c39c:	4619      	mov	r1, r3
 800c39e:	4825      	ldr	r0, [pc, #148]	; (800c434 <EncodeTEWSLocBuoy+0x1fc>)
 800c3a0:	f006 f9a4 	bl	80126ec <usb_universal_printf>

	EncodeTEWSLoc(dataforiridium, &DataLoc.size, &DataLoc);
 800c3a4:	f107 031c 	add.w	r3, r7, #28
 800c3a8:	4a1d      	ldr	r2, [pc, #116]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c3aa:	4923      	ldr	r1, [pc, #140]	; (800c438 <EncodeTEWSLocBuoy+0x200>)
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff fe23 	bl	800bff8 <EncodeTEWSLoc>

	dataforiridium[DataLoc.size] = versionfirmware;
 800c3b2:	4b1b      	ldr	r3, [pc, #108]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c3b4:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	4b20      	ldr	r3, [pc, #128]	; (800c43c <EncodeTEWSLocBuoy+0x204>)
 800c3bc:	7819      	ldrb	r1, [r3, #0]
 800c3be:	f107 031c 	add.w	r3, r7, #28
 800c3c2:	5499      	strb	r1, [r3, r2]
	dataforiridium[DataLoc.size + 1] = DataLoc.size + 2;
 800c3c4:	4b16      	ldr	r3, [pc, #88]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c3c6:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	4b14      	ldr	r3, [pc, #80]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c3ce:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	3202      	adds	r2, #2
 800c3d6:	b2d1      	uxtb	r1, r2
 800c3d8:	f107 021c 	add.w	r2, r7, #28
 800c3dc:	54d1      	strb	r1, [r2, r3]
	sizedatairidium = DataLoc.size + 2;
 800c3de:	4b10      	ldr	r3, [pc, #64]	; (800c420 <EncodeTEWSLocBuoy+0x1e8>)
 800c3e0:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800c3e4:	3302      	adds	r3, #2
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	f107 031a 	add.w	r3, r7, #26
 800c3ec:	801a      	strh	r2, [r3, #0]
	osMessageQueuePut(sizedatairidiumQueueHandle, &sizedatairidium, 0U, 0U);
 800c3ee:	4b14      	ldr	r3, [pc, #80]	; (800c440 <EncodeTEWSLocBuoy+0x208>)
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	f107 011a 	add.w	r1, r7, #26
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f7fc facb 	bl	8008994 <osMessageQueuePut>
	osMessageQueuePut(iridiumsendQueueHandle, dataforiridium, 0U, 0U);
 800c3fe:	4b11      	ldr	r3, [pc, #68]	; (800c444 <EncodeTEWSLocBuoy+0x20c>)
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f107 011c 	add.w	r1, r7, #28
 800c406:	2300      	movs	r3, #0
 800c408:	2200      	movs	r2, #0
 800c40a:	f7fc fac3 	bl	8008994 <osMessageQueuePut>
}
 800c40e:	bf00      	nop
 800c410:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
 800c414:	46bd      	mov	sp, r7
 800c416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c41a:	bf00      	nop
 800c41c:	2003346c 	.word	0x2003346c
 800c420:	20032590 	.word	0x20032590
 800c424:	200338f4 	.word	0x200338f4
 800c428:	200320f5 	.word	0x200320f5
 800c42c:	20032a54 	.word	0x20032a54
 800c430:	0801aaa0 	.word	0x0801aaa0
 800c434:	0801aac8 	.word	0x0801aac8
 800c438:	2003267e 	.word	0x2003267e
 800c43c:	200003a5 	.word	0x200003a5
 800c440:	20033734 	.word	0x20033734
 800c444:	2003355c 	.word	0x2003355c

0800c448 <EncodeTEWSEngBuoy>:

void EncodeTEWSEngBuoy(uint8_t modekirim) {
 800c448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c44a:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 800c44e:	af0a      	add	r7, sp, #40	; 0x28
 800c450:	4602      	mov	r2, r0
 800c452:	f107 0317 	add.w	r3, r7, #23
 800c456:	701a      	strb	r2, [r3, #0]
	char tampung[512];
	uint8_t dataforiridium[200];
	uint16_t sizedatairidium;

	DS3231_GetTime(&rtcTEWS);
 800c458:	485c      	ldr	r0, [pc, #368]	; (800c5cc <EncodeTEWSEngBuoy+0x184>)
 800c45a:	f002 facd 	bl	800e9f8 <DS3231_GetTime>

	uint32_t timestamp = (rtcTEWS.Hour * 60 * 60) + (rtcTEWS.Min * 60)
 800c45e:	4b5b      	ldr	r3, [pc, #364]	; (800c5cc <EncodeTEWSEngBuoy+0x184>)
 800c460:	791b      	ldrb	r3, [r3, #4]
 800c462:	461a      	mov	r2, r3
 800c464:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c468:	fb03 f202 	mul.w	r2, r3, r2
 800c46c:	4b57      	ldr	r3, [pc, #348]	; (800c5cc <EncodeTEWSEngBuoy+0x184>)
 800c46e:	795b      	ldrb	r3, [r3, #5]
 800c470:	4619      	mov	r1, r3
 800c472:	460b      	mov	r3, r1
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	1a5b      	subs	r3, r3, r1
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
			+ (rtcTEWS.Sec);
 800c47c:	4a53      	ldr	r2, [pc, #332]	; (800c5cc <EncodeTEWSEngBuoy+0x184>)
 800c47e:	7992      	ldrb	r2, [r2, #6]
 800c480:	4413      	add	r3, r2
	uint32_t timestamp = (rtcTEWS.Hour * 60 * 60) + (rtcTEWS.Min * 60)
 800c482:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	//data encode
	DataEngBuoy.modekirim = modekirim;  //6 = 1 hari, 7 request
 800c486:	4a52      	ldr	r2, [pc, #328]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c488:	f107 0317 	add.w	r3, r7, #23
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	7013      	strb	r3, [r2, #0]
	DataEngBuoy.idbuoy = idBUOY;
 800c490:	4b50      	ldr	r3, [pc, #320]	; (800c5d4 <EncodeTEWSEngBuoy+0x18c>)
 800c492:	781a      	ldrb	r2, [r3, #0]
 800c494:	4b4e      	ldr	r3, [pc, #312]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c496:	705a      	strb	r2, [r3, #1]
	DataEngBuoy.statusbuoy = statusbuoy;
 800c498:	4b4f      	ldr	r3, [pc, #316]	; (800c5d8 <EncodeTEWSEngBuoy+0x190>)
 800c49a:	781a      	ldrb	r2, [r3, #0]
 800c49c:	4b4c      	ldr	r3, [pc, #304]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c49e:	709a      	strb	r2, [r3, #2]
	DataEngBuoy.bulan = rtcTEWS.Month;
 800c4a0:	4b4a      	ldr	r3, [pc, #296]	; (800c5cc <EncodeTEWSEngBuoy+0x184>)
 800c4a2:	785a      	ldrb	r2, [r3, #1]
 800c4a4:	4b4a      	ldr	r3, [pc, #296]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4a6:	70da      	strb	r2, [r3, #3]
	DataEngBuoy.tanggal = rtcTEWS.Date;
 800c4a8:	4b48      	ldr	r3, [pc, #288]	; (800c5cc <EncodeTEWSEngBuoy+0x184>)
 800c4aa:	789a      	ldrb	r2, [r3, #2]
 800c4ac:	4b48      	ldr	r3, [pc, #288]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4ae:	711a      	strb	r2, [r3, #4]
	DataEngBuoy.timestamp = timestamp;
 800c4b0:	4a47      	ldr	r2, [pc, #284]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4b2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800c4b6:	6093      	str	r3, [r2, #8]
	DataEngBuoy.humBuoy = 0;
 800c4b8:	4b45      	ldr	r3, [pc, #276]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	82da      	strh	r2, [r3, #22]

	//usb_universal_printf("------ DATA ENGINEERING BUOY ------\r\n");
	memset(tampung, 0, sizeof(tampung));
 800c4be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c4c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f006 fe9f 	bl	801320c <memset>
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
			DataEngBuoy.modekirim, DataEngBuoy.idbuoy, DataEngBuoy.statusbuoy,
 800c4ce:	4b40      	ldr	r3, [pc, #256]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4d2:	469c      	mov	ip, r3
			DataEngBuoy.modekirim, DataEngBuoy.idbuoy, DataEngBuoy.statusbuoy,
 800c4d4:	4b3e      	ldr	r3, [pc, #248]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4d6:	785b      	ldrb	r3, [r3, #1]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4d8:	469e      	mov	lr, r3
			DataEngBuoy.modekirim, DataEngBuoy.idbuoy, DataEngBuoy.statusbuoy,
 800c4da:	4b3d      	ldr	r3, [pc, #244]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4dc:	789b      	ldrb	r3, [r3, #2]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4de:	4619      	mov	r1, r3
			DataEngBuoy.bulan, DataEngBuoy.tanggal, DataEngBuoy.timestamp,
 800c4e0:	4b3b      	ldr	r3, [pc, #236]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4e2:	78db      	ldrb	r3, [r3, #3]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4e4:	461c      	mov	r4, r3
			DataEngBuoy.bulan, DataEngBuoy.tanggal, DataEngBuoy.timestamp,
 800c4e6:	4b3a      	ldr	r3, [pc, #232]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4e8:	791b      	ldrb	r3, [r3, #4]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4ea:	461d      	mov	r5, r3
 800c4ec:	4b38      	ldr	r3, [pc, #224]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4ee:	689b      	ldr	r3, [r3, #8]
			DataEngBuoy.SNR, DataEngBuoy.MPD, DataEngBuoy.AGC,
 800c4f0:	4a37      	ldr	r2, [pc, #220]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4f2:	8992      	ldrh	r2, [r2, #12]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4f4:	4616      	mov	r6, r2
			DataEngBuoy.SNR, DataEngBuoy.MPD, DataEngBuoy.AGC,
 800c4f6:	4a36      	ldr	r2, [pc, #216]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4f8:	89d2      	ldrh	r2, [r2, #14]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c4fa:	613a      	str	r2, [r7, #16]
			DataEngBuoy.SNR, DataEngBuoy.MPD, DataEngBuoy.AGC,
 800c4fc:	4a34      	ldr	r2, [pc, #208]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c4fe:	8a12      	ldrh	r2, [r2, #16]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c500:	60fa      	str	r2, [r7, #12]
			DataEngBuoy.batBuoy, DataEngBuoy.tempBuoy, DataEngBuoy.humBuoy);
 800c502:	4a33      	ldr	r2, [pc, #204]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c504:	8a52      	ldrh	r2, [r2, #18]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c506:	60ba      	str	r2, [r7, #8]
			DataEngBuoy.batBuoy, DataEngBuoy.tempBuoy, DataEngBuoy.humBuoy);
 800c508:	4a31      	ldr	r2, [pc, #196]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c50a:	8a92      	ldrh	r2, [r2, #20]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c50c:	607a      	str	r2, [r7, #4]
			DataEngBuoy.batBuoy, DataEngBuoy.tempBuoy, DataEngBuoy.humBuoy);
 800c50e:	4a30      	ldr	r2, [pc, #192]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c510:	8ad2      	ldrh	r2, [r2, #22]
	sprintf(tampung, "%d,%d,%d,%d,%d,%ld,%d,%d,%d,%d,%d,%d",
 800c512:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800c516:	9209      	str	r2, [sp, #36]	; 0x24
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	9208      	str	r2, [sp, #32]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	9207      	str	r2, [sp, #28]
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	9206      	str	r2, [sp, #24]
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	9205      	str	r2, [sp, #20]
 800c528:	9604      	str	r6, [sp, #16]
 800c52a:	9303      	str	r3, [sp, #12]
 800c52c:	9502      	str	r5, [sp, #8]
 800c52e:	9401      	str	r4, [sp, #4]
 800c530:	9100      	str	r1, [sp, #0]
 800c532:	4673      	mov	r3, lr
 800c534:	4662      	mov	r2, ip
 800c536:	4929      	ldr	r1, [pc, #164]	; (800c5dc <EncodeTEWSEngBuoy+0x194>)
 800c538:	f007 fdaa 	bl	8014090 <siprintf>
	usb_universal_printf("%s\r\n", tampung);
 800c53c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c540:	4619      	mov	r1, r3
 800c542:	4827      	ldr	r0, [pc, #156]	; (800c5e0 <EncodeTEWSEngBuoy+0x198>)
 800c544:	f006 f8d2 	bl	80126ec <usb_universal_printf>

	memset(dataforiridium, 0, sizeof(dataforiridium));
 800c548:	f107 031c 	add.w	r3, r7, #28
 800c54c:	22c8      	movs	r2, #200	; 0xc8
 800c54e:	2100      	movs	r1, #0
 800c550:	4618      	mov	r0, r3
 800c552:	f006 fe5b 	bl	801320c <memset>
	EncodeDataEngBuoy(dataforiridium, &DataEngBuoy.size, &DataEngBuoy);
 800c556:	f107 031c 	add.w	r3, r7, #28
 800c55a:	4a1d      	ldr	r2, [pc, #116]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c55c:	4921      	ldr	r1, [pc, #132]	; (800c5e4 <EncodeTEWSEngBuoy+0x19c>)
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff fc8f 	bl	800be82 <EncodeDataEngBuoy>

	// Kirim data Engineering iridium ketika CRC benar
	dataforiridium[DataEngBuoy.size] = versionfirmware;
 800c564:	4b1a      	ldr	r3, [pc, #104]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c566:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 800c56a:	461a      	mov	r2, r3
 800c56c:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <EncodeTEWSEngBuoy+0x1a0>)
 800c56e:	7819      	ldrb	r1, [r3, #0]
 800c570:	f107 031c 	add.w	r3, r7, #28
 800c574:	5499      	strb	r1, [r3, r2]
	dataforiridium[DataEngBuoy.size + 1] = DataEngBuoy.size + 2;
 800c576:	4b16      	ldr	r3, [pc, #88]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c578:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	4b14      	ldr	r3, [pc, #80]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c580:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 800c584:	3301      	adds	r3, #1
 800c586:	3202      	adds	r2, #2
 800c588:	b2d1      	uxtb	r1, r2
 800c58a:	f107 021c 	add.w	r2, r7, #28
 800c58e:	54d1      	strb	r1, [r2, r3]
	sizedatairidium = DataEngBuoy.size + 2;
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <EncodeTEWSEngBuoy+0x188>)
 800c592:	f8b3 30e6 	ldrh.w	r3, [r3, #230]	; 0xe6
 800c596:	3302      	adds	r3, #2
 800c598:	b29a      	uxth	r2, r3
 800c59a:	f107 031a 	add.w	r3, r7, #26
 800c59e:	801a      	strh	r2, [r3, #0]
	osMessageQueuePut(sizedatairidiumQueueHandle, &sizedatairidium, 0U, 0U);
 800c5a0:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <EncodeTEWSEngBuoy+0x1a4>)
 800c5a2:	6818      	ldr	r0, [r3, #0]
 800c5a4:	f107 011a 	add.w	r1, r7, #26
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f7fc f9f2 	bl	8008994 <osMessageQueuePut>
	osMessageQueuePut(iridiumsendQueueHandle, dataforiridium, 0U, 0U);
 800c5b0:	4b0f      	ldr	r3, [pc, #60]	; (800c5f0 <EncodeTEWSEngBuoy+0x1a8>)
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	f107 011c 	add.w	r1, r7, #28
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f7fc f9ea 	bl	8008994 <osMessageQueuePut>
}
 800c5c0:	bf00      	nop
 800c5c2:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	2003346c 	.word	0x2003346c
 800c5d0:	200324a0 	.word	0x200324a0
 800c5d4:	200338f4 	.word	0x200338f4
 800c5d8:	200320f5 	.word	0x200320f5
 800c5dc:	0801aad0 	.word	0x0801aad0
 800c5e0:	0801aac8 	.word	0x0801aac8
 800c5e4:	20032586 	.word	0x20032586
 800c5e8:	200003a5 	.word	0x200003a5
 800c5ec:	20033734 	.word	0x20033734
 800c5f0:	2003355c 	.word	0x2003355c

0800c5f4 <write_eeprom_byte>:
extern uint8_t leakstatus;

extern uint8_t AISstatus;

void write_eeprom_byte(I2C_HandleTypeDef *hi2c, unsigned int position,
		uint8_t *data) {   //Menulis Per Byte Character
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af04      	add	r7, sp, #16
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Write(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1, position,
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	b29a      	uxth	r2, r3
 800c604:	2305      	movs	r3, #5
 800c606:	9302      	str	r3, [sp, #8]
 800c608:	2301      	movs	r3, #1
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	2301      	movs	r3, #1
 800c612:	21a0      	movs	r1, #160	; 0xa0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f7f5 fff7 	bl	8002608 <HAL_I2C_Mem_Write>
			1, data, 1, 5);
}
 800c61a:	bf00      	nop
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <read_eeprom_byte>:
		position++;
	}
}

unsigned int read_eeprom_byte(I2C_HandleTypeDef *hi2c, unsigned int position,
		uint8_t *data) {
 800c622:	b580      	push	{r7, lr}
 800c624:	b088      	sub	sp, #32
 800c626:	af04      	add	r7, sp, #16
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1, position,
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	b29a      	uxth	r2, r3
 800c632:	2305      	movs	r3, #5
 800c634:	9302      	str	r3, [sp, #8]
 800c636:	2301      	movs	r3, #1
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	2301      	movs	r3, #1
 800c640:	21a0      	movs	r1, #160	; 0xa0
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7f6 f902 	bl	800284c <HAL_I2C_Mem_Read>
			1, data, 1, 5); //read memory address 08
	return *data;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	781b      	ldrb	r3, [r3, #0]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <read_eeprom_union>:
		HAL_UART_Transmit(&_UNI_USART, (uint8_t*) "Found Eeprom \r\n", 25,
				1000);
	}
}

uint32_t read_eeprom_union(I2C_HandleTypeDef *hi2c, unsigned int position) {
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af04      	add	r7, sp, #16
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
	char four;
	char three;
	char two;
	char one;
	HAL_I2C_Mem_Read(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1, position,
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	b29a      	uxth	r2, r3
 800c662:	2364      	movs	r3, #100	; 0x64
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	2301      	movs	r3, #1
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	f107 030f 	add.w	r3, r7, #15
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	2301      	movs	r3, #1
 800c672:	21a0      	movs	r1, #160	; 0xa0
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7f6 f8e9 	bl	800284c <HAL_I2C_Mem_Read>
			1, (uint8_t*) &four, 1, 100);
	HAL_Delay(5);
 800c67a:	2005      	movs	r0, #5
 800c67c:	f7f4 fd0e 	bl	800109c <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1,
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	b29b      	uxth	r3, r3
 800c684:	3301      	adds	r3, #1
 800c686:	b29a      	uxth	r2, r3
 800c688:	2364      	movs	r3, #100	; 0x64
 800c68a:	9302      	str	r3, [sp, #8]
 800c68c:	2301      	movs	r3, #1
 800c68e:	9301      	str	r3, [sp, #4]
 800c690:	f107 030e 	add.w	r3, r7, #14
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	2301      	movs	r3, #1
 800c698:	21a0      	movs	r1, #160	; 0xa0
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7f6 f8d6 	bl	800284c <HAL_I2C_Mem_Read>
			position + 1, 1, (uint8_t*) &three, 1, 100);
	HAL_Delay(5);
 800c6a0:	2005      	movs	r0, #5
 800c6a2:	f7f4 fcfb 	bl	800109c <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1,
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	3302      	adds	r3, #2
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	2364      	movs	r3, #100	; 0x64
 800c6b0:	9302      	str	r3, [sp, #8]
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	9301      	str	r3, [sp, #4]
 800c6b6:	f107 030d 	add.w	r3, r7, #13
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	2301      	movs	r3, #1
 800c6be:	21a0      	movs	r1, #160	; 0xa0
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7f6 f8c3 	bl	800284c <HAL_I2C_Mem_Read>
			position + 2, 1, (uint8_t*) &two, 1, 100);
	HAL_Delay(5);
 800c6c6:	2005      	movs	r0, #5
 800c6c8:	f7f4 fce8 	bl	800109c <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1,
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	3303      	adds	r3, #3
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	2364      	movs	r3, #100	; 0x64
 800c6d6:	9302      	str	r3, [sp, #8]
 800c6d8:	2301      	movs	r3, #1
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	f107 030c 	add.w	r3, r7, #12
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	21a0      	movs	r1, #160	; 0xa0
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7f6 f8b0 	bl	800284c <HAL_I2C_Mem_Read>
			position + 3, 1, (uint8_t*) &one, 1, 100);
	HAL_Delay(5);
 800c6ec:	2005      	movs	r0, #5
 800c6ee:	f7f4 fcd5 	bl	800109c <HAL_Delay>
	return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF)
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	021b      	lsls	r3, r3, #8
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	441a      	add	r2, r3
			+ ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 800c6fe:	7b7b      	ldrb	r3, [r7, #13]
 800c700:	041b      	lsls	r3, r3, #16
 800c702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c706:	4413      	add	r3, r2
 800c708:	461a      	mov	r2, r3
 800c70a:	7b3b      	ldrb	r3, [r7, #12]
 800c70c:	061b      	lsls	r3, r3, #24
 800c70e:	4413      	add	r3, r2
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <write_eeprom_union>:

void write_eeprom_union(I2C_HandleTypeDef *hi2c, unsigned int position,
		uint32_t data) { //Menulis Per Page
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	; 0x28
 800c71c:	af04      	add	r7, sp, #16
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
	char four = (data & 0xFF);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	b2db      	uxtb	r3, r3
 800c728:	75fb      	strb	r3, [r7, #23]
	char three = ((data >> 8) & 0xFF);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	0a1b      	lsrs	r3, r3, #8
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	75bb      	strb	r3, [r7, #22]
	char two = ((data >> 16) & 0xFF);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	0c1b      	lsrs	r3, r3, #16
 800c736:	b2db      	uxtb	r3, r3
 800c738:	757b      	strb	r3, [r7, #21]
	char one = ((data >> 24) & 0xFF);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	0e1b      	lsrs	r3, r3, #24
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	753b      	strb	r3, [r7, #20]

	HAL_I2C_Mem_Write(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1, position,
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	b29a      	uxth	r2, r3
 800c746:	2364      	movs	r3, #100	; 0x64
 800c748:	9302      	str	r3, [sp, #8]
 800c74a:	2301      	movs	r3, #1
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	f107 0317 	add.w	r3, r7, #23
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	2301      	movs	r3, #1
 800c756:	21a0      	movs	r1, #160	; 0xa0
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7f5 ff55 	bl	8002608 <HAL_I2C_Mem_Write>
			1, (uint8_t*) &four, 1, 100);
	HAL_Delay(5);
 800c75e:	2005      	movs	r0, #5
 800c760:	f7f4 fc9c 	bl	800109c <HAL_Delay>
	HAL_I2C_Mem_Write(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1,
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	b29b      	uxth	r3, r3
 800c768:	3301      	adds	r3, #1
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	2364      	movs	r3, #100	; 0x64
 800c76e:	9302      	str	r3, [sp, #8]
 800c770:	2301      	movs	r3, #1
 800c772:	9301      	str	r3, [sp, #4]
 800c774:	f107 0316 	add.w	r3, r7, #22
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	2301      	movs	r3, #1
 800c77c:	21a0      	movs	r1, #160	; 0xa0
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7f5 ff42 	bl	8002608 <HAL_I2C_Mem_Write>
			position + 1, 1, (uint8_t*) &three, 1, 100);
	HAL_Delay(5);
 800c784:	2005      	movs	r0, #5
 800c786:	f7f4 fc89 	bl	800109c <HAL_Delay>
	HAL_I2C_Mem_Write(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1,
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3302      	adds	r3, #2
 800c790:	b29a      	uxth	r2, r3
 800c792:	2364      	movs	r3, #100	; 0x64
 800c794:	9302      	str	r3, [sp, #8]
 800c796:	2301      	movs	r3, #1
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	f107 0315 	add.w	r3, r7, #21
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	21a0      	movs	r1, #160	; 0xa0
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7f5 ff2f 	bl	8002608 <HAL_I2C_Mem_Write>
			position + 2, 1, (uint8_t*) &two, 1, 100);
	HAL_Delay(5);
 800c7aa:	2005      	movs	r0, #5
 800c7ac:	f7f4 fc76 	bl	800109c <HAL_Delay>
	HAL_I2C_Mem_Write(hi2c, (uint16_t) EEPROM_ADDRESS_for_write << 1,
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	3303      	adds	r3, #3
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	2364      	movs	r3, #100	; 0x64
 800c7ba:	9302      	str	r3, [sp, #8]
 800c7bc:	2301      	movs	r3, #1
 800c7be:	9301      	str	r3, [sp, #4]
 800c7c0:	f107 0314 	add.w	r3, r7, #20
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	21a0      	movs	r1, #160	; 0xa0
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7f5 ff1c 	bl	8002608 <HAL_I2C_Mem_Write>
			position + 3, 1, (uint8_t*) &one, 1, 100);
	HAL_Delay(5);
 800c7d0:	2005      	movs	r0, #5
 800c7d2:	f7f4 fc63 	bl	800109c <HAL_Delay>
}
 800c7d6:	bf00      	nop
 800c7d8:	3718      	adds	r7, #24
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <InitEEPROM>:

void InitEEPROM(void) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
	//read_eeprom_byte(&hi2c2, 0x00, &mode); //mode CPU :
	mode = BUOY;
 800c7e4:	4b86      	ldr	r3, [pc, #536]	; (800ca00 <InitEEPROM+0x220>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	701a      	strb	r2, [r3, #0]
	//operationmode = 0;
	//read_eeprom_byte(&hi2c1, 0x01, &idOBU); //ID OBU
	read_eeprom_byte(&hi2c1, 0x02, &idBUOY); //ID BUOY
 800c7ea:	4a86      	ldr	r2, [pc, #536]	; (800ca04 <InitEEPROM+0x224>)
 800c7ec:	2102      	movs	r1, #2
 800c7ee:	4886      	ldr	r0, [pc, #536]	; (800ca08 <InitEEPROM+0x228>)
 800c7f0:	f7ff ff17 	bl	800c622 <read_eeprom_byte>
	//read_eeprom_byte(&hi2c1, 0x03, &idCBT); //ID CBT
	read_eeprom_byte(&hi2c1, 0x04, &operationmode);
 800c7f4:	4a85      	ldr	r2, [pc, #532]	; (800ca0c <InitEEPROM+0x22c>)
 800c7f6:	2104      	movs	r1, #4
 800c7f8:	4883      	ldr	r0, [pc, #524]	; (800ca08 <InitEEPROM+0x228>)
 800c7fa:	f7ff ff12 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x05, &debug);
 800c7fe:	4a84      	ldr	r2, [pc, #528]	; (800ca10 <InitEEPROM+0x230>)
 800c800:	2105      	movs	r1, #5
 800c802:	4881      	ldr	r0, [pc, #516]	; (800ca08 <InitEEPROM+0x228>)
 800c804:	f7ff ff0d 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x06, &debugbt);
 800c808:	4a82      	ldr	r2, [pc, #520]	; (800ca14 <InitEEPROM+0x234>)
 800c80a:	2106      	movs	r1, #6
 800c80c:	487e      	ldr	r0, [pc, #504]	; (800ca08 <InitEEPROM+0x228>)
 800c80e:	f7ff ff08 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x07, &sendmodeiridium);
 800c812:	4a81      	ldr	r2, [pc, #516]	; (800ca18 <InitEEPROM+0x238>)
 800c814:	2107      	movs	r1, #7
 800c816:	487c      	ldr	r0, [pc, #496]	; (800ca08 <InitEEPROM+0x228>)
 800c818:	f7ff ff03 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x08, &countertsunami);
 800c81c:	4a7f      	ldr	r2, [pc, #508]	; (800ca1c <InitEEPROM+0x23c>)
 800c81e:	2108      	movs	r1, #8
 800c820:	4879      	ldr	r0, [pc, #484]	; (800ca08 <InitEEPROM+0x228>)
 800c822:	f7ff fefe 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x09, &calculationstatus);
 800c826:	4a7e      	ldr	r2, [pc, #504]	; (800ca20 <InitEEPROM+0x240>)
 800c828:	2109      	movs	r1, #9
 800c82a:	4877      	ldr	r0, [pc, #476]	; (800ca08 <InitEEPROM+0x228>)
 800c82c:	f7ff fef9 	bl	800c622 <read_eeprom_byte>
	threshold = read_eeprom_union(&hi2c1, 0x0A);
 800c830:	210a      	movs	r1, #10
 800c832:	4875      	ldr	r0, [pc, #468]	; (800ca08 <InitEEPROM+0x228>)
 800c834:	f7ff ff0e 	bl	800c654 <read_eeprom_union>
 800c838:	4603      	mov	r3, r0
 800c83a:	4a7a      	ldr	r2, [pc, #488]	; (800ca24 <InitEEPROM+0x244>)
 800c83c:	6013      	str	r3, [r2, #0]
	periodsampling = read_eeprom_union(&hi2c1, 0x10);
 800c83e:	2110      	movs	r1, #16
 800c840:	4871      	ldr	r0, [pc, #452]	; (800ca08 <InitEEPROM+0x228>)
 800c842:	f7ff ff07 	bl	800c654 <read_eeprom_union>
 800c846:	4603      	mov	r3, r0
 800c848:	4a77      	ldr	r2, [pc, #476]	; (800ca28 <InitEEPROM+0x248>)
 800c84a:	6013      	str	r3, [r2, #0]
	periodsenddata = read_eeprom_union(&hi2c1, 0x14);
 800c84c:	2114      	movs	r1, #20
 800c84e:	486e      	ldr	r0, [pc, #440]	; (800ca08 <InitEEPROM+0x228>)
 800c850:	f7ff ff00 	bl	800c654 <read_eeprom_union>
 800c854:	4603      	mov	r3, r0
 800c856:	4a75      	ldr	r2, [pc, #468]	; (800ca2c <InitEEPROM+0x24c>)
 800c858:	6013      	str	r3, [r2, #0]
	periodsendloc = read_eeprom_union(&hi2c1, 0x18);
 800c85a:	2118      	movs	r1, #24
 800c85c:	486a      	ldr	r0, [pc, #424]	; (800ca08 <InitEEPROM+0x228>)
 800c85e:	f7ff fef9 	bl	800c654 <read_eeprom_union>
 800c862:	4603      	mov	r3, r0
 800c864:	4a72      	ldr	r2, [pc, #456]	; (800ca30 <InitEEPROM+0x250>)
 800c866:	6013      	str	r3, [r2, #0]
	periodsendbat = read_eeprom_union(&hi2c1, 0x1C);
 800c868:	211c      	movs	r1, #28
 800c86a:	4867      	ldr	r0, [pc, #412]	; (800ca08 <InitEEPROM+0x228>)
 800c86c:	f7ff fef2 	bl	800c654 <read_eeprom_union>
 800c870:	4603      	mov	r3, r0
 800c872:	4a70      	ldr	r2, [pc, #448]	; (800ca34 <InitEEPROM+0x254>)
 800c874:	6013      	str	r3, [r2, #0]
	timebacknormal = read_eeprom_union(&hi2c1, 0x20);
 800c876:	2120      	movs	r1, #32
 800c878:	4863      	ldr	r0, [pc, #396]	; (800ca08 <InitEEPROM+0x228>)
 800c87a:	f7ff feeb 	bl	800c654 <read_eeprom_union>
 800c87e:	4603      	mov	r3, r0
 800c880:	4a6d      	ldr	r2, [pc, #436]	; (800ca38 <InitEEPROM+0x258>)
 800c882:	6013      	str	r3, [r2, #0]

	distancedrifting = read_eeprom_union(&hi2c1, 0x24);
 800c884:	2124      	movs	r1, #36	; 0x24
 800c886:	4860      	ldr	r0, [pc, #384]	; (800ca08 <InitEEPROM+0x228>)
 800c888:	f7ff fee4 	bl	800c654 <read_eeprom_union>
 800c88c:	4603      	mov	r3, r0
 800c88e:	4a6b      	ldr	r2, [pc, #428]	; (800ca3c <InitEEPROM+0x25c>)
 800c890:	6013      	str	r3, [r2, #0]
	read_eeprom_byte(&hi2c1, 0x25, &tandalat);
 800c892:	4a6b      	ldr	r2, [pc, #428]	; (800ca40 <InitEEPROM+0x260>)
 800c894:	2125      	movs	r1, #37	; 0x25
 800c896:	485c      	ldr	r0, [pc, #368]	; (800ca08 <InitEEPROM+0x228>)
 800c898:	f7ff fec3 	bl	800c622 <read_eeprom_byte>
	latx = read_eeprom_union(&hi2c1, 0x26);
 800c89c:	2126      	movs	r1, #38	; 0x26
 800c89e:	485a      	ldr	r0, [pc, #360]	; (800ca08 <InitEEPROM+0x228>)
 800c8a0:	f7ff fed8 	bl	800c654 <read_eeprom_union>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	4b66      	ldr	r3, [pc, #408]	; (800ca44 <InitEEPROM+0x264>)
 800c8aa:	601a      	str	r2, [r3, #0]
	read_eeprom_byte(&hi2c1, 0x30, &tandalng);
 800c8ac:	4a66      	ldr	r2, [pc, #408]	; (800ca48 <InitEEPROM+0x268>)
 800c8ae:	2130      	movs	r1, #48	; 0x30
 800c8b0:	4855      	ldr	r0, [pc, #340]	; (800ca08 <InitEEPROM+0x228>)
 800c8b2:	f7ff feb6 	bl	800c622 <read_eeprom_byte>
	lngx = read_eeprom_union(&hi2c1, 0x31);
 800c8b6:	2131      	movs	r1, #49	; 0x31
 800c8b8:	4853      	ldr	r0, [pc, #332]	; (800ca08 <InitEEPROM+0x228>)
 800c8ba:	f7ff fecb 	bl	800c654 <read_eeprom_union>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	4b62      	ldr	r3, [pc, #392]	; (800ca4c <InitEEPROM+0x26c>)
 800c8c4:	601a      	str	r2, [r3, #0]
	latitude = (float) latx / 1000000.0;
 800c8c6:	4b5f      	ldr	r3, [pc, #380]	; (800ca44 <InitEEPROM+0x264>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c8d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca50 <InitEEPROM+0x270>
 800c8d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8da:	4b5e      	ldr	r3, [pc, #376]	; (800ca54 <InitEEPROM+0x274>)
 800c8dc:	edc3 7a00 	vstr	s15, [r3]
	latitude = (-1.0) * latitude;
 800c8e0:	4b5c      	ldr	r3, [pc, #368]	; (800ca54 <InitEEPROM+0x274>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7f3 fe4f 	bl	8000588 <__aeabi_f2d>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	f7f4 f999 	bl	8000c28 <__aeabi_d2f>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	ee07 3a90 	vmov	s15, r3
 800c8fc:	eef1 7a67 	vneg.f32	s15, s15
 800c900:	4b54      	ldr	r3, [pc, #336]	; (800ca54 <InitEEPROM+0x274>)
 800c902:	edc3 7a00 	vstr	s15, [r3]
	longitude = (float) lngx / 1000000.0;
 800c906:	4b51      	ldr	r3, [pc, #324]	; (800ca4c <InitEEPROM+0x26c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca50 <InitEEPROM+0x270>
 800c916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c91a:	4b4f      	ldr	r3, [pc, #316]	; (800ca58 <InitEEPROM+0x278>)
 800c91c:	edc3 7a00 	vstr	s15, [r3]

	read_eeprom_byte(&hi2c1, 0x35, &ledstatus);
 800c920:	4a4e      	ldr	r2, [pc, #312]	; (800ca5c <InitEEPROM+0x27c>)
 800c922:	2135      	movs	r1, #53	; 0x35
 800c924:	4838      	ldr	r0, [pc, #224]	; (800ca08 <InitEEPROM+0x228>)
 800c926:	f7ff fe7c 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x36, &debugbpr);
 800c92a:	4a4d      	ldr	r2, [pc, #308]	; (800ca60 <InitEEPROM+0x280>)
 800c92c:	2136      	movs	r1, #54	; 0x36
 800c92e:	4836      	ldr	r0, [pc, #216]	; (800ca08 <InitEEPROM+0x228>)
 800c930:	f7ff fe77 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x37, &debugakustik);
 800c934:	4a4b      	ldr	r2, [pc, #300]	; (800ca64 <InitEEPROM+0x284>)
 800c936:	2137      	movs	r1, #55	; 0x37
 800c938:	4833      	ldr	r0, [pc, #204]	; (800ca08 <InitEEPROM+0x228>)
 800c93a:	f7ff fe72 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x38, &debugiridium);
 800c93e:	4a4a      	ldr	r2, [pc, #296]	; (800ca68 <InitEEPROM+0x288>)
 800c940:	2138      	movs	r1, #56	; 0x38
 800c942:	4831      	ldr	r0, [pc, #196]	; (800ca08 <InitEEPROM+0x228>)
 800c944:	f7ff fe6d 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x39, &debuggps);
 800c948:	4a48      	ldr	r2, [pc, #288]	; (800ca6c <InitEEPROM+0x28c>)
 800c94a:	2139      	movs	r1, #57	; 0x39
 800c94c:	482e      	ldr	r0, [pc, #184]	; (800ca08 <InitEEPROM+0x228>)
 800c94e:	f7ff fe68 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x3A, &debugbluetooth);
 800c952:	4a47      	ldr	r2, [pc, #284]	; (800ca70 <InitEEPROM+0x290>)
 800c954:	213a      	movs	r1, #58	; 0x3a
 800c956:	482c      	ldr	r0, [pc, #176]	; (800ca08 <InitEEPROM+0x228>)
 800c958:	f7ff fe63 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x3B, &syncgps);
 800c95c:	4a45      	ldr	r2, [pc, #276]	; (800ca74 <InitEEPROM+0x294>)
 800c95e:	213b      	movs	r1, #59	; 0x3b
 800c960:	4829      	ldr	r0, [pc, #164]	; (800ca08 <InitEEPROM+0x228>)
 800c962:	f7ff fe5e 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x3C, &AccelerometerStatus);
 800c966:	4a44      	ldr	r2, [pc, #272]	; (800ca78 <InitEEPROM+0x298>)
 800c968:	213c      	movs	r1, #60	; 0x3c
 800c96a:	4827      	ldr	r0, [pc, #156]	; (800ca08 <InitEEPROM+0x228>)
 800c96c:	f7ff fe59 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x3D, &kalibrasibat);
 800c970:	4a42      	ldr	r2, [pc, #264]	; (800ca7c <InitEEPROM+0x29c>)
 800c972:	213d      	movs	r1, #61	; 0x3d
 800c974:	4824      	ldr	r0, [pc, #144]	; (800ca08 <InitEEPROM+0x228>)
 800c976:	f7ff fe54 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x3E, &debuguni);
 800c97a:	4a41      	ldr	r2, [pc, #260]	; (800ca80 <InitEEPROM+0x2a0>)
 800c97c:	213e      	movs	r1, #62	; 0x3e
 800c97e:	4822      	ldr	r0, [pc, #136]	; (800ca08 <InitEEPROM+0x228>)
 800c980:	f7ff fe4f 	bl	800c622 <read_eeprom_byte>

	accth = read_eeprom_union(&hi2c1, 0x40);
 800c984:	2140      	movs	r1, #64	; 0x40
 800c986:	4820      	ldr	r0, [pc, #128]	; (800ca08 <InitEEPROM+0x228>)
 800c988:	f7ff fe64 	bl	800c654 <read_eeprom_union>
 800c98c:	4603      	mov	r3, r0
 800c98e:	4a3d      	ldr	r2, [pc, #244]	; (800ca84 <InitEEPROM+0x2a4>)
 800c990:	6013      	str	r3, [r2, #0]
	acccounter = read_eeprom_union(&hi2c1, 0x44);
 800c992:	2144      	movs	r1, #68	; 0x44
 800c994:	481c      	ldr	r0, [pc, #112]	; (800ca08 <InitEEPROM+0x228>)
 800c996:	f7ff fe5d 	bl	800c654 <read_eeprom_union>
 800c99a:	4603      	mov	r3, r0
 800c99c:	4a3a      	ldr	r2, [pc, #232]	; (800ca88 <InitEEPROM+0x2a8>)
 800c99e:	6013      	str	r3, [r2, #0]

	read_eeprom_byte(&hi2c1, 0x48, &synctimertc);
 800c9a0:	4a3a      	ldr	r2, [pc, #232]	; (800ca8c <InitEEPROM+0x2ac>)
 800c9a2:	2148      	movs	r1, #72	; 0x48
 800c9a4:	4818      	ldr	r0, [pc, #96]	; (800ca08 <InitEEPROM+0x228>)
 800c9a6:	f7ff fe3c 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x49, &minbat);
 800c9aa:	4a39      	ldr	r2, [pc, #228]	; (800ca90 <InitEEPROM+0x2b0>)
 800c9ac:	2149      	movs	r1, #73	; 0x49
 800c9ae:	4816      	ldr	r0, [pc, #88]	; (800ca08 <InitEEPROM+0x228>)
 800c9b0:	f7ff fe37 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x4A, &hourbat);
 800c9b4:	4a37      	ldr	r2, [pc, #220]	; (800ca94 <InitEEPROM+0x2b4>)
 800c9b6:	214a      	movs	r1, #74	; 0x4a
 800c9b8:	4813      	ldr	r0, [pc, #76]	; (800ca08 <InitEEPROM+0x228>)
 800c9ba:	f7ff fe32 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x4B, &minloc);
 800c9be:	4a36      	ldr	r2, [pc, #216]	; (800ca98 <InitEEPROM+0x2b8>)
 800c9c0:	214b      	movs	r1, #75	; 0x4b
 800c9c2:	4811      	ldr	r0, [pc, #68]	; (800ca08 <InitEEPROM+0x228>)
 800c9c4:	f7ff fe2d 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x4C, &hourloc);
 800c9c8:	4a34      	ldr	r2, [pc, #208]	; (800ca9c <InitEEPROM+0x2bc>)
 800c9ca:	214c      	movs	r1, #76	; 0x4c
 800c9cc:	480e      	ldr	r0, [pc, #56]	; (800ca08 <InitEEPROM+0x228>)
 800c9ce:	f7ff fe28 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x4D, &periodmin);
 800c9d2:	4a33      	ldr	r2, [pc, #204]	; (800caa0 <InitEEPROM+0x2c0>)
 800c9d4:	214d      	movs	r1, #77	; 0x4d
 800c9d6:	480c      	ldr	r0, [pc, #48]	; (800ca08 <InitEEPROM+0x228>)
 800c9d8:	f7ff fe23 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x4E, &driftcalc);
 800c9dc:	4a31      	ldr	r2, [pc, #196]	; (800caa4 <InitEEPROM+0x2c4>)
 800c9de:	214e      	movs	r1, #78	; 0x4e
 800c9e0:	4809      	ldr	r0, [pc, #36]	; (800ca08 <InitEEPROM+0x228>)
 800c9e2:	f7ff fe1e 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x4F, &counterwaitbpr);
 800c9e6:	4a30      	ldr	r2, [pc, #192]	; (800caa8 <InitEEPROM+0x2c8>)
 800c9e8:	214f      	movs	r1, #79	; 0x4f
 800c9ea:	4807      	ldr	r0, [pc, #28]	; (800ca08 <InitEEPROM+0x228>)
 800c9ec:	f7ff fe19 	bl	800c622 <read_eeprom_byte>
	read_eeprom_byte(&hi2c1, 0x50, &AISstatus);
 800c9f0:	4a2e      	ldr	r2, [pc, #184]	; (800caac <InitEEPROM+0x2cc>)
 800c9f2:	2150      	movs	r1, #80	; 0x50
 800c9f4:	4804      	ldr	r0, [pc, #16]	; (800ca08 <InitEEPROM+0x228>)
 800c9f6:	f7ff fe14 	bl	800c622 <read_eeprom_byte>

}
 800c9fa:	bf00      	nop
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	200320f3 	.word	0x200320f3
 800ca04:	200338f4 	.word	0x200338f4
 800ca08:	20033484 	.word	0x20033484
 800ca0c:	20033534 	.word	0x20033534
 800ca10:	200003a4 	.word	0x200003a4
 800ca14:	20033730 	.word	0x20033730
 800ca18:	200320f4 	.word	0x200320f4
 800ca1c:	2003353c 	.word	0x2003353c
 800ca20:	20033888 	.word	0x20033888
 800ca24:	20033468 	.word	0x20033468
 800ca28:	20033650 	.word	0x20033650
 800ca2c:	20033540 	.word	0x20033540
 800ca30:	20033374 	.word	0x20033374
 800ca34:	20033754 	.word	0x20033754
 800ca38:	2003388c 	.word	0x2003388c
 800ca3c:	200337fc 	.word	0x200337fc
 800ca40:	20033731 	.word	0x20033731
 800ca44:	2003345c 	.word	0x2003345c
 800ca48:	20033700 	.word	0x20033700
 800ca4c:	2003372c 	.word	0x2003372c
 800ca50:	49742400 	.word	0x49742400
 800ca54:	20033764 	.word	0x20033764
 800ca58:	20033744 	.word	0x20033744
 800ca5c:	200338fc 	.word	0x200338fc
 800ca60:	2003347f 	.word	0x2003347f
 800ca64:	20033476 	.word	0x20033476
 800ca68:	20033328 	.word	0x20033328
 800ca6c:	20033473 	.word	0x20033473
 800ca70:	200338a8 	.word	0x200338a8
 800ca74:	20033327 	.word	0x20033327
 800ca78:	20033659 	.word	0x20033659
 800ca7c:	200337ec 	.word	0x200337ec
 800ca80:	200338a1 	.word	0x200338a1
 800ca84:	200337f4 	.word	0x200337f4
 800ca88:	200338f8 	.word	0x200338f8
 800ca8c:	2003374e 	.word	0x2003374e
 800ca90:	20033560 	.word	0x20033560
 800ca94:	20033889 	.word	0x20033889
 800ca98:	2003364c 	.word	0x2003364c
 800ca9c:	20033561 	.word	0x20033561
 800caa0:	20033701 	.word	0x20033701
 800caa4:	2003388a 	.word	0x2003388a
 800caa8:	20033460 	.word	0x20033460
 800caac:	20033738 	.word	0x20033738

0800cab0 <valueFromString>:

	return str;
}

int valueFromString(char* string,int start, int width)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
	int value=0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	617b      	str	r3, [r7, #20]
	for( int n=0; n < width; n++ )
 800cac0:	2300      	movs	r3, #0
 800cac2:	613b      	str	r3, [r7, #16]
 800cac4:	e012      	b.n	800caec <valueFromString+0x3c>
		value = value * 10 + string[start +n] - '0';
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	4613      	mov	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	4619      	mov	r1, r3
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	4413      	add	r3, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	4413      	add	r3, r2
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	440b      	add	r3, r1
 800cae2:	3b30      	subs	r3, #48	; 0x30
 800cae4:	617b      	str	r3, [r7, #20]
	for( int n=0; n < width; n++ )
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	dbe8      	blt.n	800cac6 <valueFromString+0x16>

	return value;
 800caf4:	697b      	ldr	r3, [r7, #20]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	0000      	movs	r0, r0
 800cb04:	0000      	movs	r0, r0
	...

0800cb08 <convertDegMinToDecDeg>:
extern uint8_t driftcalc;
//_RTC rtcTEWS2;

//kuyngepush

double convertDegMinToDecDeg(float degMin) {
 800cb08:	b5b0      	push	{r4, r5, r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	ed87 0a01 	vstr	s0, [r7, #4]
	double min = 0.0;
 800cb12:	f04f 0200 	mov.w	r2, #0
 800cb16:	f04f 0300 	mov.w	r3, #0
 800cb1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double decDeg = 0.0;
 800cb1e:	f04f 0200 	mov.w	r2, #0
 800cb22:	f04f 0300 	mov.w	r3, #0
 800cb26:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//get the minutes, fmod() requires double
	min = fmod((double) degMin, 100.0);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7f3 fd2c 	bl	8000588 <__aeabi_f2d>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800cba0 <convertDegMinToDecDeg+0x98>
 800cb38:	ec43 2b10 	vmov	d0, r2, r3
 800cb3c:	f00b f8e0 	bl	8017d00 <fmod>
 800cb40:	ed87 0b04 	vstr	d0, [r7, #16]

	//rebuild coordinates in decimal degrees
	degMin = (int) (degMin / 100);
 800cb44:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb48:	eddf 6a17 	vldr	s13, [pc, #92]	; 800cba8 <convertDegMinToDecDeg+0xa0>
 800cb4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb58:	edc7 7a01 	vstr	s15, [r7, #4]
	decDeg = degMin + (min / 60);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7f3 fd13 	bl	8000588 <__aeabi_f2d>
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	4b10      	ldr	r3, [pc, #64]	; (800cbac <convertDegMinToDecDeg+0xa4>)
 800cb6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cb70:	f7f3 fe8c 	bl	800088c <__aeabi_ddiv>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4620      	mov	r0, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7f3 fba6 	bl	80002cc <__adddf3>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decDeg;
 800cb88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb8c:	ec43 2b17 	vmov	d7, r2, r3
}
 800cb90:	eeb0 0a47 	vmov.f32	s0, s14
 800cb94:	eef0 0a67 	vmov.f32	s1, s15
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	00000000 	.word	0x00000000
 800cba4:	40590000 	.word	0x40590000
 800cba8:	42c80000 	.word	0x42c80000
 800cbac:	404e0000 	.word	0x404e0000

0800cbb0 <GPS_Init>:

void GPS_Init(void) {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
	GPS.rxIndex = 0;
 800cbb4:	4b11      	ldr	r3, [pc, #68]	; (800cbfc <GPS_Init+0x4c>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

	HAL_GPIO_WritePin(GPIOD, GPS_RESET_Pin, GPIO_PIN_SET); //enable GPS
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	2180      	movs	r1, #128	; 0x80
 800cbc0:	480f      	ldr	r0, [pc, #60]	; (800cc00 <GPS_Init+0x50>)
 800cbc2:	f7f5 f9e5 	bl	8001f90 <HAL_GPIO_WritePin>
	osDelay(50);
 800cbc6:	2032      	movs	r0, #50	; 0x32
 800cbc8:	f7fb fd15 	bl	80085f6 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPS_RESET_Pin, GPIO_PIN_RESET); //enable GPS
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2180      	movs	r1, #128	; 0x80
 800cbd0:	480b      	ldr	r0, [pc, #44]	; (800cc00 <GPS_Init+0x50>)
 800cbd2:	f7f5 f9dd 	bl	8001f90 <HAL_GPIO_WritePin>
	osDelay(50);
 800cbd6:	2032      	movs	r0, #50	; 0x32
 800cbd8:	f7fb fd0d 	bl	80085f6 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPS_RESET_Pin, GPIO_PIN_SET); //enable GPS
 800cbdc:	2201      	movs	r2, #1
 800cbde:	2180      	movs	r1, #128	; 0x80
 800cbe0:	4807      	ldr	r0, [pc, #28]	; (800cc00 <GPS_Init+0x50>)
 800cbe2:	f7f5 f9d5 	bl	8001f90 <HAL_GPIO_WritePin>

	//wait for reset to apply
	osDelay(2000);
 800cbe6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cbea:	f7fb fd04 	bl	80085f6 <osDelay>

	//HAL_GPIO_WritePin(GPIOD, GPS_RESET_Pin, GPIO_PIN_SET); //enable GPS

	HAL_UART_Receive_DMA(&_GPS_USART, &GPS.rxTmp, 1);
 800cbee:	2201      	movs	r2, #1
 800cbf0:	4904      	ldr	r1, [pc, #16]	; (800cc04 <GPS_Init+0x54>)
 800cbf2:	4805      	ldr	r0, [pc, #20]	; (800cc08 <GPS_Init+0x58>)
 800cbf4:	f7fa fa0a 	bl	800700c <HAL_UART_Receive_DMA>
}
 800cbf8:	bf00      	nop
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	20032a54 	.word	0x20032a54
 800cc00:	48000c00 	.word	0x48000c00
 800cc04:	20032e56 	.word	0x20032e56
 800cc08:	20033804 	.word	0x20033804

0800cc0c <GPS_Callback>:

void GPS_Callback(void) {
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
	GPS.LastTime = HAL_GetTick();
 800cc10:	f7f4 fa38 	bl	8001084 <HAL_GetTick>
 800cc14:	4603      	mov	r3, r0
 800cc16:	4a1c      	ldr	r2, [pc, #112]	; (800cc88 <GPS_Callback+0x7c>)
 800cc18:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	if (GPS.rxIndex < sizeof(GPS.rxBuffer) - 2) {
 800cc1c:	4b1a      	ldr	r3, [pc, #104]	; (800cc88 <GPS_Callback+0x7c>)
 800cc1e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800cc22:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d810      	bhi.n	800cc4c <GPS_Callback+0x40>
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 800cc2a:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <GPS_Callback+0x7c>)
 800cc2c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800cc30:	461a      	mov	r2, r3
 800cc32:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <GPS_Callback+0x7c>)
 800cc34:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 800cc38:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <GPS_Callback+0x7c>)
 800cc3a:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 800cc3c:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <GPS_Callback+0x7c>)
 800cc3e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800cc42:	3301      	adds	r3, #1
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <GPS_Callback+0x7c>)
 800cc48:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
	if (GPS.rxTmp == 13) {
 800cc4c:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <GPS_Callback+0x7c>)
 800cc4e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800cc52:	2b0d      	cmp	r3, #13
 800cc54:	d110      	bne.n	800cc78 <GPS_Callback+0x6c>
		osMessageQueuePut(gpsQueueHandle, &GPS.rxBuffer, 0U, 0U);
 800cc56:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <GPS_Callback+0x80>)
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	490a      	ldr	r1, [pc, #40]	; (800cc88 <GPS_Callback+0x7c>)
 800cc60:	f7fb fe98 	bl	8008994 <osMessageQueuePut>
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 800cc64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc68:	2100      	movs	r1, #0
 800cc6a:	4807      	ldr	r0, [pc, #28]	; (800cc88 <GPS_Callback+0x7c>)
 800cc6c:	f006 face 	bl	801320c <memset>
		GPS.rxIndex = 0;
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <GPS_Callback+0x7c>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
	HAL_UART_Receive_DMA(&_GPS_USART, &GPS.rxTmp, 1);
 800cc78:	2201      	movs	r2, #1
 800cc7a:	4905      	ldr	r1, [pc, #20]	; (800cc90 <GPS_Callback+0x84>)
 800cc7c:	4805      	ldr	r0, [pc, #20]	; (800cc94 <GPS_Callback+0x88>)
 800cc7e:	f7fa f9c5 	bl	800700c <HAL_UART_Receive_DMA>
}
 800cc82:	bf00      	nop
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20032a54 	.word	0x20032a54
 800cc8c:	200335f0 	.word	0x200335f0
 800cc90:	20032e56 	.word	0x20032e56
 800cc94:	20033804 	.word	0x20033804

0800cc98 <GPS_Process>:

void GPS_Process(char *buffer) {
 800cc98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc9c:	b098      	sub	sp, #96	; 0x60
 800cc9e:	af02      	add	r7, sp, #8
 800cca0:	6078      	str	r0, [r7, #4]
	char *glatitude;
	char *latsim;
	char *glongitude;
	char *longsim;

	if (debuggps == 1) {
 800cca2:	4bb6      	ldr	r3, [pc, #728]	; (800cf7c <GPS_Process+0x2e4>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d10a      	bne.n	800ccc0 <GPS_Process+0x28>
		if (strstr((char*) buffer, "$PSTM")) {
 800ccaa:	49b5      	ldr	r1, [pc, #724]	; (800cf80 <GPS_Process+0x2e8>)
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f007 fa1c 	bl	80140ea <strstr>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <GPS_Process+0x28>
			usb_universal_printf("%s\r\n",buffer);
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	48b2      	ldr	r0, [pc, #712]	; (800cf84 <GPS_Process+0x2ec>)
 800ccbc:	f005 fd16 	bl	80126ec <usb_universal_printf>
		}
	}

	if (strstr((char*) buffer, "$GPRMC,")) {
 800ccc0:	49b1      	ldr	r1, [pc, #708]	; (800cf88 <GPS_Process+0x2f0>)
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f007 fa11 	bl	80140ea <strstr>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 80b1 	beq.w	800ce32 <GPS_Process+0x19a>
		if (debuggps == 1) {
 800ccd0:	4baa      	ldr	r3, [pc, #680]	; (800cf7c <GPS_Process+0x2e4>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d10f      	bne.n	800ccf8 <GPS_Process+0x60>
			if (debuguni == 1)
 800ccd8:	4bac      	ldr	r3, [pc, #688]	; (800cf8c <GPS_Process+0x2f4>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d103      	bne.n	800cce8 <GPS_Process+0x50>
				usb_universal_printf("%s\r\n", buffer);
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	48a8      	ldr	r0, [pc, #672]	; (800cf84 <GPS_Process+0x2ec>)
 800cce4:	f005 fd02 	bl	80126ec <usb_universal_printf>
			if (debugbluetooth == 1)
 800cce8:	4ba9      	ldr	r3, [pc, #676]	; (800cf90 <GPS_Process+0x2f8>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d103      	bne.n	800ccf8 <GPS_Process+0x60>
				usb_universal_printf("%s\r\n", buffer);
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	48a4      	ldr	r0, [pc, #656]	; (800cf84 <GPS_Process+0x2ec>)
 800ccf4:	f005 fcfa 	bl	80126ec <usb_universal_printf>
		}

		char *GPRMC;
		char *date;

		GPRMC = strstr(buffer, "$GPRMC,"); //$GPRMC
 800ccf8:	49a3      	ldr	r1, [pc, #652]	; (800cf88 <GPS_Process+0x2f0>)
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f007 f9f5 	bl	80140ea <strstr>
 800cd00:	4603      	mov	r3, r0
 800cd02:	617b      	str	r3, [r7, #20]
		strtok_r(GPRMC, ",", &GPRMC);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	f107 0214 	add.w	r2, r7, #20
 800cd0a:	49a2      	ldr	r1, [pc, #648]	; (800cf94 <GPS_Process+0x2fc>)
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f008 f863 	bl	8014dd8 <strtok_r>
		timestamp = strtok_r(GPRMC, ",", &GPRMC);
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f107 0214 	add.w	r2, r7, #20
 800cd18:	499e      	ldr	r1, [pc, #632]	; (800cf94 <GPS_Process+0x2fc>)
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f008 f85c 	bl	8014dd8 <strtok_r>
 800cd20:	64f8      	str	r0, [r7, #76]	; 0x4c
		strtok_r(GPRMC, ",", &GPRMC);
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f107 0214 	add.w	r2, r7, #20
 800cd28:	499a      	ldr	r1, [pc, #616]	; (800cf94 <GPS_Process+0x2fc>)
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f008 f854 	bl	8014dd8 <strtok_r>
		glatitude = strtok_r(GPRMC, ",", &GPRMC);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	f107 0214 	add.w	r2, r7, #20
 800cd36:	4997      	ldr	r1, [pc, #604]	; (800cf94 <GPS_Process+0x2fc>)
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f008 f84d 	bl	8014dd8 <strtok_r>
 800cd3e:	64b8      	str	r0, [r7, #72]	; 0x48
		latsim = strtok_r(GPRMC, ",", &GPRMC);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f107 0214 	add.w	r2, r7, #20
 800cd46:	4993      	ldr	r1, [pc, #588]	; (800cf94 <GPS_Process+0x2fc>)
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f008 f845 	bl	8014dd8 <strtok_r>
 800cd4e:	6478      	str	r0, [r7, #68]	; 0x44
		glongitude = strtok_r(GPRMC, ",", &GPRMC);
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	f107 0214 	add.w	r2, r7, #20
 800cd56:	498f      	ldr	r1, [pc, #572]	; (800cf94 <GPS_Process+0x2fc>)
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f008 f83d 	bl	8014dd8 <strtok_r>
 800cd5e:	6438      	str	r0, [r7, #64]	; 0x40
		longsim = strtok_r(GPRMC, ",", &GPRMC);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f107 0214 	add.w	r2, r7, #20
 800cd66:	498b      	ldr	r1, [pc, #556]	; (800cf94 <GPS_Process+0x2fc>)
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f008 f835 	bl	8014dd8 <strtok_r>
 800cd6e:	63f8      	str	r0, [r7, #60]	; 0x3c
		strtok_r(GPRMC, ",", &GPRMC);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f107 0214 	add.w	r2, r7, #20
 800cd76:	4987      	ldr	r1, [pc, #540]	; (800cf94 <GPS_Process+0x2fc>)
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f008 f82d 	bl	8014dd8 <strtok_r>
		strtok_r(GPRMC, ",", &GPRMC);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f107 0214 	add.w	r2, r7, #20
 800cd84:	4983      	ldr	r1, [pc, #524]	; (800cf94 <GPS_Process+0x2fc>)
 800cd86:	4618      	mov	r0, r3
 800cd88:	f008 f826 	bl	8014dd8 <strtok_r>
		date = strtok_r(GPRMC, ",", &GPRMC);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	f107 0214 	add.w	r2, r7, #20
 800cd92:	4980      	ldr	r1, [pc, #512]	; (800cf94 <GPS_Process+0x2fc>)
 800cd94:	4618      	mov	r0, r3
 800cd96:	f008 f81f 	bl	8014dd8 <strtok_r>
 800cd9a:	63b8      	str	r0, [r7, #56]	; 0x38

		timegps = atoi(timestamp);
 800cd9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cd9e:	f006 f9ed 	bl	801317c <atoi>
 800cda2:	4603      	mov	r3, r0
 800cda4:	637b      	str	r3, [r7, #52]	; 0x34
		GPS.hour = timegps / 10000;
 800cda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda8:	4a7b      	ldr	r2, [pc, #492]	; (800cf98 <GPS_Process+0x300>)
 800cdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800cdae:	0b5b      	lsrs	r3, r3, #13
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	4b7a      	ldr	r3, [pc, #488]	; (800cf9c <GPS_Process+0x304>)
 800cdb4:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
		GPS.minute = (timegps % 10000) / 100;
 800cdb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdba:	4b77      	ldr	r3, [pc, #476]	; (800cf98 <GPS_Process+0x300>)
 800cdbc:	fba3 1302 	umull	r1, r3, r3, r2
 800cdc0:	0b5b      	lsrs	r3, r3, #13
 800cdc2:	f242 7110 	movw	r1, #10000	; 0x2710
 800cdc6:	fb01 f303 	mul.w	r3, r1, r3
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	4a74      	ldr	r2, [pc, #464]	; (800cfa0 <GPS_Process+0x308>)
 800cdce:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd2:	095b      	lsrs	r3, r3, #5
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	4b71      	ldr	r3, [pc, #452]	; (800cf9c <GPS_Process+0x304>)
 800cdd8:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
		//GPS.minute 	= GPS.minute/100;
		GPS.second = timegps % 100;
 800cddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdde:	4b70      	ldr	r3, [pc, #448]	; (800cfa0 <GPS_Process+0x308>)
 800cde0:	fba3 1302 	umull	r1, r3, r3, r2
 800cde4:	095b      	lsrs	r3, r3, #5
 800cde6:	2164      	movs	r1, #100	; 0x64
 800cde8:	fb01 f303 	mul.w	r3, r1, r3
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	b2da      	uxtb	r2, r3
 800cdf0:	4b6a      	ldr	r3, [pc, #424]	; (800cf9c <GPS_Process+0x304>)
 800cdf2:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f

		GPS.date = valueFromString(date, 0, 2);
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdfc:	f7ff fe58 	bl	800cab0 <valueFromString>
 800ce00:	4603      	mov	r3, r0
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	4b65      	ldr	r3, [pc, #404]	; (800cf9c <GPS_Process+0x304>)
 800ce06:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
		GPS.month = valueFromString(date, 2, 2);
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	2102      	movs	r1, #2
 800ce0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce10:	f7ff fe4e 	bl	800cab0 <valueFromString>
 800ce14:	4603      	mov	r3, r0
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	4b60      	ldr	r3, [pc, #384]	; (800cf9c <GPS_Process+0x304>)
 800ce1a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
		GPS.year = valueFromString(date, 4, 2);
 800ce1e:	2202      	movs	r2, #2
 800ce20:	2104      	movs	r1, #4
 800ce22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce24:	f7ff fe44 	bl	800cab0 <valueFromString>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	4b5b      	ldr	r3, [pc, #364]	; (800cf9c <GPS_Process+0x304>)
 800ce2e:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
	}


	strx = strstr(buffer, "$GPGGA,"); //GPGGA
 800ce32:	495c      	ldr	r1, [pc, #368]	; (800cfa4 <GPS_Process+0x30c>)
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f007 f958 	bl	80140ea <strstr>
 800ce3a:	6338      	str	r0, [r7, #48]	; 0x30
	if (strx != NULL) {
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 828d 	beq.w	800d35e <GPS_Process+0x6c6>
		if (debuggps == 1) {
 800ce44:	4b4d      	ldr	r3, [pc, #308]	; (800cf7c <GPS_Process+0x2e4>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d10f      	bne.n	800ce6c <GPS_Process+0x1d4>
			if (debuguni == 1)
 800ce4c:	4b4f      	ldr	r3, [pc, #316]	; (800cf8c <GPS_Process+0x2f4>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d103      	bne.n	800ce5c <GPS_Process+0x1c4>
				usb_universal_printf("%s\r\n", buffer);
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	484b      	ldr	r0, [pc, #300]	; (800cf84 <GPS_Process+0x2ec>)
 800ce58:	f005 fc48 	bl	80126ec <usb_universal_printf>
			if (debugbluetooth == 1)
 800ce5c:	4b4c      	ldr	r3, [pc, #304]	; (800cf90 <GPS_Process+0x2f8>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d103      	bne.n	800ce6c <GPS_Process+0x1d4>
				usb_universal_printf("%s\r\n", buffer);
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	4847      	ldr	r0, [pc, #284]	; (800cf84 <GPS_Process+0x2ec>)
 800ce68:	f005 fc40 	bl	80126ec <usb_universal_printf>
		char *hdop;
		char *altitude;
		char *GPGGA;
		float flatitude, flongitude;

		GPGGA = strstr(buffer, "$GPGGA,"); //GPGGA
 800ce6c:	494d      	ldr	r1, [pc, #308]	; (800cfa4 <GPS_Process+0x30c>)
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f007 f93b 	bl	80140ea <strstr>
 800ce74:	4603      	mov	r3, r0
 800ce76:	613b      	str	r3, [r7, #16]
		strtok_r(GPGGA, ",", &GPGGA);
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	f107 0210 	add.w	r2, r7, #16
 800ce7e:	4945      	ldr	r1, [pc, #276]	; (800cf94 <GPS_Process+0x2fc>)
 800ce80:	4618      	mov	r0, r3
 800ce82:	f007 ffa9 	bl	8014dd8 <strtok_r>
		timestamp = strtok_r(GPGGA, ",", &GPGGA);
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	f107 0210 	add.w	r2, r7, #16
 800ce8c:	4941      	ldr	r1, [pc, #260]	; (800cf94 <GPS_Process+0x2fc>)
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f007 ffa2 	bl	8014dd8 <strtok_r>
 800ce94:	64f8      	str	r0, [r7, #76]	; 0x4c
		glatitude = strtok_r(GPGGA, ",", &GPGGA);
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	f107 0210 	add.w	r2, r7, #16
 800ce9c:	493d      	ldr	r1, [pc, #244]	; (800cf94 <GPS_Process+0x2fc>)
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f007 ff9a 	bl	8014dd8 <strtok_r>
 800cea4:	64b8      	str	r0, [r7, #72]	; 0x48
		latsim = strtok_r(GPGGA, ",", &GPGGA);
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	f107 0210 	add.w	r2, r7, #16
 800ceac:	4939      	ldr	r1, [pc, #228]	; (800cf94 <GPS_Process+0x2fc>)
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f007 ff92 	bl	8014dd8 <strtok_r>
 800ceb4:	6478      	str	r0, [r7, #68]	; 0x44
		glongitude = strtok_r(GPGGA, ",", &GPGGA);
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	f107 0210 	add.w	r2, r7, #16
 800cebc:	4935      	ldr	r1, [pc, #212]	; (800cf94 <GPS_Process+0x2fc>)
 800cebe:	4618      	mov	r0, r3
 800cec0:	f007 ff8a 	bl	8014dd8 <strtok_r>
 800cec4:	6438      	str	r0, [r7, #64]	; 0x40
		longsim = strtok_r(GPGGA, ",", &GPGGA);
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f107 0210 	add.w	r2, r7, #16
 800cecc:	4931      	ldr	r1, [pc, #196]	; (800cf94 <GPS_Process+0x2fc>)
 800cece:	4618      	mov	r0, r3
 800ced0:	f007 ff82 	bl	8014dd8 <strtok_r>
 800ced4:	63f8      	str	r0, [r7, #60]	; 0x3c
		validstatus = strtok_r(GPGGA, ",", &GPGGA);
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	f107 0210 	add.w	r2, r7, #16
 800cedc:	492d      	ldr	r1, [pc, #180]	; (800cf94 <GPS_Process+0x2fc>)
 800cede:	4618      	mov	r0, r3
 800cee0:	f007 ff7a 	bl	8014dd8 <strtok_r>
 800cee4:	62f8      	str	r0, [r7, #44]	; 0x2c
		numsat = strtok_r(GPGGA, ",", &GPGGA);
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	f107 0210 	add.w	r2, r7, #16
 800ceec:	4929      	ldr	r1, [pc, #164]	; (800cf94 <GPS_Process+0x2fc>)
 800ceee:	4618      	mov	r0, r3
 800cef0:	f007 ff72 	bl	8014dd8 <strtok_r>
 800cef4:	62b8      	str	r0, [r7, #40]	; 0x28
		hdop = strtok_r(GPGGA, ",", &GPGGA);
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	f107 0210 	add.w	r2, r7, #16
 800cefc:	4925      	ldr	r1, [pc, #148]	; (800cf94 <GPS_Process+0x2fc>)
 800cefe:	4618      	mov	r0, r3
 800cf00:	f007 ff6a 	bl	8014dd8 <strtok_r>
 800cf04:	6278      	str	r0, [r7, #36]	; 0x24
		altitude = strtok_r(GPGGA, ",", &GPGGA);
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	f107 0210 	add.w	r2, r7, #16
 800cf0c:	4921      	ldr	r1, [pc, #132]	; (800cf94 <GPS_Process+0x2fc>)
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f007 ff62 	bl	8014dd8 <strtok_r>
 800cf14:	6238      	str	r0, [r7, #32]

		timegps = atoi(timestamp);
 800cf16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf18:	f006 f930 	bl	801317c <atoi>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	637b      	str	r3, [r7, #52]	; 0x34
		GPS.hour = timegps / 10000;
 800cf20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf22:	4a1d      	ldr	r2, [pc, #116]	; (800cf98 <GPS_Process+0x300>)
 800cf24:	fba2 2303 	umull	r2, r3, r2, r3
 800cf28:	0b5b      	lsrs	r3, r3, #13
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	4b1b      	ldr	r3, [pc, #108]	; (800cf9c <GPS_Process+0x304>)
 800cf2e:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
		GPS.minute = (timegps % 10000) / 100;
 800cf32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf34:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <GPS_Process+0x300>)
 800cf36:	fba3 1302 	umull	r1, r3, r3, r2
 800cf3a:	0b5b      	lsrs	r3, r3, #13
 800cf3c:	f242 7110 	movw	r1, #10000	; 0x2710
 800cf40:	fb01 f303 	mul.w	r3, r1, r3
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	4a16      	ldr	r2, [pc, #88]	; (800cfa0 <GPS_Process+0x308>)
 800cf48:	fba2 2303 	umull	r2, r3, r2, r3
 800cf4c:	095b      	lsrs	r3, r3, #5
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	4b12      	ldr	r3, [pc, #72]	; (800cf9c <GPS_Process+0x304>)
 800cf52:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
		GPS.second = timegps % 100;
 800cf56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf58:	4b11      	ldr	r3, [pc, #68]	; (800cfa0 <GPS_Process+0x308>)
 800cf5a:	fba3 1302 	umull	r1, r3, r3, r2
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	2164      	movs	r1, #100	; 0x64
 800cf62:	fb01 f303 	mul.w	r3, r1, r3
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	4b0c      	ldr	r3, [pc, #48]	; (800cf9c <GPS_Process+0x304>)
 800cf6c:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
		GPS.numsat = atoi(numsat);
 800cf70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf72:	f006 f903 	bl	801317c <atoi>
 800cf76:	4603      	mov	r3, r0
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	e015      	b.n	800cfa8 <GPS_Process+0x310>
 800cf7c:	20033473 	.word	0x20033473
 800cf80:	0801abe4 	.word	0x0801abe4
 800cf84:	0801abec 	.word	0x0801abec
 800cf88:	0801abf4 	.word	0x0801abf4
 800cf8c:	200338a1 	.word	0x200338a1
 800cf90:	200338a8 	.word	0x200338a8
 800cf94:	0801abfc 	.word	0x0801abfc
 800cf98:	d1b71759 	.word	0xd1b71759
 800cf9c:	20032a54 	.word	0x20032a54
 800cfa0:	51eb851f 	.word	0x51eb851f
 800cfa4:	0801ac00 	.word	0x0801ac00
 800cfa8:	4bbb      	ldr	r3, [pc, #748]	; (800d298 <GPS_Process+0x600>)
 800cfaa:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
		GPS.hdop = (uint8_t) (atof(hdop) * 100.0);
 800cfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfb0:	f006 f8e1 	bl	8013176 <atof>
 800cfb4:	ec51 0b10 	vmov	r0, r1, d0
 800cfb8:	f04f 0200 	mov.w	r2, #0
 800cfbc:	4bb7      	ldr	r3, [pc, #732]	; (800d29c <GPS_Process+0x604>)
 800cfbe:	f7f3 fb3b 	bl	8000638 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	f7f3 fe0d 	bl	8000be8 <__aeabi_d2uiz>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	4bb1      	ldr	r3, [pc, #708]	; (800d298 <GPS_Process+0x600>)
 800cfd4:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
		GPS.altitude = (uint16_t) (atof(altitude) * 10.0);
 800cfd8:	6a38      	ldr	r0, [r7, #32]
 800cfda:	f006 f8cc 	bl	8013176 <atof>
 800cfde:	ec51 0b10 	vmov	r0, r1, d0
 800cfe2:	f04f 0200 	mov.w	r2, #0
 800cfe6:	4bae      	ldr	r3, [pc, #696]	; (800d2a0 <GPS_Process+0x608>)
 800cfe8:	f7f3 fb26 	bl	8000638 <__aeabi_dmul>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4610      	mov	r0, r2
 800cff2:	4619      	mov	r1, r3
 800cff4:	f7f3 fdf8 	bl	8000be8 <__aeabi_d2uiz>
 800cff8:	4603      	mov	r3, r0
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	4ba6      	ldr	r3, [pc, #664]	; (800d298 <GPS_Process+0x600>)
 800cffe:	f8a3 2432 	strh.w	r2, [r3, #1074]	; 0x432

		//validation for gps message
		if (atoi(validstatus) == 1 || atoi(validstatus) == 2) {
 800d002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d004:	f006 f8ba 	bl	801317c <atoi>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d006      	beq.n	800d01c <GPS_Process+0x384>
 800d00e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d010:	f006 f8b4 	bl	801317c <atoi>
 800d014:	4603      	mov	r3, r0
 800d016:	2b02      	cmp	r3, #2
 800d018:	f040 81a1 	bne.w	800d35e <GPS_Process+0x6c6>
			if (strcmp(latsim, "S") == 0)
 800d01c:	49a1      	ldr	r1, [pc, #644]	; (800d2a4 <GPS_Process+0x60c>)
 800d01e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d020:	f7f3 f8e6 	bl	80001f0 <strcmp>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d110      	bne.n	800d04c <GPS_Process+0x3b4>
				flatitude = -1 * atof(glatitude);
 800d02a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d02c:	f006 f8a3 	bl	8013176 <atof>
 800d030:	ec53 2b10 	vmov	r2, r3, d0
 800d034:	4610      	mov	r0, r2
 800d036:	4619      	mov	r1, r3
 800d038:	f7f3 fdf6 	bl	8000c28 <__aeabi_d2f>
 800d03c:	4603      	mov	r3, r0
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef1 7a67 	vneg.f32	s15, s15
 800d046:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800d04a:	e00a      	b.n	800d062 <GPS_Process+0x3ca>
			else
				flatitude = atof(glatitude);
 800d04c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d04e:	f006 f892 	bl	8013176 <atof>
 800d052:	ec53 2b10 	vmov	r2, r3, d0
 800d056:	4610      	mov	r0, r2
 800d058:	4619      	mov	r1, r3
 800d05a:	f7f3 fde5 	bl	8000c28 <__aeabi_d2f>
 800d05e:	4603      	mov	r3, r0
 800d060:	657b      	str	r3, [r7, #84]	; 0x54
			if (strcmp(longsim, "W") == 0)
 800d062:	4991      	ldr	r1, [pc, #580]	; (800d2a8 <GPS_Process+0x610>)
 800d064:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d066:	f7f3 f8c3 	bl	80001f0 <strcmp>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d110      	bne.n	800d092 <GPS_Process+0x3fa>
				flongitude = -1 * atof(glongitude);
 800d070:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d072:	f006 f880 	bl	8013176 <atof>
 800d076:	ec53 2b10 	vmov	r2, r3, d0
 800d07a:	4610      	mov	r0, r2
 800d07c:	4619      	mov	r1, r3
 800d07e:	f7f3 fdd3 	bl	8000c28 <__aeabi_d2f>
 800d082:	4603      	mov	r3, r0
 800d084:	ee07 3a90 	vmov	s15, r3
 800d088:	eef1 7a67 	vneg.f32	s15, s15
 800d08c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800d090:	e00a      	b.n	800d0a8 <GPS_Process+0x410>
			else
				flongitude = atof(glongitude);
 800d092:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d094:	f006 f86f 	bl	8013176 <atof>
 800d098:	ec53 2b10 	vmov	r2, r3, d0
 800d09c:	4610      	mov	r0, r2
 800d09e:	4619      	mov	r1, r3
 800d0a0:	f7f3 fdc2 	bl	8000c28 <__aeabi_d2f>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	653b      	str	r3, [r7, #80]	; 0x50
			GPS.latitude = convertDegMinToDecDeg(flatitude);
 800d0a8:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800d0ac:	f7ff fd2c 	bl	800cb08 <convertDegMinToDecDeg>
 800d0b0:	ec53 2b10 	vmov	r2, r3, d0
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	f7f3 fdb6 	bl	8000c28 <__aeabi_d2f>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	4b76      	ldr	r3, [pc, #472]	; (800d298 <GPS_Process+0x600>)
 800d0c0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800d0c4:	601a      	str	r2, [r3, #0]
			GPS.longitude = convertDegMinToDecDeg(flongitude);
 800d0c6:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800d0ca:	f7ff fd1d 	bl	800cb08 <convertDegMinToDecDeg>
 800d0ce:	ec53 2b10 	vmov	r2, r3, d0
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f7f3 fda7 	bl	8000c28 <__aeabi_d2f>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	4b6e      	ldr	r3, [pc, #440]	; (800d298 <GPS_Process+0x600>)
 800d0de:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800d0e2:	601a      	str	r2, [r3, #0]

			//0=tanggal 1=jam 2=menit 3=detik 4=sekali per detik
			uint8_t _Mode = 1;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	77fb      	strb	r3, [r7, #31]
			uint8_t _Date = rtcTEWS2.Date;
 800d0e8:	4b70      	ldr	r3, [pc, #448]	; (800d2ac <GPS_Process+0x614>)
 800d0ea:	789b      	ldrb	r3, [r3, #2]
 800d0ec:	77bb      	strb	r3, [r7, #30]
			uint8_t _Hour = rtcTEWS2.Hour;
 800d0ee:	4b6f      	ldr	r3, [pc, #444]	; (800d2ac <GPS_Process+0x614>)
 800d0f0:	791b      	ldrb	r3, [r3, #4]
 800d0f2:	777b      	strb	r3, [r7, #29]
			uint8_t _Min  = rtcTEWS2.Min;
 800d0f4:	4b6d      	ldr	r3, [pc, #436]	; (800d2ac <GPS_Process+0x614>)
 800d0f6:	795b      	ldrb	r3, [r3, #5]
 800d0f8:	773b      	strb	r3, [r7, #28]
			uint8_t _Sec  = rtcTEWS2.Sec;
 800d0fa:	4b6c      	ldr	r3, [pc, #432]	; (800d2ac <GPS_Process+0x614>)
 800d0fc:	799b      	ldrb	r3, [r3, #6]
 800d0fe:	76fb      	strb	r3, [r7, #27]

			if (operationmode == NORMALOPS) {
 800d100:	4b6b      	ldr	r3, [pc, #428]	; (800d2b0 <GPS_Process+0x618>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	f040 8086 	bne.w	800d216 <GPS_Process+0x57e>
				if (CalculateDistance(latitude,longitude, GPS.latitude,GPS.longitude) > distancedrifting){
 800d10a:	4b6a      	ldr	r3, [pc, #424]	; (800d2b4 <GPS_Process+0x61c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4618      	mov	r0, r3
 800d110:	f7f3 fa3a 	bl	8000588 <__aeabi_f2d>
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	4b67      	ldr	r3, [pc, #412]	; (800d2b8 <GPS_Process+0x620>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7f3 fa33 	bl	8000588 <__aeabi_f2d>
 800d122:	4680      	mov	r8, r0
 800d124:	4689      	mov	r9, r1
 800d126:	4b5c      	ldr	r3, [pc, #368]	; (800d298 <GPS_Process+0x600>)
 800d128:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f3 fa2a 	bl	8000588 <__aeabi_f2d>
 800d134:	4682      	mov	sl, r0
 800d136:	468b      	mov	fp, r1
 800d138:	4b57      	ldr	r3, [pc, #348]	; (800d298 <GPS_Process+0x600>)
 800d13a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4618      	mov	r0, r3
 800d142:	f7f3 fa21 	bl	8000588 <__aeabi_f2d>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	ec43 2b13 	vmov	d3, r2, r3
 800d14e:	ec4b ab12 	vmov	d2, sl, fp
 800d152:	ec49 8b11 	vmov	d1, r8, r9
 800d156:	ec45 4b10 	vmov	d0, r4, r5
 800d15a:	f000 f919 	bl	800d390 <CalculateDistance>
 800d15e:	ec55 4b10 	vmov	r4, r5, d0
 800d162:	4b56      	ldr	r3, [pc, #344]	; (800d2bc <GPS_Process+0x624>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4618      	mov	r0, r3
 800d168:	f7f3 f9ec 	bl	8000544 <__aeabi_ui2d>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4620      	mov	r0, r4
 800d172:	4629      	mov	r1, r5
 800d174:	f7f3 fcf0 	bl	8000b58 <__aeabi_dcmpgt>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d04b      	beq.n	800d216 <GPS_Process+0x57e>
					memset(printGPS, 0, sizeof(printGPS));
 800d17e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d182:	2100      	movs	r1, #0
 800d184:	484e      	ldr	r0, [pc, #312]	; (800d2c0 <GPS_Process+0x628>)
 800d186:	f006 f841 	bl	801320c <memset>
					sprintf(printGPS, "DRIFTING ALERT\r\n");
 800d18a:	494e      	ldr	r1, [pc, #312]	; (800d2c4 <GPS_Process+0x62c>)
 800d18c:	484c      	ldr	r0, [pc, #304]	; (800d2c0 <GPS_Process+0x628>)
 800d18e:	f006 ff7f 	bl	8014090 <siprintf>
					uint16_t xsizedata = strlen(printGPS);
 800d192:	484b      	ldr	r0, [pc, #300]	; (800d2c0 <GPS_Process+0x628>)
 800d194:	f7f3 f836 	bl	8000204 <strlen>
 800d198:	4603      	mov	r3, r0
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	81fb      	strh	r3, [r7, #14]
					osMessageQueuePut(sizedatairidiumQueueHandle,&xsizedata, 0U, 0U);
 800d19e:	4b4a      	ldr	r3, [pc, #296]	; (800d2c8 <GPS_Process+0x630>)
 800d1a0:	6818      	ldr	r0, [r3, #0]
 800d1a2:	f107 010e 	add.w	r1, r7, #14
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f7fb fbf3 	bl	8008994 <osMessageQueuePut>
					osMessageQueuePut(iridiumsendQueueHandle,printGPS,0U,0U);
 800d1ae:	4b47      	ldr	r3, [pc, #284]	; (800d2cc <GPS_Process+0x634>)
 800d1b0:	6818      	ldr	r0, [r3, #0]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4942      	ldr	r1, [pc, #264]	; (800d2c0 <GPS_Process+0x628>)
 800d1b8:	f7fb fbec 	bl	8008994 <osMessageQueuePut>
					usb_universal_printf("%s",printGPS);
 800d1bc:	4940      	ldr	r1, [pc, #256]	; (800d2c0 <GPS_Process+0x628>)
 800d1be:	4844      	ldr	r0, [pc, #272]	; (800d2d0 <GPS_Process+0x638>)
 800d1c0:	f005 fa94 	bl	80126ec <usb_universal_printf>
					operationmode = DRIFTINGOPS;
 800d1c4:	4b3a      	ldr	r3, [pc, #232]	; (800d2b0 <GPS_Process+0x618>)
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	701a      	strb	r2, [r3, #0]
					write_eeprom_byte(&hi2c1, 0x04, &operationmode);
 800d1ca:	4a39      	ldr	r2, [pc, #228]	; (800d2b0 <GPS_Process+0x618>)
 800d1cc:	2104      	movs	r1, #4
 800d1ce:	4841      	ldr	r0, [pc, #260]	; (800d2d4 <GPS_Process+0x63c>)
 800d1d0:	f7ff fa10 	bl	800c5f4 <write_eeprom_byte>
					// set alarm per 1 jam
					_Hour = 1;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	777b      	strb	r3, [r7, #29]
					alarm_now = _Hour + 1;
 800d1d8:	7f7b      	ldrb	r3, [r7, #29]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	4b3e      	ldr	r3, [pc, #248]	; (800d2d8 <GPS_Process+0x640>)
 800d1e0:	701a      	strb	r2, [r3, #0]
					if(alarm_now > 23){
 800d1e2:	4b3d      	ldr	r3, [pc, #244]	; (800d2d8 <GPS_Process+0x640>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2b17      	cmp	r3, #23
 800d1e8:	d905      	bls.n	800d1f6 <GPS_Process+0x55e>
						alarm_now = alarm_now - 24;
 800d1ea:	4b3b      	ldr	r3, [pc, #236]	; (800d2d8 <GPS_Process+0x640>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	3b18      	subs	r3, #24
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	4b39      	ldr	r3, [pc, #228]	; (800d2d8 <GPS_Process+0x640>)
 800d1f4:	701a      	strb	r2, [r3, #0]
					}
					usb_universal_printf("<GPS CALCULATE> ON DRIFTING, Alarm Set : %.2d\r\n",alarm_now);
 800d1f6:	4b38      	ldr	r3, [pc, #224]	; (800d2d8 <GPS_Process+0x640>)
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4837      	ldr	r0, [pc, #220]	; (800d2dc <GPS_Process+0x644>)
 800d1fe:	f005 fa75 	bl	80126ec <usb_universal_printf>
					DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 800d202:	4b35      	ldr	r3, [pc, #212]	; (800d2d8 <GPS_Process+0x640>)
 800d204:	781a      	ldrb	r2, [r3, #0]
 800d206:	7f3c      	ldrb	r4, [r7, #28]
 800d208:	7fb9      	ldrb	r1, [r7, #30]
 800d20a:	7ff8      	ldrb	r0, [r7, #31]
 800d20c:	7efb      	ldrb	r3, [r7, #27]
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	4623      	mov	r3, r4
 800d212:	f001 fe6d 	bl	800eef0 <DS3231_SetAlarm1_B>
				}
			}

			if (operationmode == DRIFTINGOPS) {
 800d216:	4b26      	ldr	r3, [pc, #152]	; (800d2b0 <GPS_Process+0x618>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	f040 809f 	bne.w	800d35e <GPS_Process+0x6c6>
				if (CalculateDistance(latitude, longitude, GPS.latitude,GPS.longitude) < distancedrifting){
 800d220:	4b24      	ldr	r3, [pc, #144]	; (800d2b4 <GPS_Process+0x61c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4618      	mov	r0, r3
 800d226:	f7f3 f9af 	bl	8000588 <__aeabi_f2d>
 800d22a:	4604      	mov	r4, r0
 800d22c:	460d      	mov	r5, r1
 800d22e:	4b22      	ldr	r3, [pc, #136]	; (800d2b8 <GPS_Process+0x620>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4618      	mov	r0, r3
 800d234:	f7f3 f9a8 	bl	8000588 <__aeabi_f2d>
 800d238:	4680      	mov	r8, r0
 800d23a:	4689      	mov	r9, r1
 800d23c:	4b16      	ldr	r3, [pc, #88]	; (800d298 <GPS_Process+0x600>)
 800d23e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4618      	mov	r0, r3
 800d246:	f7f3 f99f 	bl	8000588 <__aeabi_f2d>
 800d24a:	4682      	mov	sl, r0
 800d24c:	468b      	mov	fp, r1
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <GPS_Process+0x600>)
 800d250:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4618      	mov	r0, r3
 800d258:	f7f3 f996 	bl	8000588 <__aeabi_f2d>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	ec43 2b13 	vmov	d3, r2, r3
 800d264:	ec4b ab12 	vmov	d2, sl, fp
 800d268:	ec49 8b11 	vmov	d1, r8, r9
 800d26c:	ec45 4b10 	vmov	d0, r4, r5
 800d270:	f000 f88e 	bl	800d390 <CalculateDistance>
 800d274:	ec55 4b10 	vmov	r4, r5, d0
 800d278:	4b10      	ldr	r3, [pc, #64]	; (800d2bc <GPS_Process+0x624>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7f3 f961 	bl	8000544 <__aeabi_ui2d>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	4620      	mov	r0, r4
 800d288:	4629      	mov	r1, r5
 800d28a:	f7f3 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d125      	bne.n	800d2e0 <GPS_Process+0x648>
					DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
				}
			}
		}
	}
}
 800d294:	e063      	b.n	800d35e <GPS_Process+0x6c6>
 800d296:	bf00      	nop
 800d298:	20032a54 	.word	0x20032a54
 800d29c:	40590000 	.word	0x40590000
 800d2a0:	40240000 	.word	0x40240000
 800d2a4:	0801ac08 	.word	0x0801ac08
 800d2a8:	0801ac0c 	.word	0x0801ac0c
 800d2ac:	20033478 	.word	0x20033478
 800d2b0:	20033534 	.word	0x20033534
 800d2b4:	20033764 	.word	0x20033764
 800d2b8:	20033744 	.word	0x20033744
 800d2bc:	200337fc 	.word	0x200337fc
 800d2c0:	2000000c 	.word	0x2000000c
 800d2c4:	0801ac10 	.word	0x0801ac10
 800d2c8:	20033734 	.word	0x20033734
 800d2cc:	2003355c 	.word	0x2003355c
 800d2d0:	0801ac24 	.word	0x0801ac24
 800d2d4:	20033484 	.word	0x20033484
 800d2d8:	200338a0 	.word	0x200338a0
 800d2dc:	0801ac28 	.word	0x0801ac28
					memset(printGPS, 0, sizeof(printGPS));
 800d2e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	4820      	ldr	r0, [pc, #128]	; (800d368 <GPS_Process+0x6d0>)
 800d2e8:	f005 ff90 	bl	801320c <memset>
					sprintf(printGPS, "DRIFT to NORMAL\r\n");
 800d2ec:	491f      	ldr	r1, [pc, #124]	; (800d36c <GPS_Process+0x6d4>)
 800d2ee:	481e      	ldr	r0, [pc, #120]	; (800d368 <GPS_Process+0x6d0>)
 800d2f0:	f006 fece 	bl	8014090 <siprintf>
					uint16_t xsizedata = strlen(printGPS);
 800d2f4:	481c      	ldr	r0, [pc, #112]	; (800d368 <GPS_Process+0x6d0>)
 800d2f6:	f7f2 ff85 	bl	8000204 <strlen>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	81bb      	strh	r3, [r7, #12]
					osMessageQueuePut(sizedatairidiumQueueHandle,&xsizedata, 0U, 0U);
 800d300:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <GPS_Process+0x6d8>)
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	f107 010c 	add.w	r1, r7, #12
 800d308:	2300      	movs	r3, #0
 800d30a:	2200      	movs	r2, #0
 800d30c:	f7fb fb42 	bl	8008994 <osMessageQueuePut>
					osMessageQueuePut(iridiumsendQueueHandle,printGPS,0U,0U);
 800d310:	4b18      	ldr	r3, [pc, #96]	; (800d374 <GPS_Process+0x6dc>)
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	2300      	movs	r3, #0
 800d316:	2200      	movs	r2, #0
 800d318:	4913      	ldr	r1, [pc, #76]	; (800d368 <GPS_Process+0x6d0>)
 800d31a:	f7fb fb3b 	bl	8008994 <osMessageQueuePut>
					usb_universal_printf("%s",printGPS);
 800d31e:	4912      	ldr	r1, [pc, #72]	; (800d368 <GPS_Process+0x6d0>)
 800d320:	4815      	ldr	r0, [pc, #84]	; (800d378 <GPS_Process+0x6e0>)
 800d322:	f005 f9e3 	bl	80126ec <usb_universal_printf>
					operationmode = NORMALOPS;
 800d326:	4b15      	ldr	r3, [pc, #84]	; (800d37c <GPS_Process+0x6e4>)
 800d328:	2200      	movs	r2, #0
 800d32a:	701a      	strb	r2, [r3, #0]
					write_eeprom_byte(&hi2c1, 0x04, &operationmode);
 800d32c:	4a13      	ldr	r2, [pc, #76]	; (800d37c <GPS_Process+0x6e4>)
 800d32e:	2104      	movs	r1, #4
 800d330:	4813      	ldr	r0, [pc, #76]	; (800d380 <GPS_Process+0x6e8>)
 800d332:	f7ff f95f 	bl	800c5f4 <write_eeprom_byte>
					_Hour = 21;
 800d336:	2315      	movs	r3, #21
 800d338:	777b      	strb	r3, [r7, #29]
					_Min  = 17;
 800d33a:	2311      	movs	r3, #17
 800d33c:	773b      	strb	r3, [r7, #28]
					usb_universal_printf("<GPS CALCULATE> BACK TO NORMAL, Alarm Set : %.2d:%.2d:%.2d UTC\r\n",_Hour,_Min,_Sec);
 800d33e:	7f79      	ldrb	r1, [r7, #29]
 800d340:	7f3a      	ldrb	r2, [r7, #28]
 800d342:	7efb      	ldrb	r3, [r7, #27]
 800d344:	480f      	ldr	r0, [pc, #60]	; (800d384 <GPS_Process+0x6ec>)
 800d346:	f005 f9d1 	bl	80126ec <usb_universal_printf>
					DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 800d34a:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <GPS_Process+0x6f0>)
 800d34c:	781a      	ldrb	r2, [r3, #0]
 800d34e:	7f3c      	ldrb	r4, [r7, #28]
 800d350:	7fb9      	ldrb	r1, [r7, #30]
 800d352:	7ff8      	ldrb	r0, [r7, #31]
 800d354:	7efb      	ldrb	r3, [r7, #27]
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	4623      	mov	r3, r4
 800d35a:	f001 fdc9 	bl	800eef0 <DS3231_SetAlarm1_B>
}
 800d35e:	bf00      	nop
 800d360:	3758      	adds	r7, #88	; 0x58
 800d362:	46bd      	mov	sp, r7
 800d364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d368:	2000000c 	.word	0x2000000c
 800d36c:	0801ac58 	.word	0x0801ac58
 800d370:	20033734 	.word	0x20033734
 800d374:	2003355c 	.word	0x2003355c
 800d378:	0801ac24 	.word	0x0801ac24
 800d37c:	20033534 	.word	0x20033534
 800d380:	20033484 	.word	0x20033484
 800d384:	0801ac6c 	.word	0x0801ac6c
 800d388:	200338a0 	.word	0x200338a0
 800d38c:	00000000 	.word	0x00000000

0800d390 <CalculateDistance>:

double CalculateDistance(double nLat1, double nLon1, double nLat2, double nLon2) {
 800d390:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d394:	ed2d 8b02 	vpush	{d8}
 800d398:	b094      	sub	sp, #80	; 0x50
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	ed87 0b06 	vstr	d0, [r7, #24]
 800d3a0:	ed87 1b04 	vstr	d1, [r7, #16]
 800d3a4:	ed87 2b02 	vstr	d2, [r7, #8]
 800d3a8:	ed87 3b00 	vstr	d3, [r7]
	int nRadius = 6371; // Earth's radius in Kilometers
 800d3ac:	f641 03e3 	movw	r3, #6371	; 0x18e3
 800d3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	// Get the difference between our two points
	// then convert the difference into radians
	double nDLat = (nLat2 - nLat1) * (M_PI / 180);
 800d3b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d3ba:	f7f2 ff85 	bl	80002c8 <__aeabi_dsub>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	a36c      	add	r3, pc, #432	; (adr r3, 800d578 <CalculateDistance+0x1e8>)
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	f7f3 f934 	bl	8000638 <__aeabi_dmul>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double nDLon = (nLon2 - nLon1) * (M_PI / 180);
 800d3d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d3dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3e0:	f7f2 ff72 	bl	80002c8 <__aeabi_dsub>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	a362      	add	r3, pc, #392	; (adr r3, 800d578 <CalculateDistance+0x1e8>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f7f3 f921 	bl	8000638 <__aeabi_dmul>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double nA = pow(sin(nDLat / 2), 2)
 800d3fe:	f04f 0200 	mov.w	r2, #0
 800d402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d406:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d40a:	f7f3 fa3f 	bl	800088c <__aeabi_ddiv>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	ec43 2b17 	vmov	d7, r2, r3
 800d416:	eeb0 0a47 	vmov.f32	s0, s14
 800d41a:	eef0 0a67 	vmov.f32	s1, s15
 800d41e:	f00a fbdf 	bl	8017be0 <sin>
 800d422:	eeb0 7a40 	vmov.f32	s14, s0
 800d426:	eef0 7a60 	vmov.f32	s15, s1
 800d42a:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 800d568 <CalculateDistance+0x1d8>
 800d42e:	eeb0 0a47 	vmov.f32	s0, s14
 800d432:	eef0 0a67 	vmov.f32	s1, s15
 800d436:	f00a fc9f 	bl	8017d78 <pow>
 800d43a:	ec59 8b10 	vmov	r8, r9, d0
			+ cos(nLat1) * cos(nLat2) * pow(sin(nDLon / 2), 2);
 800d43e:	ed97 0b06 	vldr	d0, [r7, #24]
 800d442:	f00a fb7d 	bl	8017b40 <cos>
 800d446:	ec55 4b10 	vmov	r4, r5, d0
 800d44a:	ed97 0b02 	vldr	d0, [r7, #8]
 800d44e:	f00a fb77 	bl	8017b40 <cos>
 800d452:	ec53 2b10 	vmov	r2, r3, d0
 800d456:	4620      	mov	r0, r4
 800d458:	4629      	mov	r1, r5
 800d45a:	f7f3 f8ed 	bl	8000638 <__aeabi_dmul>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	4614      	mov	r4, r2
 800d464:	461d      	mov	r5, r3
 800d466:	f04f 0200 	mov.w	r2, #0
 800d46a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d46e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d472:	f7f3 fa0b 	bl	800088c <__aeabi_ddiv>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	ec43 2b17 	vmov	d7, r2, r3
 800d47e:	eeb0 0a47 	vmov.f32	s0, s14
 800d482:	eef0 0a67 	vmov.f32	s1, s15
 800d486:	f00a fbab 	bl	8017be0 <sin>
 800d48a:	eeb0 7a40 	vmov.f32	s14, s0
 800d48e:	eef0 7a60 	vmov.f32	s15, s1
 800d492:	ed9f 1b35 	vldr	d1, [pc, #212]	; 800d568 <CalculateDistance+0x1d8>
 800d496:	eeb0 0a47 	vmov.f32	s0, s14
 800d49a:	eef0 0a67 	vmov.f32	s1, s15
 800d49e:	f00a fc6b 	bl	8017d78 <pow>
 800d4a2:	ec53 2b10 	vmov	r2, r3, d0
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	f7f3 f8c5 	bl	8000638 <__aeabi_dmul>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
	double nA = pow(sin(nDLat / 2), 2)
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	f7f2 ff09 	bl	80002cc <__adddf3>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double nC = 2 * atan2(sqrt(nA), sqrt(1 - nA));
 800d4c2:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800d4c6:	f00a fd05 	bl	8017ed4 <sqrt>
 800d4ca:	eeb0 8a40 	vmov.f32	s16, s0
 800d4ce:	eef0 8a60 	vmov.f32	s17, s1
 800d4d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d4d6:	f04f 0000 	mov.w	r0, #0
 800d4da:	4925      	ldr	r1, [pc, #148]	; (800d570 <CalculateDistance+0x1e0>)
 800d4dc:	f7f2 fef4 	bl	80002c8 <__aeabi_dsub>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	ec43 2b17 	vmov	d7, r2, r3
 800d4e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d4ec:	eef0 0a67 	vmov.f32	s1, s15
 800d4f0:	f00a fcf0 	bl	8017ed4 <sqrt>
 800d4f4:	eeb0 7a40 	vmov.f32	s14, s0
 800d4f8:	eef0 7a60 	vmov.f32	s15, s1
 800d4fc:	eeb0 1a47 	vmov.f32	s2, s14
 800d500:	eef0 1a67 	vmov.f32	s3, s15
 800d504:	eeb0 0a48 	vmov.f32	s0, s16
 800d508:	eef0 0a68 	vmov.f32	s1, s17
 800d50c:	f00a fbf6 	bl	8017cfc <atan2>
 800d510:	ec51 0b10 	vmov	r0, r1, d0
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	f7f2 fed8 	bl	80002cc <__adddf3>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double nD = nRadius * nC;
 800d524:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d526:	f7f3 f81d 	bl	8000564 <__aeabi_i2d>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d532:	f7f3 f881 	bl	8000638 <__aeabi_dmul>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return nD * 1000.0; // Return our calculated distance
 800d53e:	f04f 0200 	mov.w	r2, #0
 800d542:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <CalculateDistance+0x1e4>)
 800d544:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d548:	f7f3 f876 	bl	8000638 <__aeabi_dmul>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	ec43 2b17 	vmov	d7, r2, r3
}
 800d554:	eeb0 0a47 	vmov.f32	s0, s14
 800d558:	eef0 0a67 	vmov.f32	s1, s15
 800d55c:	3750      	adds	r7, #80	; 0x50
 800d55e:	46bd      	mov	sp, r7
 800d560:	ecbd 8b02 	vpop	{d8}
 800d564:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d568:	00000000 	.word	0x00000000
 800d56c:	40000000 	.word	0x40000000
 800d570:	3ff00000 	.word	0x3ff00000
 800d574:	408f4000 	.word	0x408f4000
 800d578:	a2529d39 	.word	0xa2529d39
 800d57c:	3f91df46 	.word	0x3f91df46

0800d580 <distance>:
}

double deg2rad(double);
double rad2deg(double);

double distance(double lat1, double lon1, double lat2, double lon2, char unit) {
 800d580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d584:	b08e      	sub	sp, #56	; 0x38
 800d586:	af00      	add	r7, sp, #0
 800d588:	ed87 0b08 	vstr	d0, [r7, #32]
 800d58c:	ed87 1b06 	vstr	d1, [r7, #24]
 800d590:	ed87 2b04 	vstr	d2, [r7, #16]
 800d594:	ed87 3b02 	vstr	d3, [r7, #8]
 800d598:	4603      	mov	r3, r0
 800d59a:	71fb      	strb	r3, [r7, #7]
  double theta, dist;
  if ((lat1 == lat2) && (lon1 == lon2)) {
 800d59c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d5a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d5a4:	f7f3 fab0 	bl	8000b08 <__aeabi_dcmpeq>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00d      	beq.n	800d5ca <distance+0x4a>
 800d5ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d5b6:	f7f3 faa7 	bl	8000b08 <__aeabi_dcmpeq>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d004      	beq.n	800d5ca <distance+0x4a>
    return 0;
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	f04f 0300 	mov.w	r3, #0
 800d5c8:	e0cf      	b.n	800d76a <distance+0x1ea>
  }else{
    theta = lon1 - lon2;
 800d5ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d5d2:	f7f2 fe79 	bl	80002c8 <__aeabi_dsub>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    dist = sin(deg2rad(lat1)) * sin(deg2rad(lat2)) + cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
 800d5de:	ed97 0b08 	vldr	d0, [r7, #32]
 800d5e2:	f000 f8dd 	bl	800d7a0 <deg2rad>
 800d5e6:	eeb0 7a40 	vmov.f32	s14, s0
 800d5ea:	eef0 7a60 	vmov.f32	s15, s1
 800d5ee:	eeb0 0a47 	vmov.f32	s0, s14
 800d5f2:	eef0 0a67 	vmov.f32	s1, s15
 800d5f6:	f00a faf3 	bl	8017be0 <sin>
 800d5fa:	ec55 4b10 	vmov	r4, r5, d0
 800d5fe:	ed97 0b04 	vldr	d0, [r7, #16]
 800d602:	f000 f8cd 	bl	800d7a0 <deg2rad>
 800d606:	eeb0 7a40 	vmov.f32	s14, s0
 800d60a:	eef0 7a60 	vmov.f32	s15, s1
 800d60e:	eeb0 0a47 	vmov.f32	s0, s14
 800d612:	eef0 0a67 	vmov.f32	s1, s15
 800d616:	f00a fae3 	bl	8017be0 <sin>
 800d61a:	ec53 2b10 	vmov	r2, r3, d0
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f3 f809 	bl	8000638 <__aeabi_dmul>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4614      	mov	r4, r2
 800d62c:	461d      	mov	r5, r3
 800d62e:	ed97 0b08 	vldr	d0, [r7, #32]
 800d632:	f000 f8b5 	bl	800d7a0 <deg2rad>
 800d636:	eeb0 7a40 	vmov.f32	s14, s0
 800d63a:	eef0 7a60 	vmov.f32	s15, s1
 800d63e:	eeb0 0a47 	vmov.f32	s0, s14
 800d642:	eef0 0a67 	vmov.f32	s1, s15
 800d646:	f00a fa7b 	bl	8017b40 <cos>
 800d64a:	ec59 8b10 	vmov	r8, r9, d0
 800d64e:	ed97 0b04 	vldr	d0, [r7, #16]
 800d652:	f000 f8a5 	bl	800d7a0 <deg2rad>
 800d656:	eeb0 7a40 	vmov.f32	s14, s0
 800d65a:	eef0 7a60 	vmov.f32	s15, s1
 800d65e:	eeb0 0a47 	vmov.f32	s0, s14
 800d662:	eef0 0a67 	vmov.f32	s1, s15
 800d666:	f00a fa6b 	bl	8017b40 <cos>
 800d66a:	ec53 2b10 	vmov	r2, r3, d0
 800d66e:	4640      	mov	r0, r8
 800d670:	4649      	mov	r1, r9
 800d672:	f7f2 ffe1 	bl	8000638 <__aeabi_dmul>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4690      	mov	r8, r2
 800d67c:	4699      	mov	r9, r3
 800d67e:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800d682:	f000 f88d 	bl	800d7a0 <deg2rad>
 800d686:	eeb0 7a40 	vmov.f32	s14, s0
 800d68a:	eef0 7a60 	vmov.f32	s15, s1
 800d68e:	eeb0 0a47 	vmov.f32	s0, s14
 800d692:	eef0 0a67 	vmov.f32	s1, s15
 800d696:	f00a fa53 	bl	8017b40 <cos>
 800d69a:	ec53 2b10 	vmov	r2, r3, d0
 800d69e:	4640      	mov	r0, r8
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	f7f2 ffc9 	bl	8000638 <__aeabi_dmul>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7f2 fe0d 	bl	80002cc <__adddf3>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    dist = acos(dist);
 800d6ba:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800d6be:	f00a fae3 	bl	8017c88 <acos>
 800d6c2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    dist = rad2deg(dist);
 800d6c6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800d6ca:	f000 f891 	bl	800d7f0 <rad2deg>
 800d6ce:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    dist = dist * 60 * 1.1515;
 800d6d2:	f04f 0200 	mov.w	r2, #0
 800d6d6:	4b30      	ldr	r3, [pc, #192]	; (800d798 <distance+0x218>)
 800d6d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d6dc:	f7f2 ffac 	bl	8000638 <__aeabi_dmul>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	a325      	add	r3, pc, #148	; (adr r3, 800d780 <distance+0x200>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	f7f2 ffa3 	bl	8000638 <__aeabi_dmul>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    switch(unit) {
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	2b4e      	cmp	r3, #78	; 0x4e
 800d6fe:	d012      	beq.n	800d726 <distance+0x1a6>
 800d700:	2b4e      	cmp	r3, #78	; 0x4e
 800d702:	dc1c      	bgt.n	800d73e <distance+0x1be>
 800d704:	2b4b      	cmp	r3, #75	; 0x4b
 800d706:	d002      	beq.n	800d70e <distance+0x18e>
 800d708:	2b4d      	cmp	r3, #77	; 0x4d
 800d70a:	d118      	bne.n	800d73e <distance+0x1be>
      case 'M':
        break;
 800d70c:	e02b      	b.n	800d766 <distance+0x1e6>
      case 'K':
        dist = dist * 1.609344;
 800d70e:	a31e      	add	r3, pc, #120	; (adr r3, 800d788 <distance+0x208>)
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d718:	f7f2 ff8e 	bl	8000638 <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        break;
 800d724:	e01f      	b.n	800d766 <distance+0x1e6>
      case 'N':
        dist = dist * 0.8684;
 800d726:	a31a      	add	r3, pc, #104	; (adr r3, 800d790 <distance+0x210>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d730:	f7f2 ff82 	bl	8000638 <__aeabi_dmul>
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        break;
 800d73c:	e013      	b.n	800d766 <distance+0x1e6>
      default:
    	dist = (dist * 1.609344)*1000;
 800d73e:	a312      	add	r3, pc, #72	; (adr r3, 800d788 <distance+0x208>)
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d748:	f7f2 ff76 	bl	8000638 <__aeabi_dmul>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4610      	mov	r0, r2
 800d752:	4619      	mov	r1, r3
 800d754:	f04f 0200 	mov.w	r2, #0
 800d758:	4b10      	ldr	r3, [pc, #64]	; (800d79c <distance+0x21c>)
 800d75a:	f7f2 ff6d 	bl	8000638 <__aeabi_dmul>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }
    return (dist);
 800d766:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d76a:	ec43 2b17 	vmov	d7, r2, r3
  }
}
 800d76e:	eeb0 0a47 	vmov.f32	s0, s14
 800d772:	eef0 0a67 	vmov.f32	s1, s15
 800d776:	3738      	adds	r7, #56	; 0x38
 800d778:	46bd      	mov	sp, r7
 800d77a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d77e:	bf00      	nop
 800d780:	43958106 	.word	0x43958106
 800d784:	3ff26c8b 	.word	0x3ff26c8b
 800d788:	7e8038a0 	.word	0x7e8038a0
 800d78c:	3ff9bfdf 	.word	0x3ff9bfdf
 800d790:	cbfb15b5 	.word	0xcbfb15b5
 800d794:	3febc9ee 	.word	0x3febc9ee
 800d798:	404e0000 	.word	0x404e0000
 800d79c:	408f4000 	.word	0x408f4000

0800d7a0 <deg2rad>:

double deg2rad(double deg) {
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	ed87 0b00 	vstr	d0, [r7]
  return (deg * M_PI / 180);
 800d7aa:	a30e      	add	r3, pc, #56	; (adr r3, 800d7e4 <deg2rad+0x44>)
 800d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7b4:	f7f2 ff40 	bl	8000638 <__aeabi_dmul>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4619      	mov	r1, r3
 800d7c0:	f04f 0200 	mov.w	r2, #0
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <deg2rad+0x40>)
 800d7c6:	f7f3 f861 	bl	800088c <__aeabi_ddiv>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	ec43 2b17 	vmov	d7, r2, r3
}
 800d7d2:	eeb0 0a47 	vmov.f32	s0, s14
 800d7d6:	eef0 0a67 	vmov.f32	s1, s15
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	40668000 	.word	0x40668000
 800d7e4:	54442d18 	.word	0x54442d18
 800d7e8:	400921fb 	.word	0x400921fb
 800d7ec:	00000000 	.word	0x00000000

0800d7f0 <rad2deg>:

double rad2deg(double rad) {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	ed87 0b00 	vstr	d0, [r7]
  return (rad * 180 / M_PI);
 800d7fa:	f04f 0200 	mov.w	r2, #0
 800d7fe:	4b0e      	ldr	r3, [pc, #56]	; (800d838 <rad2deg+0x48>)
 800d800:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d804:	f7f2 ff18 	bl	8000638 <__aeabi_dmul>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	4610      	mov	r0, r2
 800d80e:	4619      	mov	r1, r3
 800d810:	a307      	add	r3, pc, #28	; (adr r3, 800d830 <rad2deg+0x40>)
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	f7f3 f839 	bl	800088c <__aeabi_ddiv>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	ec43 2b17 	vmov	d7, r2, r3
}
 800d822:	eeb0 0a47 	vmov.f32	s0, s14
 800d826:	eef0 0a67 	vmov.f32	s1, s15
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	54442d18 	.word	0x54442d18
 800d834:	400921fb 	.word	0x400921fb
 800d838:	40668000 	.word	0x40668000

0800d83c <__NVIC_SystemReset>:
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d840:	f3bf 8f4f 	dsb	sy
}
 800d844:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d846:	4b06      	ldr	r3, [pc, #24]	; (800d860 <__NVIC_SystemReset+0x24>)
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d84e:	4904      	ldr	r1, [pc, #16]	; (800d860 <__NVIC_SystemReset+0x24>)
 800d850:	4b04      	ldr	r3, [pc, #16]	; (800d864 <__NVIC_SystemReset+0x28>)
 800d852:	4313      	orrs	r3, r2
 800d854:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d856:	f3bf 8f4f 	dsb	sy
}
 800d85a:	bf00      	nop
    __NOP();
 800d85c:	bf00      	nop
 800d85e:	e7fd      	b.n	800d85c <__NVIC_SystemReset+0x20>
 800d860:	e000ed00 	.word	0xe000ed00
 800d864:	05fa0004 	.word	0x05fa0004

0800d868 <IRIDIUM_Init>:
char replyiridium[255] = "";
uint16_t sizedata;
extern uint8_t signaliridium;
char savedsdcardiridium[255] = "";

void IRIDIUM_Init(void) {
 800d868:	b580      	push	{r7, lr}
 800d86a:	af00      	add	r7, sp, #0
	IRIDIUM.status = Idle;
 800d86c:	4b0e      	ldr	r3, [pc, #56]	; (800d8a8 <IRIDIUM_Init+0x40>)
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
	//usb_universal_printf("idle karena inisialisasi..\r\n");
	IRIDIUM.statusreceive = IDLERECEIVE;
 800d874:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <IRIDIUM_Init+0x40>)
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
	IRIDIUM.rxIndex = 0;
 800d87c:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <IRIDIUM_Init+0x40>)
 800d87e:	2200      	movs	r2, #0
 800d880:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	signaliridium = 0;
 800d884:	4b09      	ldr	r3, [pc, #36]	; (800d8ac <IRIDIUM_Init+0x44>)
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
	statusSendGPS = 0;
 800d88a:	4b09      	ldr	r3, [pc, #36]	; (800d8b0 <IRIDIUM_Init+0x48>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET); //activation IRIDIUM Transceiver
 800d890:	2201      	movs	r2, #1
 800d892:	2102      	movs	r1, #2
 800d894:	4807      	ldr	r0, [pc, #28]	; (800d8b4 <IRIDIUM_Init+0x4c>)
 800d896:	f7f4 fb7b 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&_IRIDIUM_USART, &IRIDIUM.rxTmp, 1);
 800d89a:	2201      	movs	r2, #1
 800d89c:	4906      	ldr	r1, [pc, #24]	; (800d8b8 <IRIDIUM_Init+0x50>)
 800d89e:	4807      	ldr	r0, [pc, #28]	; (800d8bc <IRIDIUM_Init+0x54>)
 800d8a0:	f7f9 fbb4 	bl	800700c <HAL_UART_Receive_DMA>
}
 800d8a4:	bf00      	nop
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	20032e8c 	.word	0x20032e8c
 800d8ac:	20033325 	.word	0x20033325
 800d8b0:	2003374d 	.word	0x2003374d
 800d8b4:	48001000 	.word	0x48001000
 800d8b8:	2003308e 	.word	0x2003308e
 800d8bc:	2003365c 	.word	0x2003365c

0800d8c0 <IRIDIUM_Callback>:

void IRIDIUM_Callback(void) {
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
	__HAL_UART_FLUSH_DRREGISTER(&_IRIDIUM_USART);
 800d8c4:	4b2a      	ldr	r3, [pc, #168]	; (800d970 <IRIDIUM_Callback+0xb0>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	8b1b      	ldrh	r3, [r3, #24]
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	4b28      	ldr	r3, [pc, #160]	; (800d970 <IRIDIUM_Callback+0xb0>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0208 	orr.w	r2, r2, #8
 800d8d4:	b292      	uxth	r2, r2
 800d8d6:	831a      	strh	r2, [r3, #24]
 800d8d8:	4b25      	ldr	r3, [pc, #148]	; (800d970 <IRIDIUM_Callback+0xb0>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	8b1b      	ldrh	r3, [r3, #24]
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	4b23      	ldr	r3, [pc, #140]	; (800d970 <IRIDIUM_Callback+0xb0>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f042 0210 	orr.w	r2, r2, #16
 800d8e8:	b292      	uxth	r2, r2
 800d8ea:	831a      	strh	r2, [r3, #24]

	if (IRIDIUM.rxIndex < sizeof(IRIDIUM.rxBuffer) - 2) {
 800d8ec:	4b21      	ldr	r3, [pc, #132]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d8ee:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800d8f2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800d8f6:	d210      	bcs.n	800d91a <IRIDIUM_Callback+0x5a>
		IRIDIUM.rxBuffer[IRIDIUM.rxIndex] = IRIDIUM.rxTmp;
 800d8f8:	4b1e      	ldr	r3, [pc, #120]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d8fa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800d8fe:	461a      	mov	r2, r3
 800d900:	4b1c      	ldr	r3, [pc, #112]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d902:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 800d906:	4b1b      	ldr	r3, [pc, #108]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d908:	5499      	strb	r1, [r3, r2]
		IRIDIUM.rxIndex++;
 800d90a:	4b1a      	ldr	r3, [pc, #104]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d90c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800d910:	3301      	adds	r3, #1
 800d912:	b29a      	uxth	r2, r3
 800d914:	4b17      	ldr	r3, [pc, #92]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d916:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}

	if (IRIDIUM.rxTmp == 13 || IRIDIUM.rxTmp == 10) {
 800d91a:	4b16      	ldr	r3, [pc, #88]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d91c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d920:	2b0d      	cmp	r3, #13
 800d922:	d004      	beq.n	800d92e <IRIDIUM_Callback+0x6e>
 800d924:	4b13      	ldr	r3, [pc, #76]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d926:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d92a:	2b0a      	cmp	r3, #10
 800d92c:	d118      	bne.n	800d960 <IRIDIUM_Callback+0xa0>
		if (debugiridium == 1) {
 800d92e:	4b12      	ldr	r3, [pc, #72]	; (800d978 <IRIDIUM_Callback+0xb8>)
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d103      	bne.n	800d93e <IRIDIUM_Callback+0x7e>
			usb_universal_printf("%s",IRIDIUM.rxBuffer);
 800d936:	490f      	ldr	r1, [pc, #60]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d938:	4810      	ldr	r0, [pc, #64]	; (800d97c <IRIDIUM_Callback+0xbc>)
 800d93a:	f004 fed7 	bl	80126ec <usb_universal_printf>
		}

		osMessageQueuePut(iridiumQueueHandle, &IRIDIUM.rxBuffer, 0U, 0U);
 800d93e:	4b10      	ldr	r3, [pc, #64]	; (800d980 <IRIDIUM_Callback+0xc0>)
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	2300      	movs	r3, #0
 800d944:	2200      	movs	r2, #0
 800d946:	490b      	ldr	r1, [pc, #44]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d948:	f7fb f824 	bl	8008994 <osMessageQueuePut>
		memset(IRIDIUM.rxBuffer, 0, sizeof(IRIDIUM.rxBuffer));
 800d94c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d950:	2100      	movs	r1, #0
 800d952:	4808      	ldr	r0, [pc, #32]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d954:	f005 fc5a 	bl	801320c <memset>
		IRIDIUM.rxIndex = 0;
 800d958:	4b06      	ldr	r3, [pc, #24]	; (800d974 <IRIDIUM_Callback+0xb4>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}

	HAL_UART_Receive_DMA(&_IRIDIUM_USART, &IRIDIUM.rxTmp, 1);
 800d960:	2201      	movs	r2, #1
 800d962:	4908      	ldr	r1, [pc, #32]	; (800d984 <IRIDIUM_Callback+0xc4>)
 800d964:	4802      	ldr	r0, [pc, #8]	; (800d970 <IRIDIUM_Callback+0xb0>)
 800d966:	f7f9 fb51 	bl	800700c <HAL_UART_Receive_DMA>
}
 800d96a:	bf00      	nop
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	2003365c 	.word	0x2003365c
 800d974:	20032e8c 	.word	0x20032e8c
 800d978:	20033328 	.word	0x20033328
 800d97c:	0801acb0 	.word	0x0801acb0
 800d980:	20033748 	.word	0x20033748
 800d984:	2003308e 	.word	0x2003308e

0800d988 <IRIDIUM_Loop>:

void IRIDIUM_Loop(void) {
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
	signaliridium = HAL_GPIO_ReadPin(NETWORKINT_GPIO_Port, NETWORKINT_Pin);
 800d98c:	2120      	movs	r1, #32
 800d98e:	4862      	ldr	r0, [pc, #392]	; (800db18 <IRIDIUM_Loop+0x190>)
 800d990:	f7f4 fad8 	bl	8001f44 <HAL_GPIO_ReadPin>
 800d994:	4603      	mov	r3, r0
 800d996:	461a      	mov	r2, r3
 800d998:	4b60      	ldr	r3, [pc, #384]	; (800db1c <IRIDIUM_Loop+0x194>)
 800d99a:	701a      	strb	r2, [r3, #0]

	if (IRIDIUM.status == SBDD0) {
 800d99c:	4b60      	ldr	r3, [pc, #384]	; (800db20 <IRIDIUM_Loop+0x198>)
 800d99e:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800d9a2:	2b09      	cmp	r3, #9
 800d9a4:	d109      	bne.n	800d9ba <IRIDIUM_Loop+0x32>
		//Iridium Status loop sbdd0.
		IRIDIUM.status = WaitSBDD01;
 800d9a6:	4b5e      	ldr	r3, [pc, #376]	; (800db20 <IRIDIUM_Loop+0x198>)
 800d9a8:	220b      	movs	r2, #11
 800d9aa:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		iridium_printf("AT+SBDD0\r\n");
 800d9ae:	485d      	ldr	r0, [pc, #372]	; (800db24 <IRIDIUM_Loop+0x19c>)
 800d9b0:	f004 fed8 	bl	8012764 <iridium_printf>
		usb_universal_printf("ClearBuf-Tx\r\n");
 800d9b4:	485c      	ldr	r0, [pc, #368]	; (800db28 <IRIDIUM_Loop+0x1a0>)
 800d9b6:	f004 fe99 	bl	80126ec <usb_universal_printf>
	}

	if (IRIDIUM.status == SBDD1) {
 800d9ba:	4b59      	ldr	r3, [pc, #356]	; (800db20 <IRIDIUM_Loop+0x198>)
 800d9bc:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800d9c0:	2b0a      	cmp	r3, #10
 800d9c2:	d109      	bne.n	800d9d8 <IRIDIUM_Loop+0x50>
		IRIDIUM.status = WaitSBDD01;
 800d9c4:	4b56      	ldr	r3, [pc, #344]	; (800db20 <IRIDIUM_Loop+0x198>)
 800d9c6:	220b      	movs	r2, #11
 800d9c8:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		iridium_printf("AT+SBDD1\r\n");
 800d9cc:	4857      	ldr	r0, [pc, #348]	; (800db2c <IRIDIUM_Loop+0x1a4>)
 800d9ce:	f004 fec9 	bl	8012764 <iridium_printf>
		usb_universal_printf("ClearBuf-Rx\r\n");
 800d9d2:	4857      	ldr	r0, [pc, #348]	; (800db30 <IRIDIUM_Loop+0x1a8>)
 800d9d4:	f004 fe8a 	bl	80126ec <usb_universal_printf>
	}

	if (IRIDIUM.status == SBDIX && signaliridium == 1) {
 800d9d8:	4b51      	ldr	r3, [pc, #324]	; (800db20 <IRIDIUM_Loop+0x198>)
 800d9da:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d10d      	bne.n	800d9fe <IRIDIUM_Loop+0x76>
 800d9e2:	4b4e      	ldr	r3, [pc, #312]	; (800db1c <IRIDIUM_Loop+0x194>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d109      	bne.n	800d9fe <IRIDIUM_Loop+0x76>
		//usb_universal_printf("Iridium Status loop sbdix in : %d \r\n",
		//		IRIDIUM.status);
		IRIDIUM.status = WaitresponseSBDIX;
 800d9ea:	4b4d      	ldr	r3, [pc, #308]	; (800db20 <IRIDIUM_Loop+0x198>)
 800d9ec:	220e      	movs	r2, #14
 800d9ee:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		iridium_printf("AT+SBDIX\r\n");
 800d9f2:	4850      	ldr	r0, [pc, #320]	; (800db34 <IRIDIUM_Loop+0x1ac>)
 800d9f4:	f004 feb6 	bl	8012764 <iridium_printf>
		usb_universal_printf("run-IX\r\n");	//Iridium Status loop sbdix out  : %d \r\n",
 800d9f8:	484f      	ldr	r0, [pc, #316]	; (800db38 <IRIDIUM_Loop+0x1b0>)
 800d9fa:	f004 fe77 	bl	80126ec <usb_universal_printf>
		//IRIDIUM.status);
	}

	if (IRIDIUM.status == SBDIXA && signaliridium == 1) {
 800d9fe:	4b48      	ldr	r3, [pc, #288]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da00:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800da04:	2b05      	cmp	r3, #5
 800da06:	d10d      	bne.n	800da24 <IRIDIUM_Loop+0x9c>
 800da08:	4b44      	ldr	r3, [pc, #272]	; (800db1c <IRIDIUM_Loop+0x194>)
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d109      	bne.n	800da24 <IRIDIUM_Loop+0x9c>
		IRIDIUM.status = WaitresponseSBDIX;
 800da10:	4b43      	ldr	r3, [pc, #268]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da12:	220e      	movs	r2, #14
 800da14:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		iridium_printf("AT+SBDIXA\r\n");
 800da18:	4848      	ldr	r0, [pc, #288]	; (800db3c <IRIDIUM_Loop+0x1b4>)
 800da1a:	f004 fea3 	bl	8012764 <iridium_printf>
		usb_universal_printf("XIA\r\n");
 800da1e:	4848      	ldr	r0, [pc, #288]	; (800db40 <IRIDIUM_Loop+0x1b8>)
 800da20:	f004 fe64 	bl	80126ec <usb_universal_printf>
	}

	if (IRIDIUM.status == Waitsignal && signaliridium == 1) {
 800da24:	4b3e      	ldr	r3, [pc, #248]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da26:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800da2a:	2b0c      	cmp	r3, #12
 800da2c:	d10a      	bne.n	800da44 <IRIDIUM_Loop+0xbc>
 800da2e:	4b3b      	ldr	r3, [pc, #236]	; (800db1c <IRIDIUM_Loop+0x194>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d106      	bne.n	800da44 <IRIDIUM_Loop+0xbc>
		//usb_universal_printf("Iridium Status waitsignal + 1 in : %d \r\n",
		//		IRIDIUM.status);
		IRIDIUM.status = SBDIX;
 800da36:	4b3a      	ldr	r3, [pc, #232]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da38:	2204      	movs	r2, #4
 800da3a:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		usb_universal_printf("IX-again\r\n");//Iridium Status waitsignal + 1 out : %d \r\n",
 800da3e:	4841      	ldr	r0, [pc, #260]	; (800db44 <IRIDIUM_Loop+0x1bc>)
 800da40:	f004 fe54 	bl	80126ec <usb_universal_printf>
		//IRIDIUM.status);
	}

	// Receive Checking
	if (IRIDIUM.statusreceive == SBDRING && IRIDIUM.status == Idle
 800da44:	4b36      	ldr	r3, [pc, #216]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da46:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d113      	bne.n	800da76 <IRIDIUM_Loop+0xee>
 800da4e:	4b34      	ldr	r3, [pc, #208]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da50:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10e      	bne.n	800da76 <IRIDIUM_Loop+0xee>
			&& signaliridium == 1) {
 800da58:	4b30      	ldr	r3, [pc, #192]	; (800db1c <IRIDIUM_Loop+0x194>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d10a      	bne.n	800da76 <IRIDIUM_Loop+0xee>
		usb_universal_printf("RING-XIA\r\n");
 800da60:	4839      	ldr	r0, [pc, #228]	; (800db48 <IRIDIUM_Loop+0x1c0>)
 800da62:	f004 fe43 	bl	80126ec <usb_universal_printf>
		IRIDIUM.statusreceive = PROCESSRECEIVE;
 800da66:	4b2e      	ldr	r3, [pc, #184]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da68:	2202      	movs	r2, #2
 800da6a:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
		IRIDIUM.status = SBDIXA;
 800da6e:	4b2c      	ldr	r3, [pc, #176]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da70:	2205      	movs	r2, #5
 800da72:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
	}

	if (IRIDIUM.statusreceive == OPENRECEIVE && IRIDIUM.status == Idle) {
 800da76:	4b2a      	ldr	r3, [pc, #168]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da78:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
 800da7c:	2b03      	cmp	r3, #3
 800da7e:	d112      	bne.n	800daa6 <IRIDIUM_Loop+0x11e>
 800da80:	4b27      	ldr	r3, [pc, #156]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da82:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10d      	bne.n	800daa6 <IRIDIUM_Loop+0x11e>
		usb_universal_printf("SBDRT\r\n");
 800da8a:	4830      	ldr	r0, [pc, #192]	; (800db4c <IRIDIUM_Loop+0x1c4>)
 800da8c:	f004 fe2e 	bl	80126ec <usb_universal_printf>
		IRIDIUM.statusreceive = PROCESSRECEIVE;
 800da90:	4b23      	ldr	r3, [pc, #140]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da92:	2202      	movs	r2, #2
 800da94:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
		IRIDIUM.status = SBDRT;
 800da98:	4b21      	ldr	r3, [pc, #132]	; (800db20 <IRIDIUM_Loop+0x198>)
 800da9a:	2208      	movs	r2, #8
 800da9c:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		iridium_printf("AT+SBDRT\r\n");
 800daa0:	482b      	ldr	r0, [pc, #172]	; (800db50 <IRIDIUM_Loop+0x1c8>)
 800daa2:	f004 fe5f 	bl	8012764 <iridium_printf>
	}

	if (IRIDIUM.statusreceive == NEEDCHECKRECEIVE && IRIDIUM.status == Idle
 800daa6:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <IRIDIUM_Loop+0x198>)
 800daa8:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
 800daac:	2b04      	cmp	r3, #4
 800daae:	d113      	bne.n	800dad8 <IRIDIUM_Loop+0x150>
 800dab0:	4b1b      	ldr	r3, [pc, #108]	; (800db20 <IRIDIUM_Loop+0x198>)
 800dab2:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10e      	bne.n	800dad8 <IRIDIUM_Loop+0x150>
			&& signaliridium == 1) {
 800daba:	4b18      	ldr	r3, [pc, #96]	; (800db1c <IRIDIUM_Loop+0x194>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d10a      	bne.n	800dad8 <IRIDIUM_Loop+0x150>
		usb_universal_printf("Repeat synchronize......\r\n");
 800dac2:	4824      	ldr	r0, [pc, #144]	; (800db54 <IRIDIUM_Loop+0x1cc>)
 800dac4:	f004 fe12 	bl	80126ec <usb_universal_printf>
		IRIDIUM.statusreceive = PROCESSRECEIVE;
 800dac8:	4b15      	ldr	r3, [pc, #84]	; (800db20 <IRIDIUM_Loop+0x198>)
 800daca:	2202      	movs	r2, #2
 800dacc:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
		IRIDIUM.status = SBDIXA;
 800dad0:	4b13      	ldr	r3, [pc, #76]	; (800db20 <IRIDIUM_Loop+0x198>)
 800dad2:	2205      	movs	r2, #5
 800dad4:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
	}

	if (osSemaphoreGetCount(iridiumrecvBinarySemHandle) > 0
 800dad8:	4b1f      	ldr	r3, [pc, #124]	; (800db58 <IRIDIUM_Loop+0x1d0>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fa fec5 	bl	800886c <osSemaphoreGetCount>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d015      	beq.n	800db14 <IRIDIUM_Loop+0x18c>
			&& IRIDIUM.status == Idle && IRIDIUM.statusreceive == IDLERECEIVE
 800dae8:	4b0d      	ldr	r3, [pc, #52]	; (800db20 <IRIDIUM_Loop+0x198>)
 800daea:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d110      	bne.n	800db14 <IRIDIUM_Loop+0x18c>
 800daf2:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <IRIDIUM_Loop+0x198>)
 800daf4:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <IRIDIUM_Loop+0x18c>
			&& signaliridium == 1) {
 800dafc:	4b07      	ldr	r3, [pc, #28]	; (800db1c <IRIDIUM_Loop+0x194>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d107      	bne.n	800db14 <IRIDIUM_Loop+0x18c>
		osSemaphoreRelease(iridiumrecvBinarySemHandle);
 800db04:	4b14      	ldr	r3, [pc, #80]	; (800db58 <IRIDIUM_Loop+0x1d0>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fa fe6b 	bl	80087e4 <osSemaphoreRelease>
		usb_universal_printf("Get Data in Queue......\r\n");
 800db0e:	4813      	ldr	r0, [pc, #76]	; (800db5c <IRIDIUM_Loop+0x1d4>)
 800db10:	f004 fdec 	bl	80126ec <usb_universal_printf>
		//IRIDIUM.statusreceive = PROCESSRECEIVE;
		//IRIDIUM.status = SBDIXA;
	}

}
 800db14:	bf00      	nop
 800db16:	bd80      	pop	{r7, pc}
 800db18:	48000400 	.word	0x48000400
 800db1c:	20033325 	.word	0x20033325
 800db20:	20032e8c 	.word	0x20032e8c
 800db24:	0801acb4 	.word	0x0801acb4
 800db28:	0801acc0 	.word	0x0801acc0
 800db2c:	0801acd0 	.word	0x0801acd0
 800db30:	0801acdc 	.word	0x0801acdc
 800db34:	0801acec 	.word	0x0801acec
 800db38:	0801acf8 	.word	0x0801acf8
 800db3c:	0801ad04 	.word	0x0801ad04
 800db40:	0801ad10 	.word	0x0801ad10
 800db44:	0801ad18 	.word	0x0801ad18
 800db48:	0801ad24 	.word	0x0801ad24
 800db4c:	0801ad30 	.word	0x0801ad30
 800db50:	0801ad38 	.word	0x0801ad38
 800db54:	0801ad44 	.word	0x0801ad44
 800db58:	200336f8 	.word	0x200336f8
 800db5c:	0801ad60 	.word	0x0801ad60

0800db60 <IRIDIUM_Process>:

void IRIDIUM_Process(char *buffer) {
 800db60:	b580      	push	{r7, lr}
 800db62:	b08c      	sub	sp, #48	; 0x30
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]

	if (IRIDIUM.status == Binarysend) {
 800db68:	4ba1      	ldr	r3, [pc, #644]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800db6a:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d137      	bne.n	800dbe2 <IRIDIUM_Process+0x82>
		if (strstr((char*) buffer, "0")) {
 800db72:	2130      	movs	r1, #48	; 0x30
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f006 faab 	bl	80140d0 <strchr>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d006      	beq.n	800db8e <IRIDIUM_Process+0x2e>
			//usb_universal_printf("Iridium Status binarysend in : %d \r\n",
			//		IRIDIUM.status);
			IRIDIUM.status = SBDIX;
 800db80:	4b9b      	ldr	r3, [pc, #620]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800db82:	2204      	movs	r2, #4
 800db84:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			usb_universal_printf("WB-IX\r\n");//Iridium Status binarysend out : %d \r\n",
 800db88:	489a      	ldr	r0, [pc, #616]	; (800ddf4 <IRIDIUM_Process+0x294>)
 800db8a:	f004 fdaf 	bl	80126ec <usb_universal_printf>
			//IRIDIUM.status);
		}
		if (strstr((char*) buffer, "1")) {
 800db8e:	2131      	movs	r1, #49	; 0x31
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f006 fa9d 	bl	80140d0 <strchr>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d006      	beq.n	800dbaa <IRIDIUM_Process+0x4a>
			//time out
			usb_universal_printf("Buffer Iridium Timeout\r\n");
 800db9c:	4896      	ldr	r0, [pc, #600]	; (800ddf8 <IRIDIUM_Process+0x298>)
 800db9e:	f004 fda5 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = SBDD0;
 800dba2:	4b93      	ldr	r3, [pc, #588]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dba4:	2209      	movs	r2, #9
 800dba6:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		}
		if (strstr((char*) buffer, "2")) {
 800dbaa:	2132      	movs	r1, #50	; 0x32
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f006 fa8f 	bl	80140d0 <strchr>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d006      	beq.n	800dbc6 <IRIDIUM_Process+0x66>
			//checksum false
			usb_universal_printf("Buffer Iridium checksum false\r\n");
 800dbb8:	4890      	ldr	r0, [pc, #576]	; (800ddfc <IRIDIUM_Process+0x29c>)
 800dbba:	f004 fd97 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = SBDD0;
 800dbbe:	4b8c      	ldr	r3, [pc, #560]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dbc0:	2209      	movs	r2, #9
 800dbc2:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		}
		if (strstr((char*) buffer, "3")) {
 800dbc6:	2133      	movs	r1, #51	; 0x33
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f006 fa81 	bl	80140d0 <strchr>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d006      	beq.n	800dbe2 <IRIDIUM_Process+0x82>
			//message incorrect
			usb_universal_printf("Buffer Iridium message incorrect\r\n");
 800dbd4:	488a      	ldr	r0, [pc, #552]	; (800de00 <IRIDIUM_Process+0x2a0>)
 800dbd6:	f004 fd89 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = SBDD0;
 800dbda:	4b85      	ldr	r3, [pc, #532]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dbdc:	2209      	movs	r2, #9
 800dbde:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		}
	}

	if (strstr((char*) buffer, "OK")) {
 800dbe2:	4988      	ldr	r1, [pc, #544]	; (800de04 <IRIDIUM_Process+0x2a4>)
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f006 fa80 	bl	80140ea <strstr>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d03c      	beq.n	800dc6a <IRIDIUM_Process+0x10a>
		if (IRIDIUM.status == SBDWT) {
 800dbf0:	4b7f      	ldr	r3, [pc, #508]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dbf2:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800dbf6:	2b03      	cmp	r3, #3
 800dbf8:	d106      	bne.n	800dc08 <IRIDIUM_Process+0xa8>
			//usb_universal_printf("Iridium Status ok sbdwt in : %d \r\n",
			//		IRIDIUM.status);
			IRIDIUM.status = SBDIX;
 800dbfa:	4b7d      	ldr	r3, [pc, #500]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dbfc:	2204      	movs	r2, #4
 800dbfe:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			usb_universal_printf("WT-IX\r\n");//Iridium Status ok sbdwt out : %d \r\n",
 800dc02:	4881      	ldr	r0, [pc, #516]	; (800de08 <IRIDIUM_Process+0x2a8>)
 800dc04:	f004 fd72 	bl	80126ec <usb_universal_printf>
			//IRIDIUM.status);
		}
		if (IRIDIUM.status == WaitSBDD01) {
 800dc08:	4b79      	ldr	r3, [pc, #484]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dc0a:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800dc0e:	2b0b      	cmp	r3, #11
 800dc10:	d10a      	bne.n	800dc28 <IRIDIUM_Process+0xc8>
			usb_universal_printf("Iridium Status ok waitsbdd01 in : %d \r\n",IRIDIUM.status);
 800dc12:	4b77      	ldr	r3, [pc, #476]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dc14:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800dc18:	4619      	mov	r1, r3
 800dc1a:	487c      	ldr	r0, [pc, #496]	; (800de0c <IRIDIUM_Process+0x2ac>)
 800dc1c:	f004 fd66 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = Idle;
 800dc20:	4b73      	ldr	r3, [pc, #460]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			//usb_universal_printf(
			//"idle karena sudah diclear buffer..\r\nIridium Status ok waitsbbd01 : %d \r\n",
			//IRIDIUM.status);
		}
		if (statusSendGPS == 2) {
 800dc28:	4b79      	ldr	r3, [pc, #484]	; (800de10 <IRIDIUM_Process+0x2b0>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d11c      	bne.n	800dc6a <IRIDIUM_Process+0x10a>
			// Iridium SLEEP
			HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 800dc30:	2200      	movs	r2, #0
 800dc32:	2102      	movs	r1, #2
 800dc34:	4877      	ldr	r0, [pc, #476]	; (800de14 <IRIDIUM_Process+0x2b4>)
 800dc36:	f7f4 f9ab 	bl	8001f90 <HAL_GPIO_WritePin>
			// GPS Sleep
			HAL_GPIO_WritePin(GPIOD, GPS_RESET_Pin, GPIO_PIN_RESET);
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2180      	movs	r1, #128	; 0x80
 800dc3e:	4876      	ldr	r0, [pc, #472]	; (800de18 <IRIDIUM_Process+0x2b8>)
 800dc40:	f7f4 f9a6 	bl	8001f90 <HAL_GPIO_WritePin>
			statusSendGPS = 0;
 800dc44:	4b72      	ldr	r3, [pc, #456]	; (800de10 <IRIDIUM_Process+0x2b0>)
 800dc46:	2200      	movs	r2, #0
 800dc48:	701a      	strb	r2, [r3, #0]
			usb_printf("The Device Is Turned Off.\r\n");
 800dc4a:	4874      	ldr	r0, [pc, #464]	; (800de1c <IRIDIUM_Process+0x2bc>)
 800dc4c:	f004 fcfe 	bl	801264c <usb_printf>
			osDelay(50);
 800dc50:	2032      	movs	r0, #50	; 0x32
 800dc52:	f7fa fcd0 	bl	80085f6 <osDelay>
			HAL_GPIO_WritePin(SWT_TRIG_GPIO_Port, SWT_TRIG_Pin, GPIO_PIN_RESET);
 800dc56:	2200      	movs	r2, #0
 800dc58:	2180      	movs	r1, #128	; 0x80
 800dc5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dc5e:	f7f4 f997 	bl	8001f90 <HAL_GPIO_WritePin>
			DS3231_ResetAlarm1_B();
 800dc62:	f001 faba 	bl	800f1da <DS3231_ResetAlarm1_B>
			DS3231_ResetAlarm2_B();
 800dc66:	f001 facf 	bl	800f208 <DS3231_ResetAlarm2_B>
		}
	}

	if (strstr((char*) buffer, "ADY")) {
 800dc6a:	496d      	ldr	r1, [pc, #436]	; (800de20 <IRIDIUM_Process+0x2c0>)
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f006 fa3c 	bl	80140ea <strstr>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d013      	beq.n	800dca0 <IRIDIUM_Process+0x140>
		//usb_universal_printf("Iridium Status ready in : %d \r\n",
		//		IRIDIUM.status);
		IRIDIUM.status = Binarysend;
 800dc78:	4b5d      	ldr	r3, [pc, #372]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		HAL_UART_Transmit_IT(&_IRIDIUM_USART, (uint8_t*) IRIDIUM.datasendbuffer,IRIDIUM.sizedata);
 800dc80:	4b5b      	ldr	r3, [pc, #364]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dc82:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	461a      	mov	r2, r3
 800dc8a:	4966      	ldr	r1, [pc, #408]	; (800de24 <IRIDIUM_Process+0x2c4>)
 800dc8c:	4866      	ldr	r0, [pc, #408]	; (800de28 <IRIDIUM_Process+0x2c8>)
 800dc8e:	f7f9 f961 	bl	8006f54 <HAL_UART_Transmit_IT>
		usb_universal_printf("Iridium Status ready out : %d \r\n",IRIDIUM.status);
 800dc92:	4b57      	ldr	r3, [pc, #348]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dc94:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4864      	ldr	r0, [pc, #400]	; (800de2c <IRIDIUM_Process+0x2cc>)
 800dc9c:	f004 fd26 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "300")) {
 800dca0:	4963      	ldr	r1, [pc, #396]	; (800de30 <IRIDIUM_Process+0x2d0>)
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f006 fa21 	bl	80140ea <strstr>
	}

	/*
	 * Sending buffer to sattelite
	 */
	if (strstr((char*) buffer, "+SBDIX:")) {
 800dca8:	4962      	ldr	r1, [pc, #392]	; (800de34 <IRIDIUM_Process+0x2d4>)
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f006 fa1d 	bl	80140ea <strstr>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 80d6 	beq.w	800de64 <IRIDIUM_Process+0x304>
		usb_universal_printf("Iridium Status sbdix in : %d \r\n",IRIDIUM.status);
 800dcb8:	4b4d      	ldr	r3, [pc, #308]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dcba:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	485d      	ldr	r0, [pc, #372]	; (800de38 <IRIDIUM_Process+0x2d8>)
 800dcc2:	f004 fd13 	bl	80126ec <usb_universal_printf>
		char *MOstatus;
		char *MTstatus;
		char *MTqueue;
		uint8_t intMOstatus, intMTstatus, intMTqueue;

		strakustik = strstr((char*) buffer, "+SBDIX:");
 800dcc6:	495b      	ldr	r1, [pc, #364]	; (800de34 <IRIDIUM_Process+0x2d4>)
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f006 fa0e 	bl	80140ea <strstr>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	60fb      	str	r3, [r7, #12]
		strtok_r(strakustik, ":", &strakustik);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f107 020c 	add.w	r2, r7, #12
 800dcd8:	4958      	ldr	r1, [pc, #352]	; (800de3c <IRIDIUM_Process+0x2dc>)
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f007 f87c 	bl	8014dd8 <strtok_r>
		MOstatus = strtok_r(strakustik, ",", &strakustik);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f107 020c 	add.w	r2, r7, #12
 800dce6:	4956      	ldr	r1, [pc, #344]	; (800de40 <IRIDIUM_Process+0x2e0>)
 800dce8:	4618      	mov	r0, r3
 800dcea:	f007 f875 	bl	8014dd8 <strtok_r>
 800dcee:	62f8      	str	r0, [r7, #44]	; 0x2c
		strtok_r(strakustik, ",", &strakustik);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f107 020c 	add.w	r2, r7, #12
 800dcf6:	4952      	ldr	r1, [pc, #328]	; (800de40 <IRIDIUM_Process+0x2e0>)
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f007 f86d 	bl	8014dd8 <strtok_r>
		MTstatus = strtok_r(strakustik, ",", &strakustik);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f107 020c 	add.w	r2, r7, #12
 800dd04:	494e      	ldr	r1, [pc, #312]	; (800de40 <IRIDIUM_Process+0x2e0>)
 800dd06:	4618      	mov	r0, r3
 800dd08:	f007 f866 	bl	8014dd8 <strtok_r>
 800dd0c:	62b8      	str	r0, [r7, #40]	; 0x28
		strtok_r(strakustik, ",", &strakustik);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f107 020c 	add.w	r2, r7, #12
 800dd14:	494a      	ldr	r1, [pc, #296]	; (800de40 <IRIDIUM_Process+0x2e0>)
 800dd16:	4618      	mov	r0, r3
 800dd18:	f007 f85e 	bl	8014dd8 <strtok_r>
		strtok_r(strakustik, ",", &strakustik);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f107 020c 	add.w	r2, r7, #12
 800dd22:	4947      	ldr	r1, [pc, #284]	; (800de40 <IRIDIUM_Process+0x2e0>)
 800dd24:	4618      	mov	r0, r3
 800dd26:	f007 f857 	bl	8014dd8 <strtok_r>
		MTqueue = strtok_r(strakustik, "\r", &strakustik);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f107 020c 	add.w	r2, r7, #12
 800dd30:	4944      	ldr	r1, [pc, #272]	; (800de44 <IRIDIUM_Process+0x2e4>)
 800dd32:	4618      	mov	r0, r3
 800dd34:	f007 f850 	bl	8014dd8 <strtok_r>
 800dd38:	6278      	str	r0, [r7, #36]	; 0x24

		intMOstatus = atoi(MOstatus);
 800dd3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd3c:	f005 fa1e 	bl	801317c <atoi>
 800dd40:	4603      	mov	r3, r0
 800dd42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		intMTstatus = atoi(MTstatus);
 800dd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd48:	f005 fa18 	bl	801317c <atoi>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		intMTqueue = atoi(MTqueue);
 800dd52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd54:	f005 fa12 	bl	801317c <atoi>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		// TRANSMIT STATUS ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		switch (intMOstatus) {
 800dd5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d016      	beq.n	800dd94 <IRIDIUM_Process+0x234>
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	dc1c      	bgt.n	800dda4 <IRIDIUM_Process+0x244>
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <IRIDIUM_Process+0x214>
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d008      	beq.n	800dd84 <IRIDIUM_Process+0x224>
 800dd72:	e017      	b.n	800dda4 <IRIDIUM_Process+0x244>
		case 0:
			usb_universal_printf("oksend\r\n");
 800dd74:	4834      	ldr	r0, [pc, #208]	; (800de48 <IRIDIUM_Process+0x2e8>)
 800dd76:	f004 fcb9 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = SBDD0;
 800dd7a:	4b1d      	ldr	r3, [pc, #116]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dd7c:	2209      	movs	r2, #9
 800dd7e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			break;
 800dd82:	e014      	b.n	800ddae <IRIDIUM_Process+0x24e>
		case 1:
			usb_universal_printf("oksend\r\n");
 800dd84:	4830      	ldr	r0, [pc, #192]	; (800de48 <IRIDIUM_Process+0x2e8>)
 800dd86:	f004 fcb1 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = SBDD0;
 800dd8a:	4b19      	ldr	r3, [pc, #100]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dd8c:	2209      	movs	r2, #9
 800dd8e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			break;
 800dd92:	e00c      	b.n	800ddae <IRIDIUM_Process+0x24e>
		case 2:
			usb_universal_printf("oksend\r\n");
 800dd94:	482c      	ldr	r0, [pc, #176]	; (800de48 <IRIDIUM_Process+0x2e8>)
 800dd96:	f004 fca9 	bl	80126ec <usb_universal_printf>
			IRIDIUM.status = SBDD0;
 800dd9a:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dd9c:	2209      	movs	r2, #9
 800dd9e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			break;
 800dda2:	e004      	b.n	800ddae <IRIDIUM_Process+0x24e>
		default:
			//usb_universal_printf("FAILED send SBDIX.. Wait Signal \r\n");
			IRIDIUM.status = Waitsignal;
 800dda4:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dda6:	220c      	movs	r2, #12
 800dda8:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			break;
 800ddac:	bf00      	nop
		}

		// RECEIVE STATUS ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		switch (intMTstatus) {
 800ddae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d013      	beq.n	800ddde <IRIDIUM_Process+0x27e>
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	dc4c      	bgt.n	800de54 <IRIDIUM_Process+0x2f4>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <IRIDIUM_Process+0x264>
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d005      	beq.n	800ddce <IRIDIUM_Process+0x26e>
		case 2:
			usb_universal_printf("Receive failed, need to check again \r\n");
			IRIDIUM.statusreceive = NEEDCHECKRECEIVE;
			break;
		default:
			break;
 800ddc2:	e047      	b.n	800de54 <IRIDIUM_Process+0x2f4>
			IRIDIUM.statusreceive = IDLERECEIVE;
 800ddc4:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			break;
 800ddcc:	e043      	b.n	800de56 <IRIDIUM_Process+0x2f6>
			usb_universal_printf(
 800ddce:	481f      	ldr	r0, [pc, #124]	; (800de4c <IRIDIUM_Process+0x2ec>)
 800ddd0:	f004 fc8c 	bl	80126ec <usb_universal_printf>
			IRIDIUM.statusreceive = OPENRECEIVE;
 800ddd4:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800ddd6:	2203      	movs	r2, #3
 800ddd8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			break;
 800dddc:	e03b      	b.n	800de56 <IRIDIUM_Process+0x2f6>
			usb_universal_printf("Receive failed, need to check again \r\n");
 800ddde:	481c      	ldr	r0, [pc, #112]	; (800de50 <IRIDIUM_Process+0x2f0>)
 800dde0:	f004 fc84 	bl	80126ec <usb_universal_printf>
			IRIDIUM.statusreceive = NEEDCHECKRECEIVE;
 800dde4:	4b02      	ldr	r3, [pc, #8]	; (800ddf0 <IRIDIUM_Process+0x290>)
 800dde6:	2204      	movs	r2, #4
 800dde8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			break;
 800ddec:	e033      	b.n	800de56 <IRIDIUM_Process+0x2f6>
 800ddee:	bf00      	nop
 800ddf0:	20032e8c 	.word	0x20032e8c
 800ddf4:	0801ad7c 	.word	0x0801ad7c
 800ddf8:	0801ad84 	.word	0x0801ad84
 800ddfc:	0801ada0 	.word	0x0801ada0
 800de00:	0801adc0 	.word	0x0801adc0
 800de04:	0801ade4 	.word	0x0801ade4
 800de08:	0801ade8 	.word	0x0801ade8
 800de0c:	0801adf0 	.word	0x0801adf0
 800de10:	2003374d 	.word	0x2003374d
 800de14:	48001000 	.word	0x48001000
 800de18:	48000c00 	.word	0x48000c00
 800de1c:	0801ae18 	.word	0x0801ae18
 800de20:	0801ae34 	.word	0x0801ae34
 800de24:	200330e5 	.word	0x200330e5
 800de28:	2003365c 	.word	0x2003365c
 800de2c:	0801ae38 	.word	0x0801ae38
 800de30:	0801ae5c 	.word	0x0801ae5c
 800de34:	0801ae60 	.word	0x0801ae60
 800de38:	0801ae68 	.word	0x0801ae68
 800de3c:	0801ae88 	.word	0x0801ae88
 800de40:	0801ae8c 	.word	0x0801ae8c
 800de44:	0801ae90 	.word	0x0801ae90
 800de48:	0801ae94 	.word	0x0801ae94
 800de4c:	0801aea0 	.word	0x0801aea0
 800de50:	0801aed0 	.word	0x0801aed0
			break;
 800de54:	bf00      	nop
		}

		if (intMTqueue > 0) {
 800de56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <IRIDIUM_Process+0x304>
			usb_universal_printf("Queue Data from satellite available...\r\n");
 800de5e:	4860      	ldr	r0, [pc, #384]	; (800dfe0 <IRIDIUM_Process+0x480>)
 800de60:	f004 fc44 	bl	80126ec <usb_universal_printf>
	}

	/*
	 * Receive data indicator
	 */
	if (strstr((char*) buffer, "SBDRING")) {
 800de64:	495f      	ldr	r1, [pc, #380]	; (800dfe4 <IRIDIUM_Process+0x484>)
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f006 f93f 	bl	80140ea <strstr>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d003      	beq.n	800de7a <IRIDIUM_Process+0x31a>
		IRIDIUM.statusreceive = SBDRING;
 800de72:	4b5d      	ldr	r3, [pc, #372]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800de74:	2201      	movs	r2, #1
 800de76:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
		}*/
	}
	/*
	 * Get Receive buffer from Sattelite
	 */
	if (strstr((char*) buffer, "+SBDIXA:")) {
 800de7a:	495c      	ldr	r1, [pc, #368]	; (800dfec <IRIDIUM_Process+0x48c>)
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f006 f934 	bl	80140ea <strstr>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d078      	beq.n	800df7a <IRIDIUM_Process+0x41a>
		char *strakustik;
		char *MTstatus;
		char *MTqueue;
		uint8_t intMTstatus, intMTqueue;

		strakustik = strstr((char*) buffer, "+SBDIXA:");
 800de88:	4958      	ldr	r1, [pc, #352]	; (800dfec <IRIDIUM_Process+0x48c>)
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f006 f92d 	bl	80140ea <strstr>
 800de90:	4603      	mov	r3, r0
 800de92:	60bb      	str	r3, [r7, #8]
		strtok_r(strakustik, ":", &strakustik);
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	f107 0208 	add.w	r2, r7, #8
 800de9a:	4955      	ldr	r1, [pc, #340]	; (800dff0 <IRIDIUM_Process+0x490>)
 800de9c:	4618      	mov	r0, r3
 800de9e:	f006 ff9b 	bl	8014dd8 <strtok_r>
		strtok_r(strakustik, ",", &strakustik);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	f107 0208 	add.w	r2, r7, #8
 800dea8:	4952      	ldr	r1, [pc, #328]	; (800dff4 <IRIDIUM_Process+0x494>)
 800deaa:	4618      	mov	r0, r3
 800deac:	f006 ff94 	bl	8014dd8 <strtok_r>
		strtok_r(strakustik, ",", &strakustik);
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	f107 0208 	add.w	r2, r7, #8
 800deb6:	494f      	ldr	r1, [pc, #316]	; (800dff4 <IRIDIUM_Process+0x494>)
 800deb8:	4618      	mov	r0, r3
 800deba:	f006 ff8d 	bl	8014dd8 <strtok_r>
		MTstatus = strtok_r(strakustik, ",", &strakustik);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	f107 0208 	add.w	r2, r7, #8
 800dec4:	494b      	ldr	r1, [pc, #300]	; (800dff4 <IRIDIUM_Process+0x494>)
 800dec6:	4618      	mov	r0, r3
 800dec8:	f006 ff86 	bl	8014dd8 <strtok_r>
 800decc:	61f8      	str	r0, [r7, #28]
		strtok_r(strakustik, ",", &strakustik);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	f107 0208 	add.w	r2, r7, #8
 800ded4:	4947      	ldr	r1, [pc, #284]	; (800dff4 <IRIDIUM_Process+0x494>)
 800ded6:	4618      	mov	r0, r3
 800ded8:	f006 ff7e 	bl	8014dd8 <strtok_r>
		strtok_r(strakustik, ",", &strakustik);
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	f107 0208 	add.w	r2, r7, #8
 800dee2:	4944      	ldr	r1, [pc, #272]	; (800dff4 <IRIDIUM_Process+0x494>)
 800dee4:	4618      	mov	r0, r3
 800dee6:	f006 ff77 	bl	8014dd8 <strtok_r>
		MTqueue = strtok_r(strakustik, "\r", &strakustik);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	f107 0208 	add.w	r2, r7, #8
 800def0:	4941      	ldr	r1, [pc, #260]	; (800dff8 <IRIDIUM_Process+0x498>)
 800def2:	4618      	mov	r0, r3
 800def4:	f006 ff70 	bl	8014dd8 <strtok_r>
 800def8:	61b8      	str	r0, [r7, #24]

		intMTstatus = atoi(MTstatus);
 800defa:	69f8      	ldr	r0, [r7, #28]
 800defc:	f005 f93e 	bl	801317c <atoi>
 800df00:	4603      	mov	r3, r0
 800df02:	75fb      	strb	r3, [r7, #23]
		intMTqueue = atoi(MTqueue);
 800df04:	69b8      	ldr	r0, [r7, #24]
 800df06:	f005 f939 	bl	801317c <atoi>
 800df0a:	4603      	mov	r3, r0
 800df0c:	75bb      	strb	r3, [r7, #22]

		// TRANSMIT STATUS ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// RECEIVE STATUS ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		switch (intMTstatus) {
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d01b      	beq.n	800df4c <IRIDIUM_Process+0x3ec>
 800df14:	2b02      	cmp	r3, #2
 800df16:	dc25      	bgt.n	800df64 <IRIDIUM_Process+0x404>
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <IRIDIUM_Process+0x3c2>
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d009      	beq.n	800df34 <IRIDIUM_Process+0x3d4>
 800df20:	e020      	b.n	800df64 <IRIDIUM_Process+0x404>
		case 0:
			IRIDIUM.statusreceive = IDLERECEIVE;
 800df22:	4b31      	ldr	r3, [pc, #196]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df24:	2200      	movs	r2, #0
 800df26:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			IRIDIUM.status = Idle;
 800df2a:	4b2f      	ldr	r3, [pc, #188]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			//usb_universal_printf("idle karena SBDIX = 0..\r\n");
			break;
 800df32:	e01c      	b.n	800df6e <IRIDIUM_Process+0x40e>
		case 1:
			usb_universal_printf(
 800df34:	4831      	ldr	r0, [pc, #196]	; (800dffc <IRIDIUM_Process+0x49c>)
 800df36:	f004 fbd9 	bl	80126ec <usb_universal_printf>
					"Receive message from gateway ready to open\r\n");
			IRIDIUM.statusreceive = OPENRECEIVE;
 800df3a:	4b2b      	ldr	r3, [pc, #172]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df3c:	2203      	movs	r2, #3
 800df3e:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			IRIDIUM.status = Idle;
 800df42:	4b29      	ldr	r3, [pc, #164]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			//usb_universal_printf("idle karena SBDIX = 1..\r\n");
			break;
 800df4a:	e010      	b.n	800df6e <IRIDIUM_Process+0x40e>
		case 2:
			usb_universal_printf("Receive failed, need to check again \r\n");
 800df4c:	482c      	ldr	r0, [pc, #176]	; (800e000 <IRIDIUM_Process+0x4a0>)
 800df4e:	f004 fbcd 	bl	80126ec <usb_universal_printf>
			IRIDIUM.statusreceive = NEEDCHECKRECEIVE;
 800df52:	4b25      	ldr	r3, [pc, #148]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df54:	2204      	movs	r2, #4
 800df56:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			IRIDIUM.status = Idle;
 800df5a:	4b23      	ldr	r3, [pc, #140]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			//usb_universal_printf("idle karena SBDIX = 2..\r\n");
			break;
 800df62:	e004      	b.n	800df6e <IRIDIUM_Process+0x40e>
		default:
			IRIDIUM.statusreceive = IDLERECEIVE;
 800df64:	4b20      	ldr	r3, [pc, #128]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			break;
 800df6c:	bf00      	nop
		}

		if (intMTqueue > 0) {
 800df6e:	7dbb      	ldrb	r3, [r7, #22]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <IRIDIUM_Process+0x41a>
			usb_universal_printf("Queue Data from satellite available...\r\n");
 800df74:	481a      	ldr	r0, [pc, #104]	; (800dfe0 <IRIDIUM_Process+0x480>)
 800df76:	f004 fbb9 	bl	80126ec <usb_universal_printf>
			//osSemaphoreRelease(IridiumRecvBinarySemHandle);
		}
	}

	if (strstr((char*) buffer, "+SBDRT:")) {
 800df7a:	4922      	ldr	r1, [pc, #136]	; (800e004 <IRIDIUM_Process+0x4a4>)
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f006 f8b4 	bl	80140ea <strstr>
/*		if (debugiridium == 1) {
			usb_universal_printf("%s\r\n", buffer);
		}*/
	}

	if (strstr((char*) buffer, "#")) {
 800df82:	2123      	movs	r1, #35	; 0x23
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f006 f8a3 	bl	80140d0 <strchr>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d017      	beq.n	800dfc0 <IRIDIUM_Process+0x460>
		if (debugiridium == 1) {
 800df90:	4b1d      	ldr	r3, [pc, #116]	; (800e008 <IRIDIUM_Process+0x4a8>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d103      	bne.n	800dfa0 <IRIDIUM_Process+0x440>
			usb_universal_printf("TERIMA DATA: %s\r\n", buffer);
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	481c      	ldr	r0, [pc, #112]	; (800e00c <IRIDIUM_Process+0x4ac>)
 800df9c:	f004 fba6 	bl	80126ec <usb_universal_printf>
		}

		char *strx;
		strx = strstr((char*) buffer, "#");
 800dfa0:	2123      	movs	r1, #35	; 0x23
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f006 f894 	bl	80140d0 <strchr>
 800dfa8:	6138      	str	r0, [r7, #16]
		//osMessageQueuePut(iridiumrecvQueueHandle, &strx, 0U, 0U);
		ProcessReceiveIridium(strx);
 800dfaa:	6938      	ldr	r0, [r7, #16]
 800dfac:	f000 f88e 	bl	800e0cc <ProcessReceiveIridium>
		IRIDIUM.statusreceive = IDLERECEIVE;
 800dfb0:	4b0d      	ldr	r3, [pc, #52]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
		IRIDIUM.status = SBDD1;
 800dfb8:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <IRIDIUM_Process+0x488>)
 800dfba:	220a      	movs	r2, #10
 800dfbc:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256

	///////////////////// EXTENDED ///////////////////////////////////////////
	///////////////////// EXTENDED ///////////////////////////////////////////
	///////////////////// EXTENDED ///////////////////////////////////////////

	if (strstr(buffer, "CSQ") || strstr(buffer, "SBDREG")) {
 800dfc0:	4913      	ldr	r1, [pc, #76]	; (800e010 <IRIDIUM_Process+0x4b0>)
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f006 f891 	bl	80140ea <strstr>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d103      	bne.n	800dfd6 <IRIDIUM_Process+0x476>
 800dfce:	4911      	ldr	r1, [pc, #68]	; (800e014 <IRIDIUM_Process+0x4b4>)
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f006 f88a 	bl	80140ea <strstr>
/*		if (debugiridium == 1) {
			usb_universal_printf("%s\r\n", buffer);
		}*/
	}
}
 800dfd6:	bf00      	nop
 800dfd8:	3730      	adds	r7, #48	; 0x30
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	0801aef8 	.word	0x0801aef8
 800dfe4:	0801af24 	.word	0x0801af24
 800dfe8:	20032e8c 	.word	0x20032e8c
 800dfec:	0801af2c 	.word	0x0801af2c
 800dff0:	0801ae88 	.word	0x0801ae88
 800dff4:	0801ae8c 	.word	0x0801ae8c
 800dff8:	0801ae90 	.word	0x0801ae90
 800dffc:	0801aea0 	.word	0x0801aea0
 800e000:	0801aed0 	.word	0x0801aed0
 800e004:	0801af38 	.word	0x0801af38
 800e008:	20033328 	.word	0x20033328
 800e00c:	0801af40 	.word	0x0801af40
 800e010:	0801af54 	.word	0x0801af54
 800e014:	0801af58 	.word	0x0801af58

0800e018 <senddata>:
	HAL_UART_Transmit(&_IRIDIUM_USART, (uint8_t*) buffer, strlen(buffer),
			10000);
	IRIDIUM.status = SBDWT;
}

void senddata(char *data, uint16_t sizedata) {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	807b      	strh	r3, [r7, #2]
	//usb_universal_printf("Iridium Status data in : %d \r\n", IRIDIUM.status);
	memset(IRIDIUM.datasendbuffer, 0, sizeof(IRIDIUM.datasendbuffer));
 800e024:	2228      	movs	r2, #40	; 0x28
 800e026:	2100      	movs	r1, #0
 800e028:	4824      	ldr	r0, [pc, #144]	; (800e0bc <senddata+0xa4>)
 800e02a:	f005 f8ef 	bl	801320c <memset>

	uint16_t scheck;
	int i;

	for (i = 0; i < sizedata; i++) {
 800e02e:	2300      	movs	r3, #0
 800e030:	60bb      	str	r3, [r7, #8]
 800e032:	e015      	b.n	800e060 <senddata+0x48>
		scheck += data[i];
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	4413      	add	r3, r2
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	89fb      	ldrh	r3, [r7, #14]
 800e040:	4413      	add	r3, r2
 800e042:	81fb      	strh	r3, [r7, #14]
		IRIDIUM.datasendbuffer[i] = data[i];
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	4413      	add	r3, r2
 800e04a:	7819      	ldrb	r1, [r3, #0]
 800e04c:	4a1c      	ldr	r2, [pc, #112]	; (800e0c0 <senddata+0xa8>)
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	4413      	add	r3, r2
 800e052:	f203 2359 	addw	r3, r3, #601	; 0x259
 800e056:	460a      	mov	r2, r1
 800e058:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizedata; i++) {
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60bb      	str	r3, [r7, #8]
 800e060:	887b      	ldrh	r3, [r7, #2]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	429a      	cmp	r2, r3
 800e066:	dbe5      	blt.n	800e034 <senddata+0x1c>
	}
	IRIDIUM.datasendbuffer[sizedata] = scheck / 256;
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	0a1b      	lsrs	r3, r3, #8
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	887b      	ldrh	r3, [r7, #2]
 800e070:	b2d1      	uxtb	r1, r2
 800e072:	4a13      	ldr	r2, [pc, #76]	; (800e0c0 <senddata+0xa8>)
 800e074:	4413      	add	r3, r2
 800e076:	460a      	mov	r2, r1
 800e078:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
	IRIDIUM.datasendbuffer[sizedata + 1] = scheck % 256;
 800e07c:	887b      	ldrh	r3, [r7, #2]
 800e07e:	3301      	adds	r3, #1
 800e080:	89fa      	ldrh	r2, [r7, #14]
 800e082:	b2d1      	uxtb	r1, r2
 800e084:	4a0e      	ldr	r2, [pc, #56]	; (800e0c0 <senddata+0xa8>)
 800e086:	4413      	add	r3, r2
 800e088:	460a      	mov	r2, r1
 800e08a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
	IRIDIUM.sizedata = sizedata + 2;
 800e08e:	887b      	ldrh	r3, [r7, #2]
 800e090:	b2db      	uxtb	r3, r3
 800e092:	3302      	adds	r3, #2
 800e094:	b2da      	uxtb	r2, r3
 800e096:	4b0a      	ldr	r3, [pc, #40]	; (800e0c0 <senddata+0xa8>)
 800e098:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
	usb_universal_printf("Start SBDWB\r\n");//Iridium Status data out : %d \r\n",
 800e09c:	4809      	ldr	r0, [pc, #36]	; (800e0c4 <senddata+0xac>)
 800e09e:	f004 fb25 	bl	80126ec <usb_universal_printf>
	//		IRIDIUM.status);
	iridium_printf("AT+SBDWB=%u\r\n", sizedata);
 800e0a2:	887b      	ldrh	r3, [r7, #2]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4808      	ldr	r0, [pc, #32]	; (800e0c8 <senddata+0xb0>)
 800e0a8:	f004 fb5c 	bl	8012764 <iridium_printf>
	IRIDIUM.status = SBDWB;
 800e0ac:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <senddata+0xa8>)
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
}
 800e0b4:	bf00      	nop
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	200330e5 	.word	0x200330e5
 800e0c0:	20032e8c 	.word	0x20032e8c
 800e0c4:	0801af70 	.word	0x0801af70
 800e0c8:	0801af80 	.word	0x0801af80

0800e0cc <ProcessReceiveIridium>:

void ProcessReceiveIridium(char *buffer) {
 800e0cc:	b590      	push	{r4, r7, lr}
 800e0ce:	b0ad      	sub	sp, #180	; 0xb4
 800e0d0:	af02      	add	r7, sp, #8
 800e0d2:	6078      	str	r0, [r7, #4]
	char *strx;

	if (strstr(buffer, "GPSLOC?")) {
 800e0d4:	49b1      	ldr	r1, [pc, #708]	; (800e39c <ProcessReceiveIridium+0x2d0>)
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f006 f807 	bl	80140ea <strstr>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d006      	beq.n	800e0f0 <ProcessReceiveIridium+0x24>
		usb_universal_printf("<IRIDIUM>Permintaan data lokasi di proses\r\n");
 800e0e2:	48af      	ldr	r0, [pc, #700]	; (800e3a0 <ProcessReceiveIridium+0x2d4>)
 800e0e4:	f004 fb02 	bl	80126ec <usb_universal_printf>
		EncodeTEWSLocBuoy(0, 15);
 800e0e8:	210f      	movs	r1, #15
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	f7fe f8a4 	bl	800c238 <EncodeTEWSLocBuoy>
	}

	if (strstr(buffer, "BATGPS?")) {
 800e0f0:	49ac      	ldr	r1, [pc, #688]	; (800e3a4 <ProcessReceiveIridium+0x2d8>)
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f005 fff9 	bl	80140ea <strstr>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d027      	beq.n	800e14e <ProcessReceiveIridium+0x82>
		usb_universal_printf("<IRIDIUM>Permintaan Status Baterai di proses\r\n");
 800e0fe:	48aa      	ldr	r0, [pc, #680]	; (800e3a8 <ProcessReceiveIridium+0x2dc>)
 800e100:	f004 faf4 	bl	80126ec <usb_universal_printf>
		char str[128];
		sprintf(str,"VOLT:  %lu V, CURRENT:  %lu mA\r\n", getvoltage(), getcurrent());
 800e104:	f002 fe30 	bl	8010d68 <getvoltage>
 800e108:	4604      	mov	r4, r0
 800e10a:	f002 fea3 	bl	8010e54 <getcurrent>
 800e10e:	4603      	mov	r3, r0
 800e110:	f107 000c 	add.w	r0, r7, #12
 800e114:	4622      	mov	r2, r4
 800e116:	49a5      	ldr	r1, [pc, #660]	; (800e3ac <ProcessReceiveIridium+0x2e0>)
 800e118:	f005 ffba 	bl	8014090 <siprintf>
		uint16_t sizedata = strlen(str);
 800e11c:	f107 030c 	add.w	r3, r7, #12
 800e120:	4618      	mov	r0, r3
 800e122:	f7f2 f86f 	bl	8000204 <strlen>
 800e126:	4603      	mov	r3, r0
 800e128:	b29b      	uxth	r3, r3
 800e12a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e12e:	4ba0      	ldr	r3, [pc, #640]	; (800e3b0 <ProcessReceiveIridium+0x2e4>)
 800e130:	6818      	ldr	r0, [r3, #0]
 800e132:	f107 0192 	add.w	r1, r7, #146	; 0x92
 800e136:	2300      	movs	r3, #0
 800e138:	2200      	movs	r2, #0
 800e13a:	f7fa fc2b 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, str, 0U, 0U);
 800e13e:	4b9d      	ldr	r3, [pc, #628]	; (800e3b4 <ProcessReceiveIridium+0x2e8>)
 800e140:	6818      	ldr	r0, [r3, #0]
 800e142:	f107 010c 	add.w	r1, r7, #12
 800e146:	2300      	movs	r3, #0
 800e148:	2200      	movs	r2, #0
 800e14a:	f7fa fc23 	bl	8008994 <osMessageQueuePut>
	}

	if (strstr(buffer, "TPERIOD?")) {
 800e14e:	499a      	ldr	r1, [pc, #616]	; (800e3b8 <ProcessReceiveIridium+0x2ec>)
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f005 ffca 	bl	80140ea <strstr>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d023      	beq.n	800e1a4 <ProcessReceiveIridium+0xd8>
		usb_universal_printf("<IRIDIUM>Permintaan Transmite Periode di proses\r\n");
 800e15c:	4897      	ldr	r0, [pc, #604]	; (800e3bc <ProcessReceiveIridium+0x2f0>)
 800e15e:	f004 fac5 	bl	80126ec <usb_universal_printf>
		char str[128];
		sprintf(str,"TPERIOD:  %lu\r\n", periodsendloc);
 800e162:	4b97      	ldr	r3, [pc, #604]	; (800e3c0 <ProcessReceiveIridium+0x2f4>)
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	f107 030c 	add.w	r3, r7, #12
 800e16a:	4996      	ldr	r1, [pc, #600]	; (800e3c4 <ProcessReceiveIridium+0x2f8>)
 800e16c:	4618      	mov	r0, r3
 800e16e:	f005 ff8f 	bl	8014090 <siprintf>
		uint16_t sizedata = strlen(str);
 800e172:	f107 030c 	add.w	r3, r7, #12
 800e176:	4618      	mov	r0, r3
 800e178:	f7f2 f844 	bl	8000204 <strlen>
 800e17c:	4603      	mov	r3, r0
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e184:	4b8a      	ldr	r3, [pc, #552]	; (800e3b0 <ProcessReceiveIridium+0x2e4>)
 800e186:	6818      	ldr	r0, [r3, #0]
 800e188:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800e18c:	2300      	movs	r3, #0
 800e18e:	2200      	movs	r2, #0
 800e190:	f7fa fc00 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, str, 0U, 0U);
 800e194:	4b87      	ldr	r3, [pc, #540]	; (800e3b4 <ProcessReceiveIridium+0x2e8>)
 800e196:	6818      	ldr	r0, [r3, #0]
 800e198:	f107 010c 	add.w	r1, r7, #12
 800e19c:	2300      	movs	r3, #0
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f7fa fbf8 	bl	8008994 <osMessageQueuePut>
	}

	if (strstr((char*) buffer, "TPERIOD=")) {
 800e1a4:	4988      	ldr	r1, [pc, #544]	; (800e3c8 <ProcessReceiveIridium+0x2fc>)
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f005 ff9f 	bl	80140ea <strstr>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d013      	beq.n	800e1da <ProcessReceiveIridium+0x10e>
		threshold = parsingdatairidium(buffer, "TPERIOD=");
 800e1b2:	4985      	ldr	r1, [pc, #532]	; (800e3c8 <ProcessReceiveIridium+0x2fc>)
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fbe9 	bl	800e98c <parsingdatairidium>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	4a83      	ldr	r2, [pc, #524]	; (800e3cc <ProcessReceiveIridium+0x300>)
 800e1be:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x18, periodsendloc);
 800e1c0:	4b7f      	ldr	r3, [pc, #508]	; (800e3c0 <ProcessReceiveIridium+0x2f4>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	2118      	movs	r1, #24
 800e1c8:	4881      	ldr	r0, [pc, #516]	; (800e3d0 <ProcessReceiveIridium+0x304>)
 800e1ca:	f7fe faa5 	bl	800c718 <write_eeprom_union>
		usb_universal_printf("<IRIDIUM>TPERIOD SET: %lu\r\n",periodsendloc);
 800e1ce:	4b7c      	ldr	r3, [pc, #496]	; (800e3c0 <ProcessReceiveIridium+0x2f4>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	487f      	ldr	r0, [pc, #508]	; (800e3d4 <ProcessReceiveIridium+0x308>)
 800e1d6:	f004 fa89 	bl	80126ec <usb_universal_printf>
	}

	if (strstr(buffer, "RPERIOD?")) {
 800e1da:	497f      	ldr	r1, [pc, #508]	; (800e3d8 <ProcessReceiveIridium+0x30c>)
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f005 ff84 	bl	80140ea <strstr>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d023      	beq.n	800e230 <ProcessReceiveIridium+0x164>
		usb_universal_printf("<IRIDIUM>Permintaan Recaive Periode di proses\r\n");
 800e1e8:	487c      	ldr	r0, [pc, #496]	; (800e3dc <ProcessReceiveIridium+0x310>)
 800e1ea:	f004 fa7f 	bl	80126ec <usb_universal_printf>
		char str[128];
		sprintf(str,"RPERIOD:  %lu\r\n", periodsenddata);
 800e1ee:	4b7c      	ldr	r3, [pc, #496]	; (800e3e0 <ProcessReceiveIridium+0x314>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	f107 030c 	add.w	r3, r7, #12
 800e1f6:	497b      	ldr	r1, [pc, #492]	; (800e3e4 <ProcessReceiveIridium+0x318>)
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f005 ff49 	bl	8014090 <siprintf>
		uint16_t sizedata = strlen(str);
 800e1fe:	f107 030c 	add.w	r3, r7, #12
 800e202:	4618      	mov	r0, r3
 800e204:	f7f1 fffe 	bl	8000204 <strlen>
 800e208:	4603      	mov	r3, r0
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e210:	4b67      	ldr	r3, [pc, #412]	; (800e3b0 <ProcessReceiveIridium+0x2e4>)
 800e212:	6818      	ldr	r0, [r3, #0]
 800e214:	f107 018e 	add.w	r1, r7, #142	; 0x8e
 800e218:	2300      	movs	r3, #0
 800e21a:	2200      	movs	r2, #0
 800e21c:	f7fa fbba 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, str, 0U, 0U);
 800e220:	4b64      	ldr	r3, [pc, #400]	; (800e3b4 <ProcessReceiveIridium+0x2e8>)
 800e222:	6818      	ldr	r0, [r3, #0]
 800e224:	f107 010c 	add.w	r1, r7, #12
 800e228:	2300      	movs	r3, #0
 800e22a:	2200      	movs	r2, #0
 800e22c:	f7fa fbb2 	bl	8008994 <osMessageQueuePut>
	}

	if (strstr((char*) buffer, "RPERIOD=")) {
 800e230:	496d      	ldr	r1, [pc, #436]	; (800e3e8 <ProcessReceiveIridium+0x31c>)
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f005 ff59 	bl	80140ea <strstr>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d013      	beq.n	800e266 <ProcessReceiveIridium+0x19a>
		threshold = parsingdatairidium(buffer, "RPERIOD=");
 800e23e:	496a      	ldr	r1, [pc, #424]	; (800e3e8 <ProcessReceiveIridium+0x31c>)
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fba3 	bl	800e98c <parsingdatairidium>
 800e246:	4603      	mov	r3, r0
 800e248:	4a60      	ldr	r2, [pc, #384]	; (800e3cc <ProcessReceiveIridium+0x300>)
 800e24a:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x14, periodsenddata);
 800e24c:	4b64      	ldr	r3, [pc, #400]	; (800e3e0 <ProcessReceiveIridium+0x314>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	461a      	mov	r2, r3
 800e252:	2114      	movs	r1, #20
 800e254:	485e      	ldr	r0, [pc, #376]	; (800e3d0 <ProcessReceiveIridium+0x304>)
 800e256:	f7fe fa5f 	bl	800c718 <write_eeprom_union>
		usb_universal_printf("<IRIDIUM>RPERIOD SET: %lu\r\n",periodsenddata);
 800e25a:	4b61      	ldr	r3, [pc, #388]	; (800e3e0 <ProcessReceiveIridium+0x314>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4619      	mov	r1, r3
 800e260:	4862      	ldr	r0, [pc, #392]	; (800e3ec <ProcessReceiveIridium+0x320>)
 800e262:	f004 fa43 	bl	80126ec <usb_universal_printf>
	}


/*=========================================================================================*/

	if (strstr(buffer, "OPS=")) {
 800e266:	4962      	ldr	r1, [pc, #392]	; (800e3f0 <ProcessReceiveIridium+0x324>)
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f005 ff3e 	bl	80140ea <strstr>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 80cb 	beq.w	800e40c <ProcessReceiveIridium+0x340>
		operationmode = parsingdatairidium(buffer, "OPS=");
 800e276:	495e      	ldr	r1, [pc, #376]	; (800e3f0 <ProcessReceiveIridium+0x324>)
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 fb87 	bl	800e98c <parsingdatairidium>
 800e27e:	4603      	mov	r3, r0
 800e280:	b2da      	uxtb	r2, r3
 800e282:	4b5c      	ldr	r3, [pc, #368]	; (800e3f4 <ProcessReceiveIridium+0x328>)
 800e284:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x04, &operationmode);
 800e286:	4a5b      	ldr	r2, [pc, #364]	; (800e3f4 <ProcessReceiveIridium+0x328>)
 800e288:	2104      	movs	r1, #4
 800e28a:	4851      	ldr	r0, [pc, #324]	; (800e3d0 <ProcessReceiveIridium+0x304>)
 800e28c:	f7fe f9b2 	bl	800c5f4 <write_eeprom_byte>

		//0=tanggal 1=jam 2=menit 3=detik 4=sekali per detik
		uint8_t _Mode = 1;
 800e290:	2301      	movs	r3, #1
 800e292:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		uint8_t _Date = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		uint8_t _Hour = 0;
 800e29c:	2300      	movs	r3, #0
 800e29e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		uint8_t _Min  = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		uint8_t _Sec  = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		switch(operationmode){
 800e2ae:	4b51      	ldr	r3, [pc, #324]	; (800e3f4 <ProcessReceiveIridium+0x328>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	2b04      	cmp	r3, #4
 800e2b4:	d04a      	beq.n	800e34c <ProcessReceiveIridium+0x280>
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	f300 80a9 	bgt.w	800e40e <ProcessReceiveIridium+0x342>
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <ProcessReceiveIridium+0x1fa>
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d01e      	beq.n	800e302 <ProcessReceiveIridium+0x236>
 800e2c4:	e0a3      	b.n	800e40e <ProcessReceiveIridium+0x342>
		case 0:
			// set alarm jam 21:17:00 UTC
			_Hour = 21;
 800e2c6:	2315      	movs	r3, #21
 800e2c8:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			_Min  = 17;
 800e2cc:	2311      	movs	r3, #17
 800e2ce:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
			usb_universal_printf("<IRIDIUM> MODE NORMAL, Alarm Set : %.2d:%.2d:%.2d UTC\r\n",_Hour,_Min,_Sec);
 800e2d2:	f897 10a5 	ldrb.w	r1, [r7, #165]	; 0xa5
 800e2d6:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 800e2da:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800e2de:	4846      	ldr	r0, [pc, #280]	; (800e3f8 <ProcessReceiveIridium+0x32c>)
 800e2e0:	f004 fa04 	bl	80126ec <usb_universal_printf>
			DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 800e2e4:	4b45      	ldr	r3, [pc, #276]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e2e6:	781a      	ldrb	r2, [r3, #0]
 800e2e8:	f897 40a4 	ldrb.w	r4, [r7, #164]	; 0xa4
 800e2ec:	f897 10a6 	ldrb.w	r1, [r7, #166]	; 0xa6
 800e2f0:	f897 00a7 	ldrb.w	r0, [r7, #167]	; 0xa7
 800e2f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	4623      	mov	r3, r4
 800e2fc:	f000 fdf8 	bl	800eef0 <DS3231_SetAlarm1_B>
			break;
 800e300:	e085      	b.n	800e40e <ProcessReceiveIridium+0x342>
		case 2:
			alarm_now = rtcTEWS2.Hour + 1;
 800e302:	4b3f      	ldr	r3, [pc, #252]	; (800e400 <ProcessReceiveIridium+0x334>)
 800e304:	791b      	ldrb	r3, [r3, #4]
 800e306:	3301      	adds	r3, #1
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	4b3c      	ldr	r3, [pc, #240]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e30c:	701a      	strb	r2, [r3, #0]
			if(alarm_now > 23){
 800e30e:	4b3b      	ldr	r3, [pc, #236]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	2b17      	cmp	r3, #23
 800e314:	d905      	bls.n	800e322 <ProcessReceiveIridium+0x256>
				alarm_now = alarm_now - 24;
 800e316:	4b39      	ldr	r3, [pc, #228]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	3b18      	subs	r3, #24
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	4b37      	ldr	r3, [pc, #220]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e320:	701a      	strb	r2, [r3, #0]
			}
			usb_universal_printf("<IRIDIUM> MODE DRIFTING, Alarm Set : %.2d H\r\n",alarm_now);
 800e322:	4b36      	ldr	r3, [pc, #216]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	4619      	mov	r1, r3
 800e328:	4836      	ldr	r0, [pc, #216]	; (800e404 <ProcessReceiveIridium+0x338>)
 800e32a:	f004 f9df 	bl	80126ec <usb_universal_printf>
			DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 800e32e:	4b33      	ldr	r3, [pc, #204]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e330:	781a      	ldrb	r2, [r3, #0]
 800e332:	f897 40a4 	ldrb.w	r4, [r7, #164]	; 0xa4
 800e336:	f897 10a6 	ldrb.w	r1, [r7, #166]	; 0xa6
 800e33a:	f897 00a7 	ldrb.w	r0, [r7, #167]	; 0xa7
 800e33e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4623      	mov	r3, r4
 800e346:	f000 fdd3 	bl	800eef0 <DS3231_SetAlarm1_B>
			break;
 800e34a:	e060      	b.n	800e40e <ProcessReceiveIridium+0x342>
		case 4:
			alarm_now = rtcTEWS2.Hour + periodsendloc;
 800e34c:	4b2c      	ldr	r3, [pc, #176]	; (800e400 <ProcessReceiveIridium+0x334>)
 800e34e:	791a      	ldrb	r2, [r3, #4]
 800e350:	4b1b      	ldr	r3, [pc, #108]	; (800e3c0 <ProcessReceiveIridium+0x2f4>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	b2db      	uxtb	r3, r3
 800e356:	4413      	add	r3, r2
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	4b28      	ldr	r3, [pc, #160]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e35c:	701a      	strb	r2, [r3, #0]
			if(alarm_now > 23){
 800e35e:	4b27      	ldr	r3, [pc, #156]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b17      	cmp	r3, #23
 800e364:	d905      	bls.n	800e372 <ProcessReceiveIridium+0x2a6>
				alarm_now = alarm_now - 24;
 800e366:	4b25      	ldr	r3, [pc, #148]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	3b18      	subs	r3, #24
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	4b23      	ldr	r3, [pc, #140]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e370:	701a      	strb	r2, [r3, #0]
			}
			usb_universal_printf("<IRIDIUM> MODE TESTING, Alarm Set : %.2d H\r\n",alarm_now);
 800e372:	4b22      	ldr	r3, [pc, #136]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	4619      	mov	r1, r3
 800e378:	4823      	ldr	r0, [pc, #140]	; (800e408 <ProcessReceiveIridium+0x33c>)
 800e37a:	f004 f9b7 	bl	80126ec <usb_universal_printf>
			DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 800e37e:	4b1f      	ldr	r3, [pc, #124]	; (800e3fc <ProcessReceiveIridium+0x330>)
 800e380:	781a      	ldrb	r2, [r3, #0]
 800e382:	f897 40a4 	ldrb.w	r4, [r7, #164]	; 0xa4
 800e386:	f897 10a6 	ldrb.w	r1, [r7, #166]	; 0xa6
 800e38a:	f897 00a7 	ldrb.w	r0, [r7, #167]	; 0xa7
 800e38e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800e392:	9300      	str	r3, [sp, #0]
 800e394:	4623      	mov	r3, r4
 800e396:	f000 fdab 	bl	800eef0 <DS3231_SetAlarm1_B>
			break;
 800e39a:	e038      	b.n	800e40e <ProcessReceiveIridium+0x342>
 800e39c:	0801af90 	.word	0x0801af90
 800e3a0:	0801af98 	.word	0x0801af98
 800e3a4:	0801afc4 	.word	0x0801afc4
 800e3a8:	0801afcc 	.word	0x0801afcc
 800e3ac:	0801affc 	.word	0x0801affc
 800e3b0:	20033734 	.word	0x20033734
 800e3b4:	2003355c 	.word	0x2003355c
 800e3b8:	0801b020 	.word	0x0801b020
 800e3bc:	0801b02c 	.word	0x0801b02c
 800e3c0:	20033374 	.word	0x20033374
 800e3c4:	0801b060 	.word	0x0801b060
 800e3c8:	0801b070 	.word	0x0801b070
 800e3cc:	20033468 	.word	0x20033468
 800e3d0:	20033484 	.word	0x20033484
 800e3d4:	0801b07c 	.word	0x0801b07c
 800e3d8:	0801b098 	.word	0x0801b098
 800e3dc:	0801b0a4 	.word	0x0801b0a4
 800e3e0:	20033540 	.word	0x20033540
 800e3e4:	0801b0d4 	.word	0x0801b0d4
 800e3e8:	0801b0e4 	.word	0x0801b0e4
 800e3ec:	0801b0f0 	.word	0x0801b0f0
 800e3f0:	0801b10c 	.word	0x0801b10c
 800e3f4:	20033534 	.word	0x20033534
 800e3f8:	0801b114 	.word	0x0801b114
 800e3fc:	200338a0 	.word	0x200338a0
 800e400:	20033478 	.word	0x20033478
 800e404:	0801b14c 	.word	0x0801b14c
 800e408:	0801b17c 	.word	0x0801b17c
		}
	}
 800e40c:	bf00      	nop
	 "4,0,0,[ Send OBU ] SET OBU OPERATION MODE = 1 \n");
	 osMessageQueuePut(sdcardQueueHandle, savedsdcardiridium, 0U, 0U);
	 }
	 }*/

	if (strstr(buffer, "CTS=")) {
 800e40e:	492a      	ldr	r1, [pc, #168]	; (800e4b8 <ProcessReceiveIridium+0x3ec>)
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f005 fe6a 	bl	80140ea <strstr>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00c      	beq.n	800e436 <ProcessReceiveIridium+0x36a>
		countertsunami = parsingdatairidium(buffer, "CTS=");
 800e41c:	4926      	ldr	r1, [pc, #152]	; (800e4b8 <ProcessReceiveIridium+0x3ec>)
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fab4 	bl	800e98c <parsingdatairidium>
 800e424:	4603      	mov	r3, r0
 800e426:	b2da      	uxtb	r2, r3
 800e428:	4b24      	ldr	r3, [pc, #144]	; (800e4bc <ProcessReceiveIridium+0x3f0>)
 800e42a:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x08, &countertsunami);
 800e42c:	4a23      	ldr	r2, [pc, #140]	; (800e4bc <ProcessReceiveIridium+0x3f0>)
 800e42e:	2108      	movs	r1, #8
 800e430:	4823      	ldr	r0, [pc, #140]	; (800e4c0 <ProcessReceiveIridium+0x3f4>)
 800e432:	f7fe f8df 	bl	800c5f4 <write_eeprom_byte>
	}

	if (strstr(buffer, "ID=")) {
 800e436:	4923      	ldr	r1, [pc, #140]	; (800e4c4 <ProcessReceiveIridium+0x3f8>)
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f005 fe56 	bl	80140ea <strstr>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00c      	beq.n	800e45e <ProcessReceiveIridium+0x392>
		idBUOY = parsingdatairidium(buffer, "ID=");
 800e444:	491f      	ldr	r1, [pc, #124]	; (800e4c4 <ProcessReceiveIridium+0x3f8>)
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 faa0 	bl	800e98c <parsingdatairidium>
 800e44c:	4603      	mov	r3, r0
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	4b1d      	ldr	r3, [pc, #116]	; (800e4c8 <ProcessReceiveIridium+0x3fc>)
 800e452:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x02, &idBUOY);
 800e454:	4a1c      	ldr	r2, [pc, #112]	; (800e4c8 <ProcessReceiveIridium+0x3fc>)
 800e456:	2102      	movs	r1, #2
 800e458:	4819      	ldr	r0, [pc, #100]	; (800e4c0 <ProcessReceiveIridium+0x3f4>)
 800e45a:	f7fe f8cb 	bl	800c5f4 <write_eeprom_byte>
	}

	if (strstr(buffer, "TBN=")) {
 800e45e:	491b      	ldr	r1, [pc, #108]	; (800e4cc <ProcessReceiveIridium+0x400>)
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f005 fe42 	bl	80140ea <strstr>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d011      	beq.n	800e490 <ProcessReceiveIridium+0x3c4>
		timebacknormal = parsingdatairidium(buffer, "TBN=");
 800e46c:	4917      	ldr	r1, [pc, #92]	; (800e4cc <ProcessReceiveIridium+0x400>)
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa8c 	bl	800e98c <parsingdatairidium>
 800e474:	4603      	mov	r3, r0
 800e476:	4a16      	ldr	r2, [pc, #88]	; (800e4d0 <ProcessReceiveIridium+0x404>)
 800e478:	6013      	str	r3, [r2, #0]
		timebacknormalstatus = timebacknormal;
 800e47a:	4b15      	ldr	r3, [pc, #84]	; (800e4d0 <ProcessReceiveIridium+0x404>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a15      	ldr	r2, [pc, #84]	; (800e4d4 <ProcessReceiveIridium+0x408>)
 800e480:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x20, timebacknormal);
 800e482:	4b13      	ldr	r3, [pc, #76]	; (800e4d0 <ProcessReceiveIridium+0x404>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	461a      	mov	r2, r3
 800e488:	2120      	movs	r1, #32
 800e48a:	480d      	ldr	r0, [pc, #52]	; (800e4c0 <ProcessReceiveIridium+0x3f4>)
 800e48c:	f7fe f944 	bl	800c718 <write_eeprom_union>
	}

	if (strstr(buffer, "DATAENG?")) {
 800e490:	4911      	ldr	r1, [pc, #68]	; (800e4d8 <ProcessReceiveIridium+0x40c>)
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f005 fe29 	bl	80140ea <strstr>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d002      	beq.n	800e4a4 <ProcessReceiveIridium+0x3d8>
		EncodeTEWSEngBuoy(7);
 800e49e:	2007      	movs	r0, #7
 800e4a0:	f7fd ffd2 	bl	800c448 <EncodeTEWSEngBuoy>
	 sprintf(savedsdcardiridium,
	 "4,1,0,[ Send IRIDIUM ] REQUEST BUOY BATTERY \n");
	 osMessageQueuePut(sdcardQueueHandle, savedsdcardiridium, 0U, 0U);
	 }*/

	if (strstr(buffer, "RBB")) {
 800e4a4:	490d      	ldr	r1, [pc, #52]	; (800e4dc <ProcessReceiveIridium+0x410>)
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f005 fe1f 	bl	80140ea <strstr>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d016      	beq.n	800e4e0 <ProcessReceiveIridium+0x414>
		NVIC_SystemReset();
 800e4b2:	f7ff f9c3 	bl	800d83c <__NVIC_SystemReset>
 800e4b6:	bf00      	nop
 800e4b8:	0801b1ac 	.word	0x0801b1ac
 800e4bc:	2003353c 	.word	0x2003353c
 800e4c0:	20033484 	.word	0x20033484
 800e4c4:	0801b1b4 	.word	0x0801b1b4
 800e4c8:	200338f4 	.word	0x200338f4
 800e4cc:	0801b1b8 	.word	0x0801b1b8
 800e4d0:	2003388c 	.word	0x2003388c
 800e4d4:	200336fc 	.word	0x200336fc
 800e4d8:	0801b1c0 	.word	0x0801b1c0
 800e4dc:	0801b1cc 	.word	0x0801b1cc
	}

	if (strstr(buffer, "DIST=")) {
 800e4e0:	49b3      	ldr	r1, [pc, #716]	; (800e7b0 <ProcessReceiveIridium+0x6e4>)
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f005 fe01 	bl	80140ea <strstr>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d031      	beq.n	800e552 <ProcessReceiveIridium+0x486>
		distancedrifting = parsingdatausb(buffer, "TEWS+DIST=");
 800e4ee:	49b1      	ldr	r1, [pc, #708]	; (800e7b4 <ProcessReceiveIridium+0x6e8>)
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f002 fbcd 	bl	8010c90 <parsingdatausb>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	4aaf      	ldr	r2, [pc, #700]	; (800e7b8 <ProcessReceiveIridium+0x6ec>)
 800e4fa:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x24, distancedrifting);
 800e4fc:	4bae      	ldr	r3, [pc, #696]	; (800e7b8 <ProcessReceiveIridium+0x6ec>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	2124      	movs	r1, #36	; 0x24
 800e504:	48ad      	ldr	r0, [pc, #692]	; (800e7bc <ProcessReceiveIridium+0x6f0>)
 800e506:	f7fe f907 	bl	800c718 <write_eeprom_union>
		usb_universal_printf("OK\r\n");
 800e50a:	48ad      	ldr	r0, [pc, #692]	; (800e7c0 <ProcessReceiveIridium+0x6f4>)
 800e50c:	f004 f8ee 	bl	80126ec <usb_universal_printf>
		memset(replyiridium, 0, sizeof(replyiridium));
 800e510:	22ff      	movs	r2, #255	; 0xff
 800e512:	2100      	movs	r1, #0
 800e514:	48ab      	ldr	r0, [pc, #684]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e516:	f004 fe79 	bl	801320c <memset>
		sprintf(replyiridium, "DISTANCE DRIFTING: %lu\r\n", distancedrifting);
 800e51a:	4ba7      	ldr	r3, [pc, #668]	; (800e7b8 <ProcessReceiveIridium+0x6ec>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	461a      	mov	r2, r3
 800e520:	49a9      	ldr	r1, [pc, #676]	; (800e7c8 <ProcessReceiveIridium+0x6fc>)
 800e522:	48a8      	ldr	r0, [pc, #672]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e524:	f005 fdb4 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e528:	48a6      	ldr	r0, [pc, #664]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e52a:	f7f1 fe6b 	bl	8000204 <strlen>
 800e52e:	4603      	mov	r3, r0
 800e530:	b29a      	uxth	r2, r3
 800e532:	4ba6      	ldr	r3, [pc, #664]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e534:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e536:	4ba6      	ldr	r3, [pc, #664]	; (800e7d0 <ProcessReceiveIridium+0x704>)
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	2300      	movs	r3, #0
 800e53c:	2200      	movs	r2, #0
 800e53e:	49a3      	ldr	r1, [pc, #652]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e540:	f7fa fa28 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e544:	4ba3      	ldr	r3, [pc, #652]	; (800e7d4 <ProcessReceiveIridium+0x708>)
 800e546:	6818      	ldr	r0, [r3, #0]
 800e548:	2300      	movs	r3, #0
 800e54a:	2200      	movs	r2, #0
 800e54c:	499d      	ldr	r1, [pc, #628]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e54e:	f7fa fa21 	bl	8008994 <osMessageQueuePut>
	}
	if (strstr(buffer, "DIST?")) {
 800e552:	49a1      	ldr	r1, [pc, #644]	; (800e7d8 <ProcessReceiveIridium+0x70c>)
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f005 fdc8 	bl	80140ea <strstr>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d026      	beq.n	800e5ae <ProcessReceiveIridium+0x4e2>
		usb_universal_printf("DISTANCE DRIFTING: %lu\r\n", distancedrifting);
 800e560:	4b95      	ldr	r3, [pc, #596]	; (800e7b8 <ProcessReceiveIridium+0x6ec>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4619      	mov	r1, r3
 800e566:	4898      	ldr	r0, [pc, #608]	; (800e7c8 <ProcessReceiveIridium+0x6fc>)
 800e568:	f004 f8c0 	bl	80126ec <usb_universal_printf>
		memset(replyiridium, 0, sizeof(replyiridium));
 800e56c:	22ff      	movs	r2, #255	; 0xff
 800e56e:	2100      	movs	r1, #0
 800e570:	4894      	ldr	r0, [pc, #592]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e572:	f004 fe4b 	bl	801320c <memset>
		sprintf(replyiridium, "DISTANCE DRIFTING: %lu\r\n", distancedrifting);
 800e576:	4b90      	ldr	r3, [pc, #576]	; (800e7b8 <ProcessReceiveIridium+0x6ec>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	461a      	mov	r2, r3
 800e57c:	4992      	ldr	r1, [pc, #584]	; (800e7c8 <ProcessReceiveIridium+0x6fc>)
 800e57e:	4891      	ldr	r0, [pc, #580]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e580:	f005 fd86 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e584:	488f      	ldr	r0, [pc, #572]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e586:	f7f1 fe3d 	bl	8000204 <strlen>
 800e58a:	4603      	mov	r3, r0
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	4b8f      	ldr	r3, [pc, #572]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e590:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e592:	4b8f      	ldr	r3, [pc, #572]	; (800e7d0 <ProcessReceiveIridium+0x704>)
 800e594:	6818      	ldr	r0, [r3, #0]
 800e596:	2300      	movs	r3, #0
 800e598:	2200      	movs	r2, #0
 800e59a:	498c      	ldr	r1, [pc, #560]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e59c:	f7fa f9fa 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e5a0:	4b8c      	ldr	r3, [pc, #560]	; (800e7d4 <ProcessReceiveIridium+0x708>)
 800e5a2:	6818      	ldr	r0, [r3, #0]
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	4986      	ldr	r1, [pc, #536]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e5aa:	f7fa f9f3 	bl	8008994 <osMessageQueuePut>
	}

	if (strstr(buffer, "RTC=")) {
 800e5ae:	498b      	ldr	r1, [pc, #556]	; (800e7dc <ProcessReceiveIridium+0x710>)
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f005 fd9a 	bl	80140ea <strstr>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00c      	beq.n	800e5d6 <ProcessReceiveIridium+0x50a>
		synctimertc = parsingdatairidium(buffer, "RTC=");
 800e5bc:	4987      	ldr	r1, [pc, #540]	; (800e7dc <ProcessReceiveIridium+0x710>)
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f9e4 	bl	800e98c <parsingdatairidium>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	4b85      	ldr	r3, [pc, #532]	; (800e7e0 <ProcessReceiveIridium+0x714>)
 800e5ca:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x48, &synctimertc);
 800e5cc:	4a84      	ldr	r2, [pc, #528]	; (800e7e0 <ProcessReceiveIridium+0x714>)
 800e5ce:	2148      	movs	r1, #72	; 0x48
 800e5d0:	487a      	ldr	r0, [pc, #488]	; (800e7bc <ProcessReceiveIridium+0x6f0>)
 800e5d2:	f7fe f80f 	bl	800c5f4 <write_eeprom_byte>
	}
	if (strstr(buffer, "RTC?")) {
 800e5d6:	4983      	ldr	r1, [pc, #524]	; (800e7e4 <ProcessReceiveIridium+0x718>)
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f005 fd86 	bl	80140ea <strstr>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d020      	beq.n	800e626 <ProcessReceiveIridium+0x55a>
		//iridium_printf("AT+SBDWT=RTC:%u\r\n", synctimertc);
		memset(replyiridium, 0, sizeof(replyiridium));
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	4876      	ldr	r0, [pc, #472]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e5ea:	f004 fe0f 	bl	801320c <memset>
		sprintf(replyiridium, "RTC: %u\r\n", synctimertc);
 800e5ee:	4b7c      	ldr	r3, [pc, #496]	; (800e7e0 <ProcessReceiveIridium+0x714>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	497c      	ldr	r1, [pc, #496]	; (800e7e8 <ProcessReceiveIridium+0x71c>)
 800e5f6:	4873      	ldr	r0, [pc, #460]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e5f8:	f005 fd4a 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e5fc:	4871      	ldr	r0, [pc, #452]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e5fe:	f7f1 fe01 	bl	8000204 <strlen>
 800e602:	4603      	mov	r3, r0
 800e604:	b29a      	uxth	r2, r3
 800e606:	4b71      	ldr	r3, [pc, #452]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e608:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e60a:	4b71      	ldr	r3, [pc, #452]	; (800e7d0 <ProcessReceiveIridium+0x704>)
 800e60c:	6818      	ldr	r0, [r3, #0]
 800e60e:	2300      	movs	r3, #0
 800e610:	2200      	movs	r2, #0
 800e612:	496e      	ldr	r1, [pc, #440]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e614:	f7fa f9be 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e618:	4b6e      	ldr	r3, [pc, #440]	; (800e7d4 <ProcessReceiveIridium+0x708>)
 800e61a:	6818      	ldr	r0, [r3, #0]
 800e61c:	2300      	movs	r3, #0
 800e61e:	2200      	movs	r2, #0
 800e620:	4968      	ldr	r1, [pc, #416]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e622:	f7fa f9b7 	bl	8008994 <osMessageQueuePut>
	}
	if (strstr(buffer, "PMIN=")) {
 800e626:	4971      	ldr	r1, [pc, #452]	; (800e7ec <ProcessReceiveIridium+0x720>)
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f005 fd5e 	bl	80140ea <strstr>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00c      	beq.n	800e64e <ProcessReceiveIridium+0x582>
		periodmin = parsingdatairidium(buffer, "PMIN=");
 800e634:	496d      	ldr	r1, [pc, #436]	; (800e7ec <ProcessReceiveIridium+0x720>)
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f9a8 	bl	800e98c <parsingdatairidium>
 800e63c:	4603      	mov	r3, r0
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	4b6b      	ldr	r3, [pc, #428]	; (800e7f0 <ProcessReceiveIridium+0x724>)
 800e642:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x4D, &periodmin);
 800e644:	4a6a      	ldr	r2, [pc, #424]	; (800e7f0 <ProcessReceiveIridium+0x724>)
 800e646:	214d      	movs	r1, #77	; 0x4d
 800e648:	485c      	ldr	r0, [pc, #368]	; (800e7bc <ProcessReceiveIridium+0x6f0>)
 800e64a:	f7fd ffd3 	bl	800c5f4 <write_eeprom_byte>
	}
	if (strstr(buffer, "PMIN?")) {
 800e64e:	4969      	ldr	r1, [pc, #420]	; (800e7f4 <ProcessReceiveIridium+0x728>)
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f005 fd4a 	bl	80140ea <strstr>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d020      	beq.n	800e69e <ProcessReceiveIridium+0x5d2>
		//iridium_printf("AT+SBDWT=PMIN:%u\r\n", periodmin);
		//IRIDIUM.status = SBDWT;
		memset(replyiridium, 0, sizeof(replyiridium));
 800e65c:	22ff      	movs	r2, #255	; 0xff
 800e65e:	2100      	movs	r1, #0
 800e660:	4858      	ldr	r0, [pc, #352]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e662:	f004 fdd3 	bl	801320c <memset>
		sprintf(replyiridium, "PMIN:%u\r\n", periodmin);
 800e666:	4b62      	ldr	r3, [pc, #392]	; (800e7f0 <ProcessReceiveIridium+0x724>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	461a      	mov	r2, r3
 800e66c:	4962      	ldr	r1, [pc, #392]	; (800e7f8 <ProcessReceiveIridium+0x72c>)
 800e66e:	4855      	ldr	r0, [pc, #340]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e670:	f005 fd0e 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e674:	4853      	ldr	r0, [pc, #332]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e676:	f7f1 fdc5 	bl	8000204 <strlen>
 800e67a:	4603      	mov	r3, r0
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	4b53      	ldr	r3, [pc, #332]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e680:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e682:	4b53      	ldr	r3, [pc, #332]	; (800e7d0 <ProcessReceiveIridium+0x704>)
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	2300      	movs	r3, #0
 800e688:	2200      	movs	r2, #0
 800e68a:	4950      	ldr	r1, [pc, #320]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e68c:	f7fa f982 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e690:	4b50      	ldr	r3, [pc, #320]	; (800e7d4 <ProcessReceiveIridium+0x708>)
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	2300      	movs	r3, #0
 800e696:	2200      	movs	r2, #0
 800e698:	494a      	ldr	r1, [pc, #296]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e69a:	f7fa f97b 	bl	8008994 <osMessageQueuePut>
	}
	if (strstr(buffer, "DCAL=")) {
 800e69e:	4957      	ldr	r1, [pc, #348]	; (800e7fc <ProcessReceiveIridium+0x730>)
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f005 fd22 	bl	80140ea <strstr>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00c      	beq.n	800e6c6 <ProcessReceiveIridium+0x5fa>
		driftcalc = parsingdatairidium(buffer, "DCAL=");
 800e6ac:	4953      	ldr	r1, [pc, #332]	; (800e7fc <ProcessReceiveIridium+0x730>)
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 f96c 	bl	800e98c <parsingdatairidium>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	4b51      	ldr	r3, [pc, #324]	; (800e800 <ProcessReceiveIridium+0x734>)
 800e6ba:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x4E, &driftcalc);
 800e6bc:	4a50      	ldr	r2, [pc, #320]	; (800e800 <ProcessReceiveIridium+0x734>)
 800e6be:	214e      	movs	r1, #78	; 0x4e
 800e6c0:	483e      	ldr	r0, [pc, #248]	; (800e7bc <ProcessReceiveIridium+0x6f0>)
 800e6c2:	f7fd ff97 	bl	800c5f4 <write_eeprom_byte>
	}
	if (strstr(buffer, "DCAL?")) {
 800e6c6:	494f      	ldr	r1, [pc, #316]	; (800e804 <ProcessReceiveIridium+0x738>)
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f005 fd0e 	bl	80140ea <strstr>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d020      	beq.n	800e716 <ProcessReceiveIridium+0x64a>
		//iridium_printf("AT+SBDWT=DCAL:%u\r\n", driftcalc);
		//IRIDIUM.status = SBDWT;
		memset(replyiridium, 0, sizeof(replyiridium));
 800e6d4:	22ff      	movs	r2, #255	; 0xff
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	483a      	ldr	r0, [pc, #232]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e6da:	f004 fd97 	bl	801320c <memset>
		sprintf(replyiridium, "DCAL: %u\r\n", driftcalc);
 800e6de:	4b48      	ldr	r3, [pc, #288]	; (800e800 <ProcessReceiveIridium+0x734>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	4948      	ldr	r1, [pc, #288]	; (800e808 <ProcessReceiveIridium+0x73c>)
 800e6e6:	4837      	ldr	r0, [pc, #220]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e6e8:	f005 fcd2 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e6ec:	4835      	ldr	r0, [pc, #212]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e6ee:	f7f1 fd89 	bl	8000204 <strlen>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	4b35      	ldr	r3, [pc, #212]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e6f8:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e6fa:	4b35      	ldr	r3, [pc, #212]	; (800e7d0 <ProcessReceiveIridium+0x704>)
 800e6fc:	6818      	ldr	r0, [r3, #0]
 800e6fe:	2300      	movs	r3, #0
 800e700:	2200      	movs	r2, #0
 800e702:	4932      	ldr	r1, [pc, #200]	; (800e7cc <ProcessReceiveIridium+0x700>)
 800e704:	f7fa f946 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e708:	4b32      	ldr	r3, [pc, #200]	; (800e7d4 <ProcessReceiveIridium+0x708>)
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	2300      	movs	r3, #0
 800e70e:	2200      	movs	r2, #0
 800e710:	492c      	ldr	r1, [pc, #176]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e712:	f7fa f93f 	bl	8008994 <osMessageQueuePut>
	 memset(savedsdcardiridium, 0, sizeof(savedsdcardiridium));
	 sprintf(savedsdcardiridium,
	 "4,1,[ Send IRIDIUM ] REQUEST TIME BATTERY \n");
	 osMessageQueuePut(sdcardQueueHandle, savedsdcardiridium, 0U, 0U);
	 }*/
	if (strstr(buffer, "TIMELC=")) {
 800e716:	493d      	ldr	r1, [pc, #244]	; (800e80c <ProcessReceiveIridium+0x740>)
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f005 fce6 	bl	80140ea <strstr>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d036      	beq.n	800e792 <ProcessReceiveIridium+0x6c6>
		char *bufx;
		char *bufxx;
		strx = strstr(buffer, "TIMELC=");
 800e724:	4939      	ldr	r1, [pc, #228]	; (800e80c <ProcessReceiveIridium+0x740>)
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f005 fcdf 	bl	80140ea <strstr>
 800e72c:	4603      	mov	r3, r0
 800e72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		strtok_r(strx, "=", &strx);
 800e732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e736:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800e73a:	4935      	ldr	r1, [pc, #212]	; (800e810 <ProcessReceiveIridium+0x744>)
 800e73c:	4618      	mov	r0, r3
 800e73e:	f006 fb4b 	bl	8014dd8 <strtok_r>
		bufx = strtok_r(strx, "=", &strx);
 800e742:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e746:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800e74a:	4931      	ldr	r1, [pc, #196]	; (800e810 <ProcessReceiveIridium+0x744>)
 800e74c:	4618      	mov	r0, r3
 800e74e:	f006 fb43 	bl	8014dd8 <strtok_r>
 800e752:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		bufxx = strx;
 800e756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e75a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		hourloc = atoi(bufx);
 800e75e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e762:	f004 fd0b 	bl	801317c <atoi>
 800e766:	4603      	mov	r3, r0
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	4b2a      	ldr	r3, [pc, #168]	; (800e814 <ProcessReceiveIridium+0x748>)
 800e76c:	701a      	strb	r2, [r3, #0]
		minloc = atoi(bufxx);
 800e76e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e772:	f004 fd03 	bl	801317c <atoi>
 800e776:	4603      	mov	r3, r0
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	4b27      	ldr	r3, [pc, #156]	; (800e818 <ProcessReceiveIridium+0x74c>)
 800e77c:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x4C, &hourloc);
 800e77e:	4a25      	ldr	r2, [pc, #148]	; (800e814 <ProcessReceiveIridium+0x748>)
 800e780:	214c      	movs	r1, #76	; 0x4c
 800e782:	480e      	ldr	r0, [pc, #56]	; (800e7bc <ProcessReceiveIridium+0x6f0>)
 800e784:	f7fd ff36 	bl	800c5f4 <write_eeprom_byte>
		write_eeprom_byte(&hi2c1, 0x4B, &minloc);
 800e788:	4a23      	ldr	r2, [pc, #140]	; (800e818 <ProcessReceiveIridium+0x74c>)
 800e78a:	214b      	movs	r1, #75	; 0x4b
 800e78c:	480b      	ldr	r0, [pc, #44]	; (800e7bc <ProcessReceiveIridium+0x6f0>)
 800e78e:	f7fd ff31 	bl	800c5f4 <write_eeprom_byte>
	}
	if (strstr(buffer, "TIMELC?")) {
 800e792:	4922      	ldr	r1, [pc, #136]	; (800e81c <ProcessReceiveIridium+0x750>)
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f005 fca8 	bl	80140ea <strstr>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d05b      	beq.n	800e858 <ProcessReceiveIridium+0x78c>
		//iridium_printf("AT+SBDWT=TIMELC:%u,%u\r\n", hourloc, minloc);
		//IRIDIUM.status = SBDWT;
		memset(replyiridium, 0, sizeof(replyiridium));
 800e7a0:	22ff      	movs	r2, #255	; 0xff
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	4807      	ldr	r0, [pc, #28]	; (800e7c4 <ProcessReceiveIridium+0x6f8>)
 800e7a6:	f004 fd31 	bl	801320c <memset>
		sprintf(replyiridium, "TIMELC: %u,%u\r\n", hourloc, minloc);
 800e7aa:	4b1a      	ldr	r3, [pc, #104]	; (800e814 <ProcessReceiveIridium+0x748>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	e037      	b.n	800e820 <ProcessReceiveIridium+0x754>
 800e7b0:	0801b1d0 	.word	0x0801b1d0
 800e7b4:	0801b1d8 	.word	0x0801b1d8
 800e7b8:	200337fc 	.word	0x200337fc
 800e7bc:	20033484 	.word	0x20033484
 800e7c0:	0801b1e4 	.word	0x0801b1e4
 800e7c4:	20031ff4 	.word	0x20031ff4
 800e7c8:	0801b1ec 	.word	0x0801b1ec
 800e7cc:	20033110 	.word	0x20033110
 800e7d0:	20033734 	.word	0x20033734
 800e7d4:	2003355c 	.word	0x2003355c
 800e7d8:	0801b208 	.word	0x0801b208
 800e7dc:	0801b210 	.word	0x0801b210
 800e7e0:	2003374e 	.word	0x2003374e
 800e7e4:	0801b218 	.word	0x0801b218
 800e7e8:	0801b220 	.word	0x0801b220
 800e7ec:	0801b22c 	.word	0x0801b22c
 800e7f0:	20033701 	.word	0x20033701
 800e7f4:	0801b234 	.word	0x0801b234
 800e7f8:	0801b23c 	.word	0x0801b23c
 800e7fc:	0801b248 	.word	0x0801b248
 800e800:	2003388a 	.word	0x2003388a
 800e804:	0801b250 	.word	0x0801b250
 800e808:	0801b258 	.word	0x0801b258
 800e80c:	0801b264 	.word	0x0801b264
 800e810:	0801b26c 	.word	0x0801b26c
 800e814:	20033561 	.word	0x20033561
 800e818:	2003364c 	.word	0x2003364c
 800e81c:	0801b270 	.word	0x0801b270
 800e820:	461a      	mov	r2, r3
 800e822:	4b4b      	ldr	r3, [pc, #300]	; (800e950 <ProcessReceiveIridium+0x884>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	494b      	ldr	r1, [pc, #300]	; (800e954 <ProcessReceiveIridium+0x888>)
 800e828:	484b      	ldr	r0, [pc, #300]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e82a:	f005 fc31 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e82e:	484a      	ldr	r0, [pc, #296]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e830:	f7f1 fce8 	bl	8000204 <strlen>
 800e834:	4603      	mov	r3, r0
 800e836:	b29a      	uxth	r2, r3
 800e838:	4b48      	ldr	r3, [pc, #288]	; (800e95c <ProcessReceiveIridium+0x890>)
 800e83a:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e83c:	4b48      	ldr	r3, [pc, #288]	; (800e960 <ProcessReceiveIridium+0x894>)
 800e83e:	6818      	ldr	r0, [r3, #0]
 800e840:	2300      	movs	r3, #0
 800e842:	2200      	movs	r2, #0
 800e844:	4945      	ldr	r1, [pc, #276]	; (800e95c <ProcessReceiveIridium+0x890>)
 800e846:	f7fa f8a5 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e84a:	4b46      	ldr	r3, [pc, #280]	; (800e964 <ProcessReceiveIridium+0x898>)
 800e84c:	6818      	ldr	r0, [r3, #0]
 800e84e:	2300      	movs	r3, #0
 800e850:	2200      	movs	r2, #0
 800e852:	4941      	ldr	r1, [pc, #260]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e854:	f7fa f89e 	bl	8008994 <osMessageQueuePut>
	}

	if (strstr(buffer, "CWBPR=")) {
 800e858:	4943      	ldr	r1, [pc, #268]	; (800e968 <ProcessReceiveIridium+0x89c>)
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f005 fc45 	bl	80140ea <strstr>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00c      	beq.n	800e880 <ProcessReceiveIridium+0x7b4>
		counterwaitbpr = parsingdatairidium(buffer, "CWBPR=");
 800e866:	4940      	ldr	r1, [pc, #256]	; (800e968 <ProcessReceiveIridium+0x89c>)
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f88f 	bl	800e98c <parsingdatairidium>
 800e86e:	4603      	mov	r3, r0
 800e870:	b2da      	uxtb	r2, r3
 800e872:	4b3e      	ldr	r3, [pc, #248]	; (800e96c <ProcessReceiveIridium+0x8a0>)
 800e874:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x4F, &counterwaitbpr);
 800e876:	4a3d      	ldr	r2, [pc, #244]	; (800e96c <ProcessReceiveIridium+0x8a0>)
 800e878:	214f      	movs	r1, #79	; 0x4f
 800e87a:	483d      	ldr	r0, [pc, #244]	; (800e970 <ProcessReceiveIridium+0x8a4>)
 800e87c:	f7fd feba 	bl	800c5f4 <write_eeprom_byte>
	}
	if (strstr(buffer, "CWBPR?")) {
 800e880:	493c      	ldr	r1, [pc, #240]	; (800e974 <ProcessReceiveIridium+0x8a8>)
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f005 fc31 	bl	80140ea <strstr>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d020      	beq.n	800e8d0 <ProcessReceiveIridium+0x804>
		//iridium_printf("AT+SBDWT=CWBPR:%u\r\n", counterwaitbpr);
		//IRIDIUM.status = SBDWT;
		memset(replyiridium, 0, sizeof(replyiridium));
 800e88e:	22ff      	movs	r2, #255	; 0xff
 800e890:	2100      	movs	r1, #0
 800e892:	4831      	ldr	r0, [pc, #196]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e894:	f004 fcba 	bl	801320c <memset>
		sprintf(replyiridium, "CWBPR: %u\r\n", counterwaitbpr);
 800e898:	4b34      	ldr	r3, [pc, #208]	; (800e96c <ProcessReceiveIridium+0x8a0>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	461a      	mov	r2, r3
 800e89e:	4936      	ldr	r1, [pc, #216]	; (800e978 <ProcessReceiveIridium+0x8ac>)
 800e8a0:	482d      	ldr	r0, [pc, #180]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e8a2:	f005 fbf5 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e8a6:	482c      	ldr	r0, [pc, #176]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e8a8:	f7f1 fcac 	bl	8000204 <strlen>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <ProcessReceiveIridium+0x890>)
 800e8b2:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e8b4:	4b2a      	ldr	r3, [pc, #168]	; (800e960 <ProcessReceiveIridium+0x894>)
 800e8b6:	6818      	ldr	r0, [r3, #0]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	4927      	ldr	r1, [pc, #156]	; (800e95c <ProcessReceiveIridium+0x890>)
 800e8be:	f7fa f869 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e8c2:	4b28      	ldr	r3, [pc, #160]	; (800e964 <ProcessReceiveIridium+0x898>)
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	4923      	ldr	r1, [pc, #140]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e8cc:	f7fa f862 	bl	8008994 <osMessageQueuePut>
	}
	if (strstr(buffer, "SYNCGPS=")) {
 800e8d0:	492a      	ldr	r1, [pc, #168]	; (800e97c <ProcessReceiveIridium+0x8b0>)
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f005 fc09 	bl	80140ea <strstr>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00c      	beq.n	800e8f8 <ProcessReceiveIridium+0x82c>
		syncgps = parsingdatairidium(buffer, "SYNCGPS=");
 800e8de:	4927      	ldr	r1, [pc, #156]	; (800e97c <ProcessReceiveIridium+0x8b0>)
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f853 	bl	800e98c <parsingdatairidium>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	4b25      	ldr	r3, [pc, #148]	; (800e980 <ProcessReceiveIridium+0x8b4>)
 800e8ec:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x3B, &syncgps);
 800e8ee:	4a24      	ldr	r2, [pc, #144]	; (800e980 <ProcessReceiveIridium+0x8b4>)
 800e8f0:	213b      	movs	r1, #59	; 0x3b
 800e8f2:	481f      	ldr	r0, [pc, #124]	; (800e970 <ProcessReceiveIridium+0x8a4>)
 800e8f4:	f7fd fe7e 	bl	800c5f4 <write_eeprom_byte>
	}
	if (strstr(buffer, "SYNCGPS?")) {
 800e8f8:	4922      	ldr	r1, [pc, #136]	; (800e984 <ProcessReceiveIridium+0x8b8>)
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f005 fbf5 	bl	80140ea <strstr>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d020      	beq.n	800e948 <ProcessReceiveIridium+0x87c>
		//iridium_printf("AT+SBDWT=SYNCGPS:%u\r\n", syncgps);
		//IRIDIUM.status = SBDWT;
		memset(replyiridium, 0, sizeof(replyiridium));
 800e906:	22ff      	movs	r2, #255	; 0xff
 800e908:	2100      	movs	r1, #0
 800e90a:	4813      	ldr	r0, [pc, #76]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e90c:	f004 fc7e 	bl	801320c <memset>
		sprintf(replyiridium, "SYNCGPS: %u\r\n", syncgps);
 800e910:	4b1b      	ldr	r3, [pc, #108]	; (800e980 <ProcessReceiveIridium+0x8b4>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	461a      	mov	r2, r3
 800e916:	491c      	ldr	r1, [pc, #112]	; (800e988 <ProcessReceiveIridium+0x8bc>)
 800e918:	480f      	ldr	r0, [pc, #60]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e91a:	f005 fbb9 	bl	8014090 <siprintf>
		sizedata = strlen(replyiridium);
 800e91e:	480e      	ldr	r0, [pc, #56]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e920:	f7f1 fc70 	bl	8000204 <strlen>
 800e924:	4603      	mov	r3, r0
 800e926:	b29a      	uxth	r2, r3
 800e928:	4b0c      	ldr	r3, [pc, #48]	; (800e95c <ProcessReceiveIridium+0x890>)
 800e92a:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800e92c:	4b0c      	ldr	r3, [pc, #48]	; (800e960 <ProcessReceiveIridium+0x894>)
 800e92e:	6818      	ldr	r0, [r3, #0]
 800e930:	2300      	movs	r3, #0
 800e932:	2200      	movs	r2, #0
 800e934:	4909      	ldr	r1, [pc, #36]	; (800e95c <ProcessReceiveIridium+0x890>)
 800e936:	f7fa f82d 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, replyiridium, 0U, 0U);
 800e93a:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <ProcessReceiveIridium+0x898>)
 800e93c:	6818      	ldr	r0, [r3, #0]
 800e93e:	2300      	movs	r3, #0
 800e940:	2200      	movs	r2, #0
 800e942:	4905      	ldr	r1, [pc, #20]	; (800e958 <ProcessReceiveIridium+0x88c>)
 800e944:	f7fa f826 	bl	8008994 <osMessageQueuePut>
	}
}
 800e948:	bf00      	nop
 800e94a:	37ac      	adds	r7, #172	; 0xac
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd90      	pop	{r4, r7, pc}
 800e950:	2003364c 	.word	0x2003364c
 800e954:	0801b278 	.word	0x0801b278
 800e958:	20031ff4 	.word	0x20031ff4
 800e95c:	20033110 	.word	0x20033110
 800e960:	20033734 	.word	0x20033734
 800e964:	2003355c 	.word	0x2003355c
 800e968:	0801b288 	.word	0x0801b288
 800e96c:	20033460 	.word	0x20033460
 800e970:	20033484 	.word	0x20033484
 800e974:	0801b290 	.word	0x0801b290
 800e978:	0801b298 	.word	0x0801b298
 800e97c:	0801b2a4 	.word	0x0801b2a4
 800e980:	20033327 	.word	0x20033327
 800e984:	0801b2b0 	.word	0x0801b2b0
 800e988:	0801b2bc 	.word	0x0801b2bc

0800e98c <parsingdatairidium>:

uint32_t parsingdatairidium(char *buffer, char *keyword) {
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
	char *data;
	char *str = strstr((char*) buffer, keyword);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f005 fba6 	bl	80140ea <strstr>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	60bb      	str	r3, [r7, #8]
	strtok_r(str, "=", &str);
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f107 0208 	add.w	r2, r7, #8
 800e9a8:	4906      	ldr	r1, [pc, #24]	; (800e9c4 <parsingdatairidium+0x38>)
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f006 fa14 	bl	8014dd8 <strtok_r>
	//data = strtok_r(str, "\r", &str);
	data = str;
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	60fb      	str	r3, [r7, #12]
	return atoi(data);
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f004 fbe1 	bl	801317c <atoi>
 800e9ba:	4603      	mov	r3, r0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	0801b26c 	.word	0x0801b26c

0800e9c8 <setgreenLED>:
 */

#include "TEWSled.h"
#include "parameterTEWS.h"

void setgreenLED(void){
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOE, LED_Pin, 1);
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9d2:	4802      	ldr	r0, [pc, #8]	; (800e9dc <setgreenLED+0x14>)
 800e9d4:	f7f3 fadc 	bl	8001f90 <HAL_GPIO_WritePin>
}
 800e9d8:	bf00      	nop
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	48001000 	.word	0x48001000

0800e9e0 <resetgreenLED>:

void resetgreenLED(void){
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOE, LED_Pin, 0);
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9ea:	4802      	ldr	r0, [pc, #8]	; (800e9f4 <resetgreenLED+0x14>)
 800e9ec:	f7f3 fad0 	bl	8001f90 <HAL_GPIO_WritePin>
}
 800e9f0:	bf00      	nop
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	48001000 	.word	0x48001000

0800e9f8 <DS3231_GetTime>:
void DS3231_Init(I2C_HandleTypeDef *handle) {
	i2c = handle;
}

bool DS3231_GetTime(_RTC *rtc)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af02      	add	r7, sp, #8
 800e9fe:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800ea00:	2300      	movs	r3, #0
 800ea02:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 800ea04:	2300      	movs	r3, #0
 800ea06:	60bb      	str	r3, [r7, #8]
 800ea08:	f107 030c 	add.w	r3, r7, #12
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	460a      	mov	r2, r1
 800ea10:	801a      	strh	r2, [r3, #0]
 800ea12:	460a      	mov	r2, r1
 800ea14:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(&hi2c2, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800ea16:	f107 020f 	add.w	r2, r7, #15
 800ea1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	2301      	movs	r3, #1
 800ea22:	21d0      	movs	r1, #208	; 0xd0
 800ea24:	4830      	ldr	r0, [pc, #192]	; (800eae8 <DS3231_GetTime+0xf0>)
 800ea26:	f7f3 fc05 	bl	8002234 <HAL_I2C_Master_Transmit>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d001      	beq.n	800ea34 <DS3231_GetTime+0x3c>
 800ea30:	2300      	movs	r3, #0
 800ea32:	e054      	b.n	800eade <DS3231_GetTime+0xe6>
  if(HAL_I2C_Master_Receive(&hi2c2, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800ea34:	f107 0208 	add.w	r2, r7, #8
 800ea38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	2307      	movs	r3, #7
 800ea40:	21d0      	movs	r1, #208	; 0xd0
 800ea42:	4829      	ldr	r0, [pc, #164]	; (800eae8 <DS3231_GetTime+0xf0>)
 800ea44:	f7f3 fcea 	bl	800241c <HAL_I2C_Master_Receive>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <DS3231_GetTime+0x5a>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e045      	b.n	800eade <DS3231_GetTime+0xe6>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 800ea52:	7a3b      	ldrb	r3, [r7, #8]
 800ea54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f000 fc84 	bl	800f368 <B2D>
 800ea60:	4603      	mov	r3, r0
 800ea62:	461a      	mov	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 800ea68:	7a7b      	ldrb	r3, [r7, #9]
 800ea6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 fc79 	bl	800f368 <B2D>
 800ea76:	4603      	mov	r3, r0
 800ea78:	461a      	mov	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 800ea7e:	7abb      	ldrb	r3, [r7, #10]
 800ea80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 fc6e 	bl	800f368 <B2D>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	461a      	mov	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 800ea94:	7afb      	ldrb	r3, [r7, #11]
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 800eaa0:	7b3b      	ldrb	r3, [r7, #12]
 800eaa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 fc5d 	bl	800f368 <B2D>
 800eaae:	4603      	mov	r3, r0
 800eab0:	461a      	mov	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800eab6:	7b7b      	ldrb	r3, [r7, #13]
 800eab8:	f003 031f 	and.w	r3, r3, #31
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	4618      	mov	r0, r3
 800eac0:	f000 fc52 	bl	800f368 <B2D>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 fc4a 	bl	800f368 <B2D>
 800ead4:	4603      	mov	r3, r0
 800ead6:	461a      	mov	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	701a      	strb	r2, [r3, #0]

  return true;
 800eadc:	2301      	movs	r3, #1
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	200334e8 	.word	0x200334e8

0800eaec <DS3231_GetTime_B>:

bool DS3231_GetTime_B(_RTC *rtc)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af02      	add	r7, sp, #8
 800eaf2:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 800eaf8:	2300      	movs	r3, #0
 800eafa:	60bb      	str	r3, [r7, #8]
 800eafc:	f107 030c 	add.w	r3, r7, #12
 800eb00:	2100      	movs	r1, #0
 800eb02:	460a      	mov	r2, r1
 800eb04:	801a      	strh	r2, [r3, #0]
 800eb06:	460a      	mov	r2, r1
 800eb08:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(&hi2c4, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800eb0a:	f107 020f 	add.w	r2, r7, #15
 800eb0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	2301      	movs	r3, #1
 800eb16:	21d0      	movs	r1, #208	; 0xd0
 800eb18:	4830      	ldr	r0, [pc, #192]	; (800ebdc <DS3231_GetTime_B+0xf0>)
 800eb1a:	f7f3 fb8b 	bl	8002234 <HAL_I2C_Master_Transmit>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <DS3231_GetTime_B+0x3c>
 800eb24:	2300      	movs	r3, #0
 800eb26:	e054      	b.n	800ebd2 <DS3231_GetTime_B+0xe6>
  if(HAL_I2C_Master_Receive(&hi2c4, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800eb28:	f107 0208 	add.w	r2, r7, #8
 800eb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	2307      	movs	r3, #7
 800eb34:	21d0      	movs	r1, #208	; 0xd0
 800eb36:	4829      	ldr	r0, [pc, #164]	; (800ebdc <DS3231_GetTime_B+0xf0>)
 800eb38:	f7f3 fc70 	bl	800241c <HAL_I2C_Master_Receive>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <DS3231_GetTime_B+0x5a>
 800eb42:	2300      	movs	r3, #0
 800eb44:	e045      	b.n	800ebd2 <DS3231_GetTime_B+0xe6>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 800eb46:	7a3b      	ldrb	r3, [r7, #8]
 800eb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f000 fc0a 	bl	800f368 <B2D>
 800eb54:	4603      	mov	r3, r0
 800eb56:	461a      	mov	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 800eb5c:	7a7b      	ldrb	r3, [r7, #9]
 800eb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 fbff 	bl	800f368 <B2D>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 800eb72:	7abb      	ldrb	r3, [r7, #10]
 800eb74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f000 fbf4 	bl	800f368 <B2D>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	f003 0307 	and.w	r3, r3, #7
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 800eb94:	7b3b      	ldrb	r3, [r7, #12]
 800eb96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 fbe3 	bl	800f368 <B2D>
 800eba2:	4603      	mov	r3, r0
 800eba4:	461a      	mov	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800ebaa:	7b7b      	ldrb	r3, [r7, #13]
 800ebac:	f003 031f 	and.w	r3, r3, #31
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 fbd8 	bl	800f368 <B2D>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	461a      	mov	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 800ebc0:	7bbb      	ldrb	r3, [r7, #14]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fbd0 	bl	800f368 <B2D>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	701a      	strb	r2, [r3, #0]

  return true;
 800ebd0:	2301      	movs	r3, #1
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	2003340c 	.word	0x2003340c

0800ebe0 <DS3231_SetTime>:
	/* Get date */
	/* Date starts with 1 */
	data->date = unix + 1;
}

bool DS3231_SetTime(_RTC *rtc) {
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af02      	add	r7, sp, #8
 800ebe6:	6078      	str	r0, [r7, #4]
	uint8_t startAddr = DS3231_REG_TIME;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	733b      	strb	r3, [r7, #12]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	799b      	ldrb	r3, [r3, #6]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f000 fbd1 	bl	800f39c <D2B>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	737b      	strb	r3, [r7, #13]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	795b      	ldrb	r3, [r3, #5]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 fbca 	bl	800f39c <D2B>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73bb      	strb	r3, [r7, #14]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	791b      	ldrb	r3, [r3, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 fbc3 	bl	800f39c <D2B>
 800ec16:	4603      	mov	r3, r0
 800ec18:	73fb      	strb	r3, [r7, #15]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	78db      	ldrb	r3, [r3, #3]
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ec1e:	743b      	strb	r3, [r7, #16]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	789b      	ldrb	r3, [r3, #2]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 fbb9 	bl	800f39c <D2B>
 800ec2a:	4603      	mov	r3, r0
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ec2c:	747b      	strb	r3, [r7, #17]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	785b      	ldrb	r3, [r3, #1]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 fbb2 	bl	800f39c <D2B>
 800ec38:	4603      	mov	r3, r0
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ec3a:	74bb      	strb	r3, [r7, #18]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 fbab 	bl	800f39c <D2B>
 800ec46:	4603      	mov	r3, r0
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ec48:	74fb      	strb	r3, [r7, #19]
			rtc->Year) };
	if (HAL_I2C_Master_Transmit(&hi2c2, DS3231_ADDR, buffer, sizeof(buffer),
 800ec4a:	f107 020c 	add.w	r2, r7, #12
 800ec4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	2308      	movs	r3, #8
 800ec56:	21d0      	movs	r1, #208	; 0xd0
 800ec58:	4806      	ldr	r0, [pc, #24]	; (800ec74 <DS3231_SetTime+0x94>)
 800ec5a:	f7f3 faeb 	bl	8002234 <HAL_I2C_Master_Transmit>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d001      	beq.n	800ec68 <DS3231_SetTime+0x88>
			HAL_MAX_DELAY) != HAL_OK)
		return false;
 800ec64:	2300      	movs	r3, #0
 800ec66:	e000      	b.n	800ec6a <DS3231_SetTime+0x8a>

  return true;
 800ec68:	2301      	movs	r3, #1
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	200334e8 	.word	0x200334e8

0800ec78 <DS3231_SetTime_B>:

bool DS3231_SetTime_B(_RTC *rtc) {
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	6078      	str	r0, [r7, #4]
	uint8_t startAddr = DS3231_REG_TIME;
 800ec80:	2300      	movs	r3, #0
 800ec82:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	733b      	strb	r3, [r7, #12]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	799b      	ldrb	r3, [r3, #6]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f000 fb85 	bl	800f39c <D2B>
 800ec92:	4603      	mov	r3, r0
 800ec94:	737b      	strb	r3, [r7, #13]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	795b      	ldrb	r3, [r3, #5]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 fb7e 	bl	800f39c <D2B>
 800eca0:	4603      	mov	r3, r0
 800eca2:	73bb      	strb	r3, [r7, #14]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	791b      	ldrb	r3, [r3, #4]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 fb77 	bl	800f39c <D2B>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	73fb      	strb	r3, [r7, #15]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	78db      	ldrb	r3, [r3, #3]
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ecb6:	743b      	strb	r3, [r7, #16]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	789b      	ldrb	r3, [r3, #2]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 fb6d 	bl	800f39c <D2B>
 800ecc2:	4603      	mov	r3, r0
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ecc4:	747b      	strb	r3, [r7, #17]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	785b      	ldrb	r3, [r3, #1]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 fb66 	bl	800f39c <D2B>
 800ecd0:	4603      	mov	r3, r0
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ecd2:	74bb      	strb	r3, [r7, #18]
			rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 fb5f 	bl	800f39c <D2B>
 800ecde:	4603      	mov	r3, r0
	uint8_t buffer[8] = { startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(
 800ece0:	74fb      	strb	r3, [r7, #19]
			rtc->Year) };
	if (HAL_I2C_Master_Transmit(&hi2c4, DS3231_ADDR, buffer, sizeof(buffer),
 800ece2:	f107 020c 	add.w	r2, r7, #12
 800ece6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	2308      	movs	r3, #8
 800ecee:	21d0      	movs	r1, #208	; 0xd0
 800ecf0:	4806      	ldr	r0, [pc, #24]	; (800ed0c <DS3231_SetTime_B+0x94>)
 800ecf2:	f7f3 fa9f 	bl	8002234 <HAL_I2C_Master_Transmit>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <DS3231_SetTime_B+0x88>
			HAL_MAX_DELAY) != HAL_OK)
		return false;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	e000      	b.n	800ed02 <DS3231_SetTime_B+0x8a>

  return true;
 800ed00:	2301      	movs	r3, #1
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	2003340c 	.word	0x2003340c

0800ed10 <DS3231_ReadTemperature>:

bool DS3231_ReadTemperature(uint32_t *temp)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	6078      	str	r0, [r7, #4]
	float tempf;
  uint8_t startAddr = DS3231_REG_TEMP;
 800ed18:	2311      	movs	r3, #17
 800ed1a:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[2] = {0,};
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	81bb      	strh	r3, [r7, #12]

  if(HAL_I2C_Master_Transmit(&hi2c2, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800ed20:	f107 020f 	add.w	r2, r7, #15
 800ed24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	21d0      	movs	r1, #208	; 0xd0
 800ed2e:	481f      	ldr	r0, [pc, #124]	; (800edac <DS3231_ReadTemperature+0x9c>)
 800ed30:	f7f3 fa80 	bl	8002234 <HAL_I2C_Master_Transmit>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <DS3231_ReadTemperature+0x2e>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	e032      	b.n	800eda4 <DS3231_ReadTemperature+0x94>
  if(HAL_I2C_Master_Receive(&hi2c2, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800ed3e:	f107 020c 	add.w	r2, r7, #12
 800ed42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	2302      	movs	r3, #2
 800ed4a:	21d0      	movs	r1, #208	; 0xd0
 800ed4c:	4817      	ldr	r0, [pc, #92]	; (800edac <DS3231_ReadTemperature+0x9c>)
 800ed4e:	f7f3 fb65 	bl	800241c <HAL_I2C_Master_Receive>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <DS3231_ReadTemperature+0x4c>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	e023      	b.n	800eda4 <DS3231_ReadTemperature+0x94>

  int16_t value = (buffer[0] << 8) | (buffer[1]);
 800ed5c:	7b3b      	ldrb	r3, [r7, #12]
 800ed5e:	021b      	lsls	r3, r3, #8
 800ed60:	b21a      	sxth	r2, r3
 800ed62:	7b7b      	ldrb	r3, [r7, #13]
 800ed64:	b21b      	sxth	r3, r3
 800ed66:	4313      	orrs	r3, r2
 800ed68:	82fb      	strh	r3, [r7, #22]
  value = (value >> 6);
 800ed6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed6e:	119b      	asrs	r3, r3, #6
 800ed70:	82fb      	strh	r3, [r7, #22]

  tempf = (value / 4.0f)*100.0;
 800ed72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed76:	ee07 3a90 	vmov	s15, r3
 800ed7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed7e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ed82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ed86:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800edb0 <DS3231_ReadTemperature+0xa0>
 800ed8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed8e:	edc7 7a04 	vstr	s15, [r7, #16]
  *temp = (uint32_t)tempf;
 800ed92:	edd7 7a04 	vldr	s15, [r7, #16]
 800ed96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed9a:	ee17 2a90 	vmov	r2, s15
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	601a      	str	r2, [r3, #0]
  return true;
 800eda2:	2301      	movs	r3, #1
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	200334e8 	.word	0x200334e8
 800edb0:	42c80000 	.word	0x42c80000

0800edb4 <DS3231_SetAlarm1>:

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 800edb4:	b590      	push	{r4, r7, lr}
 800edb6:	b089      	sub	sp, #36	; 0x24
 800edb8:	af02      	add	r7, sp, #8
 800edba:	4604      	mov	r4, r0
 800edbc:	4608      	mov	r0, r1
 800edbe:	4611      	mov	r1, r2
 800edc0:	461a      	mov	r2, r3
 800edc2:	4623      	mov	r3, r4
 800edc4:	71fb      	strb	r3, [r7, #7]
 800edc6:	4603      	mov	r3, r0
 800edc8:	71bb      	strb	r3, [r7, #6]
 800edca:	460b      	mov	r3, r1
 800edcc:	717b      	strb	r3, [r7, #5]
 800edce:	4613      	mov	r3, r2
 800edd0:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 800edd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 fae0 	bl	800f39c <D2B>
 800eddc:	4603      	mov	r3, r0
 800edde:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 800ede0:	793b      	ldrb	r3, [r7, #4]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f000 fada 	bl	800f39c <D2B>
 800ede8:	4603      	mov	r3, r0
 800edea:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 800edec:	797b      	ldrb	r3, [r7, #5]
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 fad4 	bl	800f39c <D2B>
 800edf4:	4603      	mov	r3, r0
 800edf6:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 800edf8:	79bb      	ldrb	r3, [r7, #6]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f000 face 	bl	800f39c <D2B>
 800ee00:	4603      	mov	r3, r0
 800ee02:	753b      	strb	r3, [r7, #20]

  switch(mode)
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	2b04      	cmp	r3, #4
 800ee08:	d838      	bhi.n	800ee7c <DS3231_SetAlarm1+0xc8>
 800ee0a:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <DS3231_SetAlarm1+0x5c>)
 800ee0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee10:	0800ee7d 	.word	0x0800ee7d
 800ee14:	0800ee25 	.word	0x0800ee25
 800ee18:	0800ee2f 	.word	0x0800ee2f
 800ee1c:	0800ee41 	.word	0x0800ee41
 800ee20:	0800ee5b 	.word	0x0800ee5b
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 800ee24:	7d3b      	ldrb	r3, [r7, #20]
 800ee26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee2a:	753b      	strb	r3, [r7, #20]
    break;
 800ee2c:	e027      	b.n	800ee7e <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 800ee2e:	7d3b      	ldrb	r3, [r7, #20]
 800ee30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee34:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800ee36:	7d7b      	ldrb	r3, [r7, #21]
 800ee38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee3c:	757b      	strb	r3, [r7, #21]
    break;
 800ee3e:	e01e      	b.n	800ee7e <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 800ee40:	7d3b      	ldrb	r3, [r7, #20]
 800ee42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee46:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800ee48:	7d7b      	ldrb	r3, [r7, #21]
 800ee4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee4e:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 800ee50:	7dbb      	ldrb	r3, [r7, #22]
 800ee52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee56:	75bb      	strb	r3, [r7, #22]
    break;
 800ee58:	e011      	b.n	800ee7e <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 800ee5a:	7d3b      	ldrb	r3, [r7, #20]
 800ee5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee60:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800ee62:	7d7b      	ldrb	r3, [r7, #21]
 800ee64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee68:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 800ee6a:	7dbb      	ldrb	r3, [r7, #22]
 800ee6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee70:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
 800ee74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee78:	75fb      	strb	r3, [r7, #23]
    break;
 800ee7a:	e000      	b.n	800ee7e <DS3231_SetAlarm1+0xca>
  default:
    break;
 800ee7c:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 800ee7e:	2307      	movs	r3, #7
 800ee80:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 800ee82:	7cfb      	ldrb	r3, [r7, #19]
 800ee84:	733b      	strb	r3, [r7, #12]
 800ee86:	7dfb      	ldrb	r3, [r7, #23]
 800ee88:	737b      	strb	r3, [r7, #13]
 800ee8a:	7dbb      	ldrb	r3, [r7, #22]
 800ee8c:	73bb      	strb	r3, [r7, #14]
 800ee8e:	7d7b      	ldrb	r3, [r7, #21]
 800ee90:	73fb      	strb	r3, [r7, #15]
 800ee92:	7d3b      	ldrb	r3, [r7, #20]
 800ee94:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(&hi2c2, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800ee96:	f107 020c 	add.w	r2, r7, #12
 800ee9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	2305      	movs	r3, #5
 800eea2:	21d0      	movs	r1, #208	; 0xd0
 800eea4:	4811      	ldr	r0, [pc, #68]	; (800eeec <DS3231_SetAlarm1+0x138>)
 800eea6:	f7f3 f9c5 	bl	8002234 <HAL_I2C_Master_Transmit>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d001      	beq.n	800eeb4 <DS3231_SetAlarm1+0x100>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	e017      	b.n	800eee4 <DS3231_SetAlarm1+0x130>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 800eeb8:	f107 030b 	add.w	r3, r7, #11
 800eebc:	4619      	mov	r1, r3
 800eebe:	200e      	movs	r0, #14
 800eec0:	f000 f9ba 	bl	800f238 <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 800eec4:	7afb      	ldrb	r3, [r7, #11]
 800eec6:	f043 0301 	orr.w	r3, r3, #1
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 800eece:	7afb      	ldrb	r3, [r7, #11]
 800eed0:	f043 0304 	orr.w	r3, r3, #4
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 800eed8:	7afb      	ldrb	r3, [r7, #11]
 800eeda:	4619      	mov	r1, r3
 800eedc:	200e      	movs	r0, #14
 800eede:	f000 f9ff 	bl	800f2e0 <WriteRegister>

  return true;
 800eee2:	2301      	movs	r3, #1
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	371c      	adds	r7, #28
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd90      	pop	{r4, r7, pc}
 800eeec:	200334e8 	.word	0x200334e8

0800eef0 <DS3231_SetAlarm1_B>:

bool DS3231_SetAlarm1_B(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b089      	sub	sp, #36	; 0x24
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	4604      	mov	r4, r0
 800eef8:	4608      	mov	r0, r1
 800eefa:	4611      	mov	r1, r2
 800eefc:	461a      	mov	r2, r3
 800eefe:	4623      	mov	r3, r4
 800ef00:	71fb      	strb	r3, [r7, #7]
 800ef02:	4603      	mov	r3, r0
 800ef04:	71bb      	strb	r3, [r7, #6]
 800ef06:	460b      	mov	r3, r1
 800ef08:	717b      	strb	r3, [r7, #5]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 800ef0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 fa42 	bl	800f39c <D2B>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 800ef1c:	793b      	ldrb	r3, [r7, #4]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f000 fa3c 	bl	800f39c <D2B>
 800ef24:	4603      	mov	r3, r0
 800ef26:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 800ef28:	797b      	ldrb	r3, [r7, #5]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 fa36 	bl	800f39c <D2B>
 800ef30:	4603      	mov	r3, r0
 800ef32:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 800ef34:	79bb      	ldrb	r3, [r7, #6]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f000 fa30 	bl	800f39c <D2B>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	753b      	strb	r3, [r7, #20]

  switch(mode)
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	2b04      	cmp	r3, #4
 800ef44:	d838      	bhi.n	800efb8 <DS3231_SetAlarm1_B+0xc8>
 800ef46:	a201      	add	r2, pc, #4	; (adr r2, 800ef4c <DS3231_SetAlarm1_B+0x5c>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800efb9 	.word	0x0800efb9
 800ef50:	0800ef61 	.word	0x0800ef61
 800ef54:	0800ef6b 	.word	0x0800ef6b
 800ef58:	0800ef7d 	.word	0x0800ef7d
 800ef5c:	0800ef97 	.word	0x0800ef97
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 800ef60:	7d3b      	ldrb	r3, [r7, #20]
 800ef62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef66:	753b      	strb	r3, [r7, #20]
    break;
 800ef68:	e027      	b.n	800efba <DS3231_SetAlarm1_B+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 800ef6a:	7d3b      	ldrb	r3, [r7, #20]
 800ef6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef70:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800ef72:	7d7b      	ldrb	r3, [r7, #21]
 800ef74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef78:	757b      	strb	r3, [r7, #21]
    break;
 800ef7a:	e01e      	b.n	800efba <DS3231_SetAlarm1_B+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 800ef7c:	7d3b      	ldrb	r3, [r7, #20]
 800ef7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef82:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800ef84:	7d7b      	ldrb	r3, [r7, #21]
 800ef86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef8a:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 800ef8c:	7dbb      	ldrb	r3, [r7, #22]
 800ef8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef92:	75bb      	strb	r3, [r7, #22]
    break;
 800ef94:	e011      	b.n	800efba <DS3231_SetAlarm1_B+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 800ef96:	7d3b      	ldrb	r3, [r7, #20]
 800ef98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef9c:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800ef9e:	7d7b      	ldrb	r3, [r7, #21]
 800efa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efa4:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 800efa6:	7dbb      	ldrb	r3, [r7, #22]
 800efa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efac:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 800efae:	7dfb      	ldrb	r3, [r7, #23]
 800efb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800efb4:	75fb      	strb	r3, [r7, #23]
    break;
 800efb6:	e000      	b.n	800efba <DS3231_SetAlarm1_B+0xca>
  default:
    break;
 800efb8:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 800efba:	2307      	movs	r3, #7
 800efbc:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 800efbe:	7cfb      	ldrb	r3, [r7, #19]
 800efc0:	733b      	strb	r3, [r7, #12]
 800efc2:	7dfb      	ldrb	r3, [r7, #23]
 800efc4:	737b      	strb	r3, [r7, #13]
 800efc6:	7dbb      	ldrb	r3, [r7, #22]
 800efc8:	73bb      	strb	r3, [r7, #14]
 800efca:	7d7b      	ldrb	r3, [r7, #21]
 800efcc:	73fb      	strb	r3, [r7, #15]
 800efce:	7d3b      	ldrb	r3, [r7, #20]
 800efd0:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(&hi2c4, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800efd2:	f107 020c 	add.w	r2, r7, #12
 800efd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2305      	movs	r3, #5
 800efde:	21d0      	movs	r1, #208	; 0xd0
 800efe0:	4811      	ldr	r0, [pc, #68]	; (800f028 <DS3231_SetAlarm1_B+0x138>)
 800efe2:	f7f3 f927 	bl	8002234 <HAL_I2C_Master_Transmit>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <DS3231_SetAlarm1_B+0x100>
 800efec:	2300      	movs	r3, #0
 800efee:	e017      	b.n	800f020 <DS3231_SetAlarm1_B+0x130>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 800eff0:	2300      	movs	r3, #0
 800eff2:	72fb      	strb	r3, [r7, #11]
  ReadRegister_B(DS3231_REG_CONTROL, &ctrlReg);
 800eff4:	f107 030b 	add.w	r3, r7, #11
 800eff8:	4619      	mov	r1, r3
 800effa:	200e      	movs	r0, #14
 800effc:	f000 f946 	bl	800f28c <ReadRegister_B>
  ctrlReg |= DS3231_CON_A1IE;
 800f000:	7afb      	ldrb	r3, [r7, #11]
 800f002:	f043 0301 	orr.w	r3, r3, #1
 800f006:	b2db      	uxtb	r3, r3
 800f008:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 800f00a:	7afb      	ldrb	r3, [r7, #11]
 800f00c:	f043 0304 	orr.w	r3, r3, #4
 800f010:	b2db      	uxtb	r3, r3
 800f012:	72fb      	strb	r3, [r7, #11]
  WriteRegister_B(DS3231_REG_CONTROL, ctrlReg);
 800f014:	7afb      	ldrb	r3, [r7, #11]
 800f016:	4619      	mov	r1, r3
 800f018:	200e      	movs	r0, #14
 800f01a:	f000 f983 	bl	800f324 <WriteRegister_B>

  return true;
 800f01e:	2301      	movs	r3, #1
}
 800f020:	4618      	mov	r0, r3
 800f022:	371c      	adds	r7, #28
 800f024:	46bd      	mov	sp, r7
 800f026:	bd90      	pop	{r4, r7, pc}
 800f028:	2003340c 	.word	0x2003340c

0800f02c <DS3231_SetAlarm2_B>:

bool DS3231_SetAlarm2_B(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min)
{
 800f02c:	b590      	push	{r4, r7, lr}
 800f02e:	b089      	sub	sp, #36	; 0x24
 800f030:	af02      	add	r7, sp, #8
 800f032:	4604      	mov	r4, r0
 800f034:	4608      	mov	r0, r1
 800f036:	4611      	mov	r1, r2
 800f038:	461a      	mov	r2, r3
 800f03a:	4623      	mov	r3, r4
 800f03c:	71fb      	strb	r3, [r7, #7]
 800f03e:	4603      	mov	r3, r0
 800f040:	71bb      	strb	r3, [r7, #6]
 800f042:	460b      	mov	r3, r1
 800f044:	717b      	strb	r3, [r7, #5]
 800f046:	4613      	mov	r3, r2
 800f048:	713b      	strb	r3, [r7, #4]
  uint8_t alarmMinute = D2B(min);
 800f04a:	793b      	ldrb	r3, [r7, #4]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f000 f9a5 	bl	800f39c <D2B>
 800f052:	4603      	mov	r3, r0
 800f054:	757b      	strb	r3, [r7, #21]
  uint8_t alarmHour = D2B(hour);
 800f056:	797b      	ldrb	r3, [r7, #5]
 800f058:	4618      	mov	r0, r3
 800f05a:	f000 f99f 	bl	800f39c <D2B>
 800f05e:	4603      	mov	r3, r0
 800f060:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmDate = D2B(date);
 800f062:	79bb      	ldrb	r3, [r7, #6]
 800f064:	4618      	mov	r0, r3
 800f066:	f000 f999 	bl	800f39c <D2B>
 800f06a:	4603      	mov	r3, r0
 800f06c:	75bb      	strb	r3, [r7, #22]

  switch(mode)
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	2b02      	cmp	r3, #2
 800f072:	d00b      	beq.n	800f08c <DS3231_SetAlarm2_B+0x60>
 800f074:	2b02      	cmp	r3, #2
 800f076:	dc12      	bgt.n	800f09e <DS3231_SetAlarm2_B+0x72>
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d012      	beq.n	800f0a2 <DS3231_SetAlarm2_B+0x76>
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d000      	beq.n	800f082 <DS3231_SetAlarm2_B+0x56>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
    alarmHour |= 0x80;
    break;
  default:
    break;
 800f080:	e00d      	b.n	800f09e <DS3231_SetAlarm2_B+0x72>
    alarmDate |= 0x80;
 800f082:	7dbb      	ldrb	r3, [r7, #22]
 800f084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f088:	75bb      	strb	r3, [r7, #22]
    break;
 800f08a:	e00b      	b.n	800f0a4 <DS3231_SetAlarm2_B+0x78>
    alarmDate |= 0x80;
 800f08c:	7dbb      	ldrb	r3, [r7, #22]
 800f08e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f092:	75bb      	strb	r3, [r7, #22]
    alarmHour |= 0x80;
 800f094:	7dfb      	ldrb	r3, [r7, #23]
 800f096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f09a:	75fb      	strb	r3, [r7, #23]
    break;
 800f09c:	e002      	b.n	800f0a4 <DS3231_SetAlarm2_B+0x78>
    break;
 800f09e:	bf00      	nop
 800f0a0:	e000      	b.n	800f0a4 <DS3231_SetAlarm2_B+0x78>
    break;
 800f0a2:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM2;
 800f0a4:	230b      	movs	r3, #11
 800f0a6:	753b      	strb	r3, [r7, #20]
  uint8_t buffer[4] = {startAddr, alarmMinute, alarmHour, alarmDate};
 800f0a8:	7d3b      	ldrb	r3, [r7, #20]
 800f0aa:	743b      	strb	r3, [r7, #16]
 800f0ac:	7d7b      	ldrb	r3, [r7, #21]
 800f0ae:	747b      	strb	r3, [r7, #17]
 800f0b0:	7dfb      	ldrb	r3, [r7, #23]
 800f0b2:	74bb      	strb	r3, [r7, #18]
 800f0b4:	7dbb      	ldrb	r3, [r7, #22]
 800f0b6:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(&hi2c4, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800f0b8:	f107 0210 	add.w	r2, r7, #16
 800f0bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	2304      	movs	r3, #4
 800f0c4:	21d0      	movs	r1, #208	; 0xd0
 800f0c6:	4812      	ldr	r0, [pc, #72]	; (800f110 <DS3231_SetAlarm2_B+0xe4>)
 800f0c8:	f7f3 f8b4 	bl	8002234 <HAL_I2C_Master_Transmit>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <DS3231_SetAlarm2_B+0xaa>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e017      	b.n	800f106 <DS3231_SetAlarm2_B+0xda>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]
  ReadRegister_B(DS3231_REG_CONTROL, &ctrlReg);
 800f0da:	f107 030f 	add.w	r3, r7, #15
 800f0de:	4619      	mov	r1, r3
 800f0e0:	200e      	movs	r0, #14
 800f0e2:	f000 f8d3 	bl	800f28c <ReadRegister_B>
  ctrlReg |= DS3231_CON_A2IE;
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	f043 0302 	orr.w	r3, r3, #2
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	73fb      	strb	r3, [r7, #15]
  ctrlReg |= DS3231_CON_INTCN;
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	f043 0304 	orr.w	r3, r3, #4
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	73fb      	strb	r3, [r7, #15]
  WriteRegister_B(DS3231_REG_CONTROL, ctrlReg);
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	200e      	movs	r0, #14
 800f100:	f000 f910 	bl	800f324 <WriteRegister_B>

  return true;
 800f104:	2301      	movs	r3, #1
}
 800f106:	4618      	mov	r0, r3
 800f108:	371c      	adds	r7, #28
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd90      	pop	{r4, r7, pc}
 800f10e:	bf00      	nop
 800f110:	2003340c 	.word	0x2003340c

0800f114 <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 800f11a:	1dfb      	adds	r3, r7, #7
 800f11c:	4619      	mov	r1, r3
 800f11e:	200e      	movs	r0, #14
 800f120:	f000 f88a 	bl	800f238 <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 800f124:	79fb      	ldrb	r3, [r7, #7]
 800f126:	f023 0301 	bic.w	r3, r3, #1
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	4619      	mov	r1, r3
 800f132:	200e      	movs	r0, #14
 800f134:	f000 f8d4 	bl	800f2e0 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 800f138:	1dbb      	adds	r3, r7, #6
 800f13a:	4619      	mov	r1, r3
 800f13c:	200f      	movs	r0, #15
 800f13e:	f000 f87b 	bl	800f238 <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 800f142:	79bb      	ldrb	r3, [r7, #6]
 800f144:	f023 0301 	bic.w	r3, r3, #1
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 800f14c:	79bb      	ldrb	r3, [r7, #6]
 800f14e:	4619      	mov	r1, r3
 800f150:	200f      	movs	r0, #15
 800f152:	f000 f8c5 	bl	800f2e0 <WriteRegister>

  return true;
 800f156:	2301      	movs	r3, #1
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <DS3231_ClearAlarm1_B>:

bool DS3231_ClearAlarm1_B()
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister_B(DS3231_REG_CONTROL, &ctrlReg);
 800f166:	1dfb      	adds	r3, r7, #7
 800f168:	4619      	mov	r1, r3
 800f16a:	200e      	movs	r0, #14
 800f16c:	f000 f88e 	bl	800f28c <ReadRegister_B>
  ctrlReg &= ~DS3231_CON_A1IE;
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	f023 0301 	bic.w	r3, r3, #1
 800f176:	b2db      	uxtb	r3, r3
 800f178:	71fb      	strb	r3, [r7, #7]
  WriteRegister_B(DS3231_REG_CONTROL, ctrlReg);
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	4619      	mov	r1, r3
 800f17e:	200e      	movs	r0, #14
 800f180:	f000 f8d0 	bl	800f324 <WriteRegister_B>

  /* Clear Status Register */
  ReadRegister_B(DS3231_REG_STATUS, &statusReg);
 800f184:	1dbb      	adds	r3, r7, #6
 800f186:	4619      	mov	r1, r3
 800f188:	200f      	movs	r0, #15
 800f18a:	f000 f87f 	bl	800f28c <ReadRegister_B>
  statusReg &= ~DS3231_STA_A1F;
 800f18e:	79bb      	ldrb	r3, [r7, #6]
 800f190:	f023 0301 	bic.w	r3, r3, #1
 800f194:	b2db      	uxtb	r3, r3
 800f196:	71bb      	strb	r3, [r7, #6]
  WriteRegister_B(DS3231_REG_STATUS, statusReg);
 800f198:	79bb      	ldrb	r3, [r7, #6]
 800f19a:	4619      	mov	r1, r3
 800f19c:	200f      	movs	r0, #15
 800f19e:	f000 f8c1 	bl	800f324 <WriteRegister_B>

  return true;
 800f1a2:	2301      	movs	r3, #1
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <DS3231_ResetAlarm1_A>:

  return true;
}

bool DS3231_ResetAlarm1_A()
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
  uint8_t statusReg;
  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 800f1b2:	1dfb      	adds	r3, r7, #7
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	200f      	movs	r0, #15
 800f1b8:	f000 f83e 	bl	800f238 <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 800f1bc:	79fb      	ldrb	r3, [r7, #7]
 800f1be:	f023 0301 	bic.w	r3, r3, #1
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 800f1c6:	79fb      	ldrb	r3, [r7, #7]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	200f      	movs	r0, #15
 800f1cc:	f000 f888 	bl	800f2e0 <WriteRegister>

  return true;
 800f1d0:	2301      	movs	r3, #1
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <DS3231_ResetAlarm1_B>:

bool DS3231_ResetAlarm1_B()
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
  uint8_t statusReg;
  /* Clear Status Register */
  ReadRegister_B(DS3231_REG_STATUS, &statusReg);
 800f1e0:	1dfb      	adds	r3, r7, #7
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	200f      	movs	r0, #15
 800f1e6:	f000 f851 	bl	800f28c <ReadRegister_B>
  statusReg &= ~DS3231_STA_A1F;
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	f023 0301 	bic.w	r3, r3, #1
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	71fb      	strb	r3, [r7, #7]
  WriteRegister_B(DS3231_REG_STATUS, statusReg);
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	200f      	movs	r0, #15
 800f1fa:	f000 f893 	bl	800f324 <WriteRegister_B>

  return true;
 800f1fe:	2301      	movs	r3, #1
}
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <DS3231_ResetAlarm2_B>:

bool DS3231_ResetAlarm2_B()
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
  uint8_t statusReg;
  /* Clear Status Register */
  ReadRegister_B(DS3231_REG_STATUS, &statusReg);
 800f20e:	1dfb      	adds	r3, r7, #7
 800f210:	4619      	mov	r1, r3
 800f212:	200f      	movs	r0, #15
 800f214:	f000 f83a 	bl	800f28c <ReadRegister_B>
  statusReg &= ~DS3231_STA_A2F;
 800f218:	79fb      	ldrb	r3, [r7, #7]
 800f21a:	f023 0302 	bic.w	r3, r3, #2
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	71fb      	strb	r3, [r7, #7]
  WriteRegister_B(DS3231_REG_STATUS, statusReg);
 800f222:	79fb      	ldrb	r3, [r7, #7]
 800f224:	4619      	mov	r1, r3
 800f226:	200f      	movs	r0, #15
 800f228:	f000 f87c 	bl	800f324 <WriteRegister_B>

  return true;
 800f22c:	2301      	movs	r3, #1
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
	...

0800f238 <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af02      	add	r7, sp, #8
 800f23e:	4603      	mov	r3, r0
 800f240:	6039      	str	r1, [r7, #0]
 800f242:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(&hi2c2, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800f244:	1dfa      	adds	r2, r7, #7
 800f246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	2301      	movs	r3, #1
 800f24e:	21d0      	movs	r1, #208	; 0xd0
 800f250:	480d      	ldr	r0, [pc, #52]	; (800f288 <ReadRegister+0x50>)
 800f252:	f7f2 ffef 	bl	8002234 <HAL_I2C_Master_Transmit>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d001      	beq.n	800f260 <ReadRegister+0x28>
 800f25c:	2300      	movs	r3, #0
 800f25e:	e00e      	b.n	800f27e <ReadRegister+0x46>
  if(HAL_I2C_Master_Receive(&hi2c2, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800f260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	2301      	movs	r3, #1
 800f268:	683a      	ldr	r2, [r7, #0]
 800f26a:	21d0      	movs	r1, #208	; 0xd0
 800f26c:	4806      	ldr	r0, [pc, #24]	; (800f288 <ReadRegister+0x50>)
 800f26e:	f7f3 f8d5 	bl	800241c <HAL_I2C_Master_Receive>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <ReadRegister+0x44>
 800f278:	2300      	movs	r3, #0
 800f27a:	e000      	b.n	800f27e <ReadRegister+0x46>

  return true;
 800f27c:	2301      	movs	r3, #1
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	200334e8 	.word	0x200334e8

0800f28c <ReadRegister_B>:

bool ReadRegister_B(uint8_t regAddr, uint8_t *value)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af02      	add	r7, sp, #8
 800f292:	4603      	mov	r3, r0
 800f294:	6039      	str	r1, [r7, #0]
 800f296:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(&hi2c4, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800f298:	1dfa      	adds	r2, r7, #7
 800f29a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	21d0      	movs	r1, #208	; 0xd0
 800f2a4:	480d      	ldr	r0, [pc, #52]	; (800f2dc <ReadRegister_B+0x50>)
 800f2a6:	f7f2 ffc5 	bl	8002234 <HAL_I2C_Master_Transmit>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <ReadRegister_B+0x28>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	e00e      	b.n	800f2d2 <ReadRegister_B+0x46>
  if(HAL_I2C_Master_Receive(&hi2c4, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800f2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	21d0      	movs	r1, #208	; 0xd0
 800f2c0:	4806      	ldr	r0, [pc, #24]	; (800f2dc <ReadRegister_B+0x50>)
 800f2c2:	f7f3 f8ab 	bl	800241c <HAL_I2C_Master_Receive>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <ReadRegister_B+0x44>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e000      	b.n	800f2d2 <ReadRegister_B+0x46>

  return true;
 800f2d0:	2301      	movs	r3, #1
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	2003340c 	.word	0x2003340c

0800f2e0 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af02      	add	r7, sp, #8
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	460a      	mov	r2, r1
 800f2ea:	71fb      	strb	r3, [r7, #7]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 800f2f0:	79fb      	ldrb	r3, [r7, #7]
 800f2f2:	733b      	strb	r3, [r7, #12]
 800f2f4:	79bb      	ldrb	r3, [r7, #6]
 800f2f6:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(&hi2c2, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800f2f8:	f107 020c 	add.w	r2, r7, #12
 800f2fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	2302      	movs	r3, #2
 800f304:	21d0      	movs	r1, #208	; 0xd0
 800f306:	4806      	ldr	r0, [pc, #24]	; (800f320 <WriteRegister+0x40>)
 800f308:	f7f2 ff94 	bl	8002234 <HAL_I2C_Master_Transmit>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d001      	beq.n	800f316 <WriteRegister+0x36>
 800f312:	2300      	movs	r3, #0
 800f314:	e000      	b.n	800f318 <WriteRegister+0x38>

  return true;
 800f316:	2301      	movs	r3, #1
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	200334e8 	.word	0x200334e8

0800f324 <WriteRegister_B>:

bool WriteRegister_B(uint8_t regAddr, uint8_t value)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b086      	sub	sp, #24
 800f328:	af02      	add	r7, sp, #8
 800f32a:	4603      	mov	r3, r0
 800f32c:	460a      	mov	r2, r1
 800f32e:	71fb      	strb	r3, [r7, #7]
 800f330:	4613      	mov	r3, r2
 800f332:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	733b      	strb	r3, [r7, #12]
 800f338:	79bb      	ldrb	r3, [r7, #6]
 800f33a:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(&hi2c4, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800f33c:	f107 020c 	add.w	r2, r7, #12
 800f340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	2302      	movs	r3, #2
 800f348:	21d0      	movs	r1, #208	; 0xd0
 800f34a:	4806      	ldr	r0, [pc, #24]	; (800f364 <WriteRegister_B+0x40>)
 800f34c:	f7f2 ff72 	bl	8002234 <HAL_I2C_Master_Transmit>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <WriteRegister_B+0x36>
 800f356:	2300      	movs	r3, #0
 800f358:	e000      	b.n	800f35c <WriteRegister_B+0x38>

  return true;
 800f35a:	2301      	movs	r3, #1
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	2003340c 	.word	0x2003340c

0800f368 <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	091b      	lsrs	r3, r3, #4
 800f376:	b2db      	uxtb	r3, r3
 800f378:	461a      	mov	r2, r3
 800f37a:	0092      	lsls	r2, r2, #2
 800f37c:	4413      	add	r3, r2
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	b2da      	uxtb	r2, r3
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	f003 030f 	and.w	r3, r3, #15
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	4413      	add	r3, r2
 800f38c:	b2db      	uxtb	r3, r3
}
 800f38e:	4618      	mov	r0, r3
 800f390:	370c      	adds	r7, #12
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
	...

0800f39c <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 800f3a6:	79fb      	ldrb	r3, [r7, #7]
 800f3a8:	4a0d      	ldr	r2, [pc, #52]	; (800f3e0 <D2B+0x44>)
 800f3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f3ae:	08db      	lsrs	r3, r3, #3
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	011b      	lsls	r3, r3, #4
 800f3b4:	b258      	sxtb	r0, r3
 800f3b6:	79fa      	ldrb	r2, [r7, #7]
 800f3b8:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <D2B+0x44>)
 800f3ba:	fba3 1302 	umull	r1, r3, r3, r2
 800f3be:	08d9      	lsrs	r1, r3, #3
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	440b      	add	r3, r1
 800f3c6:	005b      	lsls	r3, r3, #1
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	b25b      	sxtb	r3, r3
 800f3ce:	4303      	orrs	r3, r0
 800f3d0:	b25b      	sxtb	r3, r3
 800f3d2:	b2db      	uxtb	r3, r3
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	cccccccd 	.word	0xcccccccd

0800f3e4 <USB_Init>:
extern IRIDIUM_t IRIDIUM;
extern RTC_TimeTypeDef stimeststuctureget;
extern _RTC rtcTEWS;
extern _RTC rtcTEWS2;

void USB_Init(void) {
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	2046      	movs	r0, #70	; 0x46
 800f3ee:	f7f1 ff5d 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800f3f2:	2046      	movs	r0, #70	; 0x46
 800f3f4:	f7f1 ff86 	bl	8001304 <HAL_NVIC_EnableIRQ>
	USB.rxIndex = 0;
 800f3f8:	4b05      	ldr	r3, [pc, #20]	; (800f410 <USB_Init+0x2c>)
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_DMA(&_UNI_USART, &USB.rxTmp, 1);
 800f400:	2201      	movs	r2, #1
 800f402:	4904      	ldr	r1, [pc, #16]	; (800f414 <USB_Init+0x30>)
 800f404:	4804      	ldr	r0, [pc, #16]	; (800f418 <USB_Init+0x34>)
 800f406:	f7f7 fe01 	bl	800700c <HAL_UART_Receive_DMA>
}
 800f40a:	bf00      	nop
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	20033118 	.word	0x20033118
 800f414:	2003331a 	.word	0x2003331a
 800f418:	20033564 	.word	0x20033564

0800f41c <USB_Callback>:

void USB_Callback(void) {
 800f41c:	b580      	push	{r7, lr}
 800f41e:	af00      	add	r7, sp, #0
	if (USB.rxIndex < sizeof(USB.rxBuffer) - 2) {
 800f420:	4b1c      	ldr	r3, [pc, #112]	; (800f494 <USB_Callback+0x78>)
 800f422:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800f426:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800f42a:	d210      	bcs.n	800f44e <USB_Callback+0x32>
		USB.rxBuffer[USB.rxIndex] = USB.rxTmp;
 800f42c:	4b19      	ldr	r3, [pc, #100]	; (800f494 <USB_Callback+0x78>)
 800f42e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800f432:	461a      	mov	r2, r3
 800f434:	4b17      	ldr	r3, [pc, #92]	; (800f494 <USB_Callback+0x78>)
 800f436:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 800f43a:	4b16      	ldr	r3, [pc, #88]	; (800f494 <USB_Callback+0x78>)
 800f43c:	5499      	strb	r1, [r3, r2]
		USB.rxIndex++;
 800f43e:	4b15      	ldr	r3, [pc, #84]	; (800f494 <USB_Callback+0x78>)
 800f440:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800f444:	3301      	adds	r3, #1
 800f446:	b29a      	uxth	r2, r3
 800f448:	4b12      	ldr	r3, [pc, #72]	; (800f494 <USB_Callback+0x78>)
 800f44a:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	if (USB.rxTmp == 13 || USB.rxTmp == 10) {
 800f44e:	4b11      	ldr	r3, [pc, #68]	; (800f494 <USB_Callback+0x78>)
 800f450:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f454:	2b0d      	cmp	r3, #13
 800f456:	d004      	beq.n	800f462 <USB_Callback+0x46>
 800f458:	4b0e      	ldr	r3, [pc, #56]	; (800f494 <USB_Callback+0x78>)
 800f45a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f45e:	2b0a      	cmp	r3, #10
 800f460:	d110      	bne.n	800f484 <USB_Callback+0x68>
		osMessageQueuePut(usbQueueHandle, &USB.rxBuffer, 0U, 0U);
 800f462:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <USB_Callback+0x7c>)
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	2300      	movs	r3, #0
 800f468:	2200      	movs	r2, #0
 800f46a:	490a      	ldr	r1, [pc, #40]	; (800f494 <USB_Callback+0x78>)
 800f46c:	f7f9 fa92 	bl	8008994 <osMessageQueuePut>
		memset(USB.rxBuffer, 0, sizeof(USB.rxBuffer));
 800f470:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f474:	2100      	movs	r1, #0
 800f476:	4807      	ldr	r0, [pc, #28]	; (800f494 <USB_Callback+0x78>)
 800f478:	f003 fec8 	bl	801320c <memset>
		USB.rxIndex = 0;
 800f47c:	4b05      	ldr	r3, [pc, #20]	; (800f494 <USB_Callback+0x78>)
 800f47e:	2200      	movs	r2, #0
 800f480:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_DMA(&_UNI_USART, &USB.rxTmp, 1);
 800f484:	2201      	movs	r2, #1
 800f486:	4905      	ldr	r1, [pc, #20]	; (800f49c <USB_Callback+0x80>)
 800f488:	4805      	ldr	r0, [pc, #20]	; (800f4a0 <USB_Callback+0x84>)
 800f48a:	f7f7 fdbf 	bl	800700c <HAL_UART_Receive_DMA>
}
 800f48e:	bf00      	nop
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	20033118 	.word	0x20033118
 800f498:	20033898 	.word	0x20033898
 800f49c:	2003331a 	.word	0x2003331a
 800f4a0:	20033564 	.word	0x20033564

0800f4a4 <USB_Process>:

void USB_Process(char *buffer) {
 800f4a4:	b5b0      	push	{r4, r5, r7, lr}
 800f4a6:	b0ec      	sub	sp, #432	; 0x1b0
 800f4a8:	af04      	add	r7, sp, #16
 800f4aa:	1d3b      	adds	r3, r7, #4
 800f4ac:	6018      	str	r0, [r3, #0]

	if (strstr((char*) buffer, "TEWS+VERSION?")) {
 800f4ae:	1d3b      	adds	r3, r7, #4
 800f4b0:	499f      	ldr	r1, [pc, #636]	; (800f730 <USB_Process+0x28c>)
 800f4b2:	6818      	ldr	r0, [r3, #0]
 800f4b4:	f004 fe19 	bl	80140ea <strstr>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <USB_Process+0x22>
		usb_universal_printf("VERSION: %s\r\n", FIRMWARE);
 800f4be:	499d      	ldr	r1, [pc, #628]	; (800f734 <USB_Process+0x290>)
 800f4c0:	489d      	ldr	r0, [pc, #628]	; (800f738 <USB_Process+0x294>)
 800f4c2:	f003 f913 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+SN?")) {
 800f4c6:	1d3b      	adds	r3, r7, #4
 800f4c8:	499c      	ldr	r1, [pc, #624]	; (800f73c <USB_Process+0x298>)
 800f4ca:	6818      	ldr	r0, [r3, #0]
 800f4cc:	f004 fe0d 	bl	80140ea <strstr>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <USB_Process+0x3a>
		usb_universal_printf("SN: %u\r\n", SERIALNUMBER);
 800f4d6:	499a      	ldr	r1, [pc, #616]	; (800f740 <USB_Process+0x29c>)
 800f4d8:	489a      	ldr	r0, [pc, #616]	; (800f744 <USB_Process+0x2a0>)
 800f4da:	f003 f907 	bl	80126ec <usb_universal_printf>
	}

	/*
	 * Reset Microcontroller
	 */
	if (strstr((char*) buffer, "TEWS+REBOOT")) {
 800f4de:	1d3b      	adds	r3, r7, #4
 800f4e0:	4999      	ldr	r1, [pc, #612]	; (800f748 <USB_Process+0x2a4>)
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	f004 fe01 	bl	80140ea <strstr>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d006      	beq.n	800f4fc <USB_Process+0x58>
		HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	2102      	movs	r1, #2
 800f4f2:	4896      	ldr	r0, [pc, #600]	; (800f74c <USB_Process+0x2a8>)
 800f4f4:	f7f2 fd4c 	bl	8001f90 <HAL_GPIO_WritePin>
		HAL_NVIC_SystemReset();
 800f4f8:	f7f1 ff1c 	bl	8001334 <HAL_NVIC_SystemReset>
	}


	if (strstr((char*) buffer, "TEWS+RPERIOD=")) {
 800f4fc:	1d3b      	adds	r3, r7, #4
 800f4fe:	4994      	ldr	r1, [pc, #592]	; (800f750 <USB_Process+0x2ac>)
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	f004 fdf2 	bl	80140ea <strstr>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d011      	beq.n	800f530 <USB_Process+0x8c>
		periodsenddata = parsingdatausb(buffer, "TEWS+RPERIOD=");
 800f50c:	1d3b      	adds	r3, r7, #4
 800f50e:	4990      	ldr	r1, [pc, #576]	; (800f750 <USB_Process+0x2ac>)
 800f510:	6818      	ldr	r0, [r3, #0]
 800f512:	f001 fbbd 	bl	8010c90 <parsingdatausb>
 800f516:	4603      	mov	r3, r0
 800f518:	4a8e      	ldr	r2, [pc, #568]	; (800f754 <USB_Process+0x2b0>)
 800f51a:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x14, periodsenddata);
 800f51c:	4b8d      	ldr	r3, [pc, #564]	; (800f754 <USB_Process+0x2b0>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	461a      	mov	r2, r3
 800f522:	2114      	movs	r1, #20
 800f524:	488c      	ldr	r0, [pc, #560]	; (800f758 <USB_Process+0x2b4>)
 800f526:	f7fd f8f7 	bl	800c718 <write_eeprom_union>
		usb_universal_printf("OK\r\n");
 800f52a:	488c      	ldr	r0, [pc, #560]	; (800f75c <USB_Process+0x2b8>)
 800f52c:	f003 f8de 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+RPERIOD?")) {
 800f530:	1d3b      	adds	r3, r7, #4
 800f532:	498b      	ldr	r1, [pc, #556]	; (800f760 <USB_Process+0x2bc>)
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	f004 fdd8 	bl	80140ea <strstr>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d005      	beq.n	800f54c <USB_Process+0xa8>
		usb_universal_printf("RPERIOD: %u\r\n", periodsenddata);
 800f540:	4b84      	ldr	r3, [pc, #528]	; (800f754 <USB_Process+0x2b0>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4619      	mov	r1, r3
 800f546:	4887      	ldr	r0, [pc, #540]	; (800f764 <USB_Process+0x2c0>)
 800f548:	f003 f8d0 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+TPERIOD=")) {
 800f54c:	1d3b      	adds	r3, r7, #4
 800f54e:	4986      	ldr	r1, [pc, #536]	; (800f768 <USB_Process+0x2c4>)
 800f550:	6818      	ldr	r0, [r3, #0]
 800f552:	f004 fdca 	bl	80140ea <strstr>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d011      	beq.n	800f580 <USB_Process+0xdc>
		periodsendloc = parsingdatausb(buffer, "TEWS+TPERIOD=");
 800f55c:	1d3b      	adds	r3, r7, #4
 800f55e:	4982      	ldr	r1, [pc, #520]	; (800f768 <USB_Process+0x2c4>)
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f001 fb95 	bl	8010c90 <parsingdatausb>
 800f566:	4603      	mov	r3, r0
 800f568:	4a80      	ldr	r2, [pc, #512]	; (800f76c <USB_Process+0x2c8>)
 800f56a:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x18, periodsendloc);
 800f56c:	4b7f      	ldr	r3, [pc, #508]	; (800f76c <USB_Process+0x2c8>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	461a      	mov	r2, r3
 800f572:	2118      	movs	r1, #24
 800f574:	4878      	ldr	r0, [pc, #480]	; (800f758 <USB_Process+0x2b4>)
 800f576:	f7fd f8cf 	bl	800c718 <write_eeprom_union>
		usb_universal_printf("OK\r\n");
 800f57a:	4878      	ldr	r0, [pc, #480]	; (800f75c <USB_Process+0x2b8>)
 800f57c:	f003 f8b6 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+TPERIOD?")) {
 800f580:	1d3b      	adds	r3, r7, #4
 800f582:	497b      	ldr	r1, [pc, #492]	; (800f770 <USB_Process+0x2cc>)
 800f584:	6818      	ldr	r0, [r3, #0]
 800f586:	f004 fdb0 	bl	80140ea <strstr>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00d      	beq.n	800f5ac <USB_Process+0x108>
		char str[128];
		sprintf(str,"TPERIOD:  %lu\r\n", periodsendloc);
 800f590:	4b76      	ldr	r3, [pc, #472]	; (800f76c <USB_Process+0x2c8>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	f107 0308 	add.w	r3, r7, #8
 800f598:	4976      	ldr	r1, [pc, #472]	; (800f774 <USB_Process+0x2d0>)
 800f59a:	4618      	mov	r0, r3
 800f59c:	f004 fd78 	bl	8014090 <siprintf>
		//uint16_t sizedata = strlen(str);
		//osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
		//osMessageQueuePut(iridiumsendQueueHandle, str, 0U, 0U);
		usb_universal_printf("GPS TRANSMITER PERIODE: %lu\r\n", periodsendloc);
 800f5a0:	4b72      	ldr	r3, [pc, #456]	; (800f76c <USB_Process+0x2c8>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4874      	ldr	r0, [pc, #464]	; (800f778 <USB_Process+0x2d4>)
 800f5a8:	f003 f8a0 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+DIST=")) {
 800f5ac:	1d3b      	adds	r3, r7, #4
 800f5ae:	4973      	ldr	r1, [pc, #460]	; (800f77c <USB_Process+0x2d8>)
 800f5b0:	6818      	ldr	r0, [r3, #0]
 800f5b2:	f004 fd9a 	bl	80140ea <strstr>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d011      	beq.n	800f5e0 <USB_Process+0x13c>
		distancedrifting = parsingdatausb(buffer, "TEWS+DIST=");
 800f5bc:	1d3b      	adds	r3, r7, #4
 800f5be:	496f      	ldr	r1, [pc, #444]	; (800f77c <USB_Process+0x2d8>)
 800f5c0:	6818      	ldr	r0, [r3, #0]
 800f5c2:	f001 fb65 	bl	8010c90 <parsingdatausb>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	4a6d      	ldr	r2, [pc, #436]	; (800f780 <USB_Process+0x2dc>)
 800f5ca:	6013      	str	r3, [r2, #0]
		write_eeprom_union(&hi2c1, 0x24, distancedrifting);
 800f5cc:	4b6c      	ldr	r3, [pc, #432]	; (800f780 <USB_Process+0x2dc>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	2124      	movs	r1, #36	; 0x24
 800f5d4:	4860      	ldr	r0, [pc, #384]	; (800f758 <USB_Process+0x2b4>)
 800f5d6:	f7fd f89f 	bl	800c718 <write_eeprom_union>
		usb_universal_printf("OK\r\n");
 800f5da:	4860      	ldr	r0, [pc, #384]	; (800f75c <USB_Process+0x2b8>)
 800f5dc:	f003 f886 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+DIST?")) {
 800f5e0:	1d3b      	adds	r3, r7, #4
 800f5e2:	4968      	ldr	r1, [pc, #416]	; (800f784 <USB_Process+0x2e0>)
 800f5e4:	6818      	ldr	r0, [r3, #0]
 800f5e6:	f004 fd80 	bl	80140ea <strstr>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d005      	beq.n	800f5fc <USB_Process+0x158>
		usb_universal_printf("DISTANCE DRIFTING: %lu\r\n", distancedrifting);
 800f5f0:	4b63      	ldr	r3, [pc, #396]	; (800f780 <USB_Process+0x2dc>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	4864      	ldr	r0, [pc, #400]	; (800f788 <USB_Process+0x2e4>)
 800f5f8:	f003 f878 	bl	80126ec <usb_universal_printf>
	}

	//Contoh format masukan "TEWS+LAT=6345482,S," untuk koordinat latitude -6.345482
	//Contoh format masukan "TEWS+LAT=6345482,N," untuk koordinat latitude 6.345482
	if (strstr((char*) buffer, "TEWS+LAT=")) {
 800f5fc:	1d3b      	adds	r3, r7, #4
 800f5fe:	4963      	ldr	r1, [pc, #396]	; (800f78c <USB_Process+0x2e8>)
 800f600:	6818      	ldr	r0, [r3, #0]
 800f602:	f004 fd72 	bl	80140ea <strstr>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d06b      	beq.n	800f6e4 <USB_Process+0x240>
		char *glatitude;
		char *latsim;
		char *strx;
		strx = strstr(buffer, "TEWS+LAT=");
 800f60c:	1d3b      	adds	r3, r7, #4
 800f60e:	495f      	ldr	r1, [pc, #380]	; (800f78c <USB_Process+0x2e8>)
 800f610:	6818      	ldr	r0, [r3, #0]
 800f612:	f004 fd6a 	bl	80140ea <strstr>
 800f616:	4603      	mov	r3, r0
 800f618:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		strtok_r(strx, "=", &strx);
 800f61c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f620:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800f624:	495a      	ldr	r1, [pc, #360]	; (800f790 <USB_Process+0x2ec>)
 800f626:	4618      	mov	r0, r3
 800f628:	f005 fbd6 	bl	8014dd8 <strtok_r>
		glatitude = strtok_r(strx, ",", &strx);
 800f62c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f630:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800f634:	4957      	ldr	r1, [pc, #348]	; (800f794 <USB_Process+0x2f0>)
 800f636:	4618      	mov	r0, r3
 800f638:	f005 fbce 	bl	8014dd8 <strtok_r>
 800f63c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
		latsim = strtok_r(strx, ",", &strx);
 800f640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f644:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800f648:	4952      	ldr	r1, [pc, #328]	; (800f794 <USB_Process+0x2f0>)
 800f64a:	4618      	mov	r0, r3
 800f64c:	f005 fbc4 	bl	8014dd8 <strtok_r>
 800f650:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
		lat = atol(glatitude);
 800f654:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800f658:	f003 fd94 	bl	8013184 <atol>
 800f65c:	4603      	mov	r3, r0
 800f65e:	461a      	mov	r2, r3
 800f660:	4b4d      	ldr	r3, [pc, #308]	; (800f798 <USB_Process+0x2f4>)
 800f662:	601a      	str	r2, [r3, #0]
		write_eeprom_union(&hi2c1, 0x26, lat);
 800f664:	4b4c      	ldr	r3, [pc, #304]	; (800f798 <USB_Process+0x2f4>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	461a      	mov	r2, r3
 800f66a:	2126      	movs	r1, #38	; 0x26
 800f66c:	483a      	ldr	r0, [pc, #232]	; (800f758 <USB_Process+0x2b4>)
 800f66e:	f7fd f853 	bl	800c718 <write_eeprom_union>
		if (strcmp(latsim, "S") == 0) {
 800f672:	494a      	ldr	r1, [pc, #296]	; (800f79c <USB_Process+0x2f8>)
 800f674:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 800f678:	f7f0 fdba 	bl	80001f0 <strcmp>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d120      	bne.n	800f6c4 <USB_Process+0x220>
			latitude = (float) lat / 1000000.0;
 800f682:	4b45      	ldr	r3, [pc, #276]	; (800f798 <USB_Process+0x2f4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	ee07 3a90 	vmov	s15, r3
 800f68a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f68e:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f7a0 <USB_Process+0x2fc>
 800f692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f696:	4b43      	ldr	r3, [pc, #268]	; (800f7a4 <USB_Process+0x300>)
 800f698:	edc3 7a00 	vstr	s15, [r3]
			latitude = (-1.0) * latitude;
 800f69c:	4b41      	ldr	r3, [pc, #260]	; (800f7a4 <USB_Process+0x300>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7f0 ff71 	bl	8000588 <__aeabi_f2d>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	4610      	mov	r0, r2
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	f7f1 fabb 	bl	8000c28 <__aeabi_d2f>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	ee07 3a90 	vmov	s15, r3
 800f6b8:	eef1 7a67 	vneg.f32	s15, s15
 800f6bc:	4b39      	ldr	r3, [pc, #228]	; (800f7a4 <USB_Process+0x300>)
 800f6be:	edc3 7a00 	vstr	s15, [r3]
 800f6c2:	e00c      	b.n	800f6de <USB_Process+0x23a>
		} else
			latitude = (float) lat / 1000000.0;
 800f6c4:	4b34      	ldr	r3, [pc, #208]	; (800f798 <USB_Process+0x2f4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	ee07 3a90 	vmov	s15, r3
 800f6cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f6d0:	eddf 6a33 	vldr	s13, [pc, #204]	; 800f7a0 <USB_Process+0x2fc>
 800f6d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f6d8:	4b32      	ldr	r3, [pc, #200]	; (800f7a4 <USB_Process+0x300>)
 800f6da:	edc3 7a00 	vstr	s15, [r3]
		usb_universal_printf("OK\r\n");
 800f6de:	481f      	ldr	r0, [pc, #124]	; (800f75c <USB_Process+0x2b8>)
 800f6e0:	f003 f804 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+LAT?")) {
 800f6e4:	1d3b      	adds	r3, r7, #4
 800f6e6:	4930      	ldr	r1, [pc, #192]	; (800f7a8 <USB_Process+0x304>)
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f004 fcfe 	bl	80140ea <strstr>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d075      	beq.n	800f7e0 <USB_Process+0x33c>
		if (latitude < 0)
 800f6f4:	4b2b      	ldr	r3, [pc, #172]	; (800f7a4 <USB_Process+0x300>)
 800f6f6:	edd3 7a00 	vldr	s15, [r3]
 800f6fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f702:	d559      	bpl.n	800f7b8 <USB_Process+0x314>
			usb_universal_printf("DEPLOY LATITUDE: -%lu.%lu\r\n", lat / 1000000,
 800f704:	4b24      	ldr	r3, [pc, #144]	; (800f798 <USB_Process+0x2f4>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a28      	ldr	r2, [pc, #160]	; (800f7ac <USB_Process+0x308>)
 800f70a:	fba2 2303 	umull	r2, r3, r2, r3
 800f70e:	0c99      	lsrs	r1, r3, #18
 800f710:	4b21      	ldr	r3, [pc, #132]	; (800f798 <USB_Process+0x2f4>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	4b25      	ldr	r3, [pc, #148]	; (800f7ac <USB_Process+0x308>)
 800f716:	fba3 0302 	umull	r0, r3, r3, r2
 800f71a:	0c9b      	lsrs	r3, r3, #18
 800f71c:	4824      	ldr	r0, [pc, #144]	; (800f7b0 <USB_Process+0x30c>)
 800f71e:	fb00 f303 	mul.w	r3, r0, r3
 800f722:	1ad3      	subs	r3, r2, r3
 800f724:	461a      	mov	r2, r3
 800f726:	4823      	ldr	r0, [pc, #140]	; (800f7b4 <USB_Process+0x310>)
 800f728:	f002 ffe0 	bl	80126ec <usb_universal_printf>
 800f72c:	e058      	b.n	800f7e0 <USB_Process+0x33c>
 800f72e:	bf00      	nop
 800f730:	0801b2cc 	.word	0x0801b2cc
 800f734:	2000020c 	.word	0x2000020c
 800f738:	0801b2dc 	.word	0x0801b2dc
 800f73c:	0801b2ec 	.word	0x0801b2ec
 800f740:	013461c3 	.word	0x013461c3
 800f744:	0801b2f8 	.word	0x0801b2f8
 800f748:	0801b304 	.word	0x0801b304
 800f74c:	48001000 	.word	0x48001000
 800f750:	0801b310 	.word	0x0801b310
 800f754:	20033540 	.word	0x20033540
 800f758:	20033484 	.word	0x20033484
 800f75c:	0801b320 	.word	0x0801b320
 800f760:	0801b328 	.word	0x0801b328
 800f764:	0801b338 	.word	0x0801b338
 800f768:	0801b348 	.word	0x0801b348
 800f76c:	20033374 	.word	0x20033374
 800f770:	0801b358 	.word	0x0801b358
 800f774:	0801b368 	.word	0x0801b368
 800f778:	0801b378 	.word	0x0801b378
 800f77c:	0801b398 	.word	0x0801b398
 800f780:	200337fc 	.word	0x200337fc
 800f784:	0801b3a4 	.word	0x0801b3a4
 800f788:	0801b3b0 	.word	0x0801b3b0
 800f78c:	0801b3cc 	.word	0x0801b3cc
 800f790:	0801b3d8 	.word	0x0801b3d8
 800f794:	0801b3dc 	.word	0x0801b3dc
 800f798:	20033320 	.word	0x20033320
 800f79c:	0801b3e0 	.word	0x0801b3e0
 800f7a0:	49742400 	.word	0x49742400
 800f7a4:	20033764 	.word	0x20033764
 800f7a8:	0801b3e4 	.word	0x0801b3e4
 800f7ac:	431bde83 	.word	0x431bde83
 800f7b0:	000f4240 	.word	0x000f4240
 800f7b4:	0801b3f0 	.word	0x0801b3f0
					lat % 1000000);
		else
			usb_universal_printf("DEPLOY LATITUDE: %lu.%lu\r\n", lat / 1000000,
 800f7b8:	4b56      	ldr	r3, [pc, #344]	; (800f914 <USB_Process+0x470>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a56      	ldr	r2, [pc, #344]	; (800f918 <USB_Process+0x474>)
 800f7be:	fba2 2303 	umull	r2, r3, r2, r3
 800f7c2:	0c99      	lsrs	r1, r3, #18
 800f7c4:	4b53      	ldr	r3, [pc, #332]	; (800f914 <USB_Process+0x470>)
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	4b53      	ldr	r3, [pc, #332]	; (800f918 <USB_Process+0x474>)
 800f7ca:	fba3 0302 	umull	r0, r3, r3, r2
 800f7ce:	0c9b      	lsrs	r3, r3, #18
 800f7d0:	4852      	ldr	r0, [pc, #328]	; (800f91c <USB_Process+0x478>)
 800f7d2:	fb00 f303 	mul.w	r3, r0, r3
 800f7d6:	1ad3      	subs	r3, r2, r3
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4851      	ldr	r0, [pc, #324]	; (800f920 <USB_Process+0x47c>)
 800f7dc:	f002 ff86 	bl	80126ec <usb_universal_printf>
					lat % 1000000);
	}

	//Contoh format masukan "TEWS+LNG=106661638,W," untuk koordinat longitude -106.661638
	//Contoh format masukan "TEWS+LNG=106661638,E," untuk koordinat longitude 106.661638
	if (strstr((char*) buffer, "TEWS+LNG=")) {
 800f7e0:	1d3b      	adds	r3, r7, #4
 800f7e2:	4950      	ldr	r1, [pc, #320]	; (800f924 <USB_Process+0x480>)
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	f004 fc80 	bl	80140ea <strstr>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d06b      	beq.n	800f8c8 <USB_Process+0x424>
		char *glongitude;
		char *longsim;
		char *strx;
		strx = strstr(buffer, "TEWS+LNG=");
 800f7f0:	1d3b      	adds	r3, r7, #4
 800f7f2:	494c      	ldr	r1, [pc, #304]	; (800f924 <USB_Process+0x480>)
 800f7f4:	6818      	ldr	r0, [r3, #0]
 800f7f6:	f004 fc78 	bl	80140ea <strstr>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		strtok_r(strx, "=", &strx);
 800f800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f804:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800f808:	4947      	ldr	r1, [pc, #284]	; (800f928 <USB_Process+0x484>)
 800f80a:	4618      	mov	r0, r3
 800f80c:	f005 fae4 	bl	8014dd8 <strtok_r>
		glongitude = strtok_r(strx, ",", &strx);
 800f810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f814:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800f818:	4944      	ldr	r1, [pc, #272]	; (800f92c <USB_Process+0x488>)
 800f81a:	4618      	mov	r0, r3
 800f81c:	f005 fadc 	bl	8014dd8 <strtok_r>
 800f820:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
		longsim = strtok_r(strx, ",", &strx);
 800f824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f828:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800f82c:	493f      	ldr	r1, [pc, #252]	; (800f92c <USB_Process+0x488>)
 800f82e:	4618      	mov	r0, r3
 800f830:	f005 fad2 	bl	8014dd8 <strtok_r>
 800f834:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
		lng = atol(glongitude);
 800f838:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 800f83c:	f003 fca2 	bl	8013184 <atol>
 800f840:	4603      	mov	r3, r0
 800f842:	461a      	mov	r2, r3
 800f844:	4b3a      	ldr	r3, [pc, #232]	; (800f930 <USB_Process+0x48c>)
 800f846:	601a      	str	r2, [r3, #0]
		write_eeprom_union(&hi2c1, 0x31, lng);
 800f848:	4b39      	ldr	r3, [pc, #228]	; (800f930 <USB_Process+0x48c>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	2131      	movs	r1, #49	; 0x31
 800f850:	4838      	ldr	r0, [pc, #224]	; (800f934 <USB_Process+0x490>)
 800f852:	f7fc ff61 	bl	800c718 <write_eeprom_union>
		if (strcmp(longsim, "W") == 0) {
 800f856:	4938      	ldr	r1, [pc, #224]	; (800f938 <USB_Process+0x494>)
 800f858:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800f85c:	f7f0 fcc8 	bl	80001f0 <strcmp>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d120      	bne.n	800f8a8 <USB_Process+0x404>
			longitude = (float) lng / 1000000.0;
 800f866:	4b32      	ldr	r3, [pc, #200]	; (800f930 <USB_Process+0x48c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	ee07 3a90 	vmov	s15, r3
 800f86e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f872:	eddf 6a32 	vldr	s13, [pc, #200]	; 800f93c <USB_Process+0x498>
 800f876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f87a:	4b31      	ldr	r3, [pc, #196]	; (800f940 <USB_Process+0x49c>)
 800f87c:	edc3 7a00 	vstr	s15, [r3]
			longitude = (-1.0) * longitude;
 800f880:	4b2f      	ldr	r3, [pc, #188]	; (800f940 <USB_Process+0x49c>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4618      	mov	r0, r3
 800f886:	f7f0 fe7f 	bl	8000588 <__aeabi_f2d>
 800f88a:	4602      	mov	r2, r0
 800f88c:	460b      	mov	r3, r1
 800f88e:	4610      	mov	r0, r2
 800f890:	4619      	mov	r1, r3
 800f892:	f7f1 f9c9 	bl	8000c28 <__aeabi_d2f>
 800f896:	4603      	mov	r3, r0
 800f898:	ee07 3a90 	vmov	s15, r3
 800f89c:	eef1 7a67 	vneg.f32	s15, s15
 800f8a0:	4b27      	ldr	r3, [pc, #156]	; (800f940 <USB_Process+0x49c>)
 800f8a2:	edc3 7a00 	vstr	s15, [r3]
 800f8a6:	e00c      	b.n	800f8c2 <USB_Process+0x41e>
		} else
			longitude = (float) lng / 1000000.0;
 800f8a8:	4b21      	ldr	r3, [pc, #132]	; (800f930 <USB_Process+0x48c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	ee07 3a90 	vmov	s15, r3
 800f8b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f8b4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f93c <USB_Process+0x498>
 800f8b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f8bc:	4b20      	ldr	r3, [pc, #128]	; (800f940 <USB_Process+0x49c>)
 800f8be:	edc3 7a00 	vstr	s15, [r3]
		usb_universal_printf("OK\r\n");
 800f8c2:	4820      	ldr	r0, [pc, #128]	; (800f944 <USB_Process+0x4a0>)
 800f8c4:	f002 ff12 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+LNG?")) {
 800f8c8:	1d3b      	adds	r3, r7, #4
 800f8ca:	491f      	ldr	r1, [pc, #124]	; (800f948 <USB_Process+0x4a4>)
 800f8cc:	6818      	ldr	r0, [r3, #0]
 800f8ce:	f004 fc0c 	bl	80140ea <strstr>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d04f      	beq.n	800f978 <USB_Process+0x4d4>
		if (longitude < 0)
 800f8d8:	4b19      	ldr	r3, [pc, #100]	; (800f940 <USB_Process+0x49c>)
 800f8da:	edd3 7a00 	vldr	s15, [r3]
 800f8de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e6:	d533      	bpl.n	800f950 <USB_Process+0x4ac>
			usb_universal_printf("DEPLOY LONGITUDE: -%lu.%lu\r\n",
 800f8e8:	4b11      	ldr	r3, [pc, #68]	; (800f930 <USB_Process+0x48c>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a0a      	ldr	r2, [pc, #40]	; (800f918 <USB_Process+0x474>)
 800f8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f2:	0c99      	lsrs	r1, r3, #18
 800f8f4:	4b0e      	ldr	r3, [pc, #56]	; (800f930 <USB_Process+0x48c>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <USB_Process+0x474>)
 800f8fa:	fba3 0302 	umull	r0, r3, r3, r2
 800f8fe:	0c9b      	lsrs	r3, r3, #18
 800f900:	4806      	ldr	r0, [pc, #24]	; (800f91c <USB_Process+0x478>)
 800f902:	fb00 f303 	mul.w	r3, r0, r3
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	461a      	mov	r2, r3
 800f90a:	4810      	ldr	r0, [pc, #64]	; (800f94c <USB_Process+0x4a8>)
 800f90c:	f002 feee 	bl	80126ec <usb_universal_printf>
 800f910:	e032      	b.n	800f978 <USB_Process+0x4d4>
 800f912:	bf00      	nop
 800f914:	20033320 	.word	0x20033320
 800f918:	431bde83 	.word	0x431bde83
 800f91c:	000f4240 	.word	0x000f4240
 800f920:	0801b40c 	.word	0x0801b40c
 800f924:	0801b428 	.word	0x0801b428
 800f928:	0801b3d8 	.word	0x0801b3d8
 800f92c:	0801b3dc 	.word	0x0801b3dc
 800f930:	20033114 	.word	0x20033114
 800f934:	20033484 	.word	0x20033484
 800f938:	0801b434 	.word	0x0801b434
 800f93c:	49742400 	.word	0x49742400
 800f940:	20033744 	.word	0x20033744
 800f944:	0801b320 	.word	0x0801b320
 800f948:	0801b438 	.word	0x0801b438
 800f94c:	0801b444 	.word	0x0801b444
					lng / 1000000, lng % 1000000);
		else
			usb_universal_printf("DEPLOY LONGITUDE: %lu.%lu\r\n", lng / 1000000,
 800f950:	4bc1      	ldr	r3, [pc, #772]	; (800fc58 <USB_Process+0x7b4>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4ac1      	ldr	r2, [pc, #772]	; (800fc5c <USB_Process+0x7b8>)
 800f956:	fba2 2303 	umull	r2, r3, r2, r3
 800f95a:	0c99      	lsrs	r1, r3, #18
 800f95c:	4bbe      	ldr	r3, [pc, #760]	; (800fc58 <USB_Process+0x7b4>)
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	4bbe      	ldr	r3, [pc, #760]	; (800fc5c <USB_Process+0x7b8>)
 800f962:	fba3 0302 	umull	r0, r3, r3, r2
 800f966:	0c9b      	lsrs	r3, r3, #18
 800f968:	48bd      	ldr	r0, [pc, #756]	; (800fc60 <USB_Process+0x7bc>)
 800f96a:	fb00 f303 	mul.w	r3, r0, r3
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	461a      	mov	r2, r3
 800f972:	48bc      	ldr	r0, [pc, #752]	; (800fc64 <USB_Process+0x7c0>)
 800f974:	f002 feba 	bl	80126ec <usb_universal_printf>
	}




	if (strstr((char*) buffer, "TEWS+IRIDIUMON")) {
 800f978:	1d3b      	adds	r3, r7, #4
 800f97a:	49bb      	ldr	r1, [pc, #748]	; (800fc68 <USB_Process+0x7c4>)
 800f97c:	6818      	ldr	r0, [r3, #0]
 800f97e:	f004 fbb4 	bl	80140ea <strstr>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d007      	beq.n	800f998 <USB_Process+0x4f4>

		//IRIDIUM_Init();
		HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 800f988:	2201      	movs	r2, #1
 800f98a:	2102      	movs	r1, #2
 800f98c:	48b7      	ldr	r0, [pc, #732]	; (800fc6c <USB_Process+0x7c8>)
 800f98e:	f7f2 faff 	bl	8001f90 <HAL_GPIO_WritePin>
		usb_universal_printf("SET IRIDIUM ON\r\n");
 800f992:	48b7      	ldr	r0, [pc, #732]	; (800fc70 <USB_Process+0x7cc>)
 800f994:	f002 feaa 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+IRIDIUMOFF")) {
 800f998:	1d3b      	adds	r3, r7, #4
 800f99a:	49b6      	ldr	r1, [pc, #728]	; (800fc74 <USB_Process+0x7d0>)
 800f99c:	6818      	ldr	r0, [r3, #0]
 800f99e:	f004 fba4 	bl	80140ea <strstr>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d007      	beq.n	800f9b8 <USB_Process+0x514>

		//HAL_GPIO_WritePin(NETWORKINT_GPIO_Port, NETWORKINT_Pin, GPIO_PIN_SET);
		//osDelay(50);
		HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2102      	movs	r1, #2
 800f9ac:	48af      	ldr	r0, [pc, #700]	; (800fc6c <USB_Process+0x7c8>)
 800f9ae:	f7f2 faef 	bl	8001f90 <HAL_GPIO_WritePin>
		//osDelay(50);
		//HAL_GPIO_WritePin(NETWORKINT_GPIO_Port, NETWORKINT_Pin, GPIO_PIN_SET);

		usb_universal_printf("RESET IRIDIUM OFF\r\n");
 800f9b2:	48b1      	ldr	r0, [pc, #708]	; (800fc78 <USB_Process+0x7d4>)
 800f9b4:	f002 fe9a 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+GPSON")) {
 800f9b8:	1d3b      	adds	r3, r7, #4
 800f9ba:	49b0      	ldr	r1, [pc, #704]	; (800fc7c <USB_Process+0x7d8>)
 800f9bc:	6818      	ldr	r0, [r3, #0]
 800f9be:	f004 fb94 	bl	80140ea <strstr>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d004      	beq.n	800f9d2 <USB_Process+0x52e>

		//IRIDIUM_Init();
		GPS_Init();
 800f9c8:	f7fd f8f2 	bl	800cbb0 <GPS_Init>
		usb_universal_printf("SET GPS ON\r\n");
 800f9cc:	48ac      	ldr	r0, [pc, #688]	; (800fc80 <USB_Process+0x7dc>)
 800f9ce:	f002 fe8d 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+GPSOFF")) {
 800f9d2:	1d3b      	adds	r3, r7, #4
 800f9d4:	49ab      	ldr	r1, [pc, #684]	; (800fc84 <USB_Process+0x7e0>)
 800f9d6:	6818      	ldr	r0, [r3, #0]
 800f9d8:	f004 fb87 	bl	80140ea <strstr>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d007      	beq.n	800f9f2 <USB_Process+0x54e>

		HAL_GPIO_WritePin(GPIOD, GPS_RESET_Pin, GPIO_PIN_RESET);
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	2180      	movs	r1, #128	; 0x80
 800f9e6:	48a8      	ldr	r0, [pc, #672]	; (800fc88 <USB_Process+0x7e4>)
 800f9e8:	f7f2 fad2 	bl	8001f90 <HAL_GPIO_WritePin>
		usb_universal_printf("SET GPS OFF\r\n");
 800f9ec:	48a7      	ldr	r0, [pc, #668]	; (800fc8c <USB_Process+0x7e8>)
 800f9ee:	f002 fe7d 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+GPSLOC")) {
 800f9f2:	1d3b      	adds	r3, r7, #4
 800f9f4:	49a6      	ldr	r1, [pc, #664]	; (800fc90 <USB_Process+0x7ec>)
 800f9f6:	6818      	ldr	r0, [r3, #0]
 800f9f8:	f004 fb77 	bl	80140ea <strstr>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d006      	beq.n	800fa10 <USB_Process+0x56c>
		//IRIDIUM_Init();
		//osDelay(500);
		EncodeTEWSLocBuoy(0, 15);
 800fa02:	210f      	movs	r1, #15
 800fa04:	2000      	movs	r0, #0
 800fa06:	f7fc fc17 	bl	800c238 <EncodeTEWSLocBuoy>
		usb_universal_printf("GPS Location.\r\n");
 800fa0a:	48a2      	ldr	r0, [pc, #648]	; (800fc94 <USB_Process+0x7f0>)
 800fa0c:	f002 fe6e 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+BATGPS?")) {
 800fa10:	1d3b      	adds	r3, r7, #4
 800fa12:	49a1      	ldr	r1, [pc, #644]	; (800fc98 <USB_Process+0x7f4>)
 800fa14:	6818      	ldr	r0, [r3, #0]
 800fa16:	f004 fb68 	bl	80140ea <strstr>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d02f      	beq.n	800fa80 <USB_Process+0x5dc>
		char str[128];
		sprintf(str,"VOLT:  %lu V, CURRENT:  %lu mA\r\n", getvoltage(), getcurrent());
 800fa20:	f001 f9a2 	bl	8010d68 <getvoltage>
 800fa24:	4604      	mov	r4, r0
 800fa26:	f001 fa15 	bl	8010e54 <getcurrent>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	f107 0008 	add.w	r0, r7, #8
 800fa30:	4622      	mov	r2, r4
 800fa32:	499a      	ldr	r1, [pc, #616]	; (800fc9c <USB_Process+0x7f8>)
 800fa34:	f004 fb2c 	bl	8014090 <siprintf>
		uint16_t sizedata = strlen(str);
 800fa38:	f107 0308 	add.w	r3, r7, #8
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f0 fbe1 	bl	8000204 <strlen>
 800fa42:	4603      	mov	r3, r0
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 800fa4a:	4b95      	ldr	r3, [pc, #596]	; (800fca0 <USB_Process+0x7fc>)
 800fa4c:	6818      	ldr	r0, [r3, #0]
 800fa4e:	f107 01f2 	add.w	r1, r7, #242	; 0xf2
 800fa52:	2300      	movs	r3, #0
 800fa54:	2200      	movs	r2, #0
 800fa56:	f7f8 ff9d 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, str, 0U, 0U);
 800fa5a:	4b92      	ldr	r3, [pc, #584]	; (800fca4 <USB_Process+0x800>)
 800fa5c:	6818      	ldr	r0, [r3, #0]
 800fa5e:	f107 0108 	add.w	r1, r7, #8
 800fa62:	2300      	movs	r3, #0
 800fa64:	2200      	movs	r2, #0
 800fa66:	f7f8 ff95 	bl	8008994 <osMessageQueuePut>

		usb_universal_printf("VOLT:  %lu V, CURRENT:  %lu mA\r\n", getvoltage(), getcurrent());
 800fa6a:	f001 f97d 	bl	8010d68 <getvoltage>
 800fa6e:	4604      	mov	r4, r0
 800fa70:	f001 f9f0 	bl	8010e54 <getcurrent>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
 800fa78:	4621      	mov	r1, r4
 800fa7a:	4888      	ldr	r0, [pc, #544]	; (800fc9c <USB_Process+0x7f8>)
 800fa7c:	f002 fe36 	bl	80126ec <usb_universal_printf>
	}

	/*
	 * Set time RTC
	 */
	if (strstr((char*) buffer, "TEWS+TIME=")) {
 800fa80:	1d3b      	adds	r3, r7, #4
 800fa82:	4989      	ldr	r1, [pc, #548]	; (800fca8 <USB_Process+0x804>)
 800fa84:	6818      	ldr	r0, [r3, #0]
 800fa86:	f004 fb30 	bl	80140ea <strstr>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f000 80a6 	beq.w	800fbde <USB_Process+0x73a>
		char *sec;
		char *date;
		char *mon;
		char *year;

		strakustik = strstr((char*) buffer, "TEWS+SETTIME=");
 800fa92:	1d3b      	adds	r3, r7, #4
 800fa94:	4985      	ldr	r1, [pc, #532]	; (800fcac <USB_Process+0x808>)
 800fa96:	6818      	ldr	r0, [r3, #0]
 800fa98:	f004 fb27 	bl	80140ea <strstr>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		strtok_r(strakustik, "=", &strakustik);
 800faa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faa6:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800faaa:	4981      	ldr	r1, [pc, #516]	; (800fcb0 <USB_Process+0x80c>)
 800faac:	4618      	mov	r0, r3
 800faae:	f005 f993 	bl	8014dd8 <strtok_r>
		hour = strtok_r(strakustik, ",", &strakustik);
 800fab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fab6:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800faba:	497e      	ldr	r1, [pc, #504]	; (800fcb4 <USB_Process+0x810>)
 800fabc:	4618      	mov	r0, r3
 800fabe:	f005 f98b 	bl	8014dd8 <strtok_r>
 800fac2:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
		min = strtok_r(strakustik, ",", &strakustik);
 800fac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faca:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800face:	4979      	ldr	r1, [pc, #484]	; (800fcb4 <USB_Process+0x810>)
 800fad0:	4618      	mov	r0, r3
 800fad2:	f005 f981 	bl	8014dd8 <strtok_r>
 800fad6:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
		sec = strtok_r(strakustik, ",", &strakustik);
 800fada:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fade:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800fae2:	4974      	ldr	r1, [pc, #464]	; (800fcb4 <USB_Process+0x810>)
 800fae4:	4618      	mov	r0, r3
 800fae6:	f005 f977 	bl	8014dd8 <strtok_r>
 800faea:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
		date = strtok_r(strakustik, ",", &strakustik);
 800faee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faf2:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800faf6:	496f      	ldr	r1, [pc, #444]	; (800fcb4 <USB_Process+0x810>)
 800faf8:	4618      	mov	r0, r3
 800fafa:	f005 f96d 	bl	8014dd8 <strtok_r>
 800fafe:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
		mon = strtok_r(strakustik, ",", &strakustik);
 800fb02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb06:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800fb0a:	496a      	ldr	r1, [pc, #424]	; (800fcb4 <USB_Process+0x810>)
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f005 f963 	bl	8014dd8 <strtok_r>
 800fb12:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
		year = strtok_r(strakustik, "\r", &strakustik);
 800fb16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb1a:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800fb1e:	4966      	ldr	r1, [pc, #408]	; (800fcb8 <USB_Process+0x814>)
 800fb20:	4618      	mov	r0, r3
 800fb22:	f005 f959 	bl	8014dd8 <strtok_r>
 800fb26:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

		rtcTEWS.Hour = atoi(hour);
 800fb2a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800fb2e:	f003 fb25 	bl	801317c <atoi>
 800fb32:	4603      	mov	r3, r0
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	4b61      	ldr	r3, [pc, #388]	; (800fcbc <USB_Process+0x818>)
 800fb38:	711a      	strb	r2, [r3, #4]
		rtcTEWS.Min = atoi(min);
 800fb3a:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 800fb3e:	f003 fb1d 	bl	801317c <atoi>
 800fb42:	4603      	mov	r3, r0
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	4b5d      	ldr	r3, [pc, #372]	; (800fcbc <USB_Process+0x818>)
 800fb48:	715a      	strb	r2, [r3, #5]
		rtcTEWS.Sec = atoi(sec);
 800fb4a:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 800fb4e:	f003 fb15 	bl	801317c <atoi>
 800fb52:	4603      	mov	r3, r0
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	4b59      	ldr	r3, [pc, #356]	; (800fcbc <USB_Process+0x818>)
 800fb58:	719a      	strb	r2, [r3, #6]
		rtcTEWS.Date = atoi(date);
 800fb5a:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800fb5e:	f003 fb0d 	bl	801317c <atoi>
 800fb62:	4603      	mov	r3, r0
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	4b55      	ldr	r3, [pc, #340]	; (800fcbc <USB_Process+0x818>)
 800fb68:	709a      	strb	r2, [r3, #2]
		rtcTEWS.Month = atoi(mon);
 800fb6a:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800fb6e:	f003 fb05 	bl	801317c <atoi>
 800fb72:	4603      	mov	r3, r0
 800fb74:	b2da      	uxtb	r2, r3
 800fb76:	4b51      	ldr	r3, [pc, #324]	; (800fcbc <USB_Process+0x818>)
 800fb78:	705a      	strb	r2, [r3, #1]
		rtcTEWS.Year = atoi(year);
 800fb7a:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 800fb7e:	f003 fafd 	bl	801317c <atoi>
 800fb82:	4603      	mov	r3, r0
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	4b4d      	ldr	r3, [pc, #308]	; (800fcbc <USB_Process+0x818>)
 800fb88:	701a      	strb	r2, [r3, #0]
		rtcTEWS.DaysOfWeek = MONDAY;
 800fb8a:	4b4c      	ldr	r3, [pc, #304]	; (800fcbc <USB_Process+0x818>)
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	70da      	strb	r2, [r3, #3]
		DS3231_SetTime(&rtcTEWS);
 800fb90:	484a      	ldr	r0, [pc, #296]	; (800fcbc <USB_Process+0x818>)
 800fb92:	f7ff f825 	bl	800ebe0 <DS3231_SetTime>
		HAL_UART_Transmit(&_UNI_USART, (uint8_t*) "OK\r\n", sizeof("OK\r\n"),
 800fb96:	f242 7310 	movw	r3, #10000	; 0x2710
 800fb9a:	2205      	movs	r2, #5
 800fb9c:	4948      	ldr	r1, [pc, #288]	; (800fcc0 <USB_Process+0x81c>)
 800fb9e:	4849      	ldr	r0, [pc, #292]	; (800fcc4 <USB_Process+0x820>)
 800fba0:	f7f7 f944 	bl	8006e2c <HAL_UART_Transmit>
				10000);

		DS3231_GetTime(&rtcTEWS);
 800fba4:	4845      	ldr	r0, [pc, #276]	; (800fcbc <USB_Process+0x818>)
 800fba6:	f7fe ff27 	bl	800e9f8 <DS3231_GetTime>
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fbaa:	4b44      	ldr	r3, [pc, #272]	; (800fcbc <USB_Process+0x818>)
 800fbac:	791b      	ldrb	r3, [r3, #4]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbae:	4618      	mov	r0, r3
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fbb0:	4b42      	ldr	r3, [pc, #264]	; (800fcbc <USB_Process+0x818>)
 800fbb2:	795b      	ldrb	r3, [r3, #5]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbb4:	461c      	mov	r4, r3
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fbb6:	4b41      	ldr	r3, [pc, #260]	; (800fcbc <USB_Process+0x818>)
 800fbb8:	799b      	ldrb	r3, [r3, #6]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbba:	461d      	mov	r5, r3
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fbbc:	4b3f      	ldr	r3, [pc, #252]	; (800fcbc <USB_Process+0x818>)
 800fbbe:	789b      	ldrb	r3, [r3, #2]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbc0:	461a      	mov	r2, r3
				rtcTEWS.Month, rtcTEWS.Year);
 800fbc2:	4b3e      	ldr	r3, [pc, #248]	; (800fcbc <USB_Process+0x818>)
 800fbc4:	785b      	ldrb	r3, [r3, #1]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbc6:	4619      	mov	r1, r3
				rtcTEWS.Month, rtcTEWS.Year);
 800fbc8:	4b3c      	ldr	r3, [pc, #240]	; (800fcbc <USB_Process+0x818>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbcc:	9302      	str	r3, [sp, #8]
 800fbce:	9101      	str	r1, [sp, #4]
 800fbd0:	9200      	str	r2, [sp, #0]
 800fbd2:	462b      	mov	r3, r5
 800fbd4:	4622      	mov	r2, r4
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	483b      	ldr	r0, [pc, #236]	; (800fcc8 <USB_Process+0x824>)
 800fbda:	f002 fd87 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+TIME?")) {
 800fbde:	1d3b      	adds	r3, r7, #4
 800fbe0:	493a      	ldr	r1, [pc, #232]	; (800fccc <USB_Process+0x828>)
 800fbe2:	6818      	ldr	r0, [r3, #0]
 800fbe4:	f004 fa81 	bl	80140ea <strstr>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d078      	beq.n	800fce0 <USB_Process+0x83c>
		DS3231_GetTime(&rtcTEWS);
 800fbee:	4833      	ldr	r0, [pc, #204]	; (800fcbc <USB_Process+0x818>)
 800fbf0:	f7fe ff02 	bl	800e9f8 <DS3231_GetTime>
		DS3231_GetTime_B(&rtcTEWS2);
 800fbf4:	4836      	ldr	r0, [pc, #216]	; (800fcd0 <USB_Process+0x82c>)
 800fbf6:	f7fe ff79 	bl	800eaec <DS3231_GetTime_B>
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fbfa:	4b30      	ldr	r3, [pc, #192]	; (800fcbc <USB_Process+0x818>)
 800fbfc:	791b      	ldrb	r3, [r3, #4]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fbfe:	4618      	mov	r0, r3
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fc00:	4b2e      	ldr	r3, [pc, #184]	; (800fcbc <USB_Process+0x818>)
 800fc02:	795b      	ldrb	r3, [r3, #5]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc04:	461c      	mov	r4, r3
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fc06:	4b2d      	ldr	r3, [pc, #180]	; (800fcbc <USB_Process+0x818>)
 800fc08:	799b      	ldrb	r3, [r3, #6]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc0a:	461d      	mov	r5, r3
				rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 800fc0c:	4b2b      	ldr	r3, [pc, #172]	; (800fcbc <USB_Process+0x818>)
 800fc0e:	789b      	ldrb	r3, [r3, #2]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc10:	461a      	mov	r2, r3
				rtcTEWS.Month, rtcTEWS.Year);
 800fc12:	4b2a      	ldr	r3, [pc, #168]	; (800fcbc <USB_Process+0x818>)
 800fc14:	785b      	ldrb	r3, [r3, #1]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc16:	4619      	mov	r1, r3
				rtcTEWS.Month, rtcTEWS.Year);
 800fc18:	4b28      	ldr	r3, [pc, #160]	; (800fcbc <USB_Process+0x818>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
		usb_universal_printf("TIME: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc1c:	9302      	str	r3, [sp, #8]
 800fc1e:	9101      	str	r1, [sp, #4]
 800fc20:	9200      	str	r2, [sp, #0]
 800fc22:	462b      	mov	r3, r5
 800fc24:	4622      	mov	r2, r4
 800fc26:	4601      	mov	r1, r0
 800fc28:	4827      	ldr	r0, [pc, #156]	; (800fcc8 <USB_Process+0x824>)
 800fc2a:	f002 fd5f 	bl	80126ec <usb_universal_printf>
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
				rtcTEWS2.Hour, rtcTEWS2.Min, rtcTEWS2.Sec, rtcTEWS2.Date,
 800fc2e:	4b28      	ldr	r3, [pc, #160]	; (800fcd0 <USB_Process+0x82c>)
 800fc30:	791b      	ldrb	r3, [r3, #4]
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc32:	4618      	mov	r0, r3
				rtcTEWS2.Hour, rtcTEWS2.Min, rtcTEWS2.Sec, rtcTEWS2.Date,
 800fc34:	4b26      	ldr	r3, [pc, #152]	; (800fcd0 <USB_Process+0x82c>)
 800fc36:	795b      	ldrb	r3, [r3, #5]
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc38:	461c      	mov	r4, r3
				rtcTEWS2.Hour, rtcTEWS2.Min, rtcTEWS2.Sec, rtcTEWS2.Date,
 800fc3a:	4b25      	ldr	r3, [pc, #148]	; (800fcd0 <USB_Process+0x82c>)
 800fc3c:	799b      	ldrb	r3, [r3, #6]
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc3e:	461d      	mov	r5, r3
				rtcTEWS2.Hour, rtcTEWS2.Min, rtcTEWS2.Sec, rtcTEWS2.Date,
 800fc40:	4b23      	ldr	r3, [pc, #140]	; (800fcd0 <USB_Process+0x82c>)
 800fc42:	789b      	ldrb	r3, [r3, #2]
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc44:	461a      	mov	r2, r3
				rtcTEWS2.Month, rtcTEWS2.Year);
 800fc46:	4b22      	ldr	r3, [pc, #136]	; (800fcd0 <USB_Process+0x82c>)
 800fc48:	785b      	ldrb	r3, [r3, #1]
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc4a:	4619      	mov	r1, r3
				rtcTEWS2.Month, rtcTEWS2.Year);
 800fc4c:	4b20      	ldr	r3, [pc, #128]	; (800fcd0 <USB_Process+0x82c>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
		usb_universal_printf("TIME2: %.2d:%.2d:%.2d %.2d/%.2d/%.2d \r\n",
 800fc50:	9302      	str	r3, [sp, #8]
 800fc52:	9101      	str	r1, [sp, #4]
 800fc54:	9200      	str	r2, [sp, #0]
 800fc56:	e03d      	b.n	800fcd4 <USB_Process+0x830>
 800fc58:	20033114 	.word	0x20033114
 800fc5c:	431bde83 	.word	0x431bde83
 800fc60:	000f4240 	.word	0x000f4240
 800fc64:	0801b464 	.word	0x0801b464
 800fc68:	0801b480 	.word	0x0801b480
 800fc6c:	48001000 	.word	0x48001000
 800fc70:	0801b490 	.word	0x0801b490
 800fc74:	0801b4a4 	.word	0x0801b4a4
 800fc78:	0801b4b4 	.word	0x0801b4b4
 800fc7c:	0801b4c8 	.word	0x0801b4c8
 800fc80:	0801b4d4 	.word	0x0801b4d4
 800fc84:	0801b4e4 	.word	0x0801b4e4
 800fc88:	48000c00 	.word	0x48000c00
 800fc8c:	0801b4f0 	.word	0x0801b4f0
 800fc90:	0801b500 	.word	0x0801b500
 800fc94:	0801b50c 	.word	0x0801b50c
 800fc98:	0801b51c 	.word	0x0801b51c
 800fc9c:	0801b52c 	.word	0x0801b52c
 800fca0:	20033734 	.word	0x20033734
 800fca4:	2003355c 	.word	0x2003355c
 800fca8:	0801b550 	.word	0x0801b550
 800fcac:	0801b55c 	.word	0x0801b55c
 800fcb0:	0801b3d8 	.word	0x0801b3d8
 800fcb4:	0801b3dc 	.word	0x0801b3dc
 800fcb8:	0801b56c 	.word	0x0801b56c
 800fcbc:	2003346c 	.word	0x2003346c
 800fcc0:	0801b320 	.word	0x0801b320
 800fcc4:	20033564 	.word	0x20033564
 800fcc8:	0801b570 	.word	0x0801b570
 800fccc:	0801b598 	.word	0x0801b598
 800fcd0:	20033478 	.word	0x20033478
 800fcd4:	462b      	mov	r3, r5
 800fcd6:	4622      	mov	r2, r4
 800fcd8:	4601      	mov	r1, r0
 800fcda:	48d8      	ldr	r0, [pc, #864]	; (801003c <USB_Process+0xb98>)
 800fcdc:	f002 fd06 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+ALARMRESET1A")) {
 800fce0:	1d3b      	adds	r3, r7, #4
 800fce2:	49d7      	ldr	r1, [pc, #860]	; (8010040 <USB_Process+0xb9c>)
 800fce4:	6818      	ldr	r0, [r3, #0]
 800fce6:	f004 fa00 	bl	80140ea <strstr>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d004      	beq.n	800fcfa <USB_Process+0x856>
		DS3231_ResetAlarm1_A();
 800fcf0:	f7ff fa5c 	bl	800f1ac <DS3231_ResetAlarm1_A>
		usb_universal_printf("RESERT ALARM1_A OK\r\n");
 800fcf4:	48d3      	ldr	r0, [pc, #844]	; (8010044 <USB_Process+0xba0>)
 800fcf6:	f002 fcf9 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+ALARMRESET2B")) {
 800fcfa:	1d3b      	adds	r3, r7, #4
 800fcfc:	49d2      	ldr	r1, [pc, #840]	; (8010048 <USB_Process+0xba4>)
 800fcfe:	6818      	ldr	r0, [r3, #0]
 800fd00:	f004 f9f3 	bl	80140ea <strstr>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d004      	beq.n	800fd14 <USB_Process+0x870>
		DS3231_ResetAlarm2_B();
 800fd0a:	f7ff fa7d 	bl	800f208 <DS3231_ResetAlarm2_B>
		usb_universal_printf("RESERT ALARM2_B OK\r\n");
 800fd0e:	48cf      	ldr	r0, [pc, #828]	; (801004c <USB_Process+0xba8>)
 800fd10:	f002 fcec 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+ALARMRESET1B")) {
 800fd14:	1d3b      	adds	r3, r7, #4
 800fd16:	49ce      	ldr	r1, [pc, #824]	; (8010050 <USB_Process+0xbac>)
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	f004 f9e6 	bl	80140ea <strstr>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d004      	beq.n	800fd2e <USB_Process+0x88a>
		DS3231_ResetAlarm1_B();
 800fd24:	f7ff fa59 	bl	800f1da <DS3231_ResetAlarm1_B>
		usb_universal_printf("RESERT ALARM1_B OK\r\n");
 800fd28:	48ca      	ldr	r0, [pc, #808]	; (8010054 <USB_Process+0xbb0>)
 800fd2a:	f002 fcdf 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+POWERRESET")) {
 800fd2e:	1d3b      	adds	r3, r7, #4
 800fd30:	49c9      	ldr	r1, [pc, #804]	; (8010058 <USB_Process+0xbb4>)
 800fd32:	6818      	ldr	r0, [r3, #0]
 800fd34:	f004 f9d9 	bl	80140ea <strstr>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d009      	beq.n	800fd52 <USB_Process+0x8ae>
		DS3231_ClearAlarm1();
 800fd3e:	f7ff f9e9 	bl	800f114 <DS3231_ClearAlarm1>
		DS3231_ClearAlarm1_B();
 800fd42:	f7ff fa0d 	bl	800f160 <DS3231_ClearAlarm1_B>
		HAL_GPIO_WritePin(SWT_TRIG_GPIO_Port, SWT_TRIG_Pin, GPIO_PIN_RESET);
 800fd46:	2200      	movs	r2, #0
 800fd48:	2180      	movs	r1, #128	; 0x80
 800fd4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fd4e:	f7f2 f91f 	bl	8001f90 <HAL_GPIO_WritePin>
	}

	if (strstr((char*) buffer, "TEWS+POWERSET")) {
 800fd52:	1d3b      	adds	r3, r7, #4
 800fd54:	49c1      	ldr	r1, [pc, #772]	; (801005c <USB_Process+0xbb8>)
 800fd56:	6818      	ldr	r0, [r3, #0]
 800fd58:	f004 f9c7 	bl	80140ea <strstr>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d005      	beq.n	800fd6e <USB_Process+0x8ca>
		HAL_GPIO_WritePin(SWT_TRIG_GPIO_Port, SWT_TRIG_Pin, GPIO_PIN_SET);
 800fd62:	2201      	movs	r2, #1
 800fd64:	2180      	movs	r1, #128	; 0x80
 800fd66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fd6a:	f7f2 f911 	bl	8001f90 <HAL_GPIO_WritePin>
	}

	if (strstr((char*) buffer, "TEWS+ALARMSET1A=")) {
 800fd6e:	1d3b      	adds	r3, r7, #4
 800fd70:	49bb      	ldr	r1, [pc, #748]	; (8010060 <USB_Process+0xbbc>)
 800fd72:	6818      	ldr	r0, [r3, #0]
 800fd74:	f004 f9b9 	bl	80140ea <strstr>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d063      	beq.n	800fe46 <USB_Process+0x9a2>
		char *str = strstr((char*) buffer, "TEWS+ALARMSET1A=");
 800fd7e:	1d3b      	adds	r3, r7, #4
 800fd80:	49b7      	ldr	r1, [pc, #732]	; (8010060 <USB_Process+0xbbc>)
 800fd82:	6818      	ldr	r0, [r3, #0]
 800fd84:	f004 f9b1 	bl	80140ea <strstr>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		strtok_r(str, "=", &str);
 800fd8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd92:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800fd96:	49b3      	ldr	r1, [pc, #716]	; (8010064 <USB_Process+0xbc0>)
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f005 f81d 	bl	8014dd8 <strtok_r>
		char *_time = strtok_r(str, "\r", &str);
 800fd9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fda2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800fda6:	49b0      	ldr	r1, [pc, #704]	; (8010068 <USB_Process+0xbc4>)
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f005 f815 	bl	8014dd8 <strtok_r>
 800fdae:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
		int _Mode = valueFromString(_time, 0, 1);
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800fdba:	f7fc fe79 	bl	800cab0 <valueFromString>
 800fdbe:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
		int _Date = valueFromString(_time, 1, 2);
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	2101      	movs	r1, #1
 800fdc6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800fdca:	f7fc fe71 	bl	800cab0 <valueFromString>
 800fdce:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
		int _Hour = valueFromString(_time, 3, 2);
 800fdd2:	2202      	movs	r2, #2
 800fdd4:	2103      	movs	r1, #3
 800fdd6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800fdda:	f7fc fe69 	bl	800cab0 <valueFromString>
 800fdde:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
		int _Min = valueFromString(_time, 5, 2);
 800fde2:	2202      	movs	r2, #2
 800fde4:	2105      	movs	r1, #5
 800fde6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800fdea:	f7fc fe61 	bl	800cab0 <valueFromString>
 800fdee:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
		int _Sec = valueFromString(_time, 7, 2);
 800fdf2:	2202      	movs	r2, #2
 800fdf4:	2107      	movs	r1, #7
 800fdf6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800fdfa:	f7fc fe59 	bl	800cab0 <valueFromString>
 800fdfe:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		DS3231_SetAlarm1_B(_Mode, _Date, _Hour, _Min, _Sec);
 800fe02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800fe06:	b2d8      	uxtb	r0, r3
 800fe08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fe0c:	b2d9      	uxtb	r1, r3
 800fe0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800fe18:	b2dc      	uxtb	r4, r3
 800fe1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	4623      	mov	r3, r4
 800fe24:	f7ff f864 	bl	800eef0 <DS3231_SetAlarm1_B>
		usb_universal_printf("SET ALARM1A: MODE=%d, DATE=%.2d, HOUR=%.2d, MINUTE=%.2d, SECON=%.2d \r\n",_Mode,_Date,_Hour,_Min,_Sec);
 800fe28:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fe2c:	9301      	str	r3, [sp, #4]
 800fe2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fe38:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800fe3c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800fe40:	488a      	ldr	r0, [pc, #552]	; (801006c <USB_Process+0xbc8>)
 800fe42:	f002 fc53 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+ALARMSET1B=")) {
 800fe46:	1d3b      	adds	r3, r7, #4
 800fe48:	4989      	ldr	r1, [pc, #548]	; (8010070 <USB_Process+0xbcc>)
 800fe4a:	6818      	ldr	r0, [r3, #0]
 800fe4c:	f004 f94d 	bl	80140ea <strstr>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d076      	beq.n	800ff44 <USB_Process+0xaa0>
		char *str = strstr((char*) buffer, "TEWS+ALARMSET1B=");
 800fe56:	1d3b      	adds	r3, r7, #4
 800fe58:	4985      	ldr	r1, [pc, #532]	; (8010070 <USB_Process+0xbcc>)
 800fe5a:	6818      	ldr	r0, [r3, #0]
 800fe5c:	f004 f945 	bl	80140ea <strstr>
 800fe60:	4603      	mov	r3, r0
 800fe62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		strtok_r(str, "=", &str);
 800fe66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe6a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800fe6e:	497d      	ldr	r1, [pc, #500]	; (8010064 <USB_Process+0xbc0>)
 800fe70:	4618      	mov	r0, r3
 800fe72:	f004 ffb1 	bl	8014dd8 <strtok_r>
		char *_time = strtok_r(str, "\r", &str);
 800fe76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe7a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800fe7e:	497a      	ldr	r1, [pc, #488]	; (8010068 <USB_Process+0xbc4>)
 800fe80:	4618      	mov	r0, r3
 800fe82:	f004 ffa9 	bl	8014dd8 <strtok_r>
 800fe86:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		int _Mode = valueFromString(_time, 0, 1);
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800fe92:	f7fc fe0d 	bl	800cab0 <valueFromString>
 800fe96:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
		int _Date = valueFromString(_time, 1, 2);
 800fe9a:	2202      	movs	r2, #2
 800fe9c:	2101      	movs	r1, #1
 800fe9e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800fea2:	f7fc fe05 	bl	800cab0 <valueFromString>
 800fea6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
		int _Hour = valueFromString(_time, 3, 2);
 800feaa:	2202      	movs	r2, #2
 800feac:	2103      	movs	r1, #3
 800feae:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800feb2:	f7fc fdfd 	bl	800cab0 <valueFromString>
 800feb6:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		int _Min = valueFromString(_time, 5, 2);
 800feba:	2202      	movs	r2, #2
 800febc:	2105      	movs	r1, #5
 800febe:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800fec2:	f7fc fdf5 	bl	800cab0 <valueFromString>
 800fec6:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		int _Sec = valueFromString(_time, 7, 2);
 800feca:	2202      	movs	r2, #2
 800fecc:	2107      	movs	r1, #7
 800fece:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800fed2:	f7fc fded 	bl	800cab0 <valueFromString>
 800fed6:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
		DS3231_SetAlarm1(_Mode, _Date, _Hour, _Min, _Sec);
 800feda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fede:	b2d8      	uxtb	r0, r3
 800fee0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fee4:	b2d9      	uxtb	r1, r3
 800fee6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800feea:	b2da      	uxtb	r2, r3
 800feec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fef0:	b2dc      	uxtb	r4, r3
 800fef2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	4623      	mov	r3, r4
 800fefc:	f7fe ff5a 	bl	800edb4 <DS3231_SetAlarm1>
		DS3231_SetAlarm1_B(_Mode, _Date, _Hour, _Min, _Sec);
 800ff00:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ff04:	b2d8      	uxtb	r0, r3
 800ff06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ff0a:	b2d9      	uxtb	r1, r3
 800ff0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ff16:	b2dc      	uxtb	r4, r3
 800ff18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ff1c:	b2db      	uxtb	r3, r3
 800ff1e:	9300      	str	r3, [sp, #0]
 800ff20:	4623      	mov	r3, r4
 800ff22:	f7fe ffe5 	bl	800eef0 <DS3231_SetAlarm1_B>
		usb_universal_printf("SET ALARM1B: MODE=%d, DATE=%.2d, HOUR=%.2d, MINUTE=%.2d, SECON=%.2d \r\n",_Mode,_Date,_Hour,_Min,_Sec);
 800ff26:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff36:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ff3a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ff3e:	484d      	ldr	r0, [pc, #308]	; (8010074 <USB_Process+0xbd0>)
 800ff40:	f002 fbd4 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+ALARMSET2B=")) {
 800ff44:	1d3b      	adds	r3, r7, #4
 800ff46:	494c      	ldr	r1, [pc, #304]	; (8010078 <USB_Process+0xbd4>)
 800ff48:	6818      	ldr	r0, [r3, #0]
 800ff4a:	f004 f8ce 	bl	80140ea <strstr>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d053      	beq.n	800fffc <USB_Process+0xb58>
		char *str = strstr((char*) buffer, "TEWS+ALARMSET2B=");
 800ff54:	1d3b      	adds	r3, r7, #4
 800ff56:	4948      	ldr	r1, [pc, #288]	; (8010078 <USB_Process+0xbd4>)
 800ff58:	6818      	ldr	r0, [r3, #0]
 800ff5a:	f004 f8c6 	bl	80140ea <strstr>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		strtok_r(str, "=", &str);
 800ff64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff68:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800ff6c:	493d      	ldr	r1, [pc, #244]	; (8010064 <USB_Process+0xbc0>)
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f004 ff32 	bl	8014dd8 <strtok_r>
		char *_time = strtok_r(str, "\r", &str);
 800ff74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff78:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800ff7c:	493a      	ldr	r1, [pc, #232]	; (8010068 <USB_Process+0xbc4>)
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f004 ff2a 	bl	8014dd8 <strtok_r>
 800ff84:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
		int _Mode = valueFromString(_time, 0, 1);
 800ff88:	2201      	movs	r2, #1
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ff90:	f7fc fd8e 	bl	800cab0 <valueFromString>
 800ff94:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
		int _Date = valueFromString(_time, 1, 2);
 800ff98:	2202      	movs	r2, #2
 800ff9a:	2101      	movs	r1, #1
 800ff9c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ffa0:	f7fc fd86 	bl	800cab0 <valueFromString>
 800ffa4:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
		int _Hour = valueFromString(_time, 3, 2);
 800ffa8:	2202      	movs	r2, #2
 800ffaa:	2103      	movs	r1, #3
 800ffac:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ffb0:	f7fc fd7e 	bl	800cab0 <valueFromString>
 800ffb4:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		int _Min = valueFromString(_time, 5, 2);
 800ffb8:	2202      	movs	r2, #2
 800ffba:	2105      	movs	r1, #5
 800ffbc:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800ffc0:	f7fc fd76 	bl	800cab0 <valueFromString>
 800ffc4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
		DS3231_SetAlarm2_B(_Mode, _Date, _Hour, _Min);
 800ffc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ffcc:	b2d8      	uxtb	r0, r3
 800ffce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ffd2:	b2d9      	uxtb	r1, r3
 800ffd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	f7ff f824 	bl	800f02c <DS3231_SetAlarm2_B>
		usb_universal_printf("SET ALARM2B: MODE=%d, DATE=%.2d, HOUR=%.2d, MINUTE=%.2d \r\n",_Mode,_Date,_Hour,_Min);
 800ffe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ffee:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800fff2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800fff6:	4821      	ldr	r0, [pc, #132]	; (801007c <USB_Process+0xbd8>)
 800fff8:	f002 fb78 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+ALARMISTRIGER")) {
 800fffc:	1d3b      	adds	r3, r7, #4
 800fffe:	4920      	ldr	r1, [pc, #128]	; (8010080 <USB_Process+0xbdc>)
 8010000:	6818      	ldr	r0, [r3, #0]
 8010002:	f004 f872 	bl	80140ea <strstr>
		//usb_universal_printf("ALARMISTRIGER: 1=%d, 2=%d\r\n",DS3231_IsAlarm1Triggered_B(),DS3231_IsAlarm2Triggered_B());
	}

	//set datetime, contoh:2010122300307 = tahun:20, bulan:10, tanggal:12, jam:23, menit:00, detik:30, hari ke:7 (minggu)
	if (strstr((char*) buffer, "TEWS+SETTIME=")) {
 8010006:	1d3b      	adds	r3, r7, #4
 8010008:	491e      	ldr	r1, [pc, #120]	; (8010084 <USB_Process+0xbe0>)
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	f004 f86d 	bl	80140ea <strstr>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	f000 8138 	beq.w	8010288 <USB_Process+0xde4>
		RTC_TimeTypeDef RTCTimeMicro;
		RTC_DateTypeDef RTCDateMicro;
		_RTC setTime;

		char *str = strstr((char*) buffer, "TEWS+SETTIME=");
 8010018:	1d3b      	adds	r3, r7, #4
 801001a:	491a      	ldr	r1, [pc, #104]	; (8010084 <USB_Process+0xbe0>)
 801001c:	6818      	ldr	r0, [r3, #0]
 801001e:	f004 f864 	bl	80140ea <strstr>
 8010022:	4603      	mov	r3, r0
 8010024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		strtok_r(str, "=", &str);
 8010028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801002c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8010030:	490c      	ldr	r1, [pc, #48]	; (8010064 <USB_Process+0xbc0>)
 8010032:	4618      	mov	r0, r3
 8010034:	f004 fed0 	bl	8014dd8 <strtok_r>
 8010038:	e026      	b.n	8010088 <USB_Process+0xbe4>
 801003a:	bf00      	nop
 801003c:	0801b5a4 	.word	0x0801b5a4
 8010040:	0801b5cc 	.word	0x0801b5cc
 8010044:	0801b5e0 	.word	0x0801b5e0
 8010048:	0801b5f8 	.word	0x0801b5f8
 801004c:	0801b60c 	.word	0x0801b60c
 8010050:	0801b624 	.word	0x0801b624
 8010054:	0801b638 	.word	0x0801b638
 8010058:	0801b650 	.word	0x0801b650
 801005c:	0801b660 	.word	0x0801b660
 8010060:	0801b670 	.word	0x0801b670
 8010064:	0801b3d8 	.word	0x0801b3d8
 8010068:	0801b56c 	.word	0x0801b56c
 801006c:	0801b684 	.word	0x0801b684
 8010070:	0801b6cc 	.word	0x0801b6cc
 8010074:	0801b6e0 	.word	0x0801b6e0
 8010078:	0801b728 	.word	0x0801b728
 801007c:	0801b73c 	.word	0x0801b73c
 8010080:	0801b778 	.word	0x0801b778
 8010084:	0801b55c 	.word	0x0801b55c
		char *_time = strtok_r(str, "\r", &str);
 8010088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801008c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8010090:	49bd      	ldr	r1, [pc, #756]	; (8010388 <USB_Process+0xee4>)
 8010092:	4618      	mov	r0, r3
 8010094:	f004 fea0 	bl	8014dd8 <strtok_r>
 8010098:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
		int _Hour = valueFromString(_time, 6, 2);
 801009c:	2202      	movs	r2, #2
 801009e:	2106      	movs	r1, #6
 80100a0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80100a4:	f7fc fd04 	bl	800cab0 <valueFromString>
 80100a8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
		int _Min = valueFromString(_time, 8, 2);
 80100ac:	2202      	movs	r2, #2
 80100ae:	2108      	movs	r1, #8
 80100b0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80100b4:	f7fc fcfc 	bl	800cab0 <valueFromString>
 80100b8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		int _Sec = valueFromString(_time, 10, 2);
 80100bc:	2202      	movs	r2, #2
 80100be:	210a      	movs	r1, #10
 80100c0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80100c4:	f7fc fcf4 	bl	800cab0 <valueFromString>
 80100c8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		int _Date = valueFromString(_time, 4, 2);
 80100cc:	2202      	movs	r2, #2
 80100ce:	2104      	movs	r1, #4
 80100d0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80100d4:	f7fc fcec 	bl	800cab0 <valueFromString>
 80100d8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
		int _Month = valueFromString(_time, 2, 2);
 80100dc:	2202      	movs	r2, #2
 80100de:	2102      	movs	r1, #2
 80100e0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80100e4:	f7fc fce4 	bl	800cab0 <valueFromString>
 80100e8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
		int _Year = valueFromString(_time, 0, 2);
 80100ec:	2202      	movs	r2, #2
 80100ee:	2100      	movs	r1, #0
 80100f0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80100f4:	f7fc fcdc 	bl	800cab0 <valueFromString>
 80100f8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
		int _Monday = valueFromString(_time, 12, 1);
 80100fc:	2201      	movs	r2, #1
 80100fe:	210c      	movs	r1, #12
 8010100:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8010104:	f7fc fcd4 	bl	800cab0 <valueFromString>
 8010108:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

		usb_universal_printf(
 801010c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010110:	9303      	str	r3, [sp, #12]
 8010112:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010116:	9302      	str	r3, [sp, #8]
 8010118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010128:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801012c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8010130:	4896      	ldr	r0, [pc, #600]	; (801038c <USB_Process+0xee8>)
 8010132:	f002 fadb 	bl	80126ec <usb_universal_printf>
				"DATE=20%.2d-%.2d-%.2d TIME=%.2d:%.2d:%.2d DAY=%d\r\n", _Year,
				_Month, _Date, _Hour, _Min, _Sec, _Monday);
		setTime.Hour = _Hour;
 8010136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801013a:	b2db      	uxtb	r3, r3
 801013c:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
		setTime.Min = _Min;
 8010140:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010144:	b2db      	uxtb	r3, r3
 8010146:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
		setTime.Sec = _Sec;
 801014a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801014e:	b2db      	uxtb	r3, r3
 8010150:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
		setTime.Date = _Date;
 8010154:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010158:	b2db      	uxtb	r3, r3
 801015a:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
		setTime.Month = _Month;
 801015e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
		setTime.Year = _Year;
 8010168:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801016c:	b2db      	uxtb	r3, r3
 801016e:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
		setTime.DaysOfWeek = _Monday;
 8010172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010176:	b2db      	uxtb	r3, r3
 8010178:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		DS3231_SetTime(&setTime);
 801017c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010180:	4618      	mov	r0, r3
 8010182:	f7fe fd2d 	bl	800ebe0 <DS3231_SetTime>
		DS3231_SetTime_B(&setTime);
 8010186:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801018a:	4618      	mov	r0, r3
 801018c:	f7fe fd74 	bl	800ec78 <DS3231_SetTime_B>

		RTCTimeMicro.Hours = _Hour;
 8010190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010194:	b2db      	uxtb	r3, r3
 8010196:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		RTCTimeMicro.Minutes = _Min;
 801019a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		RTCTimeMicro.Seconds = _Sec;
 80101a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
		HAL_RTC_SetTime(&hrtc, &RTCTimeMicro, RTC_FORMAT_BIN);
 80101ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80101b2:	2200      	movs	r2, #0
 80101b4:	4619      	mov	r1, r3
 80101b6:	4876      	ldr	r0, [pc, #472]	; (8010390 <USB_Process+0xeec>)
 80101b8:	f7f5 fb00 	bl	80057bc <HAL_RTC_SetTime>

		RTCDateMicro.Year = _Year;
 80101bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		RTCDateMicro.Month = _Month;
 80101c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
		RTCDateMicro.Date = _Date;
 80101d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		RTCDateMicro.WeekDay = _Monday;
 80101da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
		HAL_RTC_SetDate(&hrtc, &RTCDateMicro, RTC_FORMAT_BIN);
 80101e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80101e8:	2200      	movs	r2, #0
 80101ea:	4619      	mov	r1, r3
 80101ec:	4868      	ldr	r0, [pc, #416]	; (8010390 <USB_Process+0xeec>)
 80101ee:	f7f5 fc9b 	bl	8005b28 <HAL_RTC_SetDate>

		//get rtc
		RTC_TimeTypeDef getRTCTimeMicro;
		RTC_DateTypeDef getRTCDateMicro;
		_RTC getTime;
		HAL_RTC_GetTime(&hrtc, &getRTCTimeMicro, RTC_FORMAT_BIN);
 80101f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80101f6:	2200      	movs	r2, #0
 80101f8:	4619      	mov	r1, r3
 80101fa:	4865      	ldr	r0, [pc, #404]	; (8010390 <USB_Process+0xeec>)
 80101fc:	f7f5 fc2a 	bl	8005a54 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &getRTCDateMicro, RTC_FORMAT_BIN);
 8010200:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010204:	2200      	movs	r2, #0
 8010206:	4619      	mov	r1, r3
 8010208:	4861      	ldr	r0, [pc, #388]	; (8010390 <USB_Process+0xeec>)
 801020a:	f7f5 fd9d 	bl	8005d48 <HAL_RTC_GetDate>
		DS3231_GetTime(&getTime);
 801020e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010212:	4618      	mov	r0, r3
 8010214:	f7fe fbf0 	bl	800e9f8 <DS3231_GetTime>

		usb_universal_printf(
				"DATETIME ST: 20%.2d-%.2d-%.2d %.2d:%.2d:%.2d \r\n",
				getRTCDateMicro.Year, getRTCDateMicro.Month,
 8010218:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
		usb_universal_printf(
 801021c:	4618      	mov	r0, r3
				getRTCDateMicro.Year, getRTCDateMicro.Month,
 801021e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
		usb_universal_printf(
 8010222:	461c      	mov	r4, r3
				getRTCDateMicro.Date, getRTCTimeMicro.Hours,
 8010224:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
		usb_universal_printf(
 8010228:	461d      	mov	r5, r3
				getRTCDateMicro.Date, getRTCTimeMicro.Hours,
 801022a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
				getRTCTimeMicro.Minutes, getRTCTimeMicro.Seconds);
 801022e:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 8010232:	f897 10aa 	ldrb.w	r1, [r7, #170]	; 0xaa
		usb_universal_printf(
 8010236:	9102      	str	r1, [sp, #8]
 8010238:	9201      	str	r2, [sp, #4]
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	462b      	mov	r3, r5
 801023e:	4622      	mov	r2, r4
 8010240:	4601      	mov	r1, r0
 8010242:	4854      	ldr	r0, [pc, #336]	; (8010394 <USB_Process+0xef0>)
 8010244:	f002 fa52 	bl	80126ec <usb_universal_printf>
		usb_universal_printf(
				"DATETIME DS: 20%.2d-%.2d-%.2d %.2d:%.2d:%.2d \r\n",
				getTime.Year, getTime.Month, getTime.Date, getTime.Hour,
 8010248:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801024c:	781b      	ldrb	r3, [r3, #0]
		usb_universal_printf(
 801024e:	4618      	mov	r0, r3
				getTime.Year, getTime.Month, getTime.Date, getTime.Hour,
 8010250:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010254:	785b      	ldrb	r3, [r3, #1]
		usb_universal_printf(
 8010256:	461c      	mov	r4, r3
				getTime.Year, getTime.Month, getTime.Date, getTime.Hour,
 8010258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801025c:	789b      	ldrb	r3, [r3, #2]
		usb_universal_printf(
 801025e:	461d      	mov	r5, r3
				getTime.Year, getTime.Month, getTime.Date, getTime.Hour,
 8010260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010264:	791b      	ldrb	r3, [r3, #4]
		usb_universal_printf(
 8010266:	461a      	mov	r2, r3
				getTime.Min, getTime.Sec);
 8010268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801026c:	795b      	ldrb	r3, [r3, #5]
		usb_universal_printf(
 801026e:	4619      	mov	r1, r3
				getTime.Min, getTime.Sec);
 8010270:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010274:	799b      	ldrb	r3, [r3, #6]
		usb_universal_printf(
 8010276:	9302      	str	r3, [sp, #8]
 8010278:	9101      	str	r1, [sp, #4]
 801027a:	9200      	str	r2, [sp, #0]
 801027c:	462b      	mov	r3, r5
 801027e:	4622      	mov	r2, r4
 8010280:	4601      	mov	r1, r0
 8010282:	4845      	ldr	r0, [pc, #276]	; (8010398 <USB_Process+0xef4>)
 8010284:	f002 fa32 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+OPS=")) {
 8010288:	1d3b      	adds	r3, r7, #4
 801028a:	4944      	ldr	r1, [pc, #272]	; (801039c <USB_Process+0xef8>)
 801028c:	6818      	ldr	r0, [r3, #0]
 801028e:	f003 ff2c 	bl	80140ea <strstr>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	f000 80cd 	beq.w	8010434 <USB_Process+0xf90>
		//0=tanggal 1=jam 2=menit 3=detik 4=sekali per detik
		uint8_t _Mode = 1;
 801029a:	2301      	movs	r3, #1
 801029c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		uint8_t _Date = rtcTEWS2.Date;
 80102a0:	4b3f      	ldr	r3, [pc, #252]	; (80103a0 <USB_Process+0xefc>)
 80102a2:	789b      	ldrb	r3, [r3, #2]
 80102a4:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		uint8_t _Hour = rtcTEWS2.Hour;
 80102a8:	4b3d      	ldr	r3, [pc, #244]	; (80103a0 <USB_Process+0xefc>)
 80102aa:	791b      	ldrb	r3, [r3, #4]
 80102ac:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		uint8_t _Min  = rtcTEWS2.Min;
 80102b0:	4b3b      	ldr	r3, [pc, #236]	; (80103a0 <USB_Process+0xefc>)
 80102b2:	795b      	ldrb	r3, [r3, #5]
 80102b4:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
		uint8_t _Sec  = rtcTEWS2.Sec;
 80102b8:	4b39      	ldr	r3, [pc, #228]	; (80103a0 <USB_Process+0xefc>)
 80102ba:	799b      	ldrb	r3, [r3, #6]
 80102bc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

		if (strstr((char*) buffer, "NORMAL")) {
 80102c0:	1d3b      	adds	r3, r7, #4
 80102c2:	4938      	ldr	r1, [pc, #224]	; (80103a4 <USB_Process+0xf00>)
 80102c4:	6818      	ldr	r0, [r3, #0]
 80102c6:	f003 ff10 	bl	80140ea <strstr>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d025      	beq.n	801031c <USB_Process+0xe78>
			operationmode = NORMALOPS;
 80102d0:	4b35      	ldr	r3, [pc, #212]	; (80103a8 <USB_Process+0xf04>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	701a      	strb	r2, [r3, #0]
			write_eeprom_byte(&hi2c1, 0x04, &operationmode);
 80102d6:	4a34      	ldr	r2, [pc, #208]	; (80103a8 <USB_Process+0xf04>)
 80102d8:	2104      	movs	r1, #4
 80102da:	4834      	ldr	r0, [pc, #208]	; (80103ac <USB_Process+0xf08>)
 80102dc:	f7fc f98a 	bl	800c5f4 <write_eeprom_byte>
			// set alarm jam 21:17:00 UTC
			_Hour = 21;
 80102e0:	2315      	movs	r3, #21
 80102e2:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
			_Min  = 17;
 80102e6:	2311      	movs	r3, #17
 80102e8:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
			usb_universal_printf("<USB>MODE NORMAL, Alarm Set : %.2d:%.2d:%.2d UTC\r\n",_Hour,_Min,_Sec);
 80102ec:	f897 1111 	ldrb.w	r1, [r7, #273]	; 0x111
 80102f0:	f897 2110 	ldrb.w	r2, [r7, #272]	; 0x110
 80102f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80102f8:	482d      	ldr	r0, [pc, #180]	; (80103b0 <USB_Process+0xf0c>)
 80102fa:	f002 f9f7 	bl	80126ec <usb_universal_printf>
			DS3231_SetAlarm1_B(_Mode, _Date, _Hour, _Min, _Sec);
 80102fe:	f897 4110 	ldrb.w	r4, [r7, #272]	; 0x110
 8010302:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
 8010306:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 801030a:	f897 0113 	ldrb.w	r0, [r7, #275]	; 0x113
 801030e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	4623      	mov	r3, r4
 8010316:	f7fe fdeb 	bl	800eef0 <DS3231_SetAlarm1_B>
 801031a:	e088      	b.n	801042e <USB_Process+0xf8a>
		} else if (strstr((char*) buffer, "DRIFTING")) {
 801031c:	1d3b      	adds	r3, r7, #4
 801031e:	4925      	ldr	r1, [pc, #148]	; (80103b4 <USB_Process+0xf10>)
 8010320:	6818      	ldr	r0, [r3, #0]
 8010322:	f003 fee2 	bl	80140ea <strstr>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d049      	beq.n	80103c0 <USB_Process+0xf1c>
			operationmode = DRIFTINGOPS;
 801032c:	4b1e      	ldr	r3, [pc, #120]	; (80103a8 <USB_Process+0xf04>)
 801032e:	2202      	movs	r2, #2
 8010330:	701a      	strb	r2, [r3, #0]
			write_eeprom_byte(&hi2c1, 0x04, &operationmode);
 8010332:	4a1d      	ldr	r2, [pc, #116]	; (80103a8 <USB_Process+0xf04>)
 8010334:	2104      	movs	r1, #4
 8010336:	481d      	ldr	r0, [pc, #116]	; (80103ac <USB_Process+0xf08>)
 8010338:	f7fc f95c 	bl	800c5f4 <write_eeprom_byte>
			// set alarm per 1 jam
			alarm_now = _Hour + 1;
 801033c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8010340:	3301      	adds	r3, #1
 8010342:	b2da      	uxtb	r2, r3
 8010344:	4b1c      	ldr	r3, [pc, #112]	; (80103b8 <USB_Process+0xf14>)
 8010346:	701a      	strb	r2, [r3, #0]
			if(alarm_now > 23){
 8010348:	4b1b      	ldr	r3, [pc, #108]	; (80103b8 <USB_Process+0xf14>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	2b17      	cmp	r3, #23
 801034e:	d905      	bls.n	801035c <USB_Process+0xeb8>
				alarm_now = alarm_now - 24;
 8010350:	4b19      	ldr	r3, [pc, #100]	; (80103b8 <USB_Process+0xf14>)
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	3b18      	subs	r3, #24
 8010356:	b2da      	uxtb	r2, r3
 8010358:	4b17      	ldr	r3, [pc, #92]	; (80103b8 <USB_Process+0xf14>)
 801035a:	701a      	strb	r2, [r3, #0]
			}
			usb_universal_printf("<USB>MODE DRIFTING, Alarm Set : %.2d\r\n",alarm_now);
 801035c:	4b16      	ldr	r3, [pc, #88]	; (80103b8 <USB_Process+0xf14>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	4619      	mov	r1, r3
 8010362:	4816      	ldr	r0, [pc, #88]	; (80103bc <USB_Process+0xf18>)
 8010364:	f002 f9c2 	bl	80126ec <usb_universal_printf>
			DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 8010368:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <USB_Process+0xf14>)
 801036a:	781a      	ldrb	r2, [r3, #0]
 801036c:	f897 4110 	ldrb.w	r4, [r7, #272]	; 0x110
 8010370:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 8010374:	f897 0113 	ldrb.w	r0, [r7, #275]	; 0x113
 8010378:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	4623      	mov	r3, r4
 8010380:	f7fe fdb6 	bl	800eef0 <DS3231_SetAlarm1_B>
 8010384:	e053      	b.n	801042e <USB_Process+0xf8a>
 8010386:	bf00      	nop
 8010388:	0801b56c 	.word	0x0801b56c
 801038c:	0801b78c 	.word	0x0801b78c
 8010390:	20033708 	.word	0x20033708
 8010394:	0801b7c0 	.word	0x0801b7c0
 8010398:	0801b7f0 	.word	0x0801b7f0
 801039c:	0801b820 	.word	0x0801b820
 80103a0:	20033478 	.word	0x20033478
 80103a4:	0801b82c 	.word	0x0801b82c
 80103a8:	20033534 	.word	0x20033534
 80103ac:	20033484 	.word	0x20033484
 80103b0:	0801b834 	.word	0x0801b834
 80103b4:	0801b868 	.word	0x0801b868
 80103b8:	200338a0 	.word	0x200338a0
 80103bc:	0801b874 	.word	0x0801b874
		} else if (strstr((char*) buffer, "TESTING")) {
 80103c0:	1d3b      	adds	r3, r7, #4
 80103c2:	49ba      	ldr	r1, [pc, #744]	; (80106ac <USB_Process+0x1208>)
 80103c4:	6818      	ldr	r0, [r3, #0]
 80103c6:	f003 fe90 	bl	80140ea <strstr>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d02e      	beq.n	801042e <USB_Process+0xf8a>
			operationmode = HOLDOPS;
 80103d0:	4bb7      	ldr	r3, [pc, #732]	; (80106b0 <USB_Process+0x120c>)
 80103d2:	2204      	movs	r2, #4
 80103d4:	701a      	strb	r2, [r3, #0]
			write_eeprom_byte(&hi2c1, 0x04, &operationmode);
 80103d6:	4ab6      	ldr	r2, [pc, #728]	; (80106b0 <USB_Process+0x120c>)
 80103d8:	2104      	movs	r1, #4
 80103da:	48b6      	ldr	r0, [pc, #728]	; (80106b4 <USB_Process+0x1210>)
 80103dc:	f7fc f90a 	bl	800c5f4 <write_eeprom_byte>
			// set alarm per 3 jam
			alarm_now = _Hour + periodsendloc;
 80103e0:	4bb5      	ldr	r3, [pc, #724]	; (80106b8 <USB_Process+0x1214>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80103ea:	4413      	add	r3, r2
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	4bb3      	ldr	r3, [pc, #716]	; (80106bc <USB_Process+0x1218>)
 80103f0:	701a      	strb	r2, [r3, #0]
			if(alarm_now > 23){
 80103f2:	4bb2      	ldr	r3, [pc, #712]	; (80106bc <USB_Process+0x1218>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	2b17      	cmp	r3, #23
 80103f8:	d905      	bls.n	8010406 <USB_Process+0xf62>
				alarm_now = alarm_now - 24;
 80103fa:	4bb0      	ldr	r3, [pc, #704]	; (80106bc <USB_Process+0x1218>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	3b18      	subs	r3, #24
 8010400:	b2da      	uxtb	r2, r3
 8010402:	4bae      	ldr	r3, [pc, #696]	; (80106bc <USB_Process+0x1218>)
 8010404:	701a      	strb	r2, [r3, #0]
			}
			usb_universal_printf("<USB>MODE TESTING, Alarm Set : %.2d\r\n",alarm_now);
 8010406:	4bad      	ldr	r3, [pc, #692]	; (80106bc <USB_Process+0x1218>)
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	4619      	mov	r1, r3
 801040c:	48ac      	ldr	r0, [pc, #688]	; (80106c0 <USB_Process+0x121c>)
 801040e:	f002 f96d 	bl	80126ec <usb_universal_printf>
			DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 8010412:	4baa      	ldr	r3, [pc, #680]	; (80106bc <USB_Process+0x1218>)
 8010414:	781a      	ldrb	r2, [r3, #0]
 8010416:	f897 4110 	ldrb.w	r4, [r7, #272]	; 0x110
 801041a:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 801041e:	f897 0113 	ldrb.w	r0, [r7, #275]	; 0x113
 8010422:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4623      	mov	r3, r4
 801042a:	f7fe fd61 	bl	800eef0 <DS3231_SetAlarm1_B>
		}
		usb_universal_printf("OK\r\n");
 801042e:	48a5      	ldr	r0, [pc, #660]	; (80106c4 <USB_Process+0x1220>)
 8010430:	f002 f95c 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+OPS?")) {
 8010434:	1d3b      	adds	r3, r7, #4
 8010436:	49a4      	ldr	r1, [pc, #656]	; (80106c8 <USB_Process+0x1224>)
 8010438:	6818      	ldr	r0, [r3, #0]
 801043a:	f003 fe56 	bl	80140ea <strstr>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d022      	beq.n	801048a <USB_Process+0xfe6>
		if (operationmode == 0)
 8010444:	4b9a      	ldr	r3, [pc, #616]	; (80106b0 <USB_Process+0x120c>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d102      	bne.n	8010452 <USB_Process+0xfae>
			usb_universal_printf("OPS: NORMAL\r\n");
 801044c:	489f      	ldr	r0, [pc, #636]	; (80106cc <USB_Process+0x1228>)
 801044e:	f002 f94d 	bl	80126ec <usb_universal_printf>
		if (operationmode == 2)
 8010452:	4b97      	ldr	r3, [pc, #604]	; (80106b0 <USB_Process+0x120c>)
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	2b02      	cmp	r3, #2
 8010458:	d102      	bne.n	8010460 <USB_Process+0xfbc>
			usb_universal_printf("OPS: DRIFTING\r\n");
 801045a:	489d      	ldr	r0, [pc, #628]	; (80106d0 <USB_Process+0x122c>)
 801045c:	f002 f946 	bl	80126ec <usb_universal_printf>
		if (operationmode == 3)
 8010460:	4b93      	ldr	r3, [pc, #588]	; (80106b0 <USB_Process+0x120c>)
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	2b03      	cmp	r3, #3
 8010466:	d102      	bne.n	801046e <USB_Process+0xfca>
			usb_universal_printf("OPS: LEAK\r\n");
 8010468:	489a      	ldr	r0, [pc, #616]	; (80106d4 <USB_Process+0x1230>)
 801046a:	f002 f93f 	bl	80126ec <usb_universal_printf>
		if (operationmode == 4)
 801046e:	4b90      	ldr	r3, [pc, #576]	; (80106b0 <USB_Process+0x120c>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b04      	cmp	r3, #4
 8010474:	d102      	bne.n	801047c <USB_Process+0xfd8>
			usb_universal_printf("OPS: TESTING\r\n");
 8010476:	4898      	ldr	r0, [pc, #608]	; (80106d8 <USB_Process+0x1234>)
 8010478:	f002 f938 	bl	80126ec <usb_universal_printf>
		if (operationmode > 4)
 801047c:	4b8c      	ldr	r3, [pc, #560]	; (80106b0 <USB_Process+0x120c>)
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b04      	cmp	r3, #4
 8010482:	d902      	bls.n	801048a <USB_Process+0xfe6>
			usb_universal_printf("OPS: ERROR\r\n");
 8010484:	4895      	ldr	r0, [pc, #596]	; (80106dc <USB_Process+0x1238>)
 8010486:	f002 f931 	bl	80126ec <usb_universal_printf>

	/*
	 * Direct Access to UART in subsystem
	 */
	//usb_printf("%s\r\n", buffer);
	if (strstr((char*) buffer, "TEWS+IRIDIUM,")) {
 801048a:	1d3b      	adds	r3, r7, #4
 801048c:	4994      	ldr	r1, [pc, #592]	; (80106e0 <USB_Process+0x123c>)
 801048e:	6818      	ldr	r0, [r3, #0]
 8010490:	f003 fe2b 	bl	80140ea <strstr>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d026      	beq.n	80104e8 <USB_Process+0x1044>
		char *str = strstr((char*) buffer, "TEWS+IRIDIUM,");
 801049a:	1d3b      	adds	r3, r7, #4
 801049c:	4990      	ldr	r1, [pc, #576]	; (80106e0 <USB_Process+0x123c>)
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	f003 fe23 	bl	80140ea <strstr>
 80104a4:	4602      	mov	r2, r0
 80104a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80104aa:	601a      	str	r2, [r3, #0]
		char *txt;
		strtok_r(str, ",", &str);
 80104ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80104b6:	498b      	ldr	r1, [pc, #556]	; (80106e4 <USB_Process+0x1240>)
 80104b8:	4618      	mov	r0, r3
 80104ba:	f004 fc8d 	bl	8014dd8 <strtok_r>
		txt = strtok_r(str, "\n\r", &str);
 80104be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80104c8:	4987      	ldr	r1, [pc, #540]	; (80106e8 <USB_Process+0x1244>)
 80104ca:	4618      	mov	r0, r3
 80104cc:	f004 fc84 	bl	8014dd8 <strtok_r>
 80104d0:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		usb_universal_printf("Perintah: %s\r\n",txt);
 80104d4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80104d8:	4884      	ldr	r0, [pc, #528]	; (80106ec <USB_Process+0x1248>)
 80104da:	f002 f907 	bl	80126ec <usb_universal_printf>
		iridium_printf("%s\r\n", txt);
 80104de:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80104e2:	4883      	ldr	r0, [pc, #524]	; (80106f0 <USB_Process+0x124c>)
 80104e4:	f002 f93e 	bl	8012764 <iridium_printf>
	}
	if (strstr((char*) buffer, "TEWS+BT,")) {
 80104e8:	1d3b      	adds	r3, r7, #4
 80104ea:	4982      	ldr	r1, [pc, #520]	; (80106f4 <USB_Process+0x1250>)
 80104ec:	6818      	ldr	r0, [r3, #0]
 80104ee:	f003 fdfc 	bl	80140ea <strstr>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d021      	beq.n	801053c <USB_Process+0x1098>
		char *str = strstr((char*) buffer, "TEWS+BT,");
 80104f8:	1d3b      	adds	r3, r7, #4
 80104fa:	497e      	ldr	r1, [pc, #504]	; (80106f4 <USB_Process+0x1250>)
 80104fc:	6818      	ldr	r0, [r3, #0]
 80104fe:	f003 fdf4 	bl	80140ea <strstr>
 8010502:	4602      	mov	r2, r0
 8010504:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010508:	601a      	str	r2, [r3, #0]
		char *txt;
		strtok_r(str, ",", &str);
 801050a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8010514:	4973      	ldr	r1, [pc, #460]	; (80106e4 <USB_Process+0x1240>)
 8010516:	4618      	mov	r0, r3
 8010518:	f004 fc5e 	bl	8014dd8 <strtok_r>
		txt = strtok_r(str, "\n\r", &str);
 801051c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8010526:	4970      	ldr	r1, [pc, #448]	; (80106e8 <USB_Process+0x1244>)
 8010528:	4618      	mov	r0, r3
 801052a:	f004 fc55 	bl	8014dd8 <strtok_r>
 801052e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		//usb_printf("%s\r\n", txt);
		bluetooth_printf("%s\r\n", txt);
 8010532:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010536:	486e      	ldr	r0, [pc, #440]	; (80106f0 <USB_Process+0x124c>)
 8010538:	f002 f8b0 	bl	801269c <bluetooth_printf>

	}
	if (strstr((char*) buffer, "TEWS+GPS,")) {
 801053c:	1d3b      	adds	r3, r7, #4
 801053e:	496e      	ldr	r1, [pc, #440]	; (80106f8 <USB_Process+0x1254>)
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	f003 fdd2 	bl	80140ea <strstr>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d021      	beq.n	8010590 <USB_Process+0x10ec>
		char *str = strstr((char*) buffer, "TEWS+GPS,");
 801054c:	1d3b      	adds	r3, r7, #4
 801054e:	496a      	ldr	r1, [pc, #424]	; (80106f8 <USB_Process+0x1254>)
 8010550:	6818      	ldr	r0, [r3, #0]
 8010552:	f003 fdca 	bl	80140ea <strstr>
 8010556:	4602      	mov	r2, r0
 8010558:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801055c:	601a      	str	r2, [r3, #0]
		char *txt;
		strtok_r(str, ",", &str);
 801055e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8010568:	495e      	ldr	r1, [pc, #376]	; (80106e4 <USB_Process+0x1240>)
 801056a:	4618      	mov	r0, r3
 801056c:	f004 fc34 	bl	8014dd8 <strtok_r>
		txt = strtok_r(str, "\n\r", &str);
 8010570:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f107 0290 	add.w	r2, r7, #144	; 0x90
 801057a:	495b      	ldr	r1, [pc, #364]	; (80106e8 <USB_Process+0x1244>)
 801057c:	4618      	mov	r0, r3
 801057e:	f004 fc2b 	bl	8014dd8 <strtok_r>
 8010582:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
		gps_printf("%s\r\n", txt);
 8010586:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801058a:	4859      	ldr	r0, [pc, #356]	; (80106f0 <USB_Process+0x124c>)
 801058c:	f002 f912 	bl	80127b4 <gps_printf>
	///////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	 * Set Parameter debug
	 */
	if (strstr((char*) buffer, "TEWS+DEBUG=")) {
 8010590:	1d3b      	adds	r3, r7, #4
 8010592:	495a      	ldr	r1, [pc, #360]	; (80106fc <USB_Process+0x1258>)
 8010594:	6818      	ldr	r0, [r3, #0]
 8010596:	f003 fda8 	bl	80140ea <strstr>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d010      	beq.n	80105c2 <USB_Process+0x111e>
		debug = parsingdatausb(buffer, "TEWS+DEBUG=");
 80105a0:	1d3b      	adds	r3, r7, #4
 80105a2:	4956      	ldr	r1, [pc, #344]	; (80106fc <USB_Process+0x1258>)
 80105a4:	6818      	ldr	r0, [r3, #0]
 80105a6:	f000 fb73 	bl	8010c90 <parsingdatausb>
 80105aa:	4603      	mov	r3, r0
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	4b54      	ldr	r3, [pc, #336]	; (8010700 <USB_Process+0x125c>)
 80105b0:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x05, &debug);
 80105b2:	4a53      	ldr	r2, [pc, #332]	; (8010700 <USB_Process+0x125c>)
 80105b4:	2105      	movs	r1, #5
 80105b6:	483f      	ldr	r0, [pc, #252]	; (80106b4 <USB_Process+0x1210>)
 80105b8:	f7fc f81c 	bl	800c5f4 <write_eeprom_byte>
		usb_universal_printf("OK\r\n");
 80105bc:	4841      	ldr	r0, [pc, #260]	; (80106c4 <USB_Process+0x1220>)
 80105be:	f002 f895 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUG?")) {
 80105c2:	1d3b      	adds	r3, r7, #4
 80105c4:	494f      	ldr	r1, [pc, #316]	; (8010704 <USB_Process+0x1260>)
 80105c6:	6818      	ldr	r0, [r3, #0]
 80105c8:	f003 fd8f 	bl	80140ea <strstr>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d014      	beq.n	80105fc <USB_Process+0x1158>
		if (debug == 0)
 80105d2:	4b4b      	ldr	r3, [pc, #300]	; (8010700 <USB_Process+0x125c>)
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d102      	bne.n	80105e0 <USB_Process+0x113c>
			usb_universal_printf("DEBUG: NONACTIVE\r\n");
 80105da:	484b      	ldr	r0, [pc, #300]	; (8010708 <USB_Process+0x1264>)
 80105dc:	f002 f886 	bl	80126ec <usb_universal_printf>
		if (debug == 1)
 80105e0:	4b47      	ldr	r3, [pc, #284]	; (8010700 <USB_Process+0x125c>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d102      	bne.n	80105ee <USB_Process+0x114a>
			usb_universal_printf("DEBUG: ACTIVE\r\n");
 80105e8:	4848      	ldr	r0, [pc, #288]	; (801070c <USB_Process+0x1268>)
 80105ea:	f002 f87f 	bl	80126ec <usb_universal_printf>
		if (debug > 1)
 80105ee:	4b44      	ldr	r3, [pc, #272]	; (8010700 <USB_Process+0x125c>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d902      	bls.n	80105fc <USB_Process+0x1158>
			usb_universal_printf("DEBUG: ERROR\r\n");
 80105f6:	4846      	ldr	r0, [pc, #280]	; (8010710 <USB_Process+0x126c>)
 80105f8:	f002 f878 	bl	80126ec <usb_universal_printf>
	}

	/*
	 * set ID BUOY
	 */
	if (strstr((char*) buffer, "TEWS+ID=")) {
 80105fc:	1d3b      	adds	r3, r7, #4
 80105fe:	4945      	ldr	r1, [pc, #276]	; (8010714 <USB_Process+0x1270>)
 8010600:	6818      	ldr	r0, [r3, #0]
 8010602:	f003 fd72 	bl	80140ea <strstr>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d010      	beq.n	801062e <USB_Process+0x118a>
		idBUOY = parsingdatausb(buffer, "TEWS+ID=");
 801060c:	1d3b      	adds	r3, r7, #4
 801060e:	4941      	ldr	r1, [pc, #260]	; (8010714 <USB_Process+0x1270>)
 8010610:	6818      	ldr	r0, [r3, #0]
 8010612:	f000 fb3d 	bl	8010c90 <parsingdatausb>
 8010616:	4603      	mov	r3, r0
 8010618:	b2da      	uxtb	r2, r3
 801061a:	4b3f      	ldr	r3, [pc, #252]	; (8010718 <USB_Process+0x1274>)
 801061c:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x02, &idBUOY);
 801061e:	4a3e      	ldr	r2, [pc, #248]	; (8010718 <USB_Process+0x1274>)
 8010620:	2102      	movs	r1, #2
 8010622:	4824      	ldr	r0, [pc, #144]	; (80106b4 <USB_Process+0x1210>)
 8010624:	f7fb ffe6 	bl	800c5f4 <write_eeprom_byte>
		usb_universal_printf("OK\r\n");
 8010628:	4826      	ldr	r0, [pc, #152]	; (80106c4 <USB_Process+0x1220>)
 801062a:	f002 f85f 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+ID?")) {
 801062e:	1d3b      	adds	r3, r7, #4
 8010630:	493a      	ldr	r1, [pc, #232]	; (801071c <USB_Process+0x1278>)
 8010632:	6818      	ldr	r0, [r3, #0]
 8010634:	f003 fd59 	bl	80140ea <strstr>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d005      	beq.n	801064a <USB_Process+0x11a6>
		usb_universal_printf("ID BUOY: %u\r\n", idBUOY);
 801063e:	4b36      	ldr	r3, [pc, #216]	; (8010718 <USB_Process+0x1274>)
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	4619      	mov	r1, r3
 8010644:	4836      	ldr	r0, [pc, #216]	; (8010720 <USB_Process+0x127c>)
 8010646:	f002 f851 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+BTON")) {
 801064a:	1d3b      	adds	r3, r7, #4
 801064c:	4935      	ldr	r1, [pc, #212]	; (8010724 <USB_Process+0x1280>)
 801064e:	6818      	ldr	r0, [r3, #0]
 8010650:	f003 fd4b 	bl	80140ea <strstr>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d008      	beq.n	801066c <USB_Process+0x11c8>
		HAL_GPIO_WritePin(BT_CON_GPIO_Port, BT_CON_Pin, GPIO_PIN_SET);
 801065a:	2201      	movs	r2, #1
 801065c:	2104      	movs	r1, #4
 801065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010662:	f7f1 fc95 	bl	8001f90 <HAL_GPIO_WritePin>
		usb_universal_printf("BLUETOOTH ON\r\n");
 8010666:	4830      	ldr	r0, [pc, #192]	; (8010728 <USB_Process+0x1284>)
 8010668:	f002 f840 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+BTOFF")) {
 801066c:	1d3b      	adds	r3, r7, #4
 801066e:	492f      	ldr	r1, [pc, #188]	; (801072c <USB_Process+0x1288>)
 8010670:	6818      	ldr	r0, [r3, #0]
 8010672:	f003 fd3a 	bl	80140ea <strstr>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d008      	beq.n	801068e <USB_Process+0x11ea>
		HAL_GPIO_WritePin(BT_CON_GPIO_Port, BT_CON_Pin, GPIO_PIN_RESET);
 801067c:	2200      	movs	r2, #0
 801067e:	2104      	movs	r1, #4
 8010680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010684:	f7f1 fc84 	bl	8001f90 <HAL_GPIO_WritePin>
		usb_universal_printf("BLUETOOTH OFF\r\n");
 8010688:	4829      	ldr	r0, [pc, #164]	; (8010730 <USB_Process+0x128c>)
 801068a:	f002 f82f 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+DEBUGUSB=")) {
 801068e:	1d3b      	adds	r3, r7, #4
 8010690:	4928      	ldr	r1, [pc, #160]	; (8010734 <USB_Process+0x1290>)
 8010692:	6818      	ldr	r0, [r3, #0]
 8010694:	f003 fd29 	bl	80140ea <strstr>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d057      	beq.n	801074e <USB_Process+0x12aa>
		debuguni = parsingdatausb(buffer, "TEWS+DEBUGUSB=");
 801069e:	1d3b      	adds	r3, r7, #4
 80106a0:	4924      	ldr	r1, [pc, #144]	; (8010734 <USB_Process+0x1290>)
 80106a2:	6818      	ldr	r0, [r3, #0]
 80106a4:	f000 faf4 	bl	8010c90 <parsingdatausb>
 80106a8:	4603      	mov	r3, r0
 80106aa:	e045      	b.n	8010738 <USB_Process+0x1294>
 80106ac:	0801b89c 	.word	0x0801b89c
 80106b0:	20033534 	.word	0x20033534
 80106b4:	20033484 	.word	0x20033484
 80106b8:	20033374 	.word	0x20033374
 80106bc:	200338a0 	.word	0x200338a0
 80106c0:	0801b8a4 	.word	0x0801b8a4
 80106c4:	0801b320 	.word	0x0801b320
 80106c8:	0801b8cc 	.word	0x0801b8cc
 80106cc:	0801b8d8 	.word	0x0801b8d8
 80106d0:	0801b8e8 	.word	0x0801b8e8
 80106d4:	0801b8f8 	.word	0x0801b8f8
 80106d8:	0801b904 	.word	0x0801b904
 80106dc:	0801b914 	.word	0x0801b914
 80106e0:	0801b924 	.word	0x0801b924
 80106e4:	0801b3dc 	.word	0x0801b3dc
 80106e8:	0801b934 	.word	0x0801b934
 80106ec:	0801b938 	.word	0x0801b938
 80106f0:	0801b948 	.word	0x0801b948
 80106f4:	0801b950 	.word	0x0801b950
 80106f8:	0801b95c 	.word	0x0801b95c
 80106fc:	0801b968 	.word	0x0801b968
 8010700:	200003a4 	.word	0x200003a4
 8010704:	0801b974 	.word	0x0801b974
 8010708:	0801b980 	.word	0x0801b980
 801070c:	0801b994 	.word	0x0801b994
 8010710:	0801b9a4 	.word	0x0801b9a4
 8010714:	0801b9b4 	.word	0x0801b9b4
 8010718:	200338f4 	.word	0x200338f4
 801071c:	0801b9c0 	.word	0x0801b9c0
 8010720:	0801b9cc 	.word	0x0801b9cc
 8010724:	0801b9dc 	.word	0x0801b9dc
 8010728:	0801b9e8 	.word	0x0801b9e8
 801072c:	0801b9f8 	.word	0x0801b9f8
 8010730:	0801ba04 	.word	0x0801ba04
 8010734:	0801ba14 	.word	0x0801ba14
 8010738:	b2da      	uxtb	r2, r3
 801073a:	4ba5      	ldr	r3, [pc, #660]	; (80109d0 <USB_Process+0x152c>)
 801073c:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x3E, &debuguni);
 801073e:	4aa4      	ldr	r2, [pc, #656]	; (80109d0 <USB_Process+0x152c>)
 8010740:	213e      	movs	r1, #62	; 0x3e
 8010742:	48a4      	ldr	r0, [pc, #656]	; (80109d4 <USB_Process+0x1530>)
 8010744:	f7fb ff56 	bl	800c5f4 <write_eeprom_byte>
		usb_universal_printf("OK\r\n");
 8010748:	48a3      	ldr	r0, [pc, #652]	; (80109d8 <USB_Process+0x1534>)
 801074a:	f001 ffcf 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGIRIDIUM=")) {
 801074e:	1d3b      	adds	r3, r7, #4
 8010750:	49a2      	ldr	r1, [pc, #648]	; (80109dc <USB_Process+0x1538>)
 8010752:	6818      	ldr	r0, [r3, #0]
 8010754:	f003 fcc9 	bl	80140ea <strstr>
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d010      	beq.n	8010780 <USB_Process+0x12dc>
		debugiridium = parsingdatausb(buffer, "TEWS+DEBUGIRIDIUM=");
 801075e:	1d3b      	adds	r3, r7, #4
 8010760:	499e      	ldr	r1, [pc, #632]	; (80109dc <USB_Process+0x1538>)
 8010762:	6818      	ldr	r0, [r3, #0]
 8010764:	f000 fa94 	bl	8010c90 <parsingdatausb>
 8010768:	4603      	mov	r3, r0
 801076a:	b2da      	uxtb	r2, r3
 801076c:	4b9c      	ldr	r3, [pc, #624]	; (80109e0 <USB_Process+0x153c>)
 801076e:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x38, &debugiridium);
 8010770:	4a9b      	ldr	r2, [pc, #620]	; (80109e0 <USB_Process+0x153c>)
 8010772:	2138      	movs	r1, #56	; 0x38
 8010774:	4897      	ldr	r0, [pc, #604]	; (80109d4 <USB_Process+0x1530>)
 8010776:	f7fb ff3d 	bl	800c5f4 <write_eeprom_byte>
		usb_universal_printf("OK\r\n");
 801077a:	4897      	ldr	r0, [pc, #604]	; (80109d8 <USB_Process+0x1534>)
 801077c:	f001 ffb6 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGGPS=")) {
 8010780:	1d3b      	adds	r3, r7, #4
 8010782:	4998      	ldr	r1, [pc, #608]	; (80109e4 <USB_Process+0x1540>)
 8010784:	6818      	ldr	r0, [r3, #0]
 8010786:	f003 fcb0 	bl	80140ea <strstr>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d010      	beq.n	80107b2 <USB_Process+0x130e>
		debuggps = parsingdatausb(buffer, "TEWS+DEBUGGPS=");
 8010790:	1d3b      	adds	r3, r7, #4
 8010792:	4994      	ldr	r1, [pc, #592]	; (80109e4 <USB_Process+0x1540>)
 8010794:	6818      	ldr	r0, [r3, #0]
 8010796:	f000 fa7b 	bl	8010c90 <parsingdatausb>
 801079a:	4603      	mov	r3, r0
 801079c:	b2da      	uxtb	r2, r3
 801079e:	4b92      	ldr	r3, [pc, #584]	; (80109e8 <USB_Process+0x1544>)
 80107a0:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x39, &debuggps);
 80107a2:	4a91      	ldr	r2, [pc, #580]	; (80109e8 <USB_Process+0x1544>)
 80107a4:	2139      	movs	r1, #57	; 0x39
 80107a6:	488b      	ldr	r0, [pc, #556]	; (80109d4 <USB_Process+0x1530>)
 80107a8:	f7fb ff24 	bl	800c5f4 <write_eeprom_byte>
		usb_universal_printf("OK\r\n");
 80107ac:	488a      	ldr	r0, [pc, #552]	; (80109d8 <USB_Process+0x1534>)
 80107ae:	f001 ff9d 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGBLUETOOTH=")) {
 80107b2:	1d3b      	adds	r3, r7, #4
 80107b4:	498d      	ldr	r1, [pc, #564]	; (80109ec <USB_Process+0x1548>)
 80107b6:	6818      	ldr	r0, [r3, #0]
 80107b8:	f003 fc97 	bl	80140ea <strstr>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d010      	beq.n	80107e4 <USB_Process+0x1340>
		debugbluetooth = parsingdatausb(buffer, "TEWS+DEBUGBLUETOOTH=");
 80107c2:	1d3b      	adds	r3, r7, #4
 80107c4:	4989      	ldr	r1, [pc, #548]	; (80109ec <USB_Process+0x1548>)
 80107c6:	6818      	ldr	r0, [r3, #0]
 80107c8:	f000 fa62 	bl	8010c90 <parsingdatausb>
 80107cc:	4603      	mov	r3, r0
 80107ce:	b2da      	uxtb	r2, r3
 80107d0:	4b87      	ldr	r3, [pc, #540]	; (80109f0 <USB_Process+0x154c>)
 80107d2:	701a      	strb	r2, [r3, #0]
		write_eeprom_byte(&hi2c1, 0x3A, &debugbluetooth);
 80107d4:	4a86      	ldr	r2, [pc, #536]	; (80109f0 <USB_Process+0x154c>)
 80107d6:	213a      	movs	r1, #58	; 0x3a
 80107d8:	487e      	ldr	r0, [pc, #504]	; (80109d4 <USB_Process+0x1530>)
 80107da:	f7fb ff0b 	bl	800c5f4 <write_eeprom_byte>
		usb_universal_printf("OK\r\n");
 80107de:	487e      	ldr	r0, [pc, #504]	; (80109d8 <USB_Process+0x1534>)
 80107e0:	f001 ff84 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGUSB?")) {
 80107e4:	1d3b      	adds	r3, r7, #4
 80107e6:	4983      	ldr	r1, [pc, #524]	; (80109f4 <USB_Process+0x1550>)
 80107e8:	6818      	ldr	r0, [r3, #0]
 80107ea:	f003 fc7e 	bl	80140ea <strstr>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d005      	beq.n	8010800 <USB_Process+0x135c>
		usb_universal_printf("DEBUG USB: %u\r\n", debuguni);
 80107f4:	4b76      	ldr	r3, [pc, #472]	; (80109d0 <USB_Process+0x152c>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	4619      	mov	r1, r3
 80107fa:	487f      	ldr	r0, [pc, #508]	; (80109f8 <USB_Process+0x1554>)
 80107fc:	f001 ff76 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGBLUETOOTH?")) {
 8010800:	1d3b      	adds	r3, r7, #4
 8010802:	497e      	ldr	r1, [pc, #504]	; (80109fc <USB_Process+0x1558>)
 8010804:	6818      	ldr	r0, [r3, #0]
 8010806:	f003 fc70 	bl	80140ea <strstr>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d005      	beq.n	801081c <USB_Process+0x1378>
		usb_universal_printf("DEBUG BLUETOOTH: %u\r\n", debugbluetooth);
 8010810:	4b77      	ldr	r3, [pc, #476]	; (80109f0 <USB_Process+0x154c>)
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	4619      	mov	r1, r3
 8010816:	487a      	ldr	r0, [pc, #488]	; (8010a00 <USB_Process+0x155c>)
 8010818:	f001 ff68 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGIRIDIUM?")) {
 801081c:	1d3b      	adds	r3, r7, #4
 801081e:	4979      	ldr	r1, [pc, #484]	; (8010a04 <USB_Process+0x1560>)
 8010820:	6818      	ldr	r0, [r3, #0]
 8010822:	f003 fc62 	bl	80140ea <strstr>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d005      	beq.n	8010838 <USB_Process+0x1394>
		usb_universal_printf("DEBUG IRIDIUM: %u\r\n", debugiridium);
 801082c:	4b6c      	ldr	r3, [pc, #432]	; (80109e0 <USB_Process+0x153c>)
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	4619      	mov	r1, r3
 8010832:	4875      	ldr	r0, [pc, #468]	; (8010a08 <USB_Process+0x1564>)
 8010834:	f001 ff5a 	bl	80126ec <usb_universal_printf>
	}
	if (strstr((char*) buffer, "TEWS+DEBUGGPS?")) {
 8010838:	1d3b      	adds	r3, r7, #4
 801083a:	4974      	ldr	r1, [pc, #464]	; (8010a0c <USB_Process+0x1568>)
 801083c:	6818      	ldr	r0, [r3, #0]
 801083e:	f003 fc54 	bl	80140ea <strstr>
 8010842:	4603      	mov	r3, r0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d005      	beq.n	8010854 <USB_Process+0x13b0>
		usb_universal_printf("DEBUG GPS: %u\r\n", debuggps);
 8010848:	4b67      	ldr	r3, [pc, #412]	; (80109e8 <USB_Process+0x1544>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	4619      	mov	r1, r3
 801084e:	4870      	ldr	r0, [pc, #448]	; (8010a10 <USB_Process+0x156c>)
 8010850:	f001 ff4c 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+DEBUGSTATUS?")) {
 8010854:	1d3b      	adds	r3, r7, #4
 8010856:	496f      	ldr	r1, [pc, #444]	; (8010a14 <USB_Process+0x1570>)
 8010858:	6818      	ldr	r0, [r3, #0]
 801085a:	f003 fc46 	bl	80140ea <strstr>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d017      	beq.n	8010894 <USB_Process+0x13f0>
		usb_universal_printf("DEBUG IRIDIUM: %u\r\n", debugiridium);
 8010864:	4b5e      	ldr	r3, [pc, #376]	; (80109e0 <USB_Process+0x153c>)
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	4619      	mov	r1, r3
 801086a:	4867      	ldr	r0, [pc, #412]	; (8010a08 <USB_Process+0x1564>)
 801086c:	f001 ff3e 	bl	80126ec <usb_universal_printf>
		usb_universal_printf("DEBUG USB: %u\r\n", debuguni);
 8010870:	4b57      	ldr	r3, [pc, #348]	; (80109d0 <USB_Process+0x152c>)
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	4619      	mov	r1, r3
 8010876:	4860      	ldr	r0, [pc, #384]	; (80109f8 <USB_Process+0x1554>)
 8010878:	f001 ff38 	bl	80126ec <usb_universal_printf>
		usb_universal_printf("DEBUG BLUETOOTH: %u\r\n", debugbluetooth);
 801087c:	4b5c      	ldr	r3, [pc, #368]	; (80109f0 <USB_Process+0x154c>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	4619      	mov	r1, r3
 8010882:	485f      	ldr	r0, [pc, #380]	; (8010a00 <USB_Process+0x155c>)
 8010884:	f001 ff32 	bl	80126ec <usb_universal_printf>
		usb_universal_printf("DEBUG GPS: %u\r\n", debuggps);
 8010888:	4b57      	ldr	r3, [pc, #348]	; (80109e8 <USB_Process+0x1544>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	4619      	mov	r1, r3
 801088e:	4860      	ldr	r0, [pc, #384]	; (8010a10 <USB_Process+0x156c>)
 8010890:	f001 ff2c 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+LIST"))
 8010894:	1d3b      	adds	r3, r7, #4
 8010896:	4960      	ldr	r1, [pc, #384]	; (8010a18 <USB_Process+0x1574>)
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	f003 fc26 	bl	80140ea <strstr>
 801089e:	4603      	mov	r3, r0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d001      	beq.n	80108a8 <USB_Process+0x1404>
		PrintParameter();
 80108a4:	f000 f8e0 	bl	8010a68 <PrintParameter>

	if (strstr((char*) buffer, "TEWS+SIGNALIRIDIUM?")) {
 80108a8:	1d3b      	adds	r3, r7, #4
 80108aa:	495c      	ldr	r1, [pc, #368]	; (8010a1c <USB_Process+0x1578>)
 80108ac:	6818      	ldr	r0, [r3, #0]
 80108ae:	f003 fc1c 	bl	80140ea <strstr>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00d      	beq.n	80108d4 <USB_Process+0x1430>
		if (HAL_GPIO_ReadPin(NETWORKINT_GPIO_Port, NETWORKINT_Pin))
 80108b8:	2120      	movs	r1, #32
 80108ba:	4859      	ldr	r0, [pc, #356]	; (8010a20 <USB_Process+0x157c>)
 80108bc:	f7f1 fb42 	bl	8001f44 <HAL_GPIO_ReadPin>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d003      	beq.n	80108ce <USB_Process+0x142a>
			usb_universal_printf("IRIDIUM SIGNAL AVAILABLE\r\n");
 80108c6:	4857      	ldr	r0, [pc, #348]	; (8010a24 <USB_Process+0x1580>)
 80108c8:	f001 ff10 	bl	80126ec <usb_universal_printf>
 80108cc:	e002      	b.n	80108d4 <USB_Process+0x1430>
		else
			usb_universal_printf("IRIDIUM SIGNAL NOT AVAILABLE\r\n");
 80108ce:	4856      	ldr	r0, [pc, #344]	; (8010a28 <USB_Process+0x1584>)
 80108d0:	f001 ff0c 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+IRIDIUMSTATUS?")) {
 80108d4:	1d3b      	adds	r3, r7, #4
 80108d6:	4955      	ldr	r1, [pc, #340]	; (8010a2c <USB_Process+0x1588>)
 80108d8:	6818      	ldr	r0, [r3, #0]
 80108da:	f003 fc06 	bl	80140ea <strstr>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00c      	beq.n	80108fe <USB_Process+0x145a>
		usb_universal_printf(
 80108e4:	4b52      	ldr	r3, [pc, #328]	; (8010a30 <USB_Process+0x158c>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	4619      	mov	r1, r3
				"Iridium Queue: %d || Iridium Status: %d || Iridium Status Receive: %d \r\n",
				iridiumqueuenumber, IRIDIUM.status, IRIDIUM.statusreceive);
 80108ea:	4b52      	ldr	r3, [pc, #328]	; (8010a34 <USB_Process+0x1590>)
 80108ec:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
		usb_universal_printf(
 80108f0:	461a      	mov	r2, r3
				iridiumqueuenumber, IRIDIUM.status, IRIDIUM.statusreceive);
 80108f2:	4b50      	ldr	r3, [pc, #320]	; (8010a34 <USB_Process+0x1590>)
 80108f4:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
		usb_universal_printf(
 80108f8:	484f      	ldr	r0, [pc, #316]	; (8010a38 <USB_Process+0x1594>)
 80108fa:	f001 fef7 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "TEWS+RTC")) {
 80108fe:	1d3b      	adds	r3, r7, #4
 8010900:	494e      	ldr	r1, [pc, #312]	; (8010a3c <USB_Process+0x1598>)
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	f003 fbf1 	bl	80140ea <strstr>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d004      	beq.n	8010918 <USB_Process+0x1474>
		osSemaphoreRelease(rtcBinarySemHandle);
 801090e:	4b4c      	ldr	r3, [pc, #304]	; (8010a40 <USB_Process+0x159c>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4618      	mov	r0, r3
 8010914:	f7f7 ff66 	bl	80087e4 <osSemaphoreRelease>
	}

	if (strstr((char*) buffer, "TEWS+SENDIRIDIUM,")) {
 8010918:	1d3b      	adds	r3, r7, #4
 801091a:	494a      	ldr	r1, [pc, #296]	; (8010a44 <USB_Process+0x15a0>)
 801091c:	6818      	ldr	r0, [r3, #0]
 801091e:	f003 fbe4 	bl	80140ea <strstr>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d02d      	beq.n	8010984 <USB_Process+0x14e0>
		char *str = strstr((char*) buffer, "TEWS+SENDIRIDIUM,");
 8010928:	1d3b      	adds	r3, r7, #4
 801092a:	4946      	ldr	r1, [pc, #280]	; (8010a44 <USB_Process+0x15a0>)
 801092c:	6818      	ldr	r0, [r3, #0]
 801092e:	f003 fbdc 	bl	80140ea <strstr>
 8010932:	4602      	mov	r2, r0
 8010934:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010938:	601a      	str	r2, [r3, #0]
		strtok_r(str, ",", &str);
 801093a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8010944:	4940      	ldr	r1, [pc, #256]	; (8010a48 <USB_Process+0x15a4>)
 8010946:	4618      	mov	r0, r3
 8010948:	f004 fa46 	bl	8014dd8 <strtok_r>
		//akustik_printf("%s\r\n", str);
		uint16_t sizedata = strlen(str);
 801094c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4618      	mov	r0, r3
 8010954:	f7ef fc56 	bl	8000204 <strlen>
 8010958:	4603      	mov	r3, r0
 801095a:	b29a      	uxth	r2, r3
 801095c:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 8010960:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(sizedatairidiumQueueHandle, &sizedata, 0U, 0U);
 8010962:	4b3a      	ldr	r3, [pc, #232]	; (8010a4c <USB_Process+0x15a8>)
 8010964:	6818      	ldr	r0, [r3, #0]
 8010966:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 801096a:	2300      	movs	r3, #0
 801096c:	2200      	movs	r2, #0
 801096e:	f7f8 f811 	bl	8008994 <osMessageQueuePut>
		osMessageQueuePut(iridiumsendQueueHandle, str, 0U, 0U);
 8010972:	4b37      	ldr	r3, [pc, #220]	; (8010a50 <USB_Process+0x15ac>)
 8010974:	6818      	ldr	r0, [r3, #0]
 8010976:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801097a:	6819      	ldr	r1, [r3, #0]
 801097c:	2300      	movs	r3, #0
 801097e:	2200      	movs	r2, #0
 8010980:	f7f8 f808 	bl	8008994 <osMessageQueuePut>
	}

	if (strstr((char*) buffer, "TEWS+LEAKTEST")) {
 8010984:	1d3b      	adds	r3, r7, #4
 8010986:	4933      	ldr	r1, [pc, #204]	; (8010a54 <USB_Process+0x15b0>)
 8010988:	6818      	ldr	r0, [r3, #0]
 801098a:	f003 fbae 	bl	80140ea <strstr>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00c      	beq.n	80109ae <USB_Process+0x150a>
		uint8_t statusleak;
		statusleak = HAL_GPIO_ReadPin(LEAKAGE_GPIO_Port,
 8010994:	2180      	movs	r1, #128	; 0x80
 8010996:	4830      	ldr	r0, [pc, #192]	; (8010a58 <USB_Process+0x15b4>)
 8010998:	f7f1 fad4 	bl	8001f44 <HAL_GPIO_ReadPin>
 801099c:	4603      	mov	r3, r0
 801099e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
					LEAKAGE_Pin);
		usb_universal_printf("LEAK STATUS: %d\r\n", statusleak);
 80109a2:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80109a6:	4619      	mov	r1, r3
 80109a8:	482c      	ldr	r0, [pc, #176]	; (8010a5c <USB_Process+0x15b8>)
 80109aa:	f001 fe9f 	bl	80126ec <usb_universal_printf>
	}

	if (strstr((char*) buffer, "+DISCONNECTED")) {
 80109ae:	1d3b      	adds	r3, r7, #4
 80109b0:	492b      	ldr	r1, [pc, #172]	; (8010a60 <USB_Process+0x15bc>)
 80109b2:	6818      	ldr	r0, [r3, #0]
 80109b4:	f003 fb99 	bl	80140ea <strstr>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d002      	beq.n	80109c4 <USB_Process+0x1520>
		usb_printf("Bluetooth disconnected.\r\n");
 80109be:	4829      	ldr	r0, [pc, #164]	; (8010a64 <USB_Process+0x15c0>)
 80109c0:	f001 fe44 	bl	801264c <usb_printf>
		//BT_Sequence();
	}
}
 80109c4:	bf00      	nop
 80109c6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bdb0      	pop	{r4, r5, r7, pc}
 80109ce:	bf00      	nop
 80109d0:	200338a1 	.word	0x200338a1
 80109d4:	20033484 	.word	0x20033484
 80109d8:	0801b320 	.word	0x0801b320
 80109dc:	0801ba24 	.word	0x0801ba24
 80109e0:	20033328 	.word	0x20033328
 80109e4:	0801ba38 	.word	0x0801ba38
 80109e8:	20033473 	.word	0x20033473
 80109ec:	0801ba48 	.word	0x0801ba48
 80109f0:	200338a8 	.word	0x200338a8
 80109f4:	0801ba60 	.word	0x0801ba60
 80109f8:	0801ba70 	.word	0x0801ba70
 80109fc:	0801ba80 	.word	0x0801ba80
 8010a00:	0801ba98 	.word	0x0801ba98
 8010a04:	0801bab0 	.word	0x0801bab0
 8010a08:	0801bac4 	.word	0x0801bac4
 8010a0c:	0801bad8 	.word	0x0801bad8
 8010a10:	0801bae8 	.word	0x0801bae8
 8010a14:	0801baf8 	.word	0x0801baf8
 8010a18:	0801bb0c 	.word	0x0801bb0c
 8010a1c:	0801bb18 	.word	0x0801bb18
 8010a20:	48000400 	.word	0x48000400
 8010a24:	0801bb2c 	.word	0x0801bb2c
 8010a28:	0801bb48 	.word	0x0801bb48
 8010a2c:	0801bb68 	.word	0x0801bb68
 8010a30:	200320f6 	.word	0x200320f6
 8010a34:	20032e8c 	.word	0x20032e8c
 8010a38:	0801bb7c 	.word	0x0801bb7c
 8010a3c:	0801bbc8 	.word	0x0801bbc8
 8010a40:	200335ec 	.word	0x200335ec
 8010a44:	0801bbd4 	.word	0x0801bbd4
 8010a48:	0801b3dc 	.word	0x0801b3dc
 8010a4c:	20033734 	.word	0x20033734
 8010a50:	2003355c 	.word	0x2003355c
 8010a54:	0801bbe8 	.word	0x0801bbe8
 8010a58:	48001000 	.word	0x48001000
 8010a5c:	0801bbf8 	.word	0x0801bbf8
 8010a60:	0801bc0c 	.word	0x0801bc0c
 8010a64:	0801bc1c 	.word	0x0801bc1c

08010a68 <PrintParameter>:

void PrintParameter(void) {
 8010a68:	b5b0      	push	{r4, r5, r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af04      	add	r7, sp, #16
	usb_universal_printf("==================================\r\n");
 8010a6e:	4864      	ldr	r0, [pc, #400]	; (8010c00 <PrintParameter+0x198>)
 8010a70:	f001 fe3c 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("List Parameter GPS Tracker\r\n");
 8010a74:	4863      	ldr	r0, [pc, #396]	; (8010c04 <PrintParameter+0x19c>)
 8010a76:	f001 fe39 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("==================================\r\n");
 8010a7a:	4861      	ldr	r0, [pc, #388]	; (8010c00 <PrintParameter+0x198>)
 8010a7c:	f001 fe36 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("ID TRACKER = %u\r\n", idBUOY);
 8010a80:	4b61      	ldr	r3, [pc, #388]	; (8010c08 <PrintParameter+0x1a0>)
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	4619      	mov	r1, r3
 8010a86:	4861      	ldr	r0, [pc, #388]	; (8010c0c <PrintParameter+0x1a4>)
 8010a88:	f001 fe30 	bl	80126ec <usb_universal_printf>
	if (operationmode == 0)
 8010a8c:	4b60      	ldr	r3, [pc, #384]	; (8010c10 <PrintParameter+0x1a8>)
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d102      	bne.n	8010a9a <PrintParameter+0x32>
		usb_universal_printf("OPS = NORMAL\r\n");
 8010a94:	485f      	ldr	r0, [pc, #380]	; (8010c14 <PrintParameter+0x1ac>)
 8010a96:	f001 fe29 	bl	80126ec <usb_universal_printf>
	if (operationmode == 2)
 8010a9a:	4b5d      	ldr	r3, [pc, #372]	; (8010c10 <PrintParameter+0x1a8>)
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d102      	bne.n	8010aa8 <PrintParameter+0x40>
		usb_universal_printf("OPS = DRIFTING\r\n");
 8010aa2:	485d      	ldr	r0, [pc, #372]	; (8010c18 <PrintParameter+0x1b0>)
 8010aa4:	f001 fe22 	bl	80126ec <usb_universal_printf>
	if (operationmode == 3)
 8010aa8:	4b59      	ldr	r3, [pc, #356]	; (8010c10 <PrintParameter+0x1a8>)
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2b03      	cmp	r3, #3
 8010aae:	d102      	bne.n	8010ab6 <PrintParameter+0x4e>
		usb_universal_printf("OPS = LEAK\r\n");
 8010ab0:	485a      	ldr	r0, [pc, #360]	; (8010c1c <PrintParameter+0x1b4>)
 8010ab2:	f001 fe1b 	bl	80126ec <usb_universal_printf>
	if (operationmode == 4)
 8010ab6:	4b56      	ldr	r3, [pc, #344]	; (8010c10 <PrintParameter+0x1a8>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b04      	cmp	r3, #4
 8010abc:	d102      	bne.n	8010ac4 <PrintParameter+0x5c>
		usb_universal_printf("OPS = TESTING\r\n");
 8010abe:	4858      	ldr	r0, [pc, #352]	; (8010c20 <PrintParameter+0x1b8>)
 8010ac0:	f001 fe14 	bl	80126ec <usb_universal_printf>
	if (operationmode > 4)
 8010ac4:	4b52      	ldr	r3, [pc, #328]	; (8010c10 <PrintParameter+0x1a8>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	d902      	bls.n	8010ad2 <PrintParameter+0x6a>
		usb_universal_printf("OPS = ERROR\r\n");
 8010acc:	4855      	ldr	r0, [pc, #340]	; (8010c24 <PrintParameter+0x1bc>)
 8010ace:	f001 fe0d 	bl	80126ec <usb_universal_printf>

	if(debugiridium == 0)
 8010ad2:	4b55      	ldr	r3, [pc, #340]	; (8010c28 <PrintParameter+0x1c0>)
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d102      	bne.n	8010ae0 <PrintParameter+0x78>
		usb_universal_printf("DEBUG IRIDIUM = DISABLE\r\n");
 8010ada:	4854      	ldr	r0, [pc, #336]	; (8010c2c <PrintParameter+0x1c4>)
 8010adc:	f001 fe06 	bl	80126ec <usb_universal_printf>
	if(debugiridium == 1)
 8010ae0:	4b51      	ldr	r3, [pc, #324]	; (8010c28 <PrintParameter+0x1c0>)
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d102      	bne.n	8010aee <PrintParameter+0x86>
		usb_universal_printf("DEBUG IRIDIUM = ENABLE\r\n");
 8010ae8:	4851      	ldr	r0, [pc, #324]	; (8010c30 <PrintParameter+0x1c8>)
 8010aea:	f001 fdff 	bl	80126ec <usb_universal_printf>
	if(debugiridium > 1)
 8010aee:	4b4e      	ldr	r3, [pc, #312]	; (8010c28 <PrintParameter+0x1c0>)
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d902      	bls.n	8010afc <PrintParameter+0x94>
		usb_universal_printf("DEBUG IRIDIUM = ERROR\r\n");
 8010af6:	484f      	ldr	r0, [pc, #316]	; (8010c34 <PrintParameter+0x1cc>)
 8010af8:	f001 fdf8 	bl	80126ec <usb_universal_printf>

	if(debuguni == 0)
 8010afc:	4b4e      	ldr	r3, [pc, #312]	; (8010c38 <PrintParameter+0x1d0>)
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d102      	bne.n	8010b0a <PrintParameter+0xa2>
		usb_universal_printf("DEBUG USB = DISABLE\r\n");
 8010b04:	484d      	ldr	r0, [pc, #308]	; (8010c3c <PrintParameter+0x1d4>)
 8010b06:	f001 fdf1 	bl	80126ec <usb_universal_printf>
	if(debuguni == 1)
 8010b0a:	4b4b      	ldr	r3, [pc, #300]	; (8010c38 <PrintParameter+0x1d0>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d102      	bne.n	8010b18 <PrintParameter+0xb0>
		usb_universal_printf("DEBUG USB = ENABLE\r\n");
 8010b12:	484b      	ldr	r0, [pc, #300]	; (8010c40 <PrintParameter+0x1d8>)
 8010b14:	f001 fdea 	bl	80126ec <usb_universal_printf>
	if(debuguni > 1)
 8010b18:	4b47      	ldr	r3, [pc, #284]	; (8010c38 <PrintParameter+0x1d0>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d902      	bls.n	8010b26 <PrintParameter+0xbe>
		usb_universal_printf("DEBUG USB = ERROR\r\n");
 8010b20:	4848      	ldr	r0, [pc, #288]	; (8010c44 <PrintParameter+0x1dc>)
 8010b22:	f001 fde3 	bl	80126ec <usb_universal_printf>

	if(debugbluetooth == 0)
 8010b26:	4b48      	ldr	r3, [pc, #288]	; (8010c48 <PrintParameter+0x1e0>)
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d102      	bne.n	8010b34 <PrintParameter+0xcc>
		usb_universal_printf("DEBUG BLUETOOTH = DISABLE\r\n");
 8010b2e:	4847      	ldr	r0, [pc, #284]	; (8010c4c <PrintParameter+0x1e4>)
 8010b30:	f001 fddc 	bl	80126ec <usb_universal_printf>
	if(debugbluetooth == 1)
 8010b34:	4b44      	ldr	r3, [pc, #272]	; (8010c48 <PrintParameter+0x1e0>)
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d102      	bne.n	8010b42 <PrintParameter+0xda>
		usb_universal_printf("DEBUG BLUETOOTH = ENABLE\r\n");
 8010b3c:	4844      	ldr	r0, [pc, #272]	; (8010c50 <PrintParameter+0x1e8>)
 8010b3e:	f001 fdd5 	bl	80126ec <usb_universal_printf>
	if(debugbluetooth > 1)
 8010b42:	4b41      	ldr	r3, [pc, #260]	; (8010c48 <PrintParameter+0x1e0>)
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d902      	bls.n	8010b50 <PrintParameter+0xe8>
		usb_universal_printf("DEBUG BLUETOOTH = ERROR\r\n");
 8010b4a:	4842      	ldr	r0, [pc, #264]	; (8010c54 <PrintParameter+0x1ec>)
 8010b4c:	f001 fdce 	bl	80126ec <usb_universal_printf>

	if(debuggps == 0)
 8010b50:	4b41      	ldr	r3, [pc, #260]	; (8010c58 <PrintParameter+0x1f0>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d102      	bne.n	8010b5e <PrintParameter+0xf6>
		usb_universal_printf("DEBUG GPS = DISABLE\r\n");
 8010b58:	4840      	ldr	r0, [pc, #256]	; (8010c5c <PrintParameter+0x1f4>)
 8010b5a:	f001 fdc7 	bl	80126ec <usb_universal_printf>
	if(debuggps == 1)
 8010b5e:	4b3e      	ldr	r3, [pc, #248]	; (8010c58 <PrintParameter+0x1f0>)
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d102      	bne.n	8010b6c <PrintParameter+0x104>
		usb_universal_printf("DEBUG GPS = ENABLE\r\n");
 8010b66:	483e      	ldr	r0, [pc, #248]	; (8010c60 <PrintParameter+0x1f8>)
 8010b68:	f001 fdc0 	bl	80126ec <usb_universal_printf>
	if(debuggps > 1)
 8010b6c:	4b3a      	ldr	r3, [pc, #232]	; (8010c58 <PrintParameter+0x1f0>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d902      	bls.n	8010b7a <PrintParameter+0x112>
		usb_universal_printf("DEBUG GPS = ERROR\r\n");
 8010b74:	483b      	ldr	r0, [pc, #236]	; (8010c64 <PrintParameter+0x1fc>)
 8010b76:	f001 fdb9 	bl	80126ec <usb_universal_printf>

	usb_universal_printf("TRANSMIT PERIOD = %lu minute\r\n",periodsendloc);
 8010b7a:	4b3b      	ldr	r3, [pc, #236]	; (8010c68 <PrintParameter+0x200>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	483a      	ldr	r0, [pc, #232]	; (8010c6c <PrintParameter+0x204>)
 8010b82:	f001 fdb3 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("DISTANCE DRIFTING = %lu\r\n",distancedrifting);
 8010b86:	4b3a      	ldr	r3, [pc, #232]	; (8010c70 <PrintParameter+0x208>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	4839      	ldr	r0, [pc, #228]	; (8010c74 <PrintParameter+0x20c>)
 8010b8e:	f001 fdad 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("LATITUDE = %f\r\n",latitude);
 8010b92:	4b39      	ldr	r3, [pc, #228]	; (8010c78 <PrintParameter+0x210>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7ef fcf6 	bl	8000588 <__aeabi_f2d>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	4836      	ldr	r0, [pc, #216]	; (8010c7c <PrintParameter+0x214>)
 8010ba2:	f001 fda3 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("LONGITUDE = %f\r\n",longitude);
 8010ba6:	4b36      	ldr	r3, [pc, #216]	; (8010c80 <PrintParameter+0x218>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7ef fcec 	bl	8000588 <__aeabi_f2d>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	4833      	ldr	r0, [pc, #204]	; (8010c84 <PrintParameter+0x21c>)
 8010bb6:	f001 fd99 	bl	80126ec <usb_universal_printf>
	DS3231_GetTime(&rtcTEWS);
 8010bba:	4833      	ldr	r0, [pc, #204]	; (8010c88 <PrintParameter+0x220>)
 8010bbc:	f7fd ff1c 	bl	800e9f8 <DS3231_GetTime>
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
			rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date, rtcTEWS.Month,
 8010bc0:	4b31      	ldr	r3, [pc, #196]	; (8010c88 <PrintParameter+0x220>)
 8010bc2:	791b      	ldrb	r3, [r3, #4]
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
 8010bc4:	4618      	mov	r0, r3
			rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date, rtcTEWS.Month,
 8010bc6:	4b30      	ldr	r3, [pc, #192]	; (8010c88 <PrintParameter+0x220>)
 8010bc8:	795b      	ldrb	r3, [r3, #5]
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
 8010bca:	461c      	mov	r4, r3
			rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date, rtcTEWS.Month,
 8010bcc:	4b2e      	ldr	r3, [pc, #184]	; (8010c88 <PrintParameter+0x220>)
 8010bce:	799b      	ldrb	r3, [r3, #6]
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
 8010bd0:	461d      	mov	r5, r3
			rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date, rtcTEWS.Month,
 8010bd2:	4b2d      	ldr	r3, [pc, #180]	; (8010c88 <PrintParameter+0x220>)
 8010bd4:	789b      	ldrb	r3, [r3, #2]
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
 8010bd6:	461a      	mov	r2, r3
			rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date, rtcTEWS.Month,
 8010bd8:	4b2b      	ldr	r3, [pc, #172]	; (8010c88 <PrintParameter+0x220>)
 8010bda:	785b      	ldrb	r3, [r3, #1]
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
 8010bdc:	4619      	mov	r1, r3
			rtcTEWS.Year);
 8010bde:	4b2a      	ldr	r3, [pc, #168]	; (8010c88 <PrintParameter+0x220>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
	usb_universal_printf("DSTIME = %.2d:%.2d:%.2d  %.2d/%.2d/20%.2d \r\n",
 8010be2:	9302      	str	r3, [sp, #8]
 8010be4:	9101      	str	r1, [sp, #4]
 8010be6:	9200      	str	r2, [sp, #0]
 8010be8:	462b      	mov	r3, r5
 8010bea:	4622      	mov	r2, r4
 8010bec:	4601      	mov	r1, r0
 8010bee:	4827      	ldr	r0, [pc, #156]	; (8010c8c <PrintParameter+0x224>)
 8010bf0:	f001 fd7c 	bl	80126ec <usb_universal_printf>
	usb_universal_printf("==================================\r\n");
 8010bf4:	4802      	ldr	r0, [pc, #8]	; (8010c00 <PrintParameter+0x198>)
 8010bf6:	f001 fd79 	bl	80126ec <usb_universal_printf>
}
 8010bfa:	bf00      	nop
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8010c00:	0801bc38 	.word	0x0801bc38
 8010c04:	0801bc60 	.word	0x0801bc60
 8010c08:	200338f4 	.word	0x200338f4
 8010c0c:	0801bc80 	.word	0x0801bc80
 8010c10:	20033534 	.word	0x20033534
 8010c14:	0801bc94 	.word	0x0801bc94
 8010c18:	0801bca4 	.word	0x0801bca4
 8010c1c:	0801bcb8 	.word	0x0801bcb8
 8010c20:	0801bcc8 	.word	0x0801bcc8
 8010c24:	0801bcd8 	.word	0x0801bcd8
 8010c28:	20033328 	.word	0x20033328
 8010c2c:	0801bce8 	.word	0x0801bce8
 8010c30:	0801bd04 	.word	0x0801bd04
 8010c34:	0801bd20 	.word	0x0801bd20
 8010c38:	200338a1 	.word	0x200338a1
 8010c3c:	0801bd38 	.word	0x0801bd38
 8010c40:	0801bd50 	.word	0x0801bd50
 8010c44:	0801bd68 	.word	0x0801bd68
 8010c48:	200338a8 	.word	0x200338a8
 8010c4c:	0801bd7c 	.word	0x0801bd7c
 8010c50:	0801bd98 	.word	0x0801bd98
 8010c54:	0801bdb4 	.word	0x0801bdb4
 8010c58:	20033473 	.word	0x20033473
 8010c5c:	0801bdd0 	.word	0x0801bdd0
 8010c60:	0801bde8 	.word	0x0801bde8
 8010c64:	0801be00 	.word	0x0801be00
 8010c68:	20033374 	.word	0x20033374
 8010c6c:	0801be14 	.word	0x0801be14
 8010c70:	200337fc 	.word	0x200337fc
 8010c74:	0801be34 	.word	0x0801be34
 8010c78:	20033764 	.word	0x20033764
 8010c7c:	0801be50 	.word	0x0801be50
 8010c80:	20033744 	.word	0x20033744
 8010c84:	0801be60 	.word	0x0801be60
 8010c88:	2003346c 	.word	0x2003346c
 8010c8c:	0801be74 	.word	0x0801be74

08010c90 <parsingdatausb>:
				10000);
	if (debugbluetooth == 1)
		HAL_UART_Transmit(&_BT_USART, (uint8_t*) buffer, strlen(buffer), 10000);
}

uint32_t parsingdatausb(char *buffer, char *keyword) {
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
	char *data;
	char *str = strstr((char*) buffer, keyword);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f003 fa24 	bl	80140ea <strstr>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	60bb      	str	r3, [r7, #8]
	strtok_r(str, "=", &str);
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	f107 0208 	add.w	r2, r7, #8
 8010cac:	4906      	ldr	r1, [pc, #24]	; (8010cc8 <parsingdatausb+0x38>)
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f004 f892 	bl	8014dd8 <strtok_r>
	//data = strtok_r(str, "\r", &str);
	data = str;
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	60fb      	str	r3, [r7, #12]
	return atoi(data);
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f002 fa5f 	bl	801317c <atoi>
 8010cbe:	4603      	mov	r3, r0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3710      	adds	r7, #16
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	0801b3d8 	.word	0x0801b3d8

08010ccc <LTC4151_write>:
 const float LTC4151_vin_lsb = 0.025;    //!< Typical Vin lsb weight in volts
 const float LTC4151_adin_lsb = 0.5;     //!< Typical ADIN lsb weight in mV

// Write one byte to an LTC4151 register.
int8_t LTC4151_write(uint8_t i2c_address, uint8_t adc_command, uint8_t code)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b088      	sub	sp, #32
 8010cd0:	af04      	add	r7, sp, #16
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	71fb      	strb	r3, [r7, #7]
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	71bb      	strb	r3, [r7, #6]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	717b      	strb	r3, [r7, #5]
  int32_t ack;

  //ack = i2c_write_byte_data(i2c_address, adc_command, code);
  ack = HAL_I2C_Mem_Write(&hi2c3,(uint16_t)i2c_address,adc_command,1,&code,1,HAL_MAX_DELAY);
 8010cde:	79fb      	ldrb	r3, [r7, #7]
 8010ce0:	b299      	uxth	r1, r3
 8010ce2:	79bb      	ldrb	r3, [r7, #6]
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cea:	9302      	str	r3, [sp, #8]
 8010cec:	2301      	movs	r3, #1
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	1d7b      	adds	r3, r7, #5
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	4808      	ldr	r0, [pc, #32]	; (8010d18 <LTC4151_write+0x4c>)
 8010cf8:	f7f1 fc86 	bl	8002608 <HAL_I2C_Mem_Write>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	60fb      	str	r3, [r7, #12]
  if(ack != HAL_OK) {
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <LTC4151_write+0x3e>
	  //usb_printf("LTC4151 Error Tx, %d\r\n", ack);
	  return false;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e001      	b.n	8010d0e <LTC4151_write+0x42>
  } else {
	  return(ack);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	b25b      	sxtb	r3, r3
  }


}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	200333c0 	.word	0x200333c0

08010d1c <LTC4151_code_to_sense_current>:
// Similarly, the LTC4151_sense_current function could be written to accept an LSB weight in amps or milliamps.
// That would eliminate the extra floating point divide operation based on the sense resistor value.

// Calculates the LTC4151 sense current in Amps given "resistor" value in ohms and "LTC4151_sense_lsb" LSB weight in volts.
float LTC4151_code_to_sense_current(uint16_t adc_code)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	80fb      	strh	r3, [r7, #6]
  float voltage, current;
  voltage = (float)adc_code * LTC4151_sense_lsb;    //! 1) Convert code to voltage from sense lsb
 8010d26:	88fb      	ldrh	r3, [r7, #6]
 8010d28:	ee07 3a90 	vmov	s15, r3
 8010d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d30:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8010d60 <LTC4151_code_to_sense_current+0x44>
 8010d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d38:	edc7 7a03 	vstr	s15, [r7, #12]
  current = voltage / resistor;                     //! 2) Calculate Current, I = V/R
 8010d3c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8010d64 <LTC4151_code_to_sense_current+0x48>
 8010d40:	ed97 7a03 	vldr	s14, [r7, #12]
 8010d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d48:	edc7 7a02 	vstr	s15, [r7, #8]
  return (current);
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	ee07 3a90 	vmov	s15, r3
}
 8010d52:	eeb0 0a67 	vmov.f32	s0, s15
 8010d56:	3714      	adds	r7, #20
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	37a7c5ac 	.word	0x37a7c5ac
 8010d64:	3ca3d70a 	.word	0x3ca3d70a

08010d68 <getvoltage>:
  voltage = (float)adc_code * LTC4151_adin_lsb; //! 1) Convert Code to voltage from ADIN lsb
  return (voltage);
}

uint32_t getvoltage()
{
 8010d68:	b5b0      	push	{r4, r5, r7, lr}
 8010d6a:	b08c      	sub	sp, #48	; 0x30
 8010d6c:	af04      	add	r7, sp, #16
 8010d6e:	466b      	mov	r3, sp
 8010d70:	461d      	mov	r5, r3
	uint32_t volt;
	int16_t val;
	int j;
	uint8_t length = 2;
 8010d72:	2302      	movs	r3, #2
 8010d74:	75fb      	strb	r3, [r7, #23]
	uint8_t data1[length];
 8010d76:	7dfc      	ldrb	r4, [r7, #23]
 8010d78:	4623      	mov	r3, r4
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	613b      	str	r3, [r7, #16]
 8010d7e:	b2e0      	uxtb	r0, r4
 8010d80:	f04f 0100 	mov.w	r1, #0
 8010d84:	f04f 0200 	mov.w	r2, #0
 8010d88:	f04f 0300 	mov.w	r3, #0
 8010d8c:	00cb      	lsls	r3, r1, #3
 8010d8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010d92:	00c2      	lsls	r2, r0, #3
 8010d94:	b2e0      	uxtb	r0, r4
 8010d96:	f04f 0100 	mov.w	r1, #0
 8010d9a:	f04f 0200 	mov.w	r2, #0
 8010d9e:	f04f 0300 	mov.w	r3, #0
 8010da2:	00cb      	lsls	r3, r1, #3
 8010da4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010da8:	00c2      	lsls	r2, r0, #3
 8010daa:	4623      	mov	r3, r4
 8010dac:	3307      	adds	r3, #7
 8010dae:	08db      	lsrs	r3, r3, #3
 8010db0:	00db      	lsls	r3, r3, #3
 8010db2:	ebad 0d03 	sub.w	sp, sp, r3
 8010db6:	ab04      	add	r3, sp, #16
 8010db8:	3300      	adds	r3, #0
 8010dba:	60fb      	str	r3, [r7, #12]
	uint8_t address = LTC4151_VIN_MSB_REG;
 8010dbc:	2302      	movs	r3, #2
 8010dbe:	77fb      	strb	r3, [r7, #31]
	memset(data1, 0 , sizeof(data1));
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f002 fa20 	bl	801320c <memset>
	for(j=0;j<length;j++){
 8010dcc:	2300      	movs	r3, #0
 8010dce:	61bb      	str	r3, [r7, #24]
 8010dd0:	e016      	b.n	8010e00 <getvoltage+0x98>
		HAL_I2C_Mem_Read(&hi2c3,(uint16_t)LTC4151_I2C_ADDRESS, address, 1, (uint8_t*)&data1[j], 1, HAL_MAX_DELAY); //read memory address 08
 8010dd2:	7ffb      	ldrb	r3, [r7, #31]
 8010dd4:	b299      	uxth	r1, r3
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	4413      	add	r3, r2
 8010ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010de0:	9202      	str	r2, [sp, #8]
 8010de2:	2201      	movs	r2, #1
 8010de4:	9201      	str	r2, [sp, #4]
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	2301      	movs	r3, #1
 8010dea:	460a      	mov	r2, r1
 8010dec:	21ce      	movs	r1, #206	; 0xce
 8010dee:	4817      	ldr	r0, [pc, #92]	; (8010e4c <getvoltage+0xe4>)
 8010df0:	f7f1 fd2c 	bl	800284c <HAL_I2C_Mem_Read>
		address++;
 8010df4:	7ffb      	ldrb	r3, [r7, #31]
 8010df6:	3301      	adds	r3, #1
 8010df8:	77fb      	strb	r3, [r7, #31]
	for(j=0;j<length;j++){
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	61bb      	str	r3, [r7, #24]
 8010e00:	7dfb      	ldrb	r3, [r7, #23]
 8010e02:	69ba      	ldr	r2, [r7, #24]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	dbe4      	blt.n	8010dd2 <getvoltage+0x6a>
	 }
	//usb_printf("%u, %u\r\n", data1[0], data1[1]);
	val = ((int16_t)data1[0] << 8) | (data1[1]);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	021b      	lsls	r3, r3, #8
 8010e0e:	b21a      	sxth	r2, r3
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	b21b      	sxth	r3, r3
 8010e16:	4313      	orrs	r3, r2
 8010e18:	817b      	strh	r3, [r7, #10]
    val = val>>4;
 8010e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010e1e:	111b      	asrs	r3, r3, #4
 8010e20:	817b      	strh	r3, [r7, #10]
    //usb_printf("%d\r\n", val);
	volt = (val * 25)/10;
 8010e22:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010e26:	4613      	mov	r3, r2
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	4413      	add	r3, r2
 8010e2c:	009a      	lsls	r2, r3, #2
 8010e2e:	4413      	add	r3, r2
 8010e30:	4a07      	ldr	r2, [pc, #28]	; (8010e50 <getvoltage+0xe8>)
 8010e32:	fb82 1203 	smull	r1, r2, r2, r3
 8010e36:	1092      	asrs	r2, r2, #2
 8010e38:	17db      	asrs	r3, r3, #31
 8010e3a:	1ad3      	subs	r3, r2, r3
 8010e3c:	607b      	str	r3, [r7, #4]

	return volt;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	46ad      	mov	sp, r5
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3720      	adds	r7, #32
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bdb0      	pop	{r4, r5, r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	200333c0 	.word	0x200333c0
 8010e50:	66666667 	.word	0x66666667

08010e54 <getcurrent>:

uint32_t getcurrent(){
 8010e54:	b5b0      	push	{r4, r5, r7, lr}
 8010e56:	b08c      	sub	sp, #48	; 0x30
 8010e58:	af04      	add	r7, sp, #16
 8010e5a:	466b      	mov	r3, sp
 8010e5c:	461d      	mov	r5, r3
	float current;
	uint32_t curr;
	int16_t val;
	int j;
	uint8_t length = 2;
 8010e5e:	2302      	movs	r3, #2
 8010e60:	75fb      	strb	r3, [r7, #23]
	uint8_t data1[length];
 8010e62:	7dfc      	ldrb	r4, [r7, #23]
 8010e64:	4623      	mov	r3, r4
 8010e66:	3b01      	subs	r3, #1
 8010e68:	613b      	str	r3, [r7, #16]
 8010e6a:	b2e0      	uxtb	r0, r4
 8010e6c:	f04f 0100 	mov.w	r1, #0
 8010e70:	f04f 0200 	mov.w	r2, #0
 8010e74:	f04f 0300 	mov.w	r3, #0
 8010e78:	00cb      	lsls	r3, r1, #3
 8010e7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010e7e:	00c2      	lsls	r2, r0, #3
 8010e80:	b2e0      	uxtb	r0, r4
 8010e82:	f04f 0100 	mov.w	r1, #0
 8010e86:	f04f 0200 	mov.w	r2, #0
 8010e8a:	f04f 0300 	mov.w	r3, #0
 8010e8e:	00cb      	lsls	r3, r1, #3
 8010e90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010e94:	00c2      	lsls	r2, r0, #3
 8010e96:	4623      	mov	r3, r4
 8010e98:	3307      	adds	r3, #7
 8010e9a:	08db      	lsrs	r3, r3, #3
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	ebad 0d03 	sub.w	sp, sp, r3
 8010ea2:	ab04      	add	r3, sp, #16
 8010ea4:	3300      	adds	r3, #0
 8010ea6:	60fb      	str	r3, [r7, #12]
	uint8_t address = LTC4151_SENSE_MSB_REG;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	77fb      	strb	r3, [r7, #31]
	memset(data1, 0 , sizeof(data1));
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	4622      	mov	r2, r4
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f002 f9aa 	bl	801320c <memset>
	for(j=0;j<length;j++){
 8010eb8:	2300      	movs	r3, #0
 8010eba:	61bb      	str	r3, [r7, #24]
 8010ebc:	e016      	b.n	8010eec <getcurrent+0x98>
		HAL_I2C_Mem_Read(&hi2c3,(uint16_t)LTC4151_I2C_ADDRESS, address, 1, (uint8_t*)&data1[j], 1, HAL_MAX_DELAY); //read memory address 08
 8010ebe:	7ffb      	ldrb	r3, [r7, #31]
 8010ec0:	b299      	uxth	r1, r3
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ecc:	9202      	str	r2, [sp, #8]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	9201      	str	r2, [sp, #4]
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	460a      	mov	r2, r1
 8010ed8:	21ce      	movs	r1, #206	; 0xce
 8010eda:	481b      	ldr	r0, [pc, #108]	; (8010f48 <getcurrent+0xf4>)
 8010edc:	f7f1 fcb6 	bl	800284c <HAL_I2C_Mem_Read>
		address++;
 8010ee0:	7ffb      	ldrb	r3, [r7, #31]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	77fb      	strb	r3, [r7, #31]
	for(j=0;j<length;j++){
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	61bb      	str	r3, [r7, #24]
 8010eec:	7dfb      	ldrb	r3, [r7, #23]
 8010eee:	69ba      	ldr	r2, [r7, #24]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	dbe4      	blt.n	8010ebe <getcurrent+0x6a>
	 }
	//usb_printf("%u, %u\r\n", data1[0], data1[1]);
	val = ((int16_t)data1[0] << 8) | (data1[1]);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	021b      	lsls	r3, r3, #8
 8010efa:	b21a      	sxth	r2, r3
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	785b      	ldrb	r3, [r3, #1]
 8010f00:	b21b      	sxth	r3, r3
 8010f02:	4313      	orrs	r3, r2
 8010f04:	817b      	strh	r3, [r7, #10]
    val = val>>4;
 8010f06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010f0a:	111b      	asrs	r3, r3, #4
 8010f0c:	817b      	strh	r3, [r7, #10]
    //usb_printf("%d\r\n", val);

    current = LTC4151_code_to_sense_current(val);
 8010f0e:	897b      	ldrh	r3, [r7, #10]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ff ff03 	bl	8010d1c <LTC4151_code_to_sense_current>
 8010f16:	ed87 0a01 	vstr	s0, [r7, #4]
    curr = (uint32_t)(current * 1000.0);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7ef fb34 	bl	8000588 <__aeabi_f2d>
 8010f20:	f04f 0200 	mov.w	r2, #0
 8010f24:	4b09      	ldr	r3, [pc, #36]	; (8010f4c <getcurrent+0xf8>)
 8010f26:	f7ef fb87 	bl	8000638 <__aeabi_dmul>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	4610      	mov	r0, r2
 8010f30:	4619      	mov	r1, r3
 8010f32:	f7ef fe59 	bl	8000be8 <__aeabi_d2uiz>
 8010f36:	4603      	mov	r3, r0
 8010f38:	603b      	str	r3, [r7, #0]
	return curr;
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	46ad      	mov	sp, r5
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3720      	adds	r7, #32
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bdb0      	pop	{r4, r5, r7, pc}
 8010f46:	bf00      	nop
 8010f48:	200333c0 	.word	0x200333c0
 8010f4c:	408f4000 	.word	0x408f4000

08010f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010f54:	f7f0 f86a 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010f58:	f000 f8fa 	bl	8011150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010f5c:	f000 fc5a 	bl	8011814 <MX_GPIO_Init>
  MX_DMA_Init();
 8010f60:	f000 fc16 	bl	8011790 <MX_DMA_Init>
  MX_I2C1_Init();
 8010f64:	f000 f9a8 	bl	80112b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8010f68:	f000 f9e6 	bl	8011338 <MX_I2C2_Init>
  MX_I2C3_Init();
 8010f6c:	f000 fa24 	bl	80113b8 <MX_I2C3_Init>
  MX_IWDG_Init();
 8010f70:	f000 faa2 	bl	80114b8 <MX_IWDG_Init>
  MX_LPUART1_UART_Init();
 8010f74:	f000 fabe 	bl	80114f4 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8010f78:	f000 fae8 	bl	801154c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8010f7c:	f000 fb16 	bl	80115ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8010f80:	f000 fb44 	bl	801160c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8010f84:	f000 fb72 	bl	801166c <MX_RTC_Init>
  MX_I2C4_Init();
 8010f88:	f000 fa56 	bl	8011438 <MX_I2C4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8010f8c:	f000 f978 	bl	8011280 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8010f90:	f7f7 fa40 	bl	8008414 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of rtcBinarySem */
  rtcBinarySemHandle = osSemaphoreNew(1, 1, &rtcBinarySem_attributes);
 8010f94:	4a45      	ldr	r2, [pc, #276]	; (80110ac <main+0x15c>)
 8010f96:	2101      	movs	r1, #1
 8010f98:	2001      	movs	r0, #1
 8010f9a:	f7f7 fb47 	bl	800862c <osSemaphoreNew>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	4a43      	ldr	r2, [pc, #268]	; (80110b0 <main+0x160>)
 8010fa2:	6013      	str	r3, [r2, #0]

  /* creation of iridiumrecvBinarySem */
  iridiumrecvBinarySemHandle = osSemaphoreNew(1, 1, &iridiumrecvBinarySem_attributes);
 8010fa4:	4a43      	ldr	r2, [pc, #268]	; (80110b4 <main+0x164>)
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	2001      	movs	r0, #1
 8010faa:	f7f7 fb3f 	bl	800862c <osSemaphoreNew>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	4a41      	ldr	r2, [pc, #260]	; (80110b8 <main+0x168>)
 8010fb2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of iridiumQueue */
  iridiumQueueHandle = osMessageQueueNew (30, 50, &iridiumQueue_attributes);
 8010fb4:	4a41      	ldr	r2, [pc, #260]	; (80110bc <main+0x16c>)
 8010fb6:	2132      	movs	r1, #50	; 0x32
 8010fb8:	201e      	movs	r0, #30
 8010fba:	f7f7 fc77 	bl	80088ac <osMessageQueueNew>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	4a3f      	ldr	r2, [pc, #252]	; (80110c0 <main+0x170>)
 8010fc2:	6013      	str	r3, [r2, #0]

  /* creation of usbQueue */
  usbQueueHandle = osMessageQueueNew (5, 50, &usbQueue_attributes);
 8010fc4:	4a3f      	ldr	r2, [pc, #252]	; (80110c4 <main+0x174>)
 8010fc6:	2132      	movs	r1, #50	; 0x32
 8010fc8:	2005      	movs	r0, #5
 8010fca:	f7f7 fc6f 	bl	80088ac <osMessageQueueNew>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	4a3d      	ldr	r2, [pc, #244]	; (80110c8 <main+0x178>)
 8010fd2:	6013      	str	r3, [r2, #0]

  /* creation of gpsQueue */
  gpsQueueHandle = osMessageQueueNew (30, 100, &gpsQueue_attributes);
 8010fd4:	4a3d      	ldr	r2, [pc, #244]	; (80110cc <main+0x17c>)
 8010fd6:	2164      	movs	r1, #100	; 0x64
 8010fd8:	201e      	movs	r0, #30
 8010fda:	f7f7 fc67 	bl	80088ac <osMessageQueueNew>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	4a3b      	ldr	r2, [pc, #236]	; (80110d0 <main+0x180>)
 8010fe2:	6013      	str	r3, [r2, #0]

  /* creation of iridiumsendQueue */
  iridiumsendQueueHandle = osMessageQueueNew (70, 50, &iridiumsendQueue_attributes);
 8010fe4:	4a3b      	ldr	r2, [pc, #236]	; (80110d4 <main+0x184>)
 8010fe6:	2132      	movs	r1, #50	; 0x32
 8010fe8:	2046      	movs	r0, #70	; 0x46
 8010fea:	f7f7 fc5f 	bl	80088ac <osMessageQueueNew>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	4a39      	ldr	r2, [pc, #228]	; (80110d8 <main+0x188>)
 8010ff2:	6013      	str	r3, [r2, #0]

  /* creation of iridiumrecvQueue */
  iridiumrecvQueueHandle = osMessageQueueNew (10, 50, &iridiumrecvQueue_attributes);
 8010ff4:	4a39      	ldr	r2, [pc, #228]	; (80110dc <main+0x18c>)
 8010ff6:	2132      	movs	r1, #50	; 0x32
 8010ff8:	200a      	movs	r0, #10
 8010ffa:	f7f7 fc57 	bl	80088ac <osMessageQueueNew>
 8010ffe:	4603      	mov	r3, r0
 8011000:	4a37      	ldr	r2, [pc, #220]	; (80110e0 <main+0x190>)
 8011002:	6013      	str	r3, [r2, #0]

  /* creation of crcdataQueue */
  crcdataQueueHandle = osMessageQueueNew (20, 50, &crcdataQueue_attributes);
 8011004:	4a37      	ldr	r2, [pc, #220]	; (80110e4 <main+0x194>)
 8011006:	2132      	movs	r1, #50	; 0x32
 8011008:	2014      	movs	r0, #20
 801100a:	f7f7 fc4f 	bl	80088ac <osMessageQueueNew>
 801100e:	4603      	mov	r3, r0
 8011010:	4a35      	ldr	r2, [pc, #212]	; (80110e8 <main+0x198>)
 8011012:	6013      	str	r3, [r2, #0]

  /* creation of sizedatairidiumQueue */
  sizedatairidiumQueueHandle = osMessageQueueNew (70, sizeof(uint16_t), &sizedatairidiumQueue_attributes);
 8011014:	4a35      	ldr	r2, [pc, #212]	; (80110ec <main+0x19c>)
 8011016:	2102      	movs	r1, #2
 8011018:	2046      	movs	r0, #70	; 0x46
 801101a:	f7f7 fc47 	bl	80088ac <osMessageQueueNew>
 801101e:	4603      	mov	r3, r0
 8011020:	4a33      	ldr	r2, [pc, #204]	; (80110f0 <main+0x1a0>)
 8011022:	6013      	str	r3, [r2, #0]

  /* creation of sizedatadecodeQueue */
  sizedatadecodeQueueHandle = osMessageQueueNew (20, sizeof(uint16_t), &sizedatadecodeQueue_attributes);
 8011024:	4a33      	ldr	r2, [pc, #204]	; (80110f4 <main+0x1a4>)
 8011026:	2102      	movs	r1, #2
 8011028:	2014      	movs	r0, #20
 801102a:	f7f7 fc3f 	bl	80088ac <osMessageQueueNew>
 801102e:	4603      	mov	r3, r0
 8011030:	4a31      	ldr	r2, [pc, #196]	; (80110f8 <main+0x1a8>)
 8011032:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of operationTask */
  operationTaskHandle = osThreadNew(StartOperationTask, NULL, &operationTask_attributes);
 8011034:	4a31      	ldr	r2, [pc, #196]	; (80110fc <main+0x1ac>)
 8011036:	2100      	movs	r1, #0
 8011038:	4831      	ldr	r0, [pc, #196]	; (8011100 <main+0x1b0>)
 801103a:	f7f7 fa4a 	bl	80084d2 <osThreadNew>
 801103e:	4603      	mov	r3, r0
 8011040:	4a30      	ldr	r2, [pc, #192]	; (8011104 <main+0x1b4>)
 8011042:	6013      	str	r3, [r2, #0]

  /* creation of iridiumTask */
  iridiumTaskHandle = osThreadNew(StartIridiumTask, NULL, &iridiumTask_attributes);
 8011044:	4a30      	ldr	r2, [pc, #192]	; (8011108 <main+0x1b8>)
 8011046:	2100      	movs	r1, #0
 8011048:	4830      	ldr	r0, [pc, #192]	; (801110c <main+0x1bc>)
 801104a:	f7f7 fa42 	bl	80084d2 <osThreadNew>
 801104e:	4603      	mov	r3, r0
 8011050:	4a2f      	ldr	r2, [pc, #188]	; (8011110 <main+0x1c0>)
 8011052:	6013      	str	r3, [r2, #0]

  /* creation of gpsTask */
  gpsTaskHandle = osThreadNew(StartGpsTask, NULL, &gpsTask_attributes);
 8011054:	4a2f      	ldr	r2, [pc, #188]	; (8011114 <main+0x1c4>)
 8011056:	2100      	movs	r1, #0
 8011058:	482f      	ldr	r0, [pc, #188]	; (8011118 <main+0x1c8>)
 801105a:	f7f7 fa3a 	bl	80084d2 <osThreadNew>
 801105e:	4603      	mov	r3, r0
 8011060:	4a2e      	ldr	r2, [pc, #184]	; (801111c <main+0x1cc>)
 8011062:	6013      	str	r3, [r2, #0]

  /* creation of usbTask */
  usbTaskHandle = osThreadNew(StartUsbTask, NULL, &usbTask_attributes);
 8011064:	4a2e      	ldr	r2, [pc, #184]	; (8011120 <main+0x1d0>)
 8011066:	2100      	movs	r1, #0
 8011068:	482e      	ldr	r0, [pc, #184]	; (8011124 <main+0x1d4>)
 801106a:	f7f7 fa32 	bl	80084d2 <osThreadNew>
 801106e:	4603      	mov	r3, r0
 8011070:	4a2d      	ldr	r2, [pc, #180]	; (8011128 <main+0x1d8>)
 8011072:	6013      	str	r3, [r2, #0]

  /* creation of sendiridiumTask */
  sendiridiumTaskHandle = osThreadNew(StartSendIridiumTask, NULL, &sendiridiumTask_attributes);
 8011074:	4a2d      	ldr	r2, [pc, #180]	; (801112c <main+0x1dc>)
 8011076:	2100      	movs	r1, #0
 8011078:	482d      	ldr	r0, [pc, #180]	; (8011130 <main+0x1e0>)
 801107a:	f7f7 fa2a 	bl	80084d2 <osThreadNew>
 801107e:	4603      	mov	r3, r0
 8011080:	4a2c      	ldr	r2, [pc, #176]	; (8011134 <main+0x1e4>)
 8011082:	6013      	str	r3, [r2, #0]

  /* creation of watchdogTask */
  watchdogTaskHandle = osThreadNew(StartWatchdogTask, NULL, &watchdogTask_attributes);
 8011084:	4a2c      	ldr	r2, [pc, #176]	; (8011138 <main+0x1e8>)
 8011086:	2100      	movs	r1, #0
 8011088:	482c      	ldr	r0, [pc, #176]	; (801113c <main+0x1ec>)
 801108a:	f7f7 fa22 	bl	80084d2 <osThreadNew>
 801108e:	4603      	mov	r3, r0
 8011090:	4a2b      	ldr	r2, [pc, #172]	; (8011140 <main+0x1f0>)
 8011092:	6013      	str	r3, [r2, #0]

  /* creation of iridiumrecvTask */
  iridiumrecvTaskHandle = osThreadNew(StartIridiumrecvTask, NULL, &iridiumrecvTask_attributes);
 8011094:	4a2b      	ldr	r2, [pc, #172]	; (8011144 <main+0x1f4>)
 8011096:	2100      	movs	r1, #0
 8011098:	482b      	ldr	r0, [pc, #172]	; (8011148 <main+0x1f8>)
 801109a:	f7f7 fa1a 	bl	80084d2 <osThreadNew>
 801109e:	4603      	mov	r3, r0
 80110a0:	4a2a      	ldr	r2, [pc, #168]	; (801114c <main+0x1fc>)
 80110a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80110a4:	f7f7 f9da 	bl	800845c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80110a8:	e7fe      	b.n	80110a8 <main+0x158>
 80110aa:	bf00      	nop
 80110ac:	0801c3e4 	.word	0x0801c3e4
 80110b0:	200335ec 	.word	0x200335ec
 80110b4:	0801c3f4 	.word	0x0801c3f4
 80110b8:	200336f8 	.word	0x200336f8
 80110bc:	0801c324 	.word	0x0801c324
 80110c0:	20033748 	.word	0x20033748
 80110c4:	0801c33c 	.word	0x0801c33c
 80110c8:	20033898 	.word	0x20033898
 80110cc:	0801c354 	.word	0x0801c354
 80110d0:	200335f0 	.word	0x200335f0
 80110d4:	0801c36c 	.word	0x0801c36c
 80110d8:	2003355c 	.word	0x2003355c
 80110dc:	0801c384 	.word	0x0801c384
 80110e0:	2003389c 	.word	0x2003389c
 80110e4:	0801c39c 	.word	0x0801c39c
 80110e8:	2003373c 	.word	0x2003373c
 80110ec:	0801c3b4 	.word	0x0801c3b4
 80110f0:	20033734 	.word	0x20033734
 80110f4:	0801c3cc 	.word	0x0801c3cc
 80110f8:	20033544 	.word	0x20033544
 80110fc:	0801c228 	.word	0x0801c228
 8011100:	08011b91 	.word	0x08011b91
 8011104:	20033458 	.word	0x20033458
 8011108:	0801c24c 	.word	0x0801c24c
 801110c:	080121c1 	.word	0x080121c1
 8011110:	200337f0 	.word	0x200337f0
 8011114:	0801c270 	.word	0x0801c270
 8011118:	08012229 	.word	0x08012229
 801111c:	20033740 	.word	0x20033740
 8011120:	0801c294 	.word	0x0801c294
 8011124:	080122c9 	.word	0x080122c9
 8011128:	200334e4 	.word	0x200334e4
 801112c:	0801c2b8 	.word	0x0801c2b8
 8011130:	08012335 	.word	0x08012335
 8011134:	20033548 	.word	0x20033548
 8011138:	0801c2dc 	.word	0x0801c2dc
 801113c:	08012401 	.word	0x08012401
 8011140:	20033480 	.word	0x20033480
 8011144:	0801c300 	.word	0x0801c300
 8011148:	0801258d 	.word	0x0801258d
 801114c:	2003375c 	.word	0x2003375c

08011150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b0ba      	sub	sp, #232	; 0xe8
 8011154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801115a:	2244      	movs	r2, #68	; 0x44
 801115c:	2100      	movs	r1, #0
 801115e:	4618      	mov	r0, r3
 8011160:	f002 f854 	bl	801320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011164:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011168:	2200      	movs	r2, #0
 801116a:	601a      	str	r2, [r3, #0]
 801116c:	605a      	str	r2, [r3, #4]
 801116e:	609a      	str	r2, [r3, #8]
 8011170:	60da      	str	r2, [r3, #12]
 8011172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011174:	1d3b      	adds	r3, r7, #4
 8011176:	228c      	movs	r2, #140	; 0x8c
 8011178:	2100      	movs	r1, #0
 801117a:	4618      	mov	r0, r3
 801117c:	f002 f846 	bl	801320c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8011180:	f7f2 f934 	bl	80033ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8011184:	4b3c      	ldr	r3, [pc, #240]	; (8011278 <SystemClock_Config+0x128>)
 8011186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801118a:	4a3b      	ldr	r2, [pc, #236]	; (8011278 <SystemClock_Config+0x128>)
 801118c:	f023 0318 	bic.w	r3, r3, #24
 8011190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8011194:	230d      	movs	r3, #13
 8011196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801119a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80111a2:	2301      	movs	r3, #1
 80111a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80111a8:	2301      	movs	r3, #1
 80111aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80111ae:	2302      	movs	r3, #2
 80111b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80111b4:	2303      	movs	r3, #3
 80111b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80111ba:	2301      	movs	r3, #1
 80111bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 20;
 80111c0:	2314      	movs	r3, #20
 80111c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80111c6:	2302      	movs	r3, #2
 80111c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80111cc:	2302      	movs	r3, #2
 80111ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80111d2:	2302      	movs	r3, #2
 80111d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80111d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80111dc:	4618      	mov	r0, r3
 80111de:	f7f2 f985 	bl	80034ec <HAL_RCC_OscConfig>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80111e8:	f001 fa22 	bl	8012630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80111ec:	230f      	movs	r3, #15
 80111ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80111f2:	2303      	movs	r3, #3
 80111f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80111f8:	2300      	movs	r3, #0
 80111fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80111fe:	2300      	movs	r3, #0
 8011200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011204:	2300      	movs	r3, #0
 8011206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801120a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801120e:	2104      	movs	r1, #4
 8011210:	4618      	mov	r0, r3
 8011212:	f7f2 fee7 	bl	8003fe4 <HAL_RCC_ClockConfig>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d001      	beq.n	8011220 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 801121c:	f001 fa08 	bl	8012630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8011220:	4b16      	ldr	r3, [pc, #88]	; (801127c <SystemClock_Config+0x12c>)
 8011222:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8011224:	2300      	movs	r3, #0
 8011226:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8011228:	2300      	movs	r3, #0
 801122a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801122c:	2300      	movs	r3, #0
 801122e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8011230:	2300      	movs	r3, #0
 8011232:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8011234:	2300      	movs	r3, #0
 8011236:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8011238:	2300      	movs	r3, #0
 801123a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801123c:	2300      	movs	r3, #0
 801123e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8011240:	2300      	movs	r3, #0
 8011242:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8011244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801124c:	1d3b      	adds	r3, r7, #4
 801124e:	4618      	mov	r0, r3
 8011250:	f7f3 f9b0 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 801125a:	f001 f9e9 	bl	8012630 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 801125e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011262:	f7f2 f8e1 	bl	8003428 <HAL_PWREx_ControlVoltageScaling>
 8011266:	4603      	mov	r3, r0
 8011268:	2b00      	cmp	r3, #0
 801126a:	d001      	beq.n	8011270 <SystemClock_Config+0x120>
  {
    Error_Handler();
 801126c:	f001 f9e0 	bl	8012630 <Error_Handler>
  }
}
 8011270:	bf00      	nop
 8011272:	37e8      	adds	r7, #232	; 0xe8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	40021000 	.word	0x40021000
 801127c:	001201eb 	.word	0x001201eb

08011280 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	af00      	add	r7, sp, #0
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8011284:	2200      	movs	r2, #0
 8011286:	2105      	movs	r1, #5
 8011288:	2046      	movs	r0, #70	; 0x46
 801128a:	f7f0 f80f 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 801128e:	2046      	movs	r0, #70	; 0x46
 8011290:	f7f0 f838 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8011294:	2200      	movs	r2, #0
 8011296:	2105      	movs	r1, #5
 8011298:	2034      	movs	r0, #52	; 0x34
 801129a:	f7f0 f807 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 801129e:	2034      	movs	r0, #52	; 0x34
 80112a0:	f7f0 f830 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80112a4:	2200      	movs	r2, #0
 80112a6:	2105      	movs	r1, #5
 80112a8:	2026      	movs	r0, #38	; 0x26
 80112aa:	f7ef ffff 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80112ae:	2026      	movs	r0, #38	; 0x26
 80112b0:	f7f0 f828 	bl	8001304 <HAL_NVIC_EnableIRQ>
}
 80112b4:	bf00      	nop
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80112bc:	4b1b      	ldr	r3, [pc, #108]	; (801132c <MX_I2C1_Init+0x74>)
 80112be:	4a1c      	ldr	r2, [pc, #112]	; (8011330 <MX_I2C1_Init+0x78>)
 80112c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80112c2:	4b1a      	ldr	r3, [pc, #104]	; (801132c <MX_I2C1_Init+0x74>)
 80112c4:	4a1b      	ldr	r2, [pc, #108]	; (8011334 <MX_I2C1_Init+0x7c>)
 80112c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80112c8:	4b18      	ldr	r3, [pc, #96]	; (801132c <MX_I2C1_Init+0x74>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80112ce:	4b17      	ldr	r3, [pc, #92]	; (801132c <MX_I2C1_Init+0x74>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80112d4:	4b15      	ldr	r3, [pc, #84]	; (801132c <MX_I2C1_Init+0x74>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80112da:	4b14      	ldr	r3, [pc, #80]	; (801132c <MX_I2C1_Init+0x74>)
 80112dc:	2200      	movs	r2, #0
 80112de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80112e0:	4b12      	ldr	r3, [pc, #72]	; (801132c <MX_I2C1_Init+0x74>)
 80112e2:	2200      	movs	r2, #0
 80112e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80112e6:	4b11      	ldr	r3, [pc, #68]	; (801132c <MX_I2C1_Init+0x74>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80112ec:	4b0f      	ldr	r3, [pc, #60]	; (801132c <MX_I2C1_Init+0x74>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80112f2:	480e      	ldr	r0, [pc, #56]	; (801132c <MX_I2C1_Init+0x74>)
 80112f4:	f7f0 fe7c 	bl	8001ff0 <HAL_I2C_Init>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d001      	beq.n	8011302 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80112fe:	f001 f997 	bl	8012630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011302:	2100      	movs	r1, #0
 8011304:	4809      	ldr	r0, [pc, #36]	; (801132c <MX_I2C1_Init+0x74>)
 8011306:	f7f1 fe9b 	bl	8003040 <HAL_I2CEx_ConfigAnalogFilter>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d001      	beq.n	8011314 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8011310:	f001 f98e 	bl	8012630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8011314:	2100      	movs	r1, #0
 8011316:	4805      	ldr	r0, [pc, #20]	; (801132c <MX_I2C1_Init+0x74>)
 8011318:	f7f1 ff08 	bl	800312c <HAL_I2CEx_ConfigDigitalFilter>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8011322:	f001 f985 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011326:	bf00      	nop
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20033484 	.word	0x20033484
 8011330:	40005400 	.word	0x40005400
 8011334:	10909cec 	.word	0x10909cec

08011338 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 801133c:	4b1b      	ldr	r3, [pc, #108]	; (80113ac <MX_I2C2_Init+0x74>)
 801133e:	4a1c      	ldr	r2, [pc, #112]	; (80113b0 <MX_I2C2_Init+0x78>)
 8011340:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8011342:	4b1a      	ldr	r3, [pc, #104]	; (80113ac <MX_I2C2_Init+0x74>)
 8011344:	4a1b      	ldr	r2, [pc, #108]	; (80113b4 <MX_I2C2_Init+0x7c>)
 8011346:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8011348:	4b18      	ldr	r3, [pc, #96]	; (80113ac <MX_I2C2_Init+0x74>)
 801134a:	2200      	movs	r2, #0
 801134c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801134e:	4b17      	ldr	r3, [pc, #92]	; (80113ac <MX_I2C2_Init+0x74>)
 8011350:	2201      	movs	r2, #1
 8011352:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011354:	4b15      	ldr	r3, [pc, #84]	; (80113ac <MX_I2C2_Init+0x74>)
 8011356:	2200      	movs	r2, #0
 8011358:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801135a:	4b14      	ldr	r3, [pc, #80]	; (80113ac <MX_I2C2_Init+0x74>)
 801135c:	2200      	movs	r2, #0
 801135e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011360:	4b12      	ldr	r3, [pc, #72]	; (80113ac <MX_I2C2_Init+0x74>)
 8011362:	2200      	movs	r2, #0
 8011364:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011366:	4b11      	ldr	r3, [pc, #68]	; (80113ac <MX_I2C2_Init+0x74>)
 8011368:	2200      	movs	r2, #0
 801136a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801136c:	4b0f      	ldr	r3, [pc, #60]	; (80113ac <MX_I2C2_Init+0x74>)
 801136e:	2200      	movs	r2, #0
 8011370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8011372:	480e      	ldr	r0, [pc, #56]	; (80113ac <MX_I2C2_Init+0x74>)
 8011374:	f7f0 fe3c 	bl	8001ff0 <HAL_I2C_Init>
 8011378:	4603      	mov	r3, r0
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 801137e:	f001 f957 	bl	8012630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011382:	2100      	movs	r1, #0
 8011384:	4809      	ldr	r0, [pc, #36]	; (80113ac <MX_I2C2_Init+0x74>)
 8011386:	f7f1 fe5b 	bl	8003040 <HAL_I2CEx_ConfigAnalogFilter>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8011390:	f001 f94e 	bl	8012630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8011394:	2100      	movs	r1, #0
 8011396:	4805      	ldr	r0, [pc, #20]	; (80113ac <MX_I2C2_Init+0x74>)
 8011398:	f7f1 fec8 	bl	800312c <HAL_I2CEx_ConfigDigitalFilter>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d001      	beq.n	80113a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80113a2:	f001 f945 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80113a6:	bf00      	nop
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	200334e8 	.word	0x200334e8
 80113b0:	40005800 	.word	0x40005800
 80113b4:	10909cec 	.word	0x10909cec

080113b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80113bc:	4b1b      	ldr	r3, [pc, #108]	; (801142c <MX_I2C3_Init+0x74>)
 80113be:	4a1c      	ldr	r2, [pc, #112]	; (8011430 <MX_I2C3_Init+0x78>)
 80113c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 80113c2:	4b1a      	ldr	r3, [pc, #104]	; (801142c <MX_I2C3_Init+0x74>)
 80113c4:	4a1b      	ldr	r2, [pc, #108]	; (8011434 <MX_I2C3_Init+0x7c>)
 80113c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80113c8:	4b18      	ldr	r3, [pc, #96]	; (801142c <MX_I2C3_Init+0x74>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80113ce:	4b17      	ldr	r3, [pc, #92]	; (801142c <MX_I2C3_Init+0x74>)
 80113d0:	2201      	movs	r2, #1
 80113d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80113d4:	4b15      	ldr	r3, [pc, #84]	; (801142c <MX_I2C3_Init+0x74>)
 80113d6:	2200      	movs	r2, #0
 80113d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80113da:	4b14      	ldr	r3, [pc, #80]	; (801142c <MX_I2C3_Init+0x74>)
 80113dc:	2200      	movs	r2, #0
 80113de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80113e0:	4b12      	ldr	r3, [pc, #72]	; (801142c <MX_I2C3_Init+0x74>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80113e6:	4b11      	ldr	r3, [pc, #68]	; (801142c <MX_I2C3_Init+0x74>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80113ec:	4b0f      	ldr	r3, [pc, #60]	; (801142c <MX_I2C3_Init+0x74>)
 80113ee:	2200      	movs	r2, #0
 80113f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80113f2:	480e      	ldr	r0, [pc, #56]	; (801142c <MX_I2C3_Init+0x74>)
 80113f4:	f7f0 fdfc 	bl	8001ff0 <HAL_I2C_Init>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80113fe:	f001 f917 	bl	8012630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011402:	2100      	movs	r1, #0
 8011404:	4809      	ldr	r0, [pc, #36]	; (801142c <MX_I2C3_Init+0x74>)
 8011406:	f7f1 fe1b 	bl	8003040 <HAL_I2CEx_ConfigAnalogFilter>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d001      	beq.n	8011414 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8011410:	f001 f90e 	bl	8012630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8011414:	2100      	movs	r1, #0
 8011416:	4805      	ldr	r0, [pc, #20]	; (801142c <MX_I2C3_Init+0x74>)
 8011418:	f7f1 fe88 	bl	800312c <HAL_I2CEx_ConfigDigitalFilter>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8011422:	f001 f905 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8011426:	bf00      	nop
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	200333c0 	.word	0x200333c0
 8011430:	40005c00 	.word	0x40005c00
 8011434:	00702991 	.word	0x00702991

08011438 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 801143c:	4b1b      	ldr	r3, [pc, #108]	; (80114ac <MX_I2C4_Init+0x74>)
 801143e:	4a1c      	ldr	r2, [pc, #112]	; (80114b0 <MX_I2C4_Init+0x78>)
 8011440:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10909CEC;
 8011442:	4b1a      	ldr	r3, [pc, #104]	; (80114ac <MX_I2C4_Init+0x74>)
 8011444:	4a1b      	ldr	r2, [pc, #108]	; (80114b4 <MX_I2C4_Init+0x7c>)
 8011446:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8011448:	4b18      	ldr	r3, [pc, #96]	; (80114ac <MX_I2C4_Init+0x74>)
 801144a:	2200      	movs	r2, #0
 801144c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801144e:	4b17      	ldr	r3, [pc, #92]	; (80114ac <MX_I2C4_Init+0x74>)
 8011450:	2201      	movs	r2, #1
 8011452:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011454:	4b15      	ldr	r3, [pc, #84]	; (80114ac <MX_I2C4_Init+0x74>)
 8011456:	2200      	movs	r2, #0
 8011458:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 801145a:	4b14      	ldr	r3, [pc, #80]	; (80114ac <MX_I2C4_Init+0x74>)
 801145c:	2200      	movs	r2, #0
 801145e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011460:	4b12      	ldr	r3, [pc, #72]	; (80114ac <MX_I2C4_Init+0x74>)
 8011462:	2200      	movs	r2, #0
 8011464:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011466:	4b11      	ldr	r3, [pc, #68]	; (80114ac <MX_I2C4_Init+0x74>)
 8011468:	2200      	movs	r2, #0
 801146a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801146c:	4b0f      	ldr	r3, [pc, #60]	; (80114ac <MX_I2C4_Init+0x74>)
 801146e:	2200      	movs	r2, #0
 8011470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8011472:	480e      	ldr	r0, [pc, #56]	; (80114ac <MX_I2C4_Init+0x74>)
 8011474:	f7f0 fdbc 	bl	8001ff0 <HAL_I2C_Init>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d001      	beq.n	8011482 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 801147e:	f001 f8d7 	bl	8012630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011482:	2100      	movs	r1, #0
 8011484:	4809      	ldr	r0, [pc, #36]	; (80114ac <MX_I2C4_Init+0x74>)
 8011486:	f7f1 fddb 	bl	8003040 <HAL_I2CEx_ConfigAnalogFilter>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d001      	beq.n	8011494 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8011490:	f001 f8ce 	bl	8012630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8011494:	2100      	movs	r1, #0
 8011496:	4805      	ldr	r0, [pc, #20]	; (80114ac <MX_I2C4_Init+0x74>)
 8011498:	f7f1 fe48 	bl	800312c <HAL_I2CEx_ConfigDigitalFilter>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80114a2:	f001 f8c5 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80114a6:	bf00      	nop
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	2003340c 	.word	0x2003340c
 80114b0:	40008400 	.word	0x40008400
 80114b4:	10909cec 	.word	0x10909cec

080114b8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80114bc:	4b0b      	ldr	r3, [pc, #44]	; (80114ec <MX_IWDG_Init+0x34>)
 80114be:	4a0c      	ldr	r2, [pc, #48]	; (80114f0 <MX_IWDG_Init+0x38>)
 80114c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80114c2:	4b0a      	ldr	r3, [pc, #40]	; (80114ec <MX_IWDG_Init+0x34>)
 80114c4:	2206      	movs	r2, #6
 80114c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80114c8:	4b08      	ldr	r3, [pc, #32]	; (80114ec <MX_IWDG_Init+0x34>)
 80114ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80114ce:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80114d0:	4b06      	ldr	r3, [pc, #24]	; (80114ec <MX_IWDG_Init+0x34>)
 80114d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80114d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80114d8:	4804      	ldr	r0, [pc, #16]	; (80114ec <MX_IWDG_Init+0x34>)
 80114da:	f7f1 fef1 	bl	80032c0 <HAL_IWDG_Init>
 80114de:	4603      	mov	r3, r0
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d001      	beq.n	80114e8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80114e4:	f001 f8a4 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80114e8:	bf00      	nop
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	200334d4 	.word	0x200334d4
 80114f0:	40003000 	.word	0x40003000

080114f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80114f8:	4b12      	ldr	r3, [pc, #72]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 80114fa:	4a13      	ldr	r2, [pc, #76]	; (8011548 <MX_LPUART1_UART_Init+0x54>)
 80114fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80114fe:	4b11      	ldr	r3, [pc, #68]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 8011500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011504:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011506:	4b0f      	ldr	r3, [pc, #60]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 8011508:	2200      	movs	r2, #0
 801150a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801150c:	4b0d      	ldr	r3, [pc, #52]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 801150e:	2200      	movs	r2, #0
 8011510:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8011512:	4b0c      	ldr	r3, [pc, #48]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 8011514:	2200      	movs	r2, #0
 8011516:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8011518:	4b0a      	ldr	r3, [pc, #40]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 801151a:	220c      	movs	r2, #12
 801151c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801151e:	4b09      	ldr	r3, [pc, #36]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 8011520:	2200      	movs	r2, #0
 8011522:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011524:	4b07      	ldr	r3, [pc, #28]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 8011526:	2200      	movs	r2, #0
 8011528:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801152a:	4b06      	ldr	r3, [pc, #24]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 801152c:	2200      	movs	r2, #0
 801152e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8011530:	4804      	ldr	r0, [pc, #16]	; (8011544 <MX_LPUART1_UART_Init+0x50>)
 8011532:	f7f5 fbd3 	bl	8006cdc <HAL_UART_Init>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d001      	beq.n	8011540 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 801153c:	f001 f878 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8011540:	bf00      	nop
 8011542:	bd80      	pop	{r7, pc}
 8011544:	20033564 	.word	0x20033564
 8011548:	40008000 	.word	0x40008000

0801154c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8011550:	4b14      	ldr	r3, [pc, #80]	; (80115a4 <MX_UART4_Init+0x58>)
 8011552:	4a15      	ldr	r2, [pc, #84]	; (80115a8 <MX_UART4_Init+0x5c>)
 8011554:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8011556:	4b13      	ldr	r3, [pc, #76]	; (80115a4 <MX_UART4_Init+0x58>)
 8011558:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 801155c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801155e:	4b11      	ldr	r3, [pc, #68]	; (80115a4 <MX_UART4_Init+0x58>)
 8011560:	2200      	movs	r2, #0
 8011562:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8011564:	4b0f      	ldr	r3, [pc, #60]	; (80115a4 <MX_UART4_Init+0x58>)
 8011566:	2200      	movs	r2, #0
 8011568:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 801156a:	4b0e      	ldr	r3, [pc, #56]	; (80115a4 <MX_UART4_Init+0x58>)
 801156c:	2200      	movs	r2, #0
 801156e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8011570:	4b0c      	ldr	r3, [pc, #48]	; (80115a4 <MX_UART4_Init+0x58>)
 8011572:	220c      	movs	r2, #12
 8011574:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011576:	4b0b      	ldr	r3, [pc, #44]	; (80115a4 <MX_UART4_Init+0x58>)
 8011578:	2200      	movs	r2, #0
 801157a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 801157c:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <MX_UART4_Init+0x58>)
 801157e:	2200      	movs	r2, #0
 8011580:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011582:	4b08      	ldr	r3, [pc, #32]	; (80115a4 <MX_UART4_Init+0x58>)
 8011584:	2200      	movs	r2, #0
 8011586:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011588:	4b06      	ldr	r3, [pc, #24]	; (80115a4 <MX_UART4_Init+0x58>)
 801158a:	2200      	movs	r2, #0
 801158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801158e:	4805      	ldr	r0, [pc, #20]	; (80115a4 <MX_UART4_Init+0x58>)
 8011590:	f7f5 fba4 	bl	8006cdc <HAL_UART_Init>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d001      	beq.n	801159e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 801159a:	f001 f849 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 801159e:	bf00      	nop
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	20033768 	.word	0x20033768
 80115a8:	40004c00 	.word	0x40004c00

080115ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80115b0:	4b14      	ldr	r3, [pc, #80]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115b2:	4a15      	ldr	r2, [pc, #84]	; (8011608 <MX_USART1_UART_Init+0x5c>)
 80115b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80115b6:	4b13      	ldr	r3, [pc, #76]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115b8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80115bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80115be:	4b11      	ldr	r3, [pc, #68]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115c0:	2200      	movs	r2, #0
 80115c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80115c4:	4b0f      	ldr	r3, [pc, #60]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115c6:	2200      	movs	r2, #0
 80115c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80115ca:	4b0e      	ldr	r3, [pc, #56]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115cc:	2200      	movs	r2, #0
 80115ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80115d0:	4b0c      	ldr	r3, [pc, #48]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115d2:	220c      	movs	r2, #12
 80115d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80115d6:	4b0b      	ldr	r3, [pc, #44]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115d8:	2200      	movs	r2, #0
 80115da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80115dc:	4b09      	ldr	r3, [pc, #36]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115de:	2200      	movs	r2, #0
 80115e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80115e2:	4b08      	ldr	r3, [pc, #32]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115e4:	2200      	movs	r2, #0
 80115e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80115e8:	4b06      	ldr	r3, [pc, #24]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80115ee:	4805      	ldr	r0, [pc, #20]	; (8011604 <MX_USART1_UART_Init+0x58>)
 80115f0:	f7f5 fb74 	bl	8006cdc <HAL_UART_Init>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d001      	beq.n	80115fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80115fa:	f001 f819 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80115fe:	bf00      	nop
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	2003365c 	.word	0x2003365c
 8011608:	40013800 	.word	0x40013800

0801160c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8011610:	4b14      	ldr	r3, [pc, #80]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011612:	4a15      	ldr	r2, [pc, #84]	; (8011668 <MX_USART2_UART_Init+0x5c>)
 8011614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8011616:	4b13      	ldr	r3, [pc, #76]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801161c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801161e:	4b11      	ldr	r3, [pc, #68]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011620:	2200      	movs	r2, #0
 8011622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011624:	4b0f      	ldr	r3, [pc, #60]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011626:	2200      	movs	r2, #0
 8011628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801162a:	4b0e      	ldr	r3, [pc, #56]	; (8011664 <MX_USART2_UART_Init+0x58>)
 801162c:	2200      	movs	r2, #0
 801162e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011630:	4b0c      	ldr	r3, [pc, #48]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011632:	220c      	movs	r2, #12
 8011634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011636:	4b0b      	ldr	r3, [pc, #44]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011638:	2200      	movs	r2, #0
 801163a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801163c:	4b09      	ldr	r3, [pc, #36]	; (8011664 <MX_USART2_UART_Init+0x58>)
 801163e:	2200      	movs	r2, #0
 8011640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011642:	4b08      	ldr	r3, [pc, #32]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011644:	2200      	movs	r2, #0
 8011646:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011648:	4b06      	ldr	r3, [pc, #24]	; (8011664 <MX_USART2_UART_Init+0x58>)
 801164a:	2200      	movs	r2, #0
 801164c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801164e:	4805      	ldr	r0, [pc, #20]	; (8011664 <MX_USART2_UART_Init+0x58>)
 8011650:	f7f5 fb44 	bl	8006cdc <HAL_UART_Init>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 801165a:	f000 ffe9 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801165e:	bf00      	nop
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	20033804 	.word	0x20033804
 8011668:	40004400 	.word	0x40004400

0801166c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b092      	sub	sp, #72	; 0x48
 8011670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8011672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011676:	2200      	movs	r2, #0
 8011678:	601a      	str	r2, [r3, #0]
 801167a:	605a      	str	r2, [r3, #4]
 801167c:	609a      	str	r2, [r3, #8]
 801167e:	60da      	str	r2, [r3, #12]
 8011680:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011682:	2300      	movs	r3, #0
 8011684:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8011686:	1d3b      	adds	r3, r7, #4
 8011688:	222c      	movs	r2, #44	; 0x2c
 801168a:	2100      	movs	r1, #0
 801168c:	4618      	mov	r0, r3
 801168e:	f001 fdbd 	bl	801320c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8011692:	4b3c      	ldr	r3, [pc, #240]	; (8011784 <MX_RTC_Init+0x118>)
 8011694:	4a3c      	ldr	r2, [pc, #240]	; (8011788 <MX_RTC_Init+0x11c>)
 8011696:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8011698:	4b3a      	ldr	r3, [pc, #232]	; (8011784 <MX_RTC_Init+0x118>)
 801169a:	2200      	movs	r2, #0
 801169c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 801169e:	4b39      	ldr	r3, [pc, #228]	; (8011784 <MX_RTC_Init+0x118>)
 80116a0:	227f      	movs	r2, #127	; 0x7f
 80116a2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80116a4:	4b37      	ldr	r3, [pc, #220]	; (8011784 <MX_RTC_Init+0x118>)
 80116a6:	22ff      	movs	r2, #255	; 0xff
 80116a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80116aa:	4b36      	ldr	r3, [pc, #216]	; (8011784 <MX_RTC_Init+0x118>)
 80116ac:	2200      	movs	r2, #0
 80116ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80116b0:	4b34      	ldr	r3, [pc, #208]	; (8011784 <MX_RTC_Init+0x118>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80116b6:	4b33      	ldr	r3, [pc, #204]	; (8011784 <MX_RTC_Init+0x118>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80116bc:	4b31      	ldr	r3, [pc, #196]	; (8011784 <MX_RTC_Init+0x118>)
 80116be:	2200      	movs	r2, #0
 80116c0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80116c2:	4830      	ldr	r0, [pc, #192]	; (8011784 <MX_RTC_Init+0x118>)
 80116c4:	f7f3 ff92 	bl	80055ec <HAL_RTC_Init>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d001      	beq.n	80116d2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80116ce:	f000 ffaf 	bl	8012630 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 80116de:	2300      	movs	r3, #0
 80116e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80116e4:	2300      	movs	r3, #0
 80116e6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80116e8:	2300      	movs	r3, #0
 80116ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80116ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80116f0:	2200      	movs	r2, #0
 80116f2:	4619      	mov	r1, r3
 80116f4:	4823      	ldr	r0, [pc, #140]	; (8011784 <MX_RTC_Init+0x118>)
 80116f6:	f7f4 f861 	bl	80057bc <HAL_RTC_SetTime>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d001      	beq.n	8011704 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8011700:	f000 ff96 	bl	8012630 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011704:	2301      	movs	r3, #1
 8011706:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 801170a:	2301      	movs	r3, #1
 801170c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 8011710:	2301      	movs	r3, #1
 8011712:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801171c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011720:	2200      	movs	r2, #0
 8011722:	4619      	mov	r1, r3
 8011724:	4817      	ldr	r0, [pc, #92]	; (8011784 <MX_RTC_Init+0x118>)
 8011726:	f7f4 f9ff 	bl	8005b28 <HAL_RTC_SetDate>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d001      	beq.n	8011734 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8011730:	f000 ff7e 	bl	8012630 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8011734:	2300      	movs	r3, #0
 8011736:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8011738:	2300      	movs	r3, #0
 801173a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 801173c:	2300      	movs	r3, #0
 801173e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8011740:	2300      	movs	r3, #0
 8011742:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011744:	2300      	movs	r3, #0
 8011746:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011748:	2300      	movs	r3, #0
 801174a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 801174c:	4b0f      	ldr	r3, [pc, #60]	; (801178c <MX_RTC_Init+0x120>)
 801174e:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8011750:	2300      	movs	r3, #0
 8011752:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8011754:	2300      	movs	r3, #0
 8011756:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8011758:	2301      	movs	r3, #1
 801175a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 801175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8011764:	1d3b      	adds	r3, r7, #4
 8011766:	2200      	movs	r2, #0
 8011768:	4619      	mov	r1, r3
 801176a:	4806      	ldr	r0, [pc, #24]	; (8011784 <MX_RTC_Init+0x118>)
 801176c:	f7f4 fb46 	bl	8005dfc <HAL_RTC_SetAlarm_IT>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d001      	beq.n	801177a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8011776:	f000 ff5b 	bl	8012630 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801177a:	bf00      	nop
 801177c:	3748      	adds	r7, #72	; 0x48
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	20033708 	.word	0x20033708
 8011788:	40002800 	.word	0x40002800
 801178c:	80808000 	.word	0x80808000

08011790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011796:	4b1e      	ldr	r3, [pc, #120]	; (8011810 <MX_DMA_Init+0x80>)
 8011798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801179a:	4a1d      	ldr	r2, [pc, #116]	; (8011810 <MX_DMA_Init+0x80>)
 801179c:	f043 0302 	orr.w	r3, r3, #2
 80117a0:	6493      	str	r3, [r2, #72]	; 0x48
 80117a2:	4b1b      	ldr	r3, [pc, #108]	; (8011810 <MX_DMA_Init+0x80>)
 80117a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117a6:	f003 0302 	and.w	r3, r3, #2
 80117aa:	607b      	str	r3, [r7, #4]
 80117ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80117ae:	4b18      	ldr	r3, [pc, #96]	; (8011810 <MX_DMA_Init+0x80>)
 80117b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117b2:	4a17      	ldr	r2, [pc, #92]	; (8011810 <MX_DMA_Init+0x80>)
 80117b4:	f043 0301 	orr.w	r3, r3, #1
 80117b8:	6493      	str	r3, [r2, #72]	; 0x48
 80117ba:	4b15      	ldr	r3, [pc, #84]	; (8011810 <MX_DMA_Init+0x80>)
 80117bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117be:	f003 0301 	and.w	r3, r3, #1
 80117c2:	603b      	str	r3, [r7, #0]
 80117c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80117c6:	2200      	movs	r2, #0
 80117c8:	2105      	movs	r1, #5
 80117ca:	200f      	movs	r0, #15
 80117cc:	f7ef fd6e 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80117d0:	200f      	movs	r0, #15
 80117d2:	f7ef fd97 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80117d6:	2200      	movs	r2, #0
 80117d8:	2105      	movs	r1, #5
 80117da:	2010      	movs	r0, #16
 80117dc:	f7ef fd66 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80117e0:	2010      	movs	r0, #16
 80117e2:	f7ef fd8f 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80117e6:	2200      	movs	r2, #0
 80117e8:	2105      	movs	r1, #5
 80117ea:	203c      	movs	r0, #60	; 0x3c
 80117ec:	f7ef fd5e 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80117f0:	203c      	movs	r0, #60	; 0x3c
 80117f2:	f7ef fd87 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80117f6:	2200      	movs	r2, #0
 80117f8:	2105      	movs	r1, #5
 80117fa:	2045      	movs	r0, #69	; 0x45
 80117fc:	f7ef fd56 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8011800:	2045      	movs	r0, #69	; 0x45
 8011802:	f7ef fd7f 	bl	8001304 <HAL_NVIC_EnableIRQ>

}
 8011806:	bf00      	nop
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	40021000 	.word	0x40021000

08011814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b08c      	sub	sp, #48	; 0x30
 8011818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801181a:	f107 031c 	add.w	r3, r7, #28
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	605a      	str	r2, [r3, #4]
 8011824:	609a      	str	r2, [r3, #8]
 8011826:	60da      	str	r2, [r3, #12]
 8011828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801182a:	4b94      	ldr	r3, [pc, #592]	; (8011a7c <MX_GPIO_Init+0x268>)
 801182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801182e:	4a93      	ldr	r2, [pc, #588]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011830:	f043 0310 	orr.w	r3, r3, #16
 8011834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011836:	4b91      	ldr	r3, [pc, #580]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801183a:	f003 0310 	and.w	r3, r3, #16
 801183e:	61bb      	str	r3, [r7, #24]
 8011840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011842:	4b8e      	ldr	r3, [pc, #568]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011846:	4a8d      	ldr	r2, [pc, #564]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011848:	f043 0304 	orr.w	r3, r3, #4
 801184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801184e:	4b8b      	ldr	r3, [pc, #556]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011852:	f003 0304 	and.w	r3, r3, #4
 8011856:	617b      	str	r3, [r7, #20]
 8011858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801185a:	4b88      	ldr	r3, [pc, #544]	; (8011a7c <MX_GPIO_Init+0x268>)
 801185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801185e:	4a87      	ldr	r2, [pc, #540]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011866:	4b85      	ldr	r3, [pc, #532]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801186e:	613b      	str	r3, [r7, #16]
 8011870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011872:	4b82      	ldr	r3, [pc, #520]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011876:	4a81      	ldr	r2, [pc, #516]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011878:	f043 0301 	orr.w	r3, r3, #1
 801187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801187e:	4b7f      	ldr	r3, [pc, #508]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011882:	f003 0301 	and.w	r3, r3, #1
 8011886:	60fb      	str	r3, [r7, #12]
 8011888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801188a:	4b7c      	ldr	r3, [pc, #496]	; (8011a7c <MX_GPIO_Init+0x268>)
 801188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801188e:	4a7b      	ldr	r2, [pc, #492]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011890:	f043 0302 	orr.w	r3, r3, #2
 8011894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011896:	4b79      	ldr	r3, [pc, #484]	; (8011a7c <MX_GPIO_Init+0x268>)
 8011898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801189a:	f003 0302 	and.w	r3, r3, #2
 801189e:	60bb      	str	r3, [r7, #8]
 80118a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80118a2:	4b76      	ldr	r3, [pc, #472]	; (8011a7c <MX_GPIO_Init+0x268>)
 80118a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118a6:	4a75      	ldr	r2, [pc, #468]	; (8011a7c <MX_GPIO_Init+0x268>)
 80118a8:	f043 0308 	orr.w	r3, r3, #8
 80118ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80118ae:	4b73      	ldr	r3, [pc, #460]	; (8011a7c <MX_GPIO_Init+0x268>)
 80118b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118b2:	f003 0308 	and.w	r3, r3, #8
 80118b6:	607b      	str	r3, [r7, #4]
 80118b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_CON_Pin|SWT_TRIG_Pin, GPIO_PIN_RESET);
 80118ba:	2200      	movs	r2, #0
 80118bc:	2184      	movs	r1, #132	; 0x84
 80118be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80118c2:	f7f0 fb65 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80118c6:	2200      	movs	r2, #0
 80118c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80118cc:	486c      	ldr	r0, [pc, #432]	; (8011a80 <MX_GPIO_Init+0x26c>)
 80118ce:	f7f0 fb5f 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_RESET);
 80118d2:	2200      	movs	r2, #0
 80118d4:	2180      	movs	r1, #128	; 0x80
 80118d6:	486b      	ldr	r0, [pc, #428]	; (8011a84 <MX_GPIO_Init+0x270>)
 80118d8:	f7f0 fb5a 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 80118dc:	2201      	movs	r2, #1
 80118de:	2102      	movs	r1, #2
 80118e0:	4867      	ldr	r0, [pc, #412]	; (8011a80 <MX_GPIO_Init+0x26c>)
 80118e2:	f7f0 fb55 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80118e6:	f64f 637d 	movw	r3, #65149	; 0xfe7d
 80118ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80118ec:	2303      	movs	r3, #3
 80118ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118f0:	2300      	movs	r3, #0
 80118f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80118f4:	f107 031c 	add.w	r3, r7, #28
 80118f8:	4619      	mov	r1, r3
 80118fa:	4861      	ldr	r0, [pc, #388]	; (8011a80 <MX_GPIO_Init+0x26c>)
 80118fc:	f7f0 f8a2 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8011900:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8011904:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011906:	2303      	movs	r3, #3
 8011908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801190a:	2300      	movs	r3, #0
 801190c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801190e:	f107 031c 	add.w	r3, r7, #28
 8011912:	4619      	mov	r1, r3
 8011914:	485c      	ldr	r0, [pc, #368]	; (8011a88 <MX_GPIO_Init+0x274>)
 8011916:	f7f0 f895 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_CON_Pin SWT_TRIG_Pin */
  GPIO_InitStruct.Pin = BT_CON_Pin|SWT_TRIG_Pin;
 801191a:	2384      	movs	r3, #132	; 0x84
 801191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801191e:	2301      	movs	r3, #1
 8011920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011922:	2300      	movs	r3, #0
 8011924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011926:	2300      	movs	r3, #0
 8011928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801192a:	f107 031c 	add.w	r3, r7, #28
 801192e:	4619      	mov	r1, r3
 8011930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011934:	f7f0 f886 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8011938:	f649 7338 	movw	r3, #40760	; 0x9f38
 801193c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801193e:	2303      	movs	r3, #3
 8011940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011942:	2300      	movs	r3, #0
 8011944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011946:	f107 031c 	add.w	r3, r7, #28
 801194a:	4619      	mov	r1, r3
 801194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011950:	f7f0 f878 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_IN_Pin */
  GPIO_InitStruct.Pin = ALARM_IN_Pin;
 8011954:	2340      	movs	r3, #64	; 0x40
 8011956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011958:	2300      	movs	r3, #0
 801195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801195c:	2300      	movs	r3, #0
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ALARM_IN_GPIO_Port, &GPIO_InitStruct);
 8011960:	f107 031c 	add.w	r3, r7, #28
 8011964:	4619      	mov	r1, r3
 8011966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801196a:	f7f0 f86b 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 801196e:	f241 031f 	movw	r3, #4127	; 0x101f
 8011972:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011974:	2303      	movs	r3, #3
 8011976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011978:	2300      	movs	r3, #0
 801197a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801197c:	f107 031c 	add.w	r3, r7, #28
 8011980:	4619      	mov	r1, r3
 8011982:	4842      	ldr	r0, [pc, #264]	; (8011a8c <MX_GPIO_Init+0x278>)
 8011984:	f7f0 f85e 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEAKAGE_Pin */
  GPIO_InitStruct.Pin = LEAKAGE_Pin;
 8011988:	2380      	movs	r3, #128	; 0x80
 801198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801198c:	2300      	movs	r3, #0
 801198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011990:	2300      	movs	r3, #0
 8011992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LEAKAGE_GPIO_Port, &GPIO_InitStruct);
 8011994:	f107 031c 	add.w	r3, r7, #28
 8011998:	4619      	mov	r1, r3
 801199a:	4839      	ldr	r0, [pc, #228]	; (8011a80 <MX_GPIO_Init+0x26c>)
 801199c:	f7f0 f852 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80119a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80119a6:	2301      	movs	r3, #1
 80119a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119aa:	2300      	movs	r3, #0
 80119ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119ae:	2300      	movs	r3, #0
 80119b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80119b2:	f107 031c 	add.w	r3, r7, #28
 80119b6:	4619      	mov	r1, r3
 80119b8:	4831      	ldr	r0, [pc, #196]	; (8011a80 <MX_GPIO_Init+0x26c>)
 80119ba:	f7f0 f843 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DS_WAKEUP_Pin NETWORKINT_Pin */
  GPIO_InitStruct.Pin = DS_WAKEUP_Pin|NETWORKINT_Pin;
 80119be:	f248 0320 	movw	r3, #32800	; 0x8020
 80119c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80119c4:	2300      	movs	r3, #0
 80119c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80119cc:	f107 031c 	add.w	r3, r7, #28
 80119d0:	4619      	mov	r1, r3
 80119d2:	482e      	ldr	r0, [pc, #184]	; (8011a8c <MX_GPIO_Init+0x278>)
 80119d4:	f7f0 f836 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_RST_Pin */
  GPIO_InitStruct.Pin = RTC_RST_Pin;
 80119d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80119de:	2300      	movs	r3, #0
 80119e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RTC_RST_GPIO_Port, &GPIO_InitStruct);
 80119e6:	f107 031c 	add.w	r3, r7, #28
 80119ea:	4619      	mov	r1, r3
 80119ec:	4825      	ldr	r0, [pc, #148]	; (8011a84 <MX_GPIO_Init+0x270>)
 80119ee:	f7f0 f829 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD14
                           PD15 PD0 PD1 PD2
                           PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 80119f2:	f64c 630f 	movw	r3, #52751	; 0xce0f
 80119f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80119f8:	2303      	movs	r3, #3
 80119fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119fc:	2300      	movs	r3, #0
 80119fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011a00:	f107 031c 	add.w	r3, r7, #28
 8011a04:	4619      	mov	r1, r3
 8011a06:	481f      	ldr	r0, [pc, #124]	; (8011a84 <MX_GPIO_Init+0x270>)
 8011a08:	f7f0 f81c 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8011a0c:	2310      	movs	r3, #16
 8011a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011a10:	4b1f      	ldr	r3, [pc, #124]	; (8011a90 <MX_GPIO_Init+0x27c>)
 8011a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a14:	2300      	movs	r3, #0
 8011a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8011a18:	f107 031c 	add.w	r3, r7, #28
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4819      	ldr	r0, [pc, #100]	; (8011a84 <MX_GPIO_Init+0x270>)
 8011a20:	f7f0 f810 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RESET_Pin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin;
 8011a24:	2380      	movs	r3, #128	; 0x80
 8011a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a30:	2300      	movs	r3, #0
 8011a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RESET_GPIO_Port, &GPIO_InitStruct);
 8011a34:	f107 031c 	add.w	r3, r7, #28
 8011a38:	4619      	mov	r1, r3
 8011a3a:	4812      	ldr	r0, [pc, #72]	; (8011a84 <MX_GPIO_Init+0x270>)
 8011a3c:	f7f0 f802 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8011a40:	2308      	movs	r3, #8
 8011a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011a44:	2303      	movs	r3, #3
 8011a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011a4c:	f107 031c 	add.w	r3, r7, #28
 8011a50:	4619      	mov	r1, r3
 8011a52:	4810      	ldr	r0, [pc, #64]	; (8011a94 <MX_GPIO_Init+0x280>)
 8011a54:	f7ef fff6 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8011a58:	2302      	movs	r3, #2
 8011a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011a60:	2302      	movs	r3, #2
 8011a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011a64:	2302      	movs	r3, #2
 8011a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8011a68:	f107 031c 	add.w	r3, r7, #28
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	4804      	ldr	r0, [pc, #16]	; (8011a80 <MX_GPIO_Init+0x26c>)
 8011a70:	f7ef ffe8 	bl	8001a44 <HAL_GPIO_Init>

}
 8011a74:	bf00      	nop
 8011a76:	3730      	adds	r7, #48	; 0x30
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	40021000 	.word	0x40021000
 8011a80:	48001000 	.word	0x48001000
 8011a84:	48000c00 	.word	0x48000c00
 8011a88:	48000800 	.word	0x48000800
 8011a8c:	48000400 	.word	0x48000400
 8011a90:	10110000 	.word	0x10110000
 8011a94:	48001c00 	.word	0x48001c00

08011a98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) //iridium
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4a10      	ldr	r2, [pc, #64]	; (8011ae8 <HAL_UART_RxCpltCallback+0x50>)
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d105      	bne.n	8011ab6 <HAL_UART_RxCpltCallback+0x1e>
	{
		setgreenLED();
 8011aaa:	f7fc ff8d 	bl	800e9c8 <setgreenLED>
		IRIDIUM_Callback();
 8011aae:	f7fb ff07 	bl	800d8c0 <IRIDIUM_Callback>
		resetgreenLED();
 8011ab2:	f7fc ff95 	bl	800e9e0 <resetgreenLED>
		//HAL_GPIO_TogglePin(GPIOE,LED_Pin);
	}
	if (huart->Instance == LPUART1) //USB
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4a0c      	ldr	r2, [pc, #48]	; (8011aec <HAL_UART_RxCpltCallback+0x54>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d101      	bne.n	8011ac4 <HAL_UART_RxCpltCallback+0x2c>
	{
		USB_Callback();
 8011ac0:	f7fd fcac 	bl	800f41c <USB_Callback>
	}
	if (huart->Instance == UART4) //BLUETOOTH
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	4a09      	ldr	r2, [pc, #36]	; (8011af0 <HAL_UART_RxCpltCallback+0x58>)
 8011aca:	4293      	cmp	r3, r2
 8011acc:	d101      	bne.n	8011ad2 <HAL_UART_RxCpltCallback+0x3a>
	{
		BT_Callback();
 8011ace:	f7fa f91b 	bl	800bd08 <BT_Callback>
	}
	if (huart->Instance == USART2) //GPS
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a07      	ldr	r2, [pc, #28]	; (8011af4 <HAL_UART_RxCpltCallback+0x5c>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d101      	bne.n	8011ae0 <HAL_UART_RxCpltCallback+0x48>
	{
		GPS_Callback();
 8011adc:	f7fb f896 	bl	800cc0c <GPS_Callback>
	}
}
 8011ae0:	bf00      	nop
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	40013800 	.word	0x40013800
 8011aec:	40008000 	.word	0x40008000
 8011af0:	40004c00 	.word	0x40004c00
 8011af4:	40004400 	.word	0x40004400

08011af8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
	//
	if (huart->Instance == USART1){
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	4a12      	ldr	r2, [pc, #72]	; (8011b50 <HAL_UART_ErrorCallback+0x58>)
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d108      	bne.n	8011b1c <HAL_UART_ErrorCallback+0x24>
		IRIDIUM.rxIndex = 0;
 8011b0a:	4b12      	ldr	r3, [pc, #72]	; (8011b54 <HAL_UART_ErrorCallback+0x5c>)
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		HAL_UART_Receive_DMA(&_IRIDIUM_USART, &IRIDIUM.rxTmp, 1);
 8011b12:	2201      	movs	r2, #1
 8011b14:	4910      	ldr	r1, [pc, #64]	; (8011b58 <HAL_UART_ErrorCallback+0x60>)
 8011b16:	4811      	ldr	r0, [pc, #68]	; (8011b5c <HAL_UART_ErrorCallback+0x64>)
 8011b18:	f7f5 fa78 	bl	800700c <HAL_UART_Receive_DMA>
	}

	if (huart->Instance == LPUART1){
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a0f      	ldr	r2, [pc, #60]	; (8011b60 <HAL_UART_ErrorCallback+0x68>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d101      	bne.n	8011b2a <HAL_UART_ErrorCallback+0x32>
		USB_Init();
 8011b26:	f7fd fc5d 	bl	800f3e4 <USB_Init>
	}

	if (huart->Instance == USART2){
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	4a0d      	ldr	r2, [pc, #52]	; (8011b64 <HAL_UART_ErrorCallback+0x6c>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d101      	bne.n	8011b38 <HAL_UART_ErrorCallback+0x40>
		GPS_Init();
 8011b34:	f7fb f83c 	bl	800cbb0 <GPS_Init>
	}

	if (huart->Instance == UART4){
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4a0a      	ldr	r2, [pc, #40]	; (8011b68 <HAL_UART_ErrorCallback+0x70>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d101      	bne.n	8011b46 <HAL_UART_ErrorCallback+0x4e>
		BT_Init();
 8011b42:	f7fa f8cd 	bl	800bce0 <BT_Init>
	}
}
 8011b46:	bf00      	nop
 8011b48:	3708      	adds	r7, #8
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	40013800 	.word	0x40013800
 8011b54:	20032e8c 	.word	0x20032e8c
 8011b58:	2003308e 	.word	0x2003308e
 8011b5c:	2003365c 	.word	0x2003365c
 8011b60:	40008000 	.word	0x40008000
 8011b64:	40004400 	.word	0x40004400
 8011b68:	40004c00 	.word	0x40004c00

08011b6c <HAL_RTC_AlarmAEventCallback>:
	//HAL_ResumeTick();
	//usb_universal_printf("WAKEUP FROM RTC\n NOW GOING IN STOP MODE AGAIN \r\n");

}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) { //alarm A pada mode buoy dibuat per menit
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(rtcBinarySemHandle);
 8011b74:	4b04      	ldr	r3, [pc, #16]	; (8011b88 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7f6 fe33 	bl	80087e4 <osSemaphoreRelease>
	//usb_universal_printf("Timer A On \r\n");
}
 8011b7e:	bf00      	nop
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	200335ec 	.word	0x200335ec
 8011b8c:	00000000 	.word	0x00000000

08011b90 <StartOperationTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOperationTask */
void StartOperationTask(void *argument)
{
 8011b90:	b5b0      	push	{r4, r5, r7, lr}
 8011b92:	b0a0      	sub	sp, #128	; 0x80
 8011b94:	af04      	add	r7, sp, #16
 8011b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	RTC_TimeTypeDef RTCMicro;
	RTC_DateTypeDef RTCDateMicro;
	uint32_t boardtemp;

	InitEEPROM();
 8011b98:	f7fa fe22 	bl	800c7e0 <InitEEPROM>
	usb_universal_printf("Inisialisasi GPS Tracker \r\n");
 8011b9c:	48c0      	ldr	r0, [pc, #768]	; (8011ea0 <StartOperationTask+0x310>)
 8011b9e:	f000 fda5 	bl	80126ec <usb_universal_printf>
	PrintParameter();
 8011ba2:	f7fe ff61 	bl	8010a68 <PrintParameter>

	DS3231_GetTime(&rtcTEWS);
 8011ba6:	48bf      	ldr	r0, [pc, #764]	; (8011ea4 <StartOperationTask+0x314>)
 8011ba8:	f7fc ff26 	bl	800e9f8 <DS3231_GetTime>
	//DS3231_GetTime_B(&rtcTEWS2);
	RTCDateMicro.Year = rtcTEWS.Year;
 8011bac:	4bbd      	ldr	r3, [pc, #756]	; (8011ea4 <StartOperationTask+0x314>)
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	75fb      	strb	r3, [r7, #23]
	RTCDateMicro.Month = rtcTEWS.Month;
 8011bb2:	4bbc      	ldr	r3, [pc, #752]	; (8011ea4 <StartOperationTask+0x314>)
 8011bb4:	785b      	ldrb	r3, [r3, #1]
 8011bb6:	757b      	strb	r3, [r7, #21]
	RTCDateMicro.Date = rtcTEWS.Date;
 8011bb8:	4bba      	ldr	r3, [pc, #744]	; (8011ea4 <StartOperationTask+0x314>)
 8011bba:	789b      	ldrb	r3, [r3, #2]
 8011bbc:	75bb      	strb	r3, [r7, #22]
	RTCDateMicro.WeekDay = rtcTEWS.DaysOfWeek;
 8011bbe:	4bb9      	ldr	r3, [pc, #740]	; (8011ea4 <StartOperationTask+0x314>)
 8011bc0:	78db      	ldrb	r3, [r3, #3]
 8011bc2:	753b      	strb	r3, [r7, #20]
	HAL_RTC_SetDate(&hrtc, &RTCDateMicro, RTC_FORMAT_BIN);
 8011bc4:	f107 0314 	add.w	r3, r7, #20
 8011bc8:	2200      	movs	r2, #0
 8011bca:	4619      	mov	r1, r3
 8011bcc:	48b6      	ldr	r0, [pc, #728]	; (8011ea8 <StartOperationTask+0x318>)
 8011bce:	f7f3 ffab 	bl	8005b28 <HAL_RTC_SetDate>
	RTCMicro.Hours = rtcTEWS.Hour - 1;
 8011bd2:	4bb4      	ldr	r3, [pc, #720]	; (8011ea4 <StartOperationTask+0x314>)
 8011bd4:	791b      	ldrb	r3, [r3, #4]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	763b      	strb	r3, [r7, #24]
	RTCMicro.Minutes = rtcTEWS.Min;
 8011bdc:	4bb1      	ldr	r3, [pc, #708]	; (8011ea4 <StartOperationTask+0x314>)
 8011bde:	795b      	ldrb	r3, [r3, #5]
 8011be0:	767b      	strb	r3, [r7, #25]
	RTCMicro.Seconds = rtcTEWS.Sec;
 8011be2:	4bb0      	ldr	r3, [pc, #704]	; (8011ea4 <StartOperationTask+0x314>)
 8011be4:	799b      	ldrb	r3, [r3, #6]
 8011be6:	76bb      	strb	r3, [r7, #26]
	HAL_RTC_SetTime(&hrtc, &RTCMicro, RTC_FORMAT_BIN);
 8011be8:	f107 0318 	add.w	r3, r7, #24
 8011bec:	2200      	movs	r2, #0
 8011bee:	4619      	mov	r1, r3
 8011bf0:	48ad      	ldr	r0, [pc, #692]	; (8011ea8 <StartOperationTask+0x318>)
 8011bf2:	f7f3 fde3 	bl	80057bc <HAL_RTC_SetTime>
	HAL_IWDG_Refresh(&hiwdg); //refresh counter clock watchdog timer
 8011bf6:	48ad      	ldr	r0, [pc, #692]	; (8011eac <StartOperationTask+0x31c>)
 8011bf8:	f7f1 fbe8 	bl	80033cc <HAL_IWDG_Refresh>
	osSemaphoreAcquire(rtcBinarySemHandle, 100);
 8011bfc:	4bac      	ldr	r3, [pc, #688]	; (8011eb0 <StartOperationTask+0x320>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2164      	movs	r1, #100	; 0x64
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f6 fd9c 	bl	8008740 <osSemaphoreAcquire>

	HAL_GPIO_WritePin(BT_CON_GPIO_Port, BT_CON_Pin, GPIO_PIN_RESET); // bluetooth dalam mode data
 8011c08:	2200      	movs	r2, #0
 8011c0a:	2104      	movs	r1, #4
 8011c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011c10:	f7f0 f9be 	bl	8001f90 <HAL_GPIO_WritePin>

	LTC4151_write(LTC4151_I2C_ADDRESS, LTC4151_CONTROL_REG,LTC4151_CONTINUOUS_MODE);
 8011c14:	2200      	movs	r2, #0
 8011c16:	2106      	movs	r1, #6
 8011c18:	20ce      	movs	r0, #206	; 0xce
 8011c1a:	f7ff f857 	bl	8010ccc <LTC4151_write>

	// Hidupkan Power FET kemudian reset SWQ Alarm
	HAL_GPIO_WritePin(SWT_TRIG_GPIO_Port, SWT_TRIG_Pin, GPIO_PIN_SET);
 8011c1e:	2201      	movs	r2, #1
 8011c20:	2180      	movs	r1, #128	; 0x80
 8011c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011c26:	f7f0 f9b3 	bl	8001f90 <HAL_GPIO_WritePin>
	osDelay(50);
 8011c2a:	2032      	movs	r0, #50	; 0x32
 8011c2c:	f7f6 fce3 	bl	80085f6 <osDelay>
	//DS3231_ResetAlarm1_B();
	//DS3231_ResetAlarm2_B();
	//osDelay(50);

	//0=tanggal 1=jam 2=menit 3=detik 4=sekali per detik
	uint8_t _Mode = 1;
 8011c30:	2301      	movs	r3, #1
 8011c32:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	uint8_t _Date = rtcTEWS2.Date;
 8011c36:	4b9f      	ldr	r3, [pc, #636]	; (8011eb4 <StartOperationTask+0x324>)
 8011c38:	789b      	ldrb	r3, [r3, #2]
 8011c3a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	uint8_t _Hour = rtcTEWS2.Hour;
 8011c3e:	4b9d      	ldr	r3, [pc, #628]	; (8011eb4 <StartOperationTask+0x324>)
 8011c40:	791b      	ldrb	r3, [r3, #4]
 8011c42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t _Min  = rtcTEWS2.Min;
 8011c46:	4b9b      	ldr	r3, [pc, #620]	; (8011eb4 <StartOperationTask+0x324>)
 8011c48:	795b      	ldrb	r3, [r3, #5]
 8011c4a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t _Sec  = rtcTEWS2.Sec;
 8011c4e:	4b99      	ldr	r3, [pc, #612]	; (8011eb4 <StartOperationTask+0x324>)
 8011c50:	799b      	ldrb	r3, [r3, #6]
 8011c52:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if(operationmode == NORMALOPS){
 8011c56:	4b98      	ldr	r3, [pc, #608]	; (8011eb8 <StartOperationTask+0x328>)
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d11c      	bne.n	8011c98 <StartOperationTask+0x108>
		// set alarm jam 21:17:00 UTC
		_Hour = 21;
 8011c5e:	2315      	movs	r3, #21
 8011c60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		_Min  = 17;
 8011c64:	2311      	movs	r3, #17
 8011c66:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		usb_universal_printf("MODE NORMAL, Alarm Set : %.2d:%.2d:%.2d UTC\r\n",_Hour,_Min,_Sec);
 8011c6a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8011c6e:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8011c72:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011c76:	4891      	ldr	r0, [pc, #580]	; (8011ebc <StartOperationTask+0x32c>)
 8011c78:	f000 fd38 	bl	80126ec <usb_universal_printf>
		DS3231_SetAlarm1_B(_Mode, _Date, _Hour, _Min, _Sec);
 8011c7c:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8011c80:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8011c84:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8011c88:	f897 006d 	ldrb.w	r0, [r7, #109]	; 0x6d
 8011c8c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011c90:	9300      	str	r3, [sp, #0]
 8011c92:	4623      	mov	r3, r4
 8011c94:	f7fd f92c 	bl	800eef0 <DS3231_SetAlarm1_B>
	}

	if(operationmode == DRIFTINGOPS){
 8011c98:	4b87      	ldr	r3, [pc, #540]	; (8011eb8 <StartOperationTask+0x328>)
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	2b02      	cmp	r3, #2
 8011c9e:	d123      	bne.n	8011ce8 <StartOperationTask+0x158>
		// set alarm per 1 jam
		alarm_now = _Hour + 1;
 8011ca0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	4b85      	ldr	r3, [pc, #532]	; (8011ec0 <StartOperationTask+0x330>)
 8011caa:	701a      	strb	r2, [r3, #0]
		if(alarm_now > 23){
 8011cac:	4b84      	ldr	r3, [pc, #528]	; (8011ec0 <StartOperationTask+0x330>)
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	2b17      	cmp	r3, #23
 8011cb2:	d905      	bls.n	8011cc0 <StartOperationTask+0x130>
			alarm_now = alarm_now - 24;
 8011cb4:	4b82      	ldr	r3, [pc, #520]	; (8011ec0 <StartOperationTask+0x330>)
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	3b18      	subs	r3, #24
 8011cba:	b2da      	uxtb	r2, r3
 8011cbc:	4b80      	ldr	r3, [pc, #512]	; (8011ec0 <StartOperationTask+0x330>)
 8011cbe:	701a      	strb	r2, [r3, #0]
		}
		usb_universal_printf("MODE DRIFTING, Alarm Set : %.2d\r\n",alarm_now);
 8011cc0:	4b7f      	ldr	r3, [pc, #508]	; (8011ec0 <StartOperationTask+0x330>)
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	487f      	ldr	r0, [pc, #508]	; (8011ec4 <StartOperationTask+0x334>)
 8011cc8:	f000 fd10 	bl	80126ec <usb_universal_printf>
		DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 8011ccc:	4b7c      	ldr	r3, [pc, #496]	; (8011ec0 <StartOperationTask+0x330>)
 8011cce:	781a      	ldrb	r2, [r3, #0]
 8011cd0:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8011cd4:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8011cd8:	f897 006d 	ldrb.w	r0, [r7, #109]	; 0x6d
 8011cdc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	4623      	mov	r3, r4
 8011ce4:	f7fd f904 	bl	800eef0 <DS3231_SetAlarm1_B>
	}

	if(operationmode == HOLDOPS){
 8011ce8:	4b73      	ldr	r3, [pc, #460]	; (8011eb8 <StartOperationTask+0x328>)
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b04      	cmp	r3, #4
 8011cee:	d126      	bne.n	8011d3e <StartOperationTask+0x1ae>
		// set alarm per 3 jam
		alarm_now = _Hour + periodsendloc;
 8011cf0:	4b75      	ldr	r3, [pc, #468]	; (8011ec8 <StartOperationTask+0x338>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011cfa:	4413      	add	r3, r2
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	4b70      	ldr	r3, [pc, #448]	; (8011ec0 <StartOperationTask+0x330>)
 8011d00:	701a      	strb	r2, [r3, #0]
		if(alarm_now > 23){
 8011d02:	4b6f      	ldr	r3, [pc, #444]	; (8011ec0 <StartOperationTask+0x330>)
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	2b17      	cmp	r3, #23
 8011d08:	d905      	bls.n	8011d16 <StartOperationTask+0x186>
			alarm_now = alarm_now - 24;
 8011d0a:	4b6d      	ldr	r3, [pc, #436]	; (8011ec0 <StartOperationTask+0x330>)
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	3b18      	subs	r3, #24
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	4b6b      	ldr	r3, [pc, #428]	; (8011ec0 <StartOperationTask+0x330>)
 8011d14:	701a      	strb	r2, [r3, #0]
		}
		usb_universal_printf("MODE TESTING, Alarm Set : %.2d\r\n",alarm_now);
 8011d16:	4b6a      	ldr	r3, [pc, #424]	; (8011ec0 <StartOperationTask+0x330>)
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	486b      	ldr	r0, [pc, #428]	; (8011ecc <StartOperationTask+0x33c>)
 8011d1e:	f000 fce5 	bl	80126ec <usb_universal_printf>
		DS3231_SetAlarm1_B(_Mode, _Date, alarm_now, _Min, _Sec);
 8011d22:	4b67      	ldr	r3, [pc, #412]	; (8011ec0 <StartOperationTask+0x330>)
 8011d24:	781a      	ldrb	r2, [r3, #0]
 8011d26:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8011d2a:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8011d2e:	f897 006d 	ldrb.w	r0, [r7, #109]	; 0x6d
 8011d32:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011d36:	9300      	str	r3, [sp, #0]
 8011d38:	4623      	mov	r3, r4
 8011d3a:	f7fd f8d9 	bl	800eef0 <DS3231_SetAlarm1_B>
	}

	//setgreenLED();

	  char *unit = "K";
 8011d3e:	4b64      	ldr	r3, [pc, #400]	; (8011ed0 <StartOperationTask+0x340>)
 8011d40:	667b      	str	r3, [r7, #100]	; 0x64
	  double lat1 = -6.328759757512878;
 8011d42:	a34f      	add	r3, pc, #316	; (adr r3, 8011e80 <StartOperationTask+0x2f0>)
 8011d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d48:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  double lon1 = 106.46331631536947;
 8011d4c:	a34e      	add	r3, pc, #312	; (adr r3, 8011e88 <StartOperationTask+0x2f8>)
 8011d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  double lat2 = -6.337566634988436;
 8011d56:	a34e      	add	r3, pc, #312	; (adr r3, 8011e90 <StartOperationTask+0x300>)
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  double lon2 = 106.44137635216677;
 8011d60:	a34d      	add	r3, pc, #308	; (adr r3, 8011e98 <StartOperationTask+0x308>)
 8011d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  float aa = distance(lat1,lon1,lat2,lon2,*unit);
 8011d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 8011d74:	ed97 2b12 	vldr	d2, [r7, #72]	; 0x48
 8011d78:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8011d7c:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8011d80:	f7fb fbfe 	bl	800d580 <distance>
 8011d84:	ec53 2b10 	vmov	r2, r3, d0
 8011d88:	4610      	mov	r0, r2
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	f7ee ff4c 	bl	8000c28 <__aeabi_d2f>
 8011d90:	4603      	mov	r3, r0
 8011d92:	63fb      	str	r3, [r7, #60]	; 0x3c
	  double bb = CalculateDistance(lat1, lon1,lat2,lon2);
 8011d94:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 8011d98:	ed97 2b12 	vldr	d2, [r7, #72]	; 0x48
 8011d9c:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8011da0:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8011da4:	f7fb faf4 	bl	800d390 <CalculateDistance>
 8011da8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	  usb_universal_printf("Jarak: %f %s\r\n",aa,unit);
 8011dac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011dae:	f7ee fbeb 	bl	8000588 <__aeabi_f2d>
 8011db2:	4602      	mov	r2, r0
 8011db4:	460b      	mov	r3, r1
 8011db6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011db8:	9100      	str	r1, [sp, #0]
 8011dba:	4846      	ldr	r0, [pc, #280]	; (8011ed4 <StartOperationTask+0x344>)
 8011dbc:	f000 fc96 	bl	80126ec <usb_universal_printf>
	  usb_universal_printf("Jarak: %f %s\r\n",bb,unit);
 8011dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011dc8:	4842      	ldr	r0, [pc, #264]	; (8011ed4 <StartOperationTask+0x344>)
 8011dca:	f000 fc8f 	bl	80126ec <usb_universal_printf>

  /* Infinite loop */
  for(;;)
  {
	  generalTaskTimer = osKernelGetTickCount();
 8011dce:	f7f6 fb6b 	bl	80084a8 <osKernelGetTickCount>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	4a40      	ldr	r2, [pc, #256]	; (8011ed8 <StartOperationTask+0x348>)
 8011dd6:	6013      	str	r3, [r2, #0]

	  ds_wakeup  = HAL_GPIO_ReadPin(DS_WAKEUP_GPIO_Port, DS_WAKEUP_Pin);
 8011dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011ddc:	483f      	ldr	r0, [pc, #252]	; (8011edc <StartOperationTask+0x34c>)
 8011dde:	f7f0 f8b1 	bl	8001f44 <HAL_GPIO_ReadPin>
 8011de2:	4603      	mov	r3, r0
 8011de4:	461a      	mov	r2, r3
 8011de6:	4b3e      	ldr	r3, [pc, #248]	; (8011ee0 <StartOperationTask+0x350>)
 8011de8:	701a      	strb	r2, [r3, #0]
	  uint8_t ds_wakeup2  = HAL_GPIO_ReadPin(ALARM_IN_GPIO_Port, ALARM_IN_Pin);
 8011dea:	2140      	movs	r1, #64	; 0x40
 8011dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011df0:	f7f0 f8a8 	bl	8001f44 <HAL_GPIO_ReadPin>
 8011df4:	4603      	mov	r3, r0
 8011df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  if (osSemaphoreGetCount(rtcBinarySemHandle) > 0) {
 8011dfa:	4b2d      	ldr	r3, [pc, #180]	; (8011eb0 <StartOperationTask+0x320>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7f6 fd34 	bl	800886c <osSemaphoreGetCount>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f000 81b9 	beq.w	801217e <StartOperationTask+0x5ee>
		  osSemaphoreAcquire(rtcBinarySemHandle, 100);
 8011e0c:	4b28      	ldr	r3, [pc, #160]	; (8011eb0 <StartOperationTask+0x320>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2164      	movs	r1, #100	; 0x64
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7f6 fc94 	bl	8008740 <osSemaphoreAcquire>

		  //HAL_GPIO_TogglePin(GPIOE,LED_Pin);
		  DataEngBuoy.leakstatus = HAL_GPIO_ReadPin(LEAKAGE_GPIO_Port,LEAKAGE_Pin);
 8011e18:	2180      	movs	r1, #128	; 0x80
 8011e1a:	4832      	ldr	r0, [pc, #200]	; (8011ee4 <StartOperationTask+0x354>)
 8011e1c:	f7f0 f892 	bl	8001f44 <HAL_GPIO_ReadPin>
 8011e20:	4603      	mov	r3, r0
 8011e22:	461a      	mov	r2, r3
 8011e24:	4b30      	ldr	r3, [pc, #192]	; (8011ee8 <StartOperationTask+0x358>)
 8011e26:	761a      	strb	r2, [r3, #24]
		  DS3231_ReadTemperature(&boardtemp);
 8011e28:	f107 0310 	add.w	r3, r7, #16
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fc ff6f 	bl	800ed10 <DS3231_ReadTemperature>
		  DataEngBuoy.tempBuoy = boardtemp;
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	4b2c      	ldr	r3, [pc, #176]	; (8011ee8 <StartOperationTask+0x358>)
 8011e38:	829a      	strh	r2, [r3, #20]
		  DataEngBuoy.batBuoy = getvoltage();
 8011e3a:	f7fe ff95 	bl	8010d68 <getvoltage>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	4b29      	ldr	r3, [pc, #164]	; (8011ee8 <StartOperationTask+0x358>)
 8011e44:	825a      	strh	r2, [r3, #18]

		  usb_universal_printf("DS WakeUp Status: %d \r\n",ds_wakeup);
 8011e46:	4b26      	ldr	r3, [pc, #152]	; (8011ee0 <StartOperationTask+0x350>)
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	4827      	ldr	r0, [pc, #156]	; (8011eec <StartOperationTask+0x35c>)
 8011e4e:	f000 fc4d 	bl	80126ec <usb_universal_printf>
		  usb_universal_printf("DS2 WakeUp Status: %d \r\n",ds_wakeup2);
 8011e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e56:	4619      	mov	r1, r3
 8011e58:	4825      	ldr	r0, [pc, #148]	; (8011ef0 <StartOperationTask+0x360>)
 8011e5a:	f000 fc47 	bl	80126ec <usb_universal_printf>
		  //usb_universal_printf("Leak Status: %d \r\n",DataEngBuoy.leakstatus);

		  DS3231_GetTime(&rtcTEWS);
 8011e5e:	4811      	ldr	r0, [pc, #68]	; (8011ea4 <StartOperationTask+0x314>)
 8011e60:	f7fc fdca 	bl	800e9f8 <DS3231_GetTime>
		  HAL_RTC_GetTime(&hrtc, &RTCMicro, RTC_FORMAT_BIN); // Get Time
 8011e64:	f107 0318 	add.w	r3, r7, #24
 8011e68:	2200      	movs	r2, #0
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	480e      	ldr	r0, [pc, #56]	; (8011ea8 <StartOperationTask+0x318>)
 8011e6e:	f7f3 fdf1 	bl	8005a54 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &RTCDateMicro, RTC_FORMAT_BIN); //Get Date
 8011e72:	f107 0314 	add.w	r3, r7, #20
 8011e76:	2200      	movs	r2, #0
 8011e78:	4619      	mov	r1, r3
 8011e7a:	e03b      	b.n	8011ef4 <StartOperationTask+0x364>
 8011e7c:	f3af 8000 	nop.w
 8011e80:	65db08e9 	.word	0x65db08e9
 8011e84:	c01950a6 	.word	0xc01950a6
 8011e88:	f9798dc4 	.word	0xf9798dc4
 8011e8c:	405a9da6 	.word	0x405a9da6
 8011e90:	1165fc02 	.word	0x1165fc02
 8011e94:	c01959ab 	.word	0xc01959ab
 8011e98:	8299722e 	.word	0x8299722e
 8011e9c:	405a9c3f 	.word	0x405a9c3f
 8011ea0:	0801bfc8 	.word	0x0801bfc8
 8011ea4:	2003346c 	.word	0x2003346c
 8011ea8:	20033708 	.word	0x20033708
 8011eac:	200334d4 	.word	0x200334d4
 8011eb0:	200335ec 	.word	0x200335ec
 8011eb4:	20033478 	.word	0x20033478
 8011eb8:	20033534 	.word	0x20033534
 8011ebc:	0801bfe4 	.word	0x0801bfe4
 8011ec0:	200338a0 	.word	0x200338a0
 8011ec4:	0801c014 	.word	0x0801c014
 8011ec8:	20033374 	.word	0x20033374
 8011ecc:	0801c038 	.word	0x0801c038
 8011ed0:	0801c05c 	.word	0x0801c05c
 8011ed4:	0801c060 	.word	0x0801c060
 8011ed8:	20033914 	.word	0x20033914
 8011edc:	48000400 	.word	0x48000400
 8011ee0:	20033474 	.word	0x20033474
 8011ee4:	48001000 	.word	0x48001000
 8011ee8:	200324a0 	.word	0x200324a0
 8011eec:	0801c070 	.word	0x0801c070
 8011ef0:	0801c088 	.word	0x0801c088
 8011ef4:	48a4      	ldr	r0, [pc, #656]	; (8012188 <StartOperationTask+0x5f8>)
 8011ef6:	f7f3 ff27 	bl	8005d48 <HAL_RTC_GetDate>
		  //RTC auto sycron dengan GPS
		  if (rtcTEWS.Hour == 20 && rtcTEWS.Min == 0 && GPS.validstatus == 1) {
 8011efa:	4ba4      	ldr	r3, [pc, #656]	; (801218c <StartOperationTask+0x5fc>)
 8011efc:	791b      	ldrb	r3, [r3, #4]
 8011efe:	2b14      	cmp	r3, #20
 8011f00:	d13d      	bne.n	8011f7e <StartOperationTask+0x3ee>
 8011f02:	4ba2      	ldr	r3, [pc, #648]	; (801218c <StartOperationTask+0x5fc>)
 8011f04:	795b      	ldrb	r3, [r3, #5]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d139      	bne.n	8011f7e <StartOperationTask+0x3ee>
 8011f0a:	4ba1      	ldr	r3, [pc, #644]	; (8012190 <StartOperationTask+0x600>)
 8011f0c:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d134      	bne.n	8011f7e <StartOperationTask+0x3ee>
			  _RTC setTime;
			  setTime.Hour = GPS.hour;
 8011f14:	4b9e      	ldr	r3, [pc, #632]	; (8012190 <StartOperationTask+0x600>)
 8011f16:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8011f1a:	733b      	strb	r3, [r7, #12]
			  setTime.Min = GPS.minute;
 8011f1c:	4b9c      	ldr	r3, [pc, #624]	; (8012190 <StartOperationTask+0x600>)
 8011f1e:	f893 342e 	ldrb.w	r3, [r3, #1070]	; 0x42e
 8011f22:	737b      	strb	r3, [r7, #13]
			  setTime.Sec = GPS.second;
 8011f24:	4b9a      	ldr	r3, [pc, #616]	; (8012190 <StartOperationTask+0x600>)
 8011f26:	f893 342f 	ldrb.w	r3, [r3, #1071]	; 0x42f
 8011f2a:	73bb      	strb	r3, [r7, #14]
			  setTime.Date = rtcTEWS.Date;
 8011f2c:	4b97      	ldr	r3, [pc, #604]	; (801218c <StartOperationTask+0x5fc>)
 8011f2e:	789b      	ldrb	r3, [r3, #2]
 8011f30:	72bb      	strb	r3, [r7, #10]
			  setTime.Month = rtcTEWS.Month;
 8011f32:	4b96      	ldr	r3, [pc, #600]	; (801218c <StartOperationTask+0x5fc>)
 8011f34:	785b      	ldrb	r3, [r3, #1]
 8011f36:	727b      	strb	r3, [r7, #9]
			  setTime.Year = rtcTEWS.Year;
 8011f38:	4b94      	ldr	r3, [pc, #592]	; (801218c <StartOperationTask+0x5fc>)
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	723b      	strb	r3, [r7, #8]
			  setTime.DaysOfWeek = rtcTEWS.DaysOfWeek;
 8011f3e:	4b93      	ldr	r3, [pc, #588]	; (801218c <StartOperationTask+0x5fc>)
 8011f40:	78db      	ldrb	r3, [r3, #3]
 8011f42:	72fb      	strb	r3, [r7, #11]
			  DS3231_SetTime(&setTime);
 8011f44:	f107 0308 	add.w	r3, r7, #8
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fc fe49 	bl	800ebe0 <DS3231_SetTime>
			  DS3231_SetTime_B(&setTime);
 8011f4e:	f107 0308 	add.w	r3, r7, #8
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fc fe90 	bl	800ec78 <DS3231_SetTime_B>

			  RTCMicro.Hours = GPS.hour;
 8011f58:	4b8d      	ldr	r3, [pc, #564]	; (8012190 <StartOperationTask+0x600>)
 8011f5a:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8011f5e:	763b      	strb	r3, [r7, #24]
			  RTCMicro.Minutes = GPS.minute;
 8011f60:	4b8b      	ldr	r3, [pc, #556]	; (8012190 <StartOperationTask+0x600>)
 8011f62:	f893 342e 	ldrb.w	r3, [r3, #1070]	; 0x42e
 8011f66:	767b      	strb	r3, [r7, #25]
			  RTCMicro.Seconds = GPS.second;
 8011f68:	4b89      	ldr	r3, [pc, #548]	; (8012190 <StartOperationTask+0x600>)
 8011f6a:	f893 342f 	ldrb.w	r3, [r3, #1071]	; 0x42f
 8011f6e:	76bb      	strb	r3, [r7, #26]
			  HAL_RTC_SetTime(&hrtc, &RTCMicro, RTC_FORMAT_BIN);
 8011f70:	f107 0318 	add.w	r3, r7, #24
 8011f74:	2200      	movs	r2, #0
 8011f76:	4619      	mov	r1, r3
 8011f78:	4883      	ldr	r0, [pc, #524]	; (8012188 <StartOperationTask+0x5f8>)
 8011f7a:	f7f3 fc1f 	bl	80057bc <HAL_RTC_SetTime>
		  }

		  //RTC Internal auto sycron dengan RTC External
		  if ((rtcTEWS.Sec - RTCMicro.Seconds) > 0) {
 8011f7e:	4b83      	ldr	r3, [pc, #524]	; (801218c <StartOperationTask+0x5fc>)
 8011f80:	799b      	ldrb	r3, [r3, #6]
 8011f82:	461a      	mov	r2, r3
 8011f84:	7ebb      	ldrb	r3, [r7, #26]
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	dd24      	ble.n	8011fd6 <StartOperationTask+0x446>
			  RTCMicro.Hours = rtcTEWS.Hour - 1;
 8011f8c:	4b7f      	ldr	r3, [pc, #508]	; (801218c <StartOperationTask+0x5fc>)
 8011f8e:	791b      	ldrb	r3, [r3, #4]
 8011f90:	3b01      	subs	r3, #1
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	763b      	strb	r3, [r7, #24]
			  RTCMicro.Minutes = rtcTEWS.Min;
 8011f96:	4b7d      	ldr	r3, [pc, #500]	; (801218c <StartOperationTask+0x5fc>)
 8011f98:	795b      	ldrb	r3, [r3, #5]
 8011f9a:	767b      	strb	r3, [r7, #25]
			  RTCMicro.Seconds = rtcTEWS.Sec;
 8011f9c:	4b7b      	ldr	r3, [pc, #492]	; (801218c <StartOperationTask+0x5fc>)
 8011f9e:	799b      	ldrb	r3, [r3, #6]
 8011fa0:	76bb      	strb	r3, [r7, #26]
			  HAL_RTC_SetTime(&hrtc, &RTCMicro, RTC_FORMAT_BIN); // Set Time
 8011fa2:	f107 0318 	add.w	r3, r7, #24
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	4619      	mov	r1, r3
 8011faa:	4877      	ldr	r0, [pc, #476]	; (8012188 <StartOperationTask+0x5f8>)
 8011fac:	f7f3 fc06 	bl	80057bc <HAL_RTC_SetTime>
			  RTCDateMicro.Year = rtcTEWS.Year;
 8011fb0:	4b76      	ldr	r3, [pc, #472]	; (801218c <StartOperationTask+0x5fc>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	75fb      	strb	r3, [r7, #23]
			  RTCDateMicro.Month = rtcTEWS.Month;
 8011fb6:	4b75      	ldr	r3, [pc, #468]	; (801218c <StartOperationTask+0x5fc>)
 8011fb8:	785b      	ldrb	r3, [r3, #1]
 8011fba:	757b      	strb	r3, [r7, #21]
			  RTCDateMicro.Date = rtcTEWS.Date;
 8011fbc:	4b73      	ldr	r3, [pc, #460]	; (801218c <StartOperationTask+0x5fc>)
 8011fbe:	789b      	ldrb	r3, [r3, #2]
 8011fc0:	75bb      	strb	r3, [r7, #22]
			  RTCDateMicro.WeekDay = rtcTEWS.DaysOfWeek;
 8011fc2:	4b72      	ldr	r3, [pc, #456]	; (801218c <StartOperationTask+0x5fc>)
 8011fc4:	78db      	ldrb	r3, [r3, #3]
 8011fc6:	753b      	strb	r3, [r7, #20]
			  HAL_RTC_SetDate(&hrtc, &RTCDateMicro, RTC_FORMAT_BIN);
 8011fc8:	f107 0314 	add.w	r3, r7, #20
 8011fcc:	2200      	movs	r2, #0
 8011fce:	4619      	mov	r1, r3
 8011fd0:	486d      	ldr	r0, [pc, #436]	; (8012188 <StartOperationTask+0x5f8>)
 8011fd2:	f7f3 fda9 	bl	8005b28 <HAL_RTC_SetDate>
		  }

		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
				  rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 8011fd6:	4b6d      	ldr	r3, [pc, #436]	; (801218c <StartOperationTask+0x5fc>)
 8011fd8:	791b      	ldrb	r3, [r3, #4]
		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
 8011fda:	4618      	mov	r0, r3
				  rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 8011fdc:	4b6b      	ldr	r3, [pc, #428]	; (801218c <StartOperationTask+0x5fc>)
 8011fde:	795b      	ldrb	r3, [r3, #5]
		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
 8011fe0:	461c      	mov	r4, r3
				  rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 8011fe2:	4b6a      	ldr	r3, [pc, #424]	; (801218c <StartOperationTask+0x5fc>)
 8011fe4:	799b      	ldrb	r3, [r3, #6]
		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
 8011fe6:	461d      	mov	r5, r3
				  rtcTEWS.Hour, rtcTEWS.Min, rtcTEWS.Sec, rtcTEWS.Date,
 8011fe8:	4b68      	ldr	r3, [pc, #416]	; (801218c <StartOperationTask+0x5fc>)
 8011fea:	789b      	ldrb	r3, [r3, #2]
		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
 8011fec:	461a      	mov	r2, r3
				  rtcTEWS.Month, rtcTEWS.Year);
 8011fee:	4b67      	ldr	r3, [pc, #412]	; (801218c <StartOperationTask+0x5fc>)
 8011ff0:	785b      	ldrb	r3, [r3, #1]
		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
 8011ff2:	4619      	mov	r1, r3
				  rtcTEWS.Month, rtcTEWS.Year);
 8011ff4:	4b65      	ldr	r3, [pc, #404]	; (801218c <StartOperationTask+0x5fc>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
		  usb_universal_printf("TIME DS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",
 8011ff8:	9302      	str	r3, [sp, #8]
 8011ffa:	9101      	str	r1, [sp, #4]
 8011ffc:	9200      	str	r2, [sp, #0]
 8011ffe:	462b      	mov	r3, r5
 8012000:	4622      	mov	r2, r4
 8012002:	4601      	mov	r1, r0
 8012004:	4863      	ldr	r0, [pc, #396]	; (8012194 <StartOperationTask+0x604>)
 8012006:	f000 fb71 	bl	80126ec <usb_universal_printf>
		  usb_universal_printf("TIME GPS: %.2d:%.2d:%.2d %.2d/%.2d/20%.2d \r\n",GPS.hour,GPS.minute,GPS.second,GPS.date,GPS.month,GPS.year);
 801200a:	4b61      	ldr	r3, [pc, #388]	; (8012190 <StartOperationTask+0x600>)
 801200c:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8012010:	4618      	mov	r0, r3
 8012012:	4b5f      	ldr	r3, [pc, #380]	; (8012190 <StartOperationTask+0x600>)
 8012014:	f893 342e 	ldrb.w	r3, [r3, #1070]	; 0x42e
 8012018:	461c      	mov	r4, r3
 801201a:	4b5d      	ldr	r3, [pc, #372]	; (8012190 <StartOperationTask+0x600>)
 801201c:	f893 342f 	ldrb.w	r3, [r3, #1071]	; 0x42f
 8012020:	461d      	mov	r5, r3
 8012022:	4b5b      	ldr	r3, [pc, #364]	; (8012190 <StartOperationTask+0x600>)
 8012024:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8012028:	461a      	mov	r2, r3
 801202a:	4b59      	ldr	r3, [pc, #356]	; (8012190 <StartOperationTask+0x600>)
 801202c:	f893 3435 	ldrb.w	r3, [r3, #1077]	; 0x435
 8012030:	4619      	mov	r1, r3
 8012032:	4b57      	ldr	r3, [pc, #348]	; (8012190 <StartOperationTask+0x600>)
 8012034:	f893 3436 	ldrb.w	r3, [r3, #1078]	; 0x436
 8012038:	9302      	str	r3, [sp, #8]
 801203a:	9101      	str	r1, [sp, #4]
 801203c:	9200      	str	r2, [sp, #0]
 801203e:	462b      	mov	r3, r5
 8012040:	4622      	mov	r2, r4
 8012042:	4601      	mov	r1, r0
 8012044:	4854      	ldr	r0, [pc, #336]	; (8012198 <StartOperationTask+0x608>)
 8012046:	f000 fb51 	bl	80126ec <usb_universal_printf>

		  usb_universal_printf(
 801204a:	4b54      	ldr	r3, [pc, #336]	; (801219c <StartOperationTask+0x60c>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	4619      	mov	r1, r3
				  "Iridium Queue: %d || Iridium Status: %d || Iridium Status Receive: %d || Status Kirim: %d\r\n",
				  iridiumqueuenumber, IRIDIUM.status, IRIDIUM.statusreceive, statusSendGPS);
 8012050:	4b53      	ldr	r3, [pc, #332]	; (80121a0 <StartOperationTask+0x610>)
 8012052:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
		  usb_universal_printf(
 8012056:	461a      	mov	r2, r3
				  iridiumqueuenumber, IRIDIUM.status, IRIDIUM.statusreceive, statusSendGPS);
 8012058:	4b51      	ldr	r3, [pc, #324]	; (80121a0 <StartOperationTask+0x610>)
 801205a:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
		  usb_universal_printf(
 801205e:	4618      	mov	r0, r3
 8012060:	4b50      	ldr	r3, [pc, #320]	; (80121a4 <StartOperationTask+0x614>)
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	4603      	mov	r3, r0
 8012068:	484f      	ldr	r0, [pc, #316]	; (80121a8 <StartOperationTask+0x618>)
 801206a:	f000 fb3f 	bl	80126ec <usb_universal_printf>

		  // Iridium SLEEP MODE delay 2 menit
		  if (IRIDIUM.status == 0 && IRIDIUM.statusreceive == 0 && statusSendGPS == 1) {
 801206e:	4b4c      	ldr	r3, [pc, #304]	; (80121a0 <StartOperationTask+0x610>)
 8012070:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 8012074:	2b00      	cmp	r3, #0
 8012076:	d124      	bne.n	80120c2 <StartOperationTask+0x532>
 8012078:	4b49      	ldr	r3, [pc, #292]	; (80121a0 <StartOperationTask+0x610>)
 801207a:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
 801207e:	2b00      	cmp	r3, #0
 8012080:	d11f      	bne.n	80120c2 <StartOperationTask+0x532>
 8012082:	4b48      	ldr	r3, [pc, #288]	; (80121a4 <StartOperationTask+0x614>)
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	2b01      	cmp	r3, #1
 8012088:	d11b      	bne.n	80120c2 <StartOperationTask+0x532>
			  if (iridiumsleepcounter < 2) {
 801208a:	4b48      	ldr	r3, [pc, #288]	; (80121ac <StartOperationTask+0x61c>)
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	2b01      	cmp	r3, #1
 8012090:	d806      	bhi.n	80120a0 <StartOperationTask+0x510>
				  iridiumsleepcounter++;
 8012092:	4b46      	ldr	r3, [pc, #280]	; (80121ac <StartOperationTask+0x61c>)
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	3301      	adds	r3, #1
 8012098:	b2da      	uxtb	r2, r3
 801209a:	4b44      	ldr	r3, [pc, #272]	; (80121ac <StartOperationTask+0x61c>)
 801209c:	701a      	strb	r2, [r3, #0]
 801209e:	e010      	b.n	80120c2 <StartOperationTask+0x532>
			  } else {
				  iridiumsleepcounter = 0;
 80120a0:	4b42      	ldr	r3, [pc, #264]	; (80121ac <StartOperationTask+0x61c>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	701a      	strb	r2, [r3, #0]
				  statusSendGPS = 2;
 80120a6:	4b3f      	ldr	r3, [pc, #252]	; (80121a4 <StartOperationTask+0x614>)
 80120a8:	2202      	movs	r2, #2
 80120aa:	701a      	strb	r2, [r3, #0]
				  IRIDIUM.status = Idle;
 80120ac:	4b3c      	ldr	r3, [pc, #240]	; (80121a0 <StartOperationTask+0x610>)
 80120ae:	2200      	movs	r2, #0
 80120b0:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
				  IRIDIUM.statusreceive = IDLERECEIVE;
 80120b4:	4b3a      	ldr	r3, [pc, #232]	; (80121a0 <StartOperationTask+0x610>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
				  iridium_printf("AT*F\r\n");
 80120bc:	483c      	ldr	r0, [pc, #240]	; (80121b0 <StartOperationTask+0x620>)
 80120be:	f000 fb51 	bl	8012764 <iridium_printf>
			  }
		  }

			// auto sleep setelah on 10 menit
			if (autosleepcounter < 10) {
 80120c2:	4b3c      	ldr	r3, [pc, #240]	; (80121b4 <StartOperationTask+0x624>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	2b09      	cmp	r3, #9
 80120c8:	d806      	bhi.n	80120d8 <StartOperationTask+0x548>
				autosleepcounter++;
 80120ca:	4b3a      	ldr	r3, [pc, #232]	; (80121b4 <StartOperationTask+0x624>)
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	3301      	adds	r3, #1
 80120d0:	b2da      	uxtb	r2, r3
 80120d2:	4b38      	ldr	r3, [pc, #224]	; (80121b4 <StartOperationTask+0x624>)
 80120d4:	701a      	strb	r2, [r3, #0]
 80120d6:	e013      	b.n	8012100 <StartOperationTask+0x570>
			} else {
				autosleepcounter = 0;
 80120d8:	4b36      	ldr	r3, [pc, #216]	; (80121b4 <StartOperationTask+0x624>)
 80120da:	2200      	movs	r2, #0
 80120dc:	701a      	strb	r2, [r3, #0]
				usb_printf("Device life of more than 10 minutes.\r\n");
 80120de:	4836      	ldr	r0, [pc, #216]	; (80121b8 <StartOperationTask+0x628>)
 80120e0:	f000 fab4 	bl	801264c <usb_printf>
				statusSendGPS = 2;
 80120e4:	4b2f      	ldr	r3, [pc, #188]	; (80121a4 <StartOperationTask+0x614>)
 80120e6:	2202      	movs	r2, #2
 80120e8:	701a      	strb	r2, [r3, #0]
				IRIDIUM.status = Idle;
 80120ea:	4b2d      	ldr	r3, [pc, #180]	; (80121a0 <StartOperationTask+0x610>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
				IRIDIUM.statusreceive = IDLERECEIVE;
 80120f2:	4b2b      	ldr	r3, [pc, #172]	; (80121a0 <StartOperationTask+0x610>)
 80120f4:	2200      	movs	r2, #0
 80120f6:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
				iridium_printf("AT*F\r\n");
 80120fa:	482d      	ldr	r0, [pc, #180]	; (80121b0 <StartOperationTask+0x620>)
 80120fc:	f000 fb32 	bl	8012764 <iridium_printf>
			}

		  if (IRIDIUM.status == SBDRT) {
 8012100:	4b27      	ldr	r3, [pc, #156]	; (80121a0 <StartOperationTask+0x610>)
 8012102:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 8012106:	2b08      	cmp	r3, #8
 8012108:	d107      	bne.n	801211a <StartOperationTask+0x58a>
			  IRIDIUM.statusreceive = IDLERECEIVE;
 801210a:	4b25      	ldr	r3, [pc, #148]	; (80121a0 <StartOperationTask+0x610>)
 801210c:	2200      	movs	r2, #0
 801210e:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			  IRIDIUM.status = SBDD1;
 8012112:	4b23      	ldr	r3, [pc, #140]	; (80121a0 <StartOperationTask+0x610>)
 8012114:	220a      	movs	r2, #10
 8012116:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		  }

		  if (IRIDIUM.status == SBDWB) {
 801211a:	4b21      	ldr	r3, [pc, #132]	; (80121a0 <StartOperationTask+0x610>)
 801211c:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 8012120:	2b01      	cmp	r3, #1
 8012122:	d107      	bne.n	8012134 <StartOperationTask+0x5a4>
			  IRIDIUM.statusreceive = IDLERECEIVE;
 8012124:	4b1e      	ldr	r3, [pc, #120]	; (80121a0 <StartOperationTask+0x610>)
 8012126:	2200      	movs	r2, #0
 8012128:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
			  IRIDIUM.status = SBDD0;
 801212c:	4b1c      	ldr	r3, [pc, #112]	; (80121a0 <StartOperationTask+0x610>)
 801212e:	2209      	movs	r2, #9
 8012130:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		  }

		  if (IRIDIUM.status == WaitSBDD01 && IRIDIUM.statusreceive == IDLERECEIVE) {
 8012134:	4b1a      	ldr	r3, [pc, #104]	; (80121a0 <StartOperationTask+0x610>)
 8012136:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 801213a:	2b0b      	cmp	r3, #11
 801213c:	d116      	bne.n	801216c <StartOperationTask+0x5dc>
 801213e:	4b18      	ldr	r3, [pc, #96]	; (80121a0 <StartOperationTask+0x610>)
 8012140:	f893 3257 	ldrb.w	r3, [r3, #599]	; 0x257
 8012144:	2b00      	cmp	r3, #0
 8012146:	d111      	bne.n	801216c <StartOperationTask+0x5dc>
			  if (iridium11counter < 5) {
 8012148:	4b1c      	ldr	r3, [pc, #112]	; (80121bc <StartOperationTask+0x62c>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	2b04      	cmp	r3, #4
 801214e:	d806      	bhi.n	801215e <StartOperationTask+0x5ce>
				  iridium11counter++;
 8012150:	4b1a      	ldr	r3, [pc, #104]	; (80121bc <StartOperationTask+0x62c>)
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	3301      	adds	r3, #1
 8012156:	b2da      	uxtb	r2, r3
 8012158:	4b18      	ldr	r3, [pc, #96]	; (80121bc <StartOperationTask+0x62c>)
 801215a:	701a      	strb	r2, [r3, #0]
 801215c:	e006      	b.n	801216c <StartOperationTask+0x5dc>
			  } else {
				  IRIDIUM.status = IDLE;
 801215e:	4b10      	ldr	r3, [pc, #64]	; (80121a0 <StartOperationTask+0x610>)
 8012160:	2200      	movs	r2, #0
 8012162:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
				  iridium11counter = 0;
 8012166:	4b15      	ldr	r3, [pc, #84]	; (80121bc <StartOperationTask+0x62c>)
 8012168:	2200      	movs	r2, #0
 801216a:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if (IRIDIUM.status == WaitresponseSBDIX) {
 801216c:	4b0c      	ldr	r3, [pc, #48]	; (80121a0 <StartOperationTask+0x610>)
 801216e:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 8012172:	2b0e      	cmp	r3, #14
 8012174:	d103      	bne.n	801217e <StartOperationTask+0x5ee>
			  IRIDIUM.status = Waitsignal;
 8012176:	4b0a      	ldr	r3, [pc, #40]	; (80121a0 <StartOperationTask+0x610>)
 8012178:	220c      	movs	r2, #12
 801217a:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
		  //HAL_PWR_EnableSleepOnExit ();
		  //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

		  //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
	  }
    osDelay(1);
 801217e:	2001      	movs	r0, #1
 8012180:	f7f6 fa39 	bl	80085f6 <osDelay>
  {
 8012184:	e623      	b.n	8011dce <StartOperationTask+0x23e>
 8012186:	bf00      	nop
 8012188:	20033708 	.word	0x20033708
 801218c:	2003346c 	.word	0x2003346c
 8012190:	20032a54 	.word	0x20032a54
 8012194:	0801c0a4 	.word	0x0801c0a4
 8012198:	0801c0d0 	.word	0x0801c0d0
 801219c:	200320f6 	.word	0x200320f6
 80121a0:	20032e8c 	.word	0x20032e8c
 80121a4:	2003374d 	.word	0x2003374d
 80121a8:	0801c100 	.word	0x0801c100
 80121ac:	200320f8 	.word	0x200320f8
 80121b0:	0801c15c 	.word	0x0801c15c
 80121b4:	200320f9 	.word	0x200320f9
 80121b8:	0801c164 	.word	0x0801c164
 80121bc:	200320f7 	.word	0x200320f7

080121c0 <StartIridiumTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIridiumTask */
void StartIridiumTask(void *argument)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIridiumTask */
	osStatus_t status;
	uint8_t queuenumber;
	IRIDIUM_Init();
 80121c8:	f7fb fb4e 	bl	800d868 <IRIDIUM_Init>
  /* Infinite loop */
  for(;;)
  {
		iridiumTaskTimer = osKernelGetTickCount();
 80121cc:	f7f6 f96c 	bl	80084a8 <osKernelGetTickCount>
 80121d0:	4603      	mov	r3, r0
 80121d2:	4a12      	ldr	r2, [pc, #72]	; (801221c <StartIridiumTask+0x5c>)
 80121d4:	6013      	str	r3, [r2, #0]

		queuenumber = osMessageQueueGetCount(iridiumQueueHandle);
 80121d6:	4b12      	ldr	r3, [pc, #72]	; (8012220 <StartIridiumTask+0x60>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7f6 fc98 	bl	8008b10 <osMessageQueueGetCount>
 80121e0:	4603      	mov	r3, r0
 80121e2:	73fb      	strb	r3, [r7, #15]
		if (queuenumber > 0) {
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d013      	beq.n	8012212 <StartIridiumTask+0x52>
			memset(bufferiridium, 0, sizeof(bufferiridium));
 80121ea:	2264      	movs	r2, #100	; 0x64
 80121ec:	2100      	movs	r1, #0
 80121ee:	480d      	ldr	r0, [pc, #52]	; (8012224 <StartIridiumTask+0x64>)
 80121f0:	f001 f80c 	bl	801320c <memset>
			status = osMessageQueueGet(iridiumQueueHandle, &bufferiridium, NULL,
 80121f4:	4b0a      	ldr	r3, [pc, #40]	; (8012220 <StartIridiumTask+0x60>)
 80121f6:	6818      	ldr	r0, [r3, #0]
 80121f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80121fc:	2200      	movs	r2, #0
 80121fe:	4909      	ldr	r1, [pc, #36]	; (8012224 <StartIridiumTask+0x64>)
 8012200:	f7f6 fc28 	bl	8008a54 <osMessageQueueGet>
 8012204:	60b8      	str	r0, [r7, #8]
					1000);   // wait for message
			if (status == osOK) {
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d102      	bne.n	8012212 <StartIridiumTask+0x52>
				//proses
				IRIDIUM_Process(bufferiridium);
 801220c:	4805      	ldr	r0, [pc, #20]	; (8012224 <StartIridiumTask+0x64>)
 801220e:	f7fb fca7 	bl	800db60 <IRIDIUM_Process>
			}
		}
    osDelay(1);
 8012212:	2001      	movs	r0, #1
 8012214:	f7f6 f9ef 	bl	80085f6 <osDelay>
		iridiumTaskTimer = osKernelGetTickCount();
 8012218:	e7d8      	b.n	80121cc <StartIridiumTask+0xc>
 801221a:	bf00      	nop
 801221c:	20033558 	.word	0x20033558
 8012220:	20033748 	.word	0x20033748
 8012224:	20000278 	.word	0x20000278

08012228 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void *argument)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
	osStatus_t status;
	uint8_t queuenumber;
	prevGPSTaskTimer1 = 0;
 8012230:	4b1e      	ldr	r3, [pc, #120]	; (80122ac <StartGpsTask+0x84>)
 8012232:	2200      	movs	r2, #0
 8012234:	601a      	str	r2, [r3, #0]
	prevGPSTaskTimer2 = 0;
 8012236:	4b1e      	ldr	r3, [pc, #120]	; (80122b0 <StartGpsTask+0x88>)
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]

	GPS_Init();
 801223c:	f7fa fcb8 	bl	800cbb0 <GPS_Init>
	//usb_universal_printf("initialize GPS\r\n");
  /* Infinite loop */
  for(;;)
  {
		gpsTaskTimer = osKernelGetTickCount();
 8012240:	f7f6 f932 	bl	80084a8 <osKernelGetTickCount>
 8012244:	4603      	mov	r3, r0
 8012246:	4a1b      	ldr	r2, [pc, #108]	; (80122b4 <StartGpsTask+0x8c>)
 8012248:	6013      	str	r3, [r2, #0]

		queuenumber = osMessageQueueGetCount(gpsQueueHandle);
 801224a:	4b1b      	ldr	r3, [pc, #108]	; (80122b8 <StartGpsTask+0x90>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	4618      	mov	r0, r3
 8012250:	f7f6 fc5e 	bl	8008b10 <osMessageQueueGetCount>
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
		if (queuenumber > 0) {
 8012258:	7bfb      	ldrb	r3, [r7, #15]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d013      	beq.n	8012286 <StartGpsTask+0x5e>
			memset(buffergps, 0, sizeof(buffergps));
 801225e:	2264      	movs	r2, #100	; 0x64
 8012260:	2100      	movs	r1, #0
 8012262:	4816      	ldr	r0, [pc, #88]	; (80122bc <StartGpsTask+0x94>)
 8012264:	f000 ffd2 	bl	801320c <memset>
			status = osMessageQueueGet(gpsQueueHandle, &buffergps, NULL, 1000); // wait for message
 8012268:	4b13      	ldr	r3, [pc, #76]	; (80122b8 <StartGpsTask+0x90>)
 801226a:	6818      	ldr	r0, [r3, #0]
 801226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012270:	2200      	movs	r2, #0
 8012272:	4912      	ldr	r1, [pc, #72]	; (80122bc <StartGpsTask+0x94>)
 8012274:	f7f6 fbee 	bl	8008a54 <osMessageQueueGet>
 8012278:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d102      	bne.n	8012286 <StartGpsTask+0x5e>
				//proses
				//usb_universal_printf("Proses GPS\r\n");
				//usb_universal_printf("GPS= %s\r\n",buffergps);
				GPS_Process(buffergps);
 8012280:	480e      	ldr	r0, [pc, #56]	; (80122bc <StartGpsTask+0x94>)
 8012282:	f7fa fd09 	bl	800cc98 <GPS_Process>
//			// kirim posisi otomatis
//			EncodeTEWSLocBuoy(0, 14);
//			usb_printf("Kirim Posisi.\r\n");
//		}

		if (statusSendGPS == 0) {
 8012286:	4b0e      	ldr	r3, [pc, #56]	; (80122c0 <StartGpsTask+0x98>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10a      	bne.n	80122a4 <StartGpsTask+0x7c>
			prevGPSTaskTimer1 = gpsTaskTimer;
 801228e:	4b09      	ldr	r3, [pc, #36]	; (80122b4 <StartGpsTask+0x8c>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	4a06      	ldr	r2, [pc, #24]	; (80122ac <StartGpsTask+0x84>)
 8012294:	6013      	str	r3, [r2, #0]
			//prevGPSTaskTimer2 = gpsTaskTimer;
			//statusSendGPS = 1;
			// kirim posisi otomatis
			EncodeTEWSLocBuoy(0, 14);
 8012296:	210e      	movs	r1, #14
 8012298:	2000      	movs	r0, #0
 801229a:	f7f9 ffcd 	bl	800c238 <EncodeTEWSLocBuoy>
			usb_printf("Kirim Posisi.\r\n");
 801229e:	4809      	ldr	r0, [pc, #36]	; (80122c4 <StartGpsTask+0x9c>)
 80122a0:	f000 f9d4 	bl	801264c <usb_printf>
//			osDelay(1000);
//			IRIDIUM.status = SBDIXA;
//			usb_printf("Baca Perintah dari RDS.\r\n");
//		}

    osDelay(1);
 80122a4:	2001      	movs	r0, #1
 80122a6:	f7f6 f9a6 	bl	80085f6 <osDelay>
		gpsTaskTimer = osKernelGetTickCount();
 80122aa:	e7c9      	b.n	8012240 <StartGpsTask+0x18>
 80122ac:	20033760 	.word	0x20033760
 80122b0:	20033550 	.word	0x20033550
 80122b4:	20033758 	.word	0x20033758
 80122b8:	200335f0 	.word	0x200335f0
 80122bc:	200002dc 	.word	0x200002dc
 80122c0:	2003374d 	.word	0x2003374d
 80122c4:	0801c18c 	.word	0x0801c18c

080122c8 <StartUsbTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsbTask */
void StartUsbTask(void *argument)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsbTask */
	osStatus_t status;
	uint8_t queuenumber;
	BT_Init();
 80122d0:	f7f9 fd06 	bl	800bce0 <BT_Init>
	USB_Init();
 80122d4:	f7fd f886 	bl	800f3e4 <USB_Init>
  /* Infinite loop */
  for(;;)
  {
		usbTaskTimer = osKernelGetTickCount();
 80122d8:	f7f6 f8e6 	bl	80084a8 <osKernelGetTickCount>
 80122dc:	4603      	mov	r3, r0
 80122de:	4a12      	ldr	r2, [pc, #72]	; (8012328 <StartUsbTask+0x60>)
 80122e0:	6013      	str	r3, [r2, #0]

		queuenumber = osMessageQueueGetCount(usbQueueHandle);
 80122e2:	4b12      	ldr	r3, [pc, #72]	; (801232c <StartUsbTask+0x64>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7f6 fc12 	bl	8008b10 <osMessageQueueGetCount>
 80122ec:	4603      	mov	r3, r0
 80122ee:	73fb      	strb	r3, [r7, #15]
		if (queuenumber > 0) {
 80122f0:	7bfb      	ldrb	r3, [r7, #15]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d013      	beq.n	801231e <StartUsbTask+0x56>
			memset(bufferusb, 0, sizeof(bufferusb));
 80122f6:	2264      	movs	r2, #100	; 0x64
 80122f8:	2100      	movs	r1, #0
 80122fa:	480d      	ldr	r0, [pc, #52]	; (8012330 <StartUsbTask+0x68>)
 80122fc:	f000 ff86 	bl	801320c <memset>
			status = osMessageQueueGet(usbQueueHandle, &bufferusb, NULL, 1000); // wait for message
 8012300:	4b0a      	ldr	r3, [pc, #40]	; (801232c <StartUsbTask+0x64>)
 8012302:	6818      	ldr	r0, [r3, #0]
 8012304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012308:	2200      	movs	r2, #0
 801230a:	4909      	ldr	r1, [pc, #36]	; (8012330 <StartUsbTask+0x68>)
 801230c:	f7f6 fba2 	bl	8008a54 <osMessageQueueGet>
 8012310:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d102      	bne.n	801231e <StartUsbTask+0x56>
				USB_Process(bufferusb);
 8012318:	4805      	ldr	r0, [pc, #20]	; (8012330 <StartUsbTask+0x68>)
 801231a:	f7fd f8c3 	bl	800f4a4 <USB_Process>
			}
		}
    osDelay(1);
 801231e:	2001      	movs	r0, #1
 8012320:	f7f6 f969 	bl	80085f6 <osDelay>
		usbTaskTimer = osKernelGetTickCount();
 8012324:	e7d8      	b.n	80122d8 <StartUsbTask+0x10>
 8012326:	bf00      	nop
 8012328:	2003354c 	.word	0x2003354c
 801232c:	20033898 	.word	0x20033898
 8012330:	20000214 	.word	0x20000214

08012334 <StartSendIridiumTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendIridiumTask */
void StartSendIridiumTask(void *argument)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b086      	sub	sp, #24
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
	uint16_t sizedatairidium;
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
		datahandleTaskTimer = osKernelGetTickCount();
 801233c:	f7f6 f8b4 	bl	80084a8 <osKernelGetTickCount>
 8012340:	4603      	mov	r3, r0
 8012342:	4a26      	ldr	r2, [pc, #152]	; (80123dc <StartSendIridiumTask+0xa8>)
 8012344:	6013      	str	r3, [r2, #0]

		queuenumber = osMessageQueueGetCount(iridiumsendQueueHandle);
 8012346:	4b26      	ldr	r3, [pc, #152]	; (80123e0 <StartSendIridiumTask+0xac>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4618      	mov	r0, r3
 801234c:	f7f6 fbe0 	bl	8008b10 <osMessageQueueGetCount>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
		iridiumqueuenumber = queuenumber;
 8012354:	4a23      	ldr	r2, [pc, #140]	; (80123e4 <StartSendIridiumTask+0xb0>)
 8012356:	7dfb      	ldrb	r3, [r7, #23]
 8012358:	7013      	strb	r3, [r2, #0]
		if (queuenumber > 0 && IRIDIUM.status == Idle) {
 801235a:	7dfb      	ldrb	r3, [r7, #23]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d038      	beq.n	80123d2 <StartSendIridiumTask+0x9e>
 8012360:	4b21      	ldr	r3, [pc, #132]	; (80123e8 <StartSendIridiumTask+0xb4>)
 8012362:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 8012366:	2b00      	cmp	r3, #0
 8012368:	d133      	bne.n	80123d2 <StartSendIridiumTask+0x9e>

			//usb_printf("Iridium Queue: %d || Iridium Status: %d || Iridium Status Receive: %d \r\n",
			//		iridiumqueuenumber, IRIDIUM.status, IRIDIUM.statusreceive);

			//osDelay(100);
			IRIDIUM.status = ProsesSend;
 801236a:	4b1f      	ldr	r3, [pc, #124]	; (80123e8 <StartSendIridiumTask+0xb4>)
 801236c:	220d      	movs	r2, #13
 801236e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
			memset(bufferiridiumdata, 0, sizeof(bufferiridiumdata));
 8012372:	2264      	movs	r2, #100	; 0x64
 8012374:	2100      	movs	r1, #0
 8012376:	481d      	ldr	r0, [pc, #116]	; (80123ec <StartSendIridiumTask+0xb8>)
 8012378:	f000 ff48 	bl	801320c <memset>
			osMessageQueueGet(sizedatairidiumQueueHandle, &sizedatairidium,
 801237c:	4b1c      	ldr	r3, [pc, #112]	; (80123f0 <StartSendIridiumTask+0xbc>)
 801237e:	6818      	ldr	r0, [r3, #0]
 8012380:	f107 010e 	add.w	r1, r7, #14
 8012384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012388:	2200      	movs	r2, #0
 801238a:	f7f6 fb63 	bl	8008a54 <osMessageQueueGet>
			NULL, 1000);
			status = osMessageQueueGet(iridiumsendQueueHandle,
 801238e:	4b14      	ldr	r3, [pc, #80]	; (80123e0 <StartSendIridiumTask+0xac>)
 8012390:	6818      	ldr	r0, [r3, #0]
 8012392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012396:	2200      	movs	r2, #0
 8012398:	4914      	ldr	r1, [pc, #80]	; (80123ec <StartSendIridiumTask+0xb8>)
 801239a:	f7f6 fb5b 	bl	8008a54 <osMessageQueueGet>
 801239e:	6138      	str	r0, [r7, #16]
					&bufferiridiumdata, NULL, 1000); // wait for message
			if (status == osOK) {
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d115      	bne.n	80123d2 <StartSendIridiumTask+0x9e>
				//WeekUp Iridium
				HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 80123a6:	2201      	movs	r2, #1
 80123a8:	2102      	movs	r1, #2
 80123aa:	4812      	ldr	r0, [pc, #72]	; (80123f4 <StartSendIridiumTask+0xc0>)
 80123ac:	f7ef fdf0 	bl	8001f90 <HAL_GPIO_WritePin>
				statusSendGPS = 1;
 80123b0:	4b11      	ldr	r3, [pc, #68]	; (80123f8 <StartSendIridiumTask+0xc4>)
 80123b2:	2201      	movs	r2, #1
 80123b4:	701a      	strb	r2, [r3, #0]
				//GPS WeekUp
				GPS_Init();
 80123b6:	f7fa fbfb 	bl	800cbb0 <GPS_Init>
				//proses sending data to iridium
				usb_printf("Iridium Status data handle out : %d \r\n", IRIDIUM.status);
 80123ba:	4b0b      	ldr	r3, [pc, #44]	; (80123e8 <StartSendIridiumTask+0xb4>)
 80123bc:	f893 3256 	ldrb.w	r3, [r3, #598]	; 0x256
 80123c0:	4619      	mov	r1, r3
 80123c2:	480e      	ldr	r0, [pc, #56]	; (80123fc <StartSendIridiumTask+0xc8>)
 80123c4:	f000 f942 	bl	801264c <usb_printf>
				senddata(bufferiridiumdata, sizedatairidium);
 80123c8:	89fb      	ldrh	r3, [r7, #14]
 80123ca:	4619      	mov	r1, r3
 80123cc:	4807      	ldr	r0, [pc, #28]	; (80123ec <StartSendIridiumTask+0xb8>)
 80123ce:	f7fb fe23 	bl	800e018 <senddata>
				//sendtext(bufferiridiumdata);
			}
		}
    osDelay(1);
 80123d2:	2001      	movs	r0, #1
 80123d4:	f7f6 f90f 	bl	80085f6 <osDelay>
		datahandleTaskTimer = osKernelGetTickCount();
 80123d8:	e7b0      	b.n	801233c <StartSendIridiumTask+0x8>
 80123da:	bf00      	nop
 80123dc:	20033654 	.word	0x20033654
 80123e0:	2003355c 	.word	0x2003355c
 80123e4:	200320f6 	.word	0x200320f6
 80123e8:	20032e8c 	.word	0x20032e8c
 80123ec:	20000340 	.word	0x20000340
 80123f0:	20033734 	.word	0x20033734
 80123f4:	48001000 	.word	0x48001000
 80123f8:	2003374d 	.word	0x2003374d
 80123fc:	0801c19c 	.word	0x0801c19c

08012400 <StartWatchdogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void *argument)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdogTask */
	uint8_t ResetOnHang;
	uint8_t flaggeneral = 0;
 8012408:	2300      	movs	r3, #0
 801240a:	73bb      	strb	r3, [r7, #14]
	uint8_t flagiridium = 0;
 801240c:	2300      	movs	r3, #0
 801240e:	737b      	strb	r3, [r7, #13]
	uint8_t flaggps = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	733b      	strb	r3, [r7, #12]
	uint8_t flagusb = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	72fb      	strb	r3, [r7, #11]
	uint8_t flagdatahandle = 0;
 8012418:	2300      	movs	r3, #0
 801241a:	72bb      	strb	r3, [r7, #10]
	uint8_t flagiridiumrecv = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	727b      	strb	r3, [r7, #9]
  /* Infinite loop */
  for(;;)
  {
		ResetOnHang = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	73fb      	strb	r3, [r7, #15]

		if ((osKernelGetTickCount() - generalTaskTimer) > 5000) {
 8012424:	f7f6 f840 	bl	80084a8 <osKernelGetTickCount>
 8012428:	4602      	mov	r2, r0
 801242a:	4b4b      	ldr	r3, [pc, #300]	; (8012558 <StartWatchdogTask+0x158>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	1ad3      	subs	r3, r2, r3
 8012430:	f241 3288 	movw	r2, #5000	; 0x1388
 8012434:	4293      	cmp	r3, r2
 8012436:	d90a      	bls.n	801244e <StartWatchdogTask+0x4e>
			if (flaggeneral == 0) {
 8012438:	7bbb      	ldrb	r3, [r7, #14]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d104      	bne.n	8012448 <StartWatchdogTask+0x48>
				flaggeneral = 1;
 801243e:	2301      	movs	r3, #1
 8012440:	73bb      	strb	r3, [r7, #14]
				usb_universal_printf("Hang General \r\n");
 8012442:	4846      	ldr	r0, [pc, #280]	; (801255c <StartWatchdogTask+0x15c>)
 8012444:	f000 f952 	bl	80126ec <usb_universal_printf>
			}
			ResetOnHang = 1;
 8012448:	2301      	movs	r3, #1
 801244a:	73fb      	strb	r3, [r7, #15]
 801244c:	e001      	b.n	8012452 <StartWatchdogTask+0x52>
		} else
			flaggeneral = 0;
 801244e:	2300      	movs	r3, #0
 8012450:	73bb      	strb	r3, [r7, #14]

		if ((osKernelGetTickCount() - iridiumTaskTimer) > 5000) {
 8012452:	f7f6 f829 	bl	80084a8 <osKernelGetTickCount>
 8012456:	4602      	mov	r2, r0
 8012458:	4b41      	ldr	r3, [pc, #260]	; (8012560 <StartWatchdogTask+0x160>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012462:	4293      	cmp	r3, r2
 8012464:	d90a      	bls.n	801247c <StartWatchdogTask+0x7c>
			if (flagiridium == 0) {
 8012466:	7b7b      	ldrb	r3, [r7, #13]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d104      	bne.n	8012476 <StartWatchdogTask+0x76>
				flagiridium = 1;
 801246c:	2301      	movs	r3, #1
 801246e:	737b      	strb	r3, [r7, #13]
				usb_universal_printf("Hang Iridium \r\n");
 8012470:	483c      	ldr	r0, [pc, #240]	; (8012564 <StartWatchdogTask+0x164>)
 8012472:	f000 f93b 	bl	80126ec <usb_universal_printf>
			}
			ResetOnHang = 1;
 8012476:	2301      	movs	r3, #1
 8012478:	73fb      	strb	r3, [r7, #15]
 801247a:	e001      	b.n	8012480 <StartWatchdogTask+0x80>
		} else
			flagiridium = 0;
 801247c:	2300      	movs	r3, #0
 801247e:	737b      	strb	r3, [r7, #13]

		if ((osKernelGetTickCount() - gpsTaskTimer) > 5000) {
 8012480:	f7f6 f812 	bl	80084a8 <osKernelGetTickCount>
 8012484:	4602      	mov	r2, r0
 8012486:	4b38      	ldr	r3, [pc, #224]	; (8012568 <StartWatchdogTask+0x168>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	1ad3      	subs	r3, r2, r3
 801248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012490:	4293      	cmp	r3, r2
 8012492:	d90a      	bls.n	80124aa <StartWatchdogTask+0xaa>
			if (flaggps == 0) {
 8012494:	7b3b      	ldrb	r3, [r7, #12]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d104      	bne.n	80124a4 <StartWatchdogTask+0xa4>
				flaggps = 1;
 801249a:	2301      	movs	r3, #1
 801249c:	733b      	strb	r3, [r7, #12]
				usb_universal_printf("Hang GPS \r\n");
 801249e:	4833      	ldr	r0, [pc, #204]	; (801256c <StartWatchdogTask+0x16c>)
 80124a0:	f000 f924 	bl	80126ec <usb_universal_printf>
			}
			ResetOnHang = 1;
 80124a4:	2301      	movs	r3, #1
 80124a6:	73fb      	strb	r3, [r7, #15]
 80124a8:	e001      	b.n	80124ae <StartWatchdogTask+0xae>
		} else
			flaggps = 0;
 80124aa:	2300      	movs	r3, #0
 80124ac:	733b      	strb	r3, [r7, #12]

		if ((osKernelGetTickCount() - usbTaskTimer) > 5000) {
 80124ae:	f7f5 fffb 	bl	80084a8 <osKernelGetTickCount>
 80124b2:	4602      	mov	r2, r0
 80124b4:	4b2e      	ldr	r3, [pc, #184]	; (8012570 <StartWatchdogTask+0x170>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	1ad3      	subs	r3, r2, r3
 80124ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80124be:	4293      	cmp	r3, r2
 80124c0:	d90a      	bls.n	80124d8 <StartWatchdogTask+0xd8>
			if (flagusb == 0) {
 80124c2:	7afb      	ldrb	r3, [r7, #11]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d104      	bne.n	80124d2 <StartWatchdogTask+0xd2>
				flagusb = 1;
 80124c8:	2301      	movs	r3, #1
 80124ca:	72fb      	strb	r3, [r7, #11]
				usb_universal_printf("Hang USB \r\n");
 80124cc:	4829      	ldr	r0, [pc, #164]	; (8012574 <StartWatchdogTask+0x174>)
 80124ce:	f000 f90d 	bl	80126ec <usb_universal_printf>
			}
			ResetOnHang = 1;
 80124d2:	2301      	movs	r3, #1
 80124d4:	73fb      	strb	r3, [r7, #15]
 80124d6:	e001      	b.n	80124dc <StartWatchdogTask+0xdc>
		} else
			flagusb = 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	72fb      	strb	r3, [r7, #11]

		if ((osKernelGetTickCount() - datahandleTaskTimer) > 5000) {
 80124dc:	f7f5 ffe4 	bl	80084a8 <osKernelGetTickCount>
 80124e0:	4602      	mov	r2, r0
 80124e2:	4b25      	ldr	r3, [pc, #148]	; (8012578 <StartWatchdogTask+0x178>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	1ad3      	subs	r3, r2, r3
 80124e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d90a      	bls.n	8012506 <StartWatchdogTask+0x106>
			if (flagdatahandle == 0) {
 80124f0:	7abb      	ldrb	r3, [r7, #10]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d104      	bne.n	8012500 <StartWatchdogTask+0x100>
				flagdatahandle = 1;
 80124f6:	2301      	movs	r3, #1
 80124f8:	72bb      	strb	r3, [r7, #10]
				usb_universal_printf("Hang data handle \r\n");
 80124fa:	4820      	ldr	r0, [pc, #128]	; (801257c <StartWatchdogTask+0x17c>)
 80124fc:	f000 f8f6 	bl	80126ec <usb_universal_printf>
			}
			ResetOnHang = 1;
 8012500:	2301      	movs	r3, #1
 8012502:	73fb      	strb	r3, [r7, #15]
 8012504:	e001      	b.n	801250a <StartWatchdogTask+0x10a>
		} else
			flagdatahandle = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	72bb      	strb	r3, [r7, #10]

		if ((osKernelGetTickCount() - iridiumrecvTaskTimer) > 5000) {
 801250a:	f7f5 ffcd 	bl	80084a8 <osKernelGetTickCount>
 801250e:	4602      	mov	r2, r0
 8012510:	4b1b      	ldr	r3, [pc, #108]	; (8012580 <StartWatchdogTask+0x180>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	1ad3      	subs	r3, r2, r3
 8012516:	f241 3288 	movw	r2, #5000	; 0x1388
 801251a:	4293      	cmp	r3, r2
 801251c:	d90a      	bls.n	8012534 <StartWatchdogTask+0x134>
			if (flagiridiumrecv == 0) {
 801251e:	7a7b      	ldrb	r3, [r7, #9]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d104      	bne.n	801252e <StartWatchdogTask+0x12e>
				flagiridiumrecv = 1;
 8012524:	2301      	movs	r3, #1
 8012526:	727b      	strb	r3, [r7, #9]
				usb_universal_printf("Hang Iridium Receive \r\n");
 8012528:	4816      	ldr	r0, [pc, #88]	; (8012584 <StartWatchdogTask+0x184>)
 801252a:	f000 f8df 	bl	80126ec <usb_universal_printf>
			}
			ResetOnHang = 1;
 801252e:	2301      	movs	r3, #1
 8012530:	73fb      	strb	r3, [r7, #15]
 8012532:	e001      	b.n	8012538 <StartWatchdogTask+0x138>
		} else
			flagiridiumrecv = 0;
 8012534:	2300      	movs	r3, #0
 8012536:	727b      	strb	r3, [r7, #9]

		if (!ResetOnHang) {
 8012538:	7bfb      	ldrb	r3, [r7, #15]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d107      	bne.n	801254e <StartWatchdogTask+0x14e>
			if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK) {
 801253e:	4812      	ldr	r0, [pc, #72]	; (8012588 <StartWatchdogTask+0x188>)
 8012540:	f7f0 ff44 	bl	80033cc <HAL_IWDG_Refresh>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d001      	beq.n	801254e <StartWatchdogTask+0x14e>
				// /* Refresh Error*/
				Error_Handler();
 801254a:	f000 f871 	bl	8012630 <Error_Handler>
			}
		}
		//else NVIC_SystemReset();
    osDelay(1);
 801254e:	2001      	movs	r0, #1
 8012550:	f7f6 f851 	bl	80085f6 <osDelay>
		ResetOnHang = 0;
 8012554:	e764      	b.n	8012420 <StartWatchdogTask+0x20>
 8012556:	bf00      	nop
 8012558:	20033914 	.word	0x20033914
 801255c:	0801c1c4 	.word	0x0801c1c4
 8012560:	20033558 	.word	0x20033558
 8012564:	0801c1d4 	.word	0x0801c1d4
 8012568:	20033758 	.word	0x20033758
 801256c:	0801c1e4 	.word	0x0801c1e4
 8012570:	2003354c 	.word	0x2003354c
 8012574:	0801c1f0 	.word	0x0801c1f0
 8012578:	20033654 	.word	0x20033654
 801257c:	0801c1fc 	.word	0x0801c1fc
 8012580:	200335f8 	.word	0x200335f8
 8012584:	0801c210 	.word	0x0801c210
 8012588:	200334d4 	.word	0x200334d4

0801258c <StartIridiumrecvTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIridiumrecvTask */
void StartIridiumrecvTask(void *argument)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b09e      	sub	sp, #120	; 0x78
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIridiumrecvTask */
	uint8_t queuenumber;
	osStatus_t status;
	char bufferrecv[100];
	osSemaphoreAcquire(iridiumrecvBinarySemHandle, 100);
 8012594:	4b1a      	ldr	r3, [pc, #104]	; (8012600 <StartIridiumrecvTask+0x74>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2164      	movs	r1, #100	; 0x64
 801259a:	4618      	mov	r0, r3
 801259c:	f7f6 f8d0 	bl	8008740 <osSemaphoreAcquire>

  /* Infinite loop */
  for(;;)
  {
		iridiumrecvTaskTimer = osKernelGetTickCount();
 80125a0:	f7f5 ff82 	bl	80084a8 <osKernelGetTickCount>
 80125a4:	4603      	mov	r3, r0
 80125a6:	4a17      	ldr	r2, [pc, #92]	; (8012604 <StartIridiumrecvTask+0x78>)
 80125a8:	6013      	str	r3, [r2, #0]

		IRIDIUM_Loop();
 80125aa:	f7fb f9ed 	bl	800d988 <IRIDIUM_Loop>

		queuenumber = osMessageQueueGetCount(iridiumrecvQueueHandle);
 80125ae:	4b16      	ldr	r3, [pc, #88]	; (8012608 <StartIridiumrecvTask+0x7c>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7f6 faac 	bl	8008b10 <osMessageQueueGetCount>
 80125b8:	4603      	mov	r3, r0
 80125ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (queuenumber > 0) {
 80125be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d018      	beq.n	80125f8 <StartIridiumrecvTask+0x6c>
			memset(bufferrecv, 0, sizeof(bufferrecv));
 80125c6:	f107 030c 	add.w	r3, r7, #12
 80125ca:	2264      	movs	r2, #100	; 0x64
 80125cc:	2100      	movs	r1, #0
 80125ce:	4618      	mov	r0, r3
 80125d0:	f000 fe1c 	bl	801320c <memset>
			status = osMessageQueueGet(iridiumrecvQueueHandle, &bufferrecv,
 80125d4:	4b0c      	ldr	r3, [pc, #48]	; (8012608 <StartIridiumrecvTask+0x7c>)
 80125d6:	6818      	ldr	r0, [r3, #0]
 80125d8:	f107 010c 	add.w	r1, r7, #12
 80125dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80125e0:	2200      	movs	r2, #0
 80125e2:	f7f6 fa37 	bl	8008a54 <osMessageQueueGet>
 80125e6:	6738      	str	r0, [r7, #112]	; 0x70
			NULL, 1000);   // wait for message
			if (status == osOK) {
 80125e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d104      	bne.n	80125f8 <StartIridiumrecvTask+0x6c>
				ProcessReceiveIridium(bufferrecv);
 80125ee:	f107 030c 	add.w	r3, r7, #12
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fb fd6a 	bl	800e0cc <ProcessReceiveIridium>
			}
		}
    osDelay(1);
 80125f8:	2001      	movs	r0, #1
 80125fa:	f7f5 fffc 	bl	80085f6 <osDelay>
		iridiumrecvTaskTimer = osKernelGetTickCount();
 80125fe:	e7cf      	b.n	80125a0 <StartIridiumrecvTask+0x14>
 8012600:	200336f8 	.word	0x200336f8
 8012604:	200335f8 	.word	0x200335f8
 8012608:	2003389c 	.word	0x2003389c

0801260c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4a04      	ldr	r2, [pc, #16]	; (801262c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801261a:	4293      	cmp	r3, r2
 801261c:	d101      	bne.n	8012622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801261e:	f7ee fd1d 	bl	800105c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012622:	bf00      	nop
 8012624:	3708      	adds	r7, #8
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
 801262a:	bf00      	nop
 801262c:	40001000 	.word	0x40001000

08012630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012630:	b480      	push	{r7}
 8012632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
	//usb_universal_printf("Error UART1 > IRIDIUM>>>\r\n");
  while (1)
 8012634:	e7fe      	b.n	8012634 <Error_Handler+0x4>

08012636 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8012636:	b480      	push	{r7}
 8012638:	b083      	sub	sp, #12
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
 801263e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8012640:	bf00      	nop
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <usb_printf>:


#include <myprint.h>


void usb_printf(const char *fmt, ...){
 801264c:	b40f      	push	{r0, r1, r2, r3}
 801264e:	b580      	push	{r7, lr}
 8012650:	b0b4      	sub	sp, #208	; 0xd0
 8012652:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8012654:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char string[200];
    if(0 < vsprintf(string,fmt,argp)){
 801265c:	1d3b      	adds	r3, r7, #4
 801265e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8012662:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8012666:	4618      	mov	r0, r3
 8012668:	f002 fc60 	bl	8014f2c <vsiprintf>
 801266c:	4603      	mov	r3, r0
 801266e:	2b00      	cmp	r3, #0
 8012670:	dd0b      	ble.n	801268a <usb_printf+0x3e>
        HAL_UART_Transmit(&_UNI_USART, (uint8_t*)string, strlen(string), 0xffffff);
 8012672:	1d3b      	adds	r3, r7, #4
 8012674:	4618      	mov	r0, r3
 8012676:	f7ed fdc5 	bl	8000204 <strlen>
 801267a:	4603      	mov	r3, r0
 801267c:	b29a      	uxth	r2, r3
 801267e:	1d39      	adds	r1, r7, #4
 8012680:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012684:	4804      	ldr	r0, [pc, #16]	; (8012698 <usb_printf+0x4c>)
 8012686:	f7f4 fbd1 	bl	8006e2c <HAL_UART_Transmit>
    }
    va_end(argp);
}
 801268a:	bf00      	nop
 801268c:	37d0      	adds	r7, #208	; 0xd0
 801268e:	46bd      	mov	sp, r7
 8012690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012694:	b004      	add	sp, #16
 8012696:	4770      	bx	lr
 8012698:	20033564 	.word	0x20033564

0801269c <bluetooth_printf>:

void bluetooth_printf(const char *fmt, ...){
 801269c:	b40f      	push	{r0, r1, r2, r3}
 801269e:	b580      	push	{r7, lr}
 80126a0:	b0b4      	sub	sp, #208	; 0xd0
 80126a2:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80126a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80126a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char string[200];
    if(0 < vsprintf(string,fmt,argp)){
 80126ac:	1d3b      	adds	r3, r7, #4
 80126ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80126b2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80126b6:	4618      	mov	r0, r3
 80126b8:	f002 fc38 	bl	8014f2c <vsiprintf>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dd0b      	ble.n	80126da <bluetooth_printf+0x3e>
        HAL_UART_Transmit(&_BT_USART, (uint8_t*)string, strlen(string), 0xffffff);
 80126c2:	1d3b      	adds	r3, r7, #4
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ed fd9d 	bl	8000204 <strlen>
 80126ca:	4603      	mov	r3, r0
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	1d39      	adds	r1, r7, #4
 80126d0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80126d4:	4804      	ldr	r0, [pc, #16]	; (80126e8 <bluetooth_printf+0x4c>)
 80126d6:	f7f4 fba9 	bl	8006e2c <HAL_UART_Transmit>
    }
    va_end(argp);
}
 80126da:	bf00      	nop
 80126dc:	37d0      	adds	r7, #208	; 0xd0
 80126de:	46bd      	mov	sp, r7
 80126e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80126e4:	b004      	add	sp, #16
 80126e6:	4770      	bx	lr
 80126e8:	20033768 	.word	0x20033768

080126ec <usb_universal_printf>:

void usb_universal_printf(const char *fmt, ...){
 80126ec:	b40f      	push	{r0, r1, r2, r3}
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b0b4      	sub	sp, #208	; 0xd0
 80126f2:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80126f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80126f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char string[200];
    if(0 < vsprintf(string,fmt,argp)){
 80126fc:	1d3b      	adds	r3, r7, #4
 80126fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8012702:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8012706:	4618      	mov	r0, r3
 8012708:	f002 fc10 	bl	8014f2c <vsiprintf>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	dd1b      	ble.n	801274a <usb_universal_printf+0x5e>
        HAL_UART_Transmit(&_UNI_USART, (uint8_t*)string, strlen(string), 0xffffff);
 8012712:	1d3b      	adds	r3, r7, #4
 8012714:	4618      	mov	r0, r3
 8012716:	f7ed fd75 	bl	8000204 <strlen>
 801271a:	4603      	mov	r3, r0
 801271c:	b29a      	uxth	r2, r3
 801271e:	1d39      	adds	r1, r7, #4
 8012720:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012724:	480c      	ldr	r0, [pc, #48]	; (8012758 <usb_universal_printf+0x6c>)
 8012726:	f7f4 fb81 	bl	8006e2c <HAL_UART_Transmit>
        if(debugbluetooth == 1) HAL_UART_Transmit(&_BT_USART, (uint8_t*)string, strlen(string), 0xffffff);
 801272a:	4b0c      	ldr	r3, [pc, #48]	; (801275c <usb_universal_printf+0x70>)
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	2b01      	cmp	r3, #1
 8012730:	d10b      	bne.n	801274a <usb_universal_printf+0x5e>
 8012732:	1d3b      	adds	r3, r7, #4
 8012734:	4618      	mov	r0, r3
 8012736:	f7ed fd65 	bl	8000204 <strlen>
 801273a:	4603      	mov	r3, r0
 801273c:	b29a      	uxth	r2, r3
 801273e:	1d39      	adds	r1, r7, #4
 8012740:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012744:	4806      	ldr	r0, [pc, #24]	; (8012760 <usb_universal_printf+0x74>)
 8012746:	f7f4 fb71 	bl	8006e2c <HAL_UART_Transmit>
    }
    va_end(argp);
}
 801274a:	bf00      	nop
 801274c:	37d0      	adds	r7, #208	; 0xd0
 801274e:	46bd      	mov	sp, r7
 8012750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012754:	b004      	add	sp, #16
 8012756:	4770      	bx	lr
 8012758:	20033564 	.word	0x20033564
 801275c:	200338a8 	.word	0x200338a8
 8012760:	20033768 	.word	0x20033768

08012764 <iridium_printf>:

void iridium_printf(const char *fmt, ...){
 8012764:	b40f      	push	{r0, r1, r2, r3}
 8012766:	b580      	push	{r7, lr}
 8012768:	b0b4      	sub	sp, #208	; 0xd0
 801276a:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 801276c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char string[200];
    if(0 < vsprintf(string,fmt,argp)){
 8012774:	1d3b      	adds	r3, r7, #4
 8012776:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801277a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801277e:	4618      	mov	r0, r3
 8012780:	f002 fbd4 	bl	8014f2c <vsiprintf>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	dd0b      	ble.n	80127a2 <iridium_printf+0x3e>
        HAL_UART_Transmit(&_IRIDIUM_USART, (uint8_t*)string, strlen(string), 0xffffff);
 801278a:	1d3b      	adds	r3, r7, #4
 801278c:	4618      	mov	r0, r3
 801278e:	f7ed fd39 	bl	8000204 <strlen>
 8012792:	4603      	mov	r3, r0
 8012794:	b29a      	uxth	r2, r3
 8012796:	1d39      	adds	r1, r7, #4
 8012798:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801279c:	4804      	ldr	r0, [pc, #16]	; (80127b0 <iridium_printf+0x4c>)
 801279e:	f7f4 fb45 	bl	8006e2c <HAL_UART_Transmit>
    }
    va_end(argp);
}
 80127a2:	bf00      	nop
 80127a4:	37d0      	adds	r7, #208	; 0xd0
 80127a6:	46bd      	mov	sp, r7
 80127a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80127ac:	b004      	add	sp, #16
 80127ae:	4770      	bx	lr
 80127b0:	2003365c 	.word	0x2003365c

080127b4 <gps_printf>:

void gps_printf(const char *fmt, ...){
 80127b4:	b40f      	push	{r0, r1, r2, r3}
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b0b4      	sub	sp, #208	; 0xd0
 80127ba:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80127bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80127c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    char string[200];
    if(0 < vsprintf(string,fmt,argp)){
 80127c4:	1d3b      	adds	r3, r7, #4
 80127c6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80127ca:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80127ce:	4618      	mov	r0, r3
 80127d0:	f002 fbac 	bl	8014f2c <vsiprintf>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	dd0b      	ble.n	80127f2 <gps_printf+0x3e>
        HAL_UART_Transmit(&_GPS_USART, (uint8_t*)string, strlen(string), 0xffffff);
 80127da:	1d3b      	adds	r3, r7, #4
 80127dc:	4618      	mov	r0, r3
 80127de:	f7ed fd11 	bl	8000204 <strlen>
 80127e2:	4603      	mov	r3, r0
 80127e4:	b29a      	uxth	r2, r3
 80127e6:	1d39      	adds	r1, r7, #4
 80127e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80127ec:	4804      	ldr	r0, [pc, #16]	; (8012800 <gps_printf+0x4c>)
 80127ee:	f7f4 fb1d 	bl	8006e2c <HAL_UART_Transmit>
    }
    va_end(argp);
}
 80127f2:	bf00      	nop
 80127f4:	37d0      	adds	r7, #208	; 0xd0
 80127f6:	46bd      	mov	sp, r7
 80127f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80127fc:	b004      	add	sp, #16
 80127fe:	4770      	bx	lr
 8012800:	20033804 	.word	0x20033804

08012804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <HAL_MspInit+0x4c>)
 801280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801280e:	4a10      	ldr	r2, [pc, #64]	; (8012850 <HAL_MspInit+0x4c>)
 8012810:	f043 0301 	orr.w	r3, r3, #1
 8012814:	6613      	str	r3, [r2, #96]	; 0x60
 8012816:	4b0e      	ldr	r3, [pc, #56]	; (8012850 <HAL_MspInit+0x4c>)
 8012818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801281a:	f003 0301 	and.w	r3, r3, #1
 801281e:	607b      	str	r3, [r7, #4]
 8012820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012822:	4b0b      	ldr	r3, [pc, #44]	; (8012850 <HAL_MspInit+0x4c>)
 8012824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012826:	4a0a      	ldr	r2, [pc, #40]	; (8012850 <HAL_MspInit+0x4c>)
 8012828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801282c:	6593      	str	r3, [r2, #88]	; 0x58
 801282e:	4b08      	ldr	r3, [pc, #32]	; (8012850 <HAL_MspInit+0x4c>)
 8012830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012836:	603b      	str	r3, [r7, #0]
 8012838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801283a:	2200      	movs	r2, #0
 801283c:	210f      	movs	r1, #15
 801283e:	f06f 0001 	mvn.w	r0, #1
 8012842:	f7ee fd33 	bl	80012ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012846:	bf00      	nop
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	40021000 	.word	0x40021000

08012854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b090      	sub	sp, #64	; 0x40
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801285c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012860:	2200      	movs	r2, #0
 8012862:	601a      	str	r2, [r3, #0]
 8012864:	605a      	str	r2, [r3, #4]
 8012866:	609a      	str	r2, [r3, #8]
 8012868:	60da      	str	r2, [r3, #12]
 801286a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4a5d      	ldr	r2, [pc, #372]	; (80129e8 <HAL_I2C_MspInit+0x194>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d129      	bne.n	80128ca <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012876:	4b5d      	ldr	r3, [pc, #372]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801287a:	4a5c      	ldr	r2, [pc, #368]	; (80129ec <HAL_I2C_MspInit+0x198>)
 801287c:	f043 0302 	orr.w	r3, r3, #2
 8012880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012882:	4b5a      	ldr	r3, [pc, #360]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012886:	f003 0302 	and.w	r3, r3, #2
 801288a:	62bb      	str	r3, [r7, #40]	; 0x28
 801288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 801288e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012894:	2312      	movs	r3, #18
 8012896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012898:	2301      	movs	r3, #1
 801289a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801289c:	2303      	movs	r3, #3
 801289e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80128a0:	2304      	movs	r3, #4
 80128a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80128a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80128a8:	4619      	mov	r1, r3
 80128aa:	4851      	ldr	r0, [pc, #324]	; (80129f0 <HAL_I2C_MspInit+0x19c>)
 80128ac:	f7ef f8ca 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80128b0:	4b4e      	ldr	r3, [pc, #312]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80128b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128b4:	4a4d      	ldr	r2, [pc, #308]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80128b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80128ba:	6593      	str	r3, [r2, #88]	; 0x58
 80128bc:	4b4b      	ldr	r3, [pc, #300]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80128be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80128c4:	627b      	str	r3, [r7, #36]	; 0x24
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80128c8:	e08a      	b.n	80129e0 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C2)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a49      	ldr	r2, [pc, #292]	; (80129f4 <HAL_I2C_MspInit+0x1a0>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d129      	bne.n	8012928 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80128d4:	4b45      	ldr	r3, [pc, #276]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80128d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128d8:	4a44      	ldr	r2, [pc, #272]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80128da:	f043 0302 	orr.w	r3, r3, #2
 80128de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80128e0:	4b42      	ldr	r3, [pc, #264]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80128e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128e4:	f003 0302 	and.w	r3, r3, #2
 80128e8:	623b      	str	r3, [r7, #32]
 80128ea:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 80128ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80128f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80128f2:	2312      	movs	r3, #18
 80128f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80128f6:	2301      	movs	r3, #1
 80128f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128fa:	2303      	movs	r3, #3
 80128fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80128fe:	2304      	movs	r3, #4
 8012900:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012906:	4619      	mov	r1, r3
 8012908:	4839      	ldr	r0, [pc, #228]	; (80129f0 <HAL_I2C_MspInit+0x19c>)
 801290a:	f7ef f89b 	bl	8001a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801290e:	4b37      	ldr	r3, [pc, #220]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012912:	4a36      	ldr	r2, [pc, #216]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012918:	6593      	str	r3, [r2, #88]	; 0x58
 801291a:	4b34      	ldr	r3, [pc, #208]	; (80129ec <HAL_I2C_MspInit+0x198>)
 801291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012922:	61fb      	str	r3, [r7, #28]
 8012924:	69fb      	ldr	r3, [r7, #28]
}
 8012926:	e05b      	b.n	80129e0 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C3)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4a32      	ldr	r2, [pc, #200]	; (80129f8 <HAL_I2C_MspInit+0x1a4>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d128      	bne.n	8012984 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012932:	4b2e      	ldr	r3, [pc, #184]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012936:	4a2d      	ldr	r2, [pc, #180]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012938:	f043 0304 	orr.w	r3, r3, #4
 801293c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801293e:	4b2b      	ldr	r3, [pc, #172]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012942:	f003 0304 	and.w	r3, r3, #4
 8012946:	61bb      	str	r3, [r7, #24]
 8012948:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = V_SCL_Pin|V_SDA_Pin;
 801294a:	2303      	movs	r3, #3
 801294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801294e:	2312      	movs	r3, #18
 8012950:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012952:	2301      	movs	r3, #1
 8012954:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012956:	2303      	movs	r3, #3
 8012958:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801295a:	2304      	movs	r3, #4
 801295c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801295e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012962:	4619      	mov	r1, r3
 8012964:	4825      	ldr	r0, [pc, #148]	; (80129fc <HAL_I2C_MspInit+0x1a8>)
 8012966:	f7ef f86d 	bl	8001a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801296a:	4b20      	ldr	r3, [pc, #128]	; (80129ec <HAL_I2C_MspInit+0x198>)
 801296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801296e:	4a1f      	ldr	r2, [pc, #124]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012974:	6593      	str	r3, [r2, #88]	; 0x58
 8012976:	4b1d      	ldr	r3, [pc, #116]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801297a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801297e:	617b      	str	r3, [r7, #20]
 8012980:	697b      	ldr	r3, [r7, #20]
}
 8012982:	e02d      	b.n	80129e0 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C4)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a1d      	ldr	r2, [pc, #116]	; (8012a00 <HAL_I2C_MspInit+0x1ac>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d128      	bne.n	80129e0 <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801298e:	4b17      	ldr	r3, [pc, #92]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012992:	4a16      	ldr	r2, [pc, #88]	; (80129ec <HAL_I2C_MspInit+0x198>)
 8012994:	f043 0308 	orr.w	r3, r3, #8
 8012998:	64d3      	str	r3, [r2, #76]	; 0x4c
 801299a:	4b14      	ldr	r3, [pc, #80]	; (80129ec <HAL_I2C_MspInit+0x198>)
 801299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801299e:	f003 0308 	and.w	r3, r3, #8
 80129a2:	613b      	str	r3, [r7, #16]
 80129a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RTC2_SCL_Pin|RTC2_SDA_Pin;
 80129a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80129aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80129ac:	2312      	movs	r3, #18
 80129ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80129b0:	2301      	movs	r3, #1
 80129b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129b4:	2303      	movs	r3, #3
 80129b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80129b8:	2304      	movs	r3, #4
 80129ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80129bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129c0:	4619      	mov	r1, r3
 80129c2:	4810      	ldr	r0, [pc, #64]	; (8012a04 <HAL_I2C_MspInit+0x1b0>)
 80129c4:	f7ef f83e 	bl	8001a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80129c8:	4b08      	ldr	r3, [pc, #32]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80129ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129cc:	4a07      	ldr	r2, [pc, #28]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80129ce:	f043 0302 	orr.w	r3, r3, #2
 80129d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80129d4:	4b05      	ldr	r3, [pc, #20]	; (80129ec <HAL_I2C_MspInit+0x198>)
 80129d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129d8:	f003 0302 	and.w	r3, r3, #2
 80129dc:	60fb      	str	r3, [r7, #12]
 80129de:	68fb      	ldr	r3, [r7, #12]
}
 80129e0:	bf00      	nop
 80129e2:	3740      	adds	r7, #64	; 0x40
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	40005400 	.word	0x40005400
 80129ec:	40021000 	.word	0x40021000
 80129f0:	48000400 	.word	0x48000400
 80129f4:	40005800 	.word	0x40005800
 80129f8:	40005c00 	.word	0x40005c00
 80129fc:	48000800 	.word	0x48000800
 8012a00:	40008400 	.word	0x40008400
 8012a04:	48000c00 	.word	0x48000c00

08012a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b090      	sub	sp, #64	; 0x40
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a14:	2200      	movs	r2, #0
 8012a16:	601a      	str	r2, [r3, #0]
 8012a18:	605a      	str	r2, [r3, #4]
 8012a1a:	609a      	str	r2, [r3, #8]
 8012a1c:	60da      	str	r2, [r3, #12]
 8012a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a8b      	ldr	r2, [pc, #556]	; (8012c54 <HAL_UART_MspInit+0x24c>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d153      	bne.n	8012ad2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8012a2a:	4b8b      	ldr	r3, [pc, #556]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a2e:	4a8a      	ldr	r2, [pc, #552]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012a30:	f043 0301 	orr.w	r3, r3, #1
 8012a34:	65d3      	str	r3, [r2, #92]	; 0x5c
 8012a36:	4b88      	ldr	r3, [pc, #544]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a3a:	f003 0301 	and.w	r3, r3, #1
 8012a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a40:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a42:	4b85      	ldr	r3, [pc, #532]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a46:	4a84      	ldr	r2, [pc, #528]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012a48:	f043 0302 	orr.w	r3, r3, #2
 8012a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012a4e:	4b82      	ldr	r3, [pc, #520]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a52:	f003 0302 	and.w	r3, r3, #2
 8012a56:	627b      	str	r3, [r7, #36]	; 0x24
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = UNI_RX_Pin|UNI_TX_Pin;
 8012a5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a60:	2302      	movs	r3, #2
 8012a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a64:	2300      	movs	r3, #0
 8012a66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a68:	2303      	movs	r3, #3
 8012a6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8012a6c:	2308      	movs	r3, #8
 8012a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a74:	4619      	mov	r1, r3
 8012a76:	4879      	ldr	r0, [pc, #484]	; (8012c5c <HAL_UART_MspInit+0x254>)
 8012a78:	f7ee ffe4 	bl	8001a44 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8012a7c:	4b78      	ldr	r3, [pc, #480]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012a7e:	4a79      	ldr	r2, [pc, #484]	; (8012c64 <HAL_UART_MspInit+0x25c>)
 8012a80:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8012a82:	4b77      	ldr	r3, [pc, #476]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012a84:	2204      	movs	r2, #4
 8012a86:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012a88:	4b75      	ldr	r3, [pc, #468]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012a8e:	4b74      	ldr	r3, [pc, #464]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012a90:	2200      	movs	r2, #0
 8012a92:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012a94:	4b72      	ldr	r3, [pc, #456]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012a96:	2280      	movs	r2, #128	; 0x80
 8012a98:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012a9a:	4b71      	ldr	r3, [pc, #452]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012aa0:	4b6f      	ldr	r3, [pc, #444]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 8012aa6:	4b6e      	ldr	r3, [pc, #440]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012aa8:	2220      	movs	r2, #32
 8012aaa:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8012aac:	4b6c      	ldr	r3, [pc, #432]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012aae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8012ab2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8012ab4:	486a      	ldr	r0, [pc, #424]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012ab6:	f7ee fc41 	bl	800133c <HAL_DMA_Init>
 8012aba:	4603      	mov	r3, r0
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d001      	beq.n	8012ac4 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8012ac0:	f7ff fdb6 	bl	8012630 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4a66      	ldr	r2, [pc, #408]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8012aca:	4a65      	ldr	r2, [pc, #404]	; (8012c60 <HAL_UART_MspInit+0x258>)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012ad0:	e12c      	b.n	8012d2c <HAL_UART_MspInit+0x324>
  else if(huart->Instance==UART4)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4a64      	ldr	r2, [pc, #400]	; (8012c68 <HAL_UART_MspInit+0x260>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d153      	bne.n	8012b84 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_UART4_CLK_ENABLE();
 8012adc:	4b5e      	ldr	r3, [pc, #376]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ae0:	4a5d      	ldr	r2, [pc, #372]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8012ae8:	4b5b      	ldr	r3, [pc, #364]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012af0:	623b      	str	r3, [r7, #32]
 8012af2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012af4:	4b58      	ldr	r3, [pc, #352]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012af8:	4a57      	ldr	r2, [pc, #348]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012afa:	f043 0301 	orr.w	r3, r3, #1
 8012afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012b00:	4b55      	ldr	r3, [pc, #340]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b04:	f003 0301 	and.w	r3, r3, #1
 8012b08:	61fb      	str	r3, [r7, #28]
 8012b0a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8012b0c:	2303      	movs	r3, #3
 8012b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b10:	2302      	movs	r3, #2
 8012b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b14:	2300      	movs	r3, #0
 8012b16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8012b1c:	2308      	movs	r3, #8
 8012b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b24:	4619      	mov	r1, r3
 8012b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012b2a:	f7ee ff8b 	bl	8001a44 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8012b2e:	4b4f      	ldr	r3, [pc, #316]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b30:	4a4f      	ldr	r2, [pc, #316]	; (8012c70 <HAL_UART_MspInit+0x268>)
 8012b32:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8012b34:	4b4d      	ldr	r3, [pc, #308]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b36:	2202      	movs	r2, #2
 8012b38:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012b3a:	4b4c      	ldr	r3, [pc, #304]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012b40:	4b4a      	ldr	r3, [pc, #296]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012b46:	4b49      	ldr	r3, [pc, #292]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b48:	2280      	movs	r2, #128	; 0x80
 8012b4a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012b4c:	4b47      	ldr	r3, [pc, #284]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012b52:	4b46      	ldr	r3, [pc, #280]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b54:	2200      	movs	r2, #0
 8012b56:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8012b58:	4b44      	ldr	r3, [pc, #272]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b5a:	2220      	movs	r2, #32
 8012b5c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8012b5e:	4b43      	ldr	r3, [pc, #268]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8012b66:	4841      	ldr	r0, [pc, #260]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b68:	f7ee fbe8 	bl	800133c <HAL_DMA_Init>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8012b72:	f7ff fd5d 	bl	8012630 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4a3c      	ldr	r2, [pc, #240]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b7a:	671a      	str	r2, [r3, #112]	; 0x70
 8012b7c:	4a3b      	ldr	r2, [pc, #236]	; (8012c6c <HAL_UART_MspInit+0x264>)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6293      	str	r3, [r2, #40]	; 0x28
}
 8012b82:	e0d3      	b.n	8012d2c <HAL_UART_MspInit+0x324>
  else if(huart->Instance==USART1)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	4a3a      	ldr	r2, [pc, #232]	; (8012c74 <HAL_UART_MspInit+0x26c>)
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	d178      	bne.n	8012c80 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012b8e:	4b32      	ldr	r3, [pc, #200]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b92:	4a31      	ldr	r2, [pc, #196]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012b98:	6613      	str	r3, [r2, #96]	; 0x60
 8012b9a:	4b2f      	ldr	r3, [pc, #188]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ba2:	61bb      	str	r3, [r7, #24]
 8012ba4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012ba6:	4b2c      	ldr	r3, [pc, #176]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012baa:	4a2b      	ldr	r2, [pc, #172]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012bac:	f043 0302 	orr.w	r3, r3, #2
 8012bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012bb2:	4b29      	ldr	r3, [pc, #164]	; (8012c58 <HAL_UART_MspInit+0x250>)
 8012bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bb6:	f003 0302 	and.w	r3, r3, #2
 8012bba:	617b      	str	r3, [r7, #20]
 8012bbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DF_S_TX_Pin|DF_S_RX_Pin;
 8012bbe:	23c0      	movs	r3, #192	; 0xc0
 8012bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bc2:	2302      	movs	r3, #2
 8012bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012bca:	2303      	movs	r3, #3
 8012bcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012bce:	2307      	movs	r3, #7
 8012bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012bd6:	4619      	mov	r1, r3
 8012bd8:	4820      	ldr	r0, [pc, #128]	; (8012c5c <HAL_UART_MspInit+0x254>)
 8012bda:	f7ee ff33 	bl	8001a44 <HAL_GPIO_Init>
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8012bde:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012be2:	f7f0 fb17 	bl	8003214 <HAL_I2CEx_EnableFastModePlus>
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8012be6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012bea:	f7f0 fb13 	bl	8003214 <HAL_I2CEx_EnableFastModePlus>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8012bee:	4b22      	ldr	r3, [pc, #136]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012bf0:	4a22      	ldr	r2, [pc, #136]	; (8012c7c <HAL_UART_MspInit+0x274>)
 8012bf2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8012bf4:	4b20      	ldr	r3, [pc, #128]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012bf6:	2202      	movs	r2, #2
 8012bf8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012bfa:	4b1f      	ldr	r3, [pc, #124]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012c00:	4b1d      	ldr	r3, [pc, #116]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c02:	2200      	movs	r2, #0
 8012c04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012c06:	4b1c      	ldr	r3, [pc, #112]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c08:	2280      	movs	r2, #128	; 0x80
 8012c0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012c0c:	4b1a      	ldr	r3, [pc, #104]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c0e:	2200      	movs	r2, #0
 8012c10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012c12:	4b19      	ldr	r3, [pc, #100]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c14:	2200      	movs	r2, #0
 8012c16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8012c18:	4b17      	ldr	r3, [pc, #92]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c1a:	2220      	movs	r2, #32
 8012c1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012c1e:	4b16      	ldr	r3, [pc, #88]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c20:	2200      	movs	r2, #0
 8012c22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8012c24:	4814      	ldr	r0, [pc, #80]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c26:	f7ee fb89 	bl	800133c <HAL_DMA_Init>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d001      	beq.n	8012c34 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8012c30:	f7ff fcfe 	bl	8012630 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	4a10      	ldr	r2, [pc, #64]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c38:	671a      	str	r2, [r3, #112]	; 0x70
 8012c3a:	4a0f      	ldr	r2, [pc, #60]	; (8012c78 <HAL_UART_MspInit+0x270>)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8012c40:	2200      	movs	r2, #0
 8012c42:	2105      	movs	r1, #5
 8012c44:	2025      	movs	r0, #37	; 0x25
 8012c46:	f7ee fb31 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012c4a:	2025      	movs	r0, #37	; 0x25
 8012c4c:	f7ee fb5a 	bl	8001304 <HAL_NVIC_EnableIRQ>
}
 8012c50:	e06c      	b.n	8012d2c <HAL_UART_MspInit+0x324>
 8012c52:	bf00      	nop
 8012c54:	40008000 	.word	0x40008000
 8012c58:	40021000 	.word	0x40021000
 8012c5c:	48000400 	.word	0x48000400
 8012c60:	200338ac 	.word	0x200338ac
 8012c64:	40020480 	.word	0x40020480
 8012c68:	40004c00 	.word	0x40004c00
 8012c6c:	2003332c 	.word	0x2003332c
 8012c70:	40020458 	.word	0x40020458
 8012c74:	40013800 	.word	0x40013800
 8012c78:	20033604 	.word	0x20033604
 8012c7c:	40020058 	.word	0x40020058
  else if(huart->Instance==USART2)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	4a2b      	ldr	r2, [pc, #172]	; (8012d34 <HAL_UART_MspInit+0x32c>)
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d150      	bne.n	8012d2c <HAL_UART_MspInit+0x324>
    __HAL_RCC_USART2_CLK_ENABLE();
 8012c8a:	4b2b      	ldr	r3, [pc, #172]	; (8012d38 <HAL_UART_MspInit+0x330>)
 8012c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c8e:	4a2a      	ldr	r2, [pc, #168]	; (8012d38 <HAL_UART_MspInit+0x330>)
 8012c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c94:	6593      	str	r3, [r2, #88]	; 0x58
 8012c96:	4b28      	ldr	r3, [pc, #160]	; (8012d38 <HAL_UART_MspInit+0x330>)
 8012c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c9e:	613b      	str	r3, [r7, #16]
 8012ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012ca2:	4b25      	ldr	r3, [pc, #148]	; (8012d38 <HAL_UART_MspInit+0x330>)
 8012ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ca6:	4a24      	ldr	r2, [pc, #144]	; (8012d38 <HAL_UART_MspInit+0x330>)
 8012ca8:	f043 0308 	orr.w	r3, r3, #8
 8012cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012cae:	4b22      	ldr	r3, [pc, #136]	; (8012d38 <HAL_UART_MspInit+0x330>)
 8012cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cb2:	f003 0308 	and.w	r3, r3, #8
 8012cb6:	60fb      	str	r3, [r7, #12]
 8012cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8012cba:	2360      	movs	r3, #96	; 0x60
 8012cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cbe:	2302      	movs	r3, #2
 8012cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012cc6:	2303      	movs	r3, #3
 8012cc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012cca:	2307      	movs	r3, #7
 8012ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	4819      	ldr	r0, [pc, #100]	; (8012d3c <HAL_UART_MspInit+0x334>)
 8012cd6:	f7ee feb5 	bl	8001a44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8012cda:	4b19      	ldr	r3, [pc, #100]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012cdc:	4a19      	ldr	r2, [pc, #100]	; (8012d44 <HAL_UART_MspInit+0x33c>)
 8012cde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8012ce0:	4b17      	ldr	r3, [pc, #92]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012ce2:	2202      	movs	r2, #2
 8012ce4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012ce6:	4b16      	ldr	r3, [pc, #88]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012ce8:	2200      	movs	r2, #0
 8012cea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012cec:	4b14      	ldr	r3, [pc, #80]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012cee:	2200      	movs	r2, #0
 8012cf0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012cf2:	4b13      	ldr	r3, [pc, #76]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012cf4:	2280      	movs	r2, #128	; 0x80
 8012cf6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012cf8:	4b11      	ldr	r3, [pc, #68]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012cfe:	4b10      	ldr	r3, [pc, #64]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012d00:	2200      	movs	r2, #0
 8012d02:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8012d04:	4b0e      	ldr	r3, [pc, #56]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012d06:	2220      	movs	r2, #32
 8012d08:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012d0a:	4b0d      	ldr	r3, [pc, #52]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8012d10:	480b      	ldr	r0, [pc, #44]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012d12:	f7ee fb13 	bl	800133c <HAL_DMA_Init>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d001      	beq.n	8012d20 <HAL_UART_MspInit+0x318>
      Error_Handler();
 8012d1c:	f7ff fc88 	bl	8012630 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4a07      	ldr	r2, [pc, #28]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012d24:	671a      	str	r2, [r3, #112]	; 0x70
 8012d26:	4a06      	ldr	r2, [pc, #24]	; (8012d40 <HAL_UART_MspInit+0x338>)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8012d2c:	bf00      	nop
 8012d2e:	3740      	adds	r7, #64	; 0x40
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	40004400 	.word	0x40004400
 8012d38:	40021000 	.word	0x40021000
 8012d3c:	48000c00 	.word	0x48000c00
 8012d40:	20033378 	.word	0x20033378
 8012d44:	4002006c 	.word	0x4002006c

08012d48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4a0b      	ldr	r2, [pc, #44]	; (8012d84 <HAL_RTC_MspInit+0x3c>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d10f      	bne.n	8012d7a <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012d5a:	4b0b      	ldr	r3, [pc, #44]	; (8012d88 <HAL_RTC_MspInit+0x40>)
 8012d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d60:	4a09      	ldr	r2, [pc, #36]	; (8012d88 <HAL_RTC_MspInit+0x40>)
 8012d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	2105      	movs	r1, #5
 8012d6e:	2029      	movs	r0, #41	; 0x29
 8012d70:	f7ee fa9c 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8012d74:	2029      	movs	r0, #41	; 0x29
 8012d76:	f7ee fac5 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012d7a:	bf00      	nop
 8012d7c:	3708      	adds	r7, #8
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	40002800 	.word	0x40002800
 8012d88:	40021000 	.word	0x40021000

08012d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b08c      	sub	sp, #48	; 0x30
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012d94:	2300      	movs	r3, #0
 8012d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	6879      	ldr	r1, [r7, #4]
 8012da0:	2036      	movs	r0, #54	; 0x36
 8012da2:	f7ee fa83 	bl	80012ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8012da6:	2036      	movs	r0, #54	; 0x36
 8012da8:	f7ee faac 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012dac:	4b1e      	ldr	r3, [pc, #120]	; (8012e28 <HAL_InitTick+0x9c>)
 8012dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012db0:	4a1d      	ldr	r2, [pc, #116]	; (8012e28 <HAL_InitTick+0x9c>)
 8012db2:	f043 0310 	orr.w	r3, r3, #16
 8012db6:	6593      	str	r3, [r2, #88]	; 0x58
 8012db8:	4b1b      	ldr	r3, [pc, #108]	; (8012e28 <HAL_InitTick+0x9c>)
 8012dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dbc:	f003 0310 	and.w	r3, r3, #16
 8012dc0:	60fb      	str	r3, [r7, #12]
 8012dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012dc4:	f107 0210 	add.w	r2, r7, #16
 8012dc8:	f107 0314 	add.w	r3, r7, #20
 8012dcc:	4611      	mov	r1, r2
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7f1 fb4e 	bl	8004470 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8012dd4:	f7f1 fb20 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8012dd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	4a13      	ldr	r2, [pc, #76]	; (8012e2c <HAL_InitTick+0xa0>)
 8012dde:	fba2 2303 	umull	r2, r3, r2, r3
 8012de2:	0c9b      	lsrs	r3, r3, #18
 8012de4:	3b01      	subs	r3, #1
 8012de6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8012de8:	4b11      	ldr	r3, [pc, #68]	; (8012e30 <HAL_InitTick+0xa4>)
 8012dea:	4a12      	ldr	r2, [pc, #72]	; (8012e34 <HAL_InitTick+0xa8>)
 8012dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8012dee:	4b10      	ldr	r3, [pc, #64]	; (8012e30 <HAL_InitTick+0xa4>)
 8012df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012df4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8012df6:	4a0e      	ldr	r2, [pc, #56]	; (8012e30 <HAL_InitTick+0xa4>)
 8012df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8012dfc:	4b0c      	ldr	r3, [pc, #48]	; (8012e30 <HAL_InitTick+0xa4>)
 8012dfe:	2200      	movs	r2, #0
 8012e00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012e02:	4b0b      	ldr	r3, [pc, #44]	; (8012e30 <HAL_InitTick+0xa4>)
 8012e04:	2200      	movs	r2, #0
 8012e06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8012e08:	4809      	ldr	r0, [pc, #36]	; (8012e30 <HAL_InitTick+0xa4>)
 8012e0a:	f7f3 fbc7 	bl	800659c <HAL_TIM_Base_Init>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d104      	bne.n	8012e1e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8012e14:	4806      	ldr	r0, [pc, #24]	; (8012e30 <HAL_InitTick+0xa4>)
 8012e16:	f7f3 fcad 	bl	8006774 <HAL_TIM_Base_Start_IT>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	e000      	b.n	8012e20 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8012e1e:	2301      	movs	r3, #1
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3730      	adds	r7, #48	; 0x30
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	40021000 	.word	0x40021000
 8012e2c:	431bde83 	.word	0x431bde83
 8012e30:	20033918 	.word	0x20033918
 8012e34:	40001000 	.word	0x40001000

08012e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012e3c:	e7fe      	b.n	8012e3c <NMI_Handler+0x4>

08012e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012e3e:	b480      	push	{r7}
 8012e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012e42:	e7fe      	b.n	8012e42 <HardFault_Handler+0x4>

08012e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012e44:	b480      	push	{r7}
 8012e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012e48:	e7fe      	b.n	8012e48 <MemManage_Handler+0x4>

08012e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012e4a:	b480      	push	{r7}
 8012e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012e4e:	e7fe      	b.n	8012e4e <BusFault_Handler+0x4>

08012e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012e50:	b480      	push	{r7}
 8012e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012e54:	e7fe      	b.n	8012e54 <UsageFault_Handler+0x4>

08012e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012e56:	b480      	push	{r7}
 8012e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012e5a:	bf00      	nop
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8012e68:	4802      	ldr	r0, [pc, #8]	; (8012e74 <DMA1_Channel5_IRQHandler+0x10>)
 8012e6a:	f7ee fd0c 	bl	8001886 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8012e6e:	bf00      	nop
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20033604 	.word	0x20033604

08012e78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8012e7c:	4802      	ldr	r0, [pc, #8]	; (8012e88 <DMA1_Channel6_IRQHandler+0x10>)
 8012e7e:	f7ee fd02 	bl	8001886 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8012e82:	bf00      	nop
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	20033378 	.word	0x20033378

08012e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012e90:	4802      	ldr	r0, [pc, #8]	; (8012e9c <USART1_IRQHandler+0x10>)
 8012e92:	f7f4 f8ff 	bl	8007094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8012e96:	bf00      	nop
 8012e98:	bd80      	pop	{r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	2003365c 	.word	0x2003365c

08012ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012ea4:	4802      	ldr	r0, [pc, #8]	; (8012eb0 <USART2_IRQHandler+0x10>)
 8012ea6:	f7f4 f8f5 	bl	8007094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012eaa:	bf00      	nop
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	20033804 	.word	0x20033804

08012eb4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8012eb8:	4802      	ldr	r0, [pc, #8]	; (8012ec4 <RTC_Alarm_IRQHandler+0x10>)
 8012eba:	f7f3 fa4d 	bl	8006358 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8012ebe:	bf00      	nop
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	20033708 	.word	0x20033708

08012ec8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8012ecc:	4802      	ldr	r0, [pc, #8]	; (8012ed8 <UART4_IRQHandler+0x10>)
 8012ece:	f7f4 f8e1 	bl	8007094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8012ed2:	bf00      	nop
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	20033768 	.word	0x20033768

08012edc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012ee0:	4802      	ldr	r0, [pc, #8]	; (8012eec <TIM6_DAC_IRQHandler+0x10>)
 8012ee2:	f7f3 fcfb 	bl	80068dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8012ee6:	bf00      	nop
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	20033918 	.word	0x20033918

08012ef0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8012ef4:	4802      	ldr	r0, [pc, #8]	; (8012f00 <DMA2_Channel5_IRQHandler+0x10>)
 8012ef6:	f7ee fcc6 	bl	8001886 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8012efa:	bf00      	nop
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	2003332c 	.word	0x2003332c

08012f04 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8012f08:	4802      	ldr	r0, [pc, #8]	; (8012f14 <DMA2_Channel7_IRQHandler+0x10>)
 8012f0a:	f7ee fcbc 	bl	8001886 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8012f0e:	bf00      	nop
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	200338ac 	.word	0x200338ac

08012f18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8012f1c:	4802      	ldr	r0, [pc, #8]	; (8012f28 <LPUART1_IRQHandler+0x10>)
 8012f1e:	f7f4 f8b9 	bl	8007094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8012f22:	bf00      	nop
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	20033564 	.word	0x20033564

08012f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	af00      	add	r7, sp, #0
	return 1;
 8012f30:	2301      	movs	r3, #1
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr

08012f3c <_kill>:

int _kill(int pid, int sig)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8012f46:	f000 f921 	bl	801318c <__errno>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2216      	movs	r2, #22
 8012f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8012f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <_exit>:

void _exit (int status)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8012f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff ffe7 	bl	8012f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8012f6e:	e7fe      	b.n	8012f6e <_exit+0x12>

08012f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b086      	sub	sp, #24
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	617b      	str	r3, [r7, #20]
 8012f80:	e00a      	b.n	8012f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012f82:	f3af 8000 	nop.w
 8012f86:	4601      	mov	r1, r0
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	1c5a      	adds	r2, r3, #1
 8012f8c:	60ba      	str	r2, [r7, #8]
 8012f8e:	b2ca      	uxtb	r2, r1
 8012f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	3301      	adds	r3, #1
 8012f96:	617b      	str	r3, [r7, #20]
 8012f98:	697a      	ldr	r2, [r7, #20]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	dbf0      	blt.n	8012f82 <_read+0x12>
	}

return len;
 8012fa0:	687b      	ldr	r3, [r7, #4]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3718      	adds	r7, #24
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b086      	sub	sp, #24
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	60f8      	str	r0, [r7, #12]
 8012fb2:	60b9      	str	r1, [r7, #8]
 8012fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	617b      	str	r3, [r7, #20]
 8012fba:	e009      	b.n	8012fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	1c5a      	adds	r2, r3, #1
 8012fc0:	60ba      	str	r2, [r7, #8]
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	617b      	str	r3, [r7, #20]
 8012fd0:	697a      	ldr	r2, [r7, #20]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	dbf1      	blt.n	8012fbc <_write+0x12>
	}
	return len;
 8012fd8:	687b      	ldr	r3, [r7, #4]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <_close>:

int _close(int file)
{
 8012fe2:	b480      	push	{r7}
 8012fe4:	b083      	sub	sp, #12
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8012fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	370c      	adds	r7, #12
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr

08012ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012ffa:	b480      	push	{r7}
 8012ffc:	b083      	sub	sp, #12
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801300a:	605a      	str	r2, [r3, #4]
	return 0;
 801300c:	2300      	movs	r3, #0
}
 801300e:	4618      	mov	r0, r3
 8013010:	370c      	adds	r7, #12
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr

0801301a <_isatty>:

int _isatty(int file)
{
 801301a:	b480      	push	{r7}
 801301c:	b083      	sub	sp, #12
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
	return 1;
 8013022:	2301      	movs	r3, #1
}
 8013024:	4618      	mov	r0, r3
 8013026:	370c      	adds	r7, #12
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr

08013030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013030:	b480      	push	{r7}
 8013032:	b085      	sub	sp, #20
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
	return 0;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3714      	adds	r7, #20
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
	...

0801304c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b086      	sub	sp, #24
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013054:	4a14      	ldr	r2, [pc, #80]	; (80130a8 <_sbrk+0x5c>)
 8013056:	4b15      	ldr	r3, [pc, #84]	; (80130ac <_sbrk+0x60>)
 8013058:	1ad3      	subs	r3, r2, r3
 801305a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013060:	4b13      	ldr	r3, [pc, #76]	; (80130b0 <_sbrk+0x64>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013068:	4b11      	ldr	r3, [pc, #68]	; (80130b0 <_sbrk+0x64>)
 801306a:	4a12      	ldr	r2, [pc, #72]	; (80130b4 <_sbrk+0x68>)
 801306c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801306e:	4b10      	ldr	r3, [pc, #64]	; (80130b0 <_sbrk+0x64>)
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4413      	add	r3, r2
 8013076:	693a      	ldr	r2, [r7, #16]
 8013078:	429a      	cmp	r2, r3
 801307a:	d207      	bcs.n	801308c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801307c:	f000 f886 	bl	801318c <__errno>
 8013080:	4603      	mov	r3, r0
 8013082:	220c      	movs	r2, #12
 8013084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801308a:	e009      	b.n	80130a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801308c:	4b08      	ldr	r3, [pc, #32]	; (80130b0 <_sbrk+0x64>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013092:	4b07      	ldr	r3, [pc, #28]	; (80130b0 <_sbrk+0x64>)
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	4413      	add	r3, r2
 801309a:	4a05      	ldr	r2, [pc, #20]	; (80130b0 <_sbrk+0x64>)
 801309c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801309e:	68fb      	ldr	r3, [r7, #12]
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3718      	adds	r7, #24
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	20050000 	.word	0x20050000
 80130ac:	00000400 	.word	0x00000400
 80130b0:	200320fc 	.word	0x200320fc
 80130b4:	20033978 	.word	0x20033978

080130b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80130b8:	b480      	push	{r7}
 80130ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80130bc:	4b17      	ldr	r3, [pc, #92]	; (801311c <SystemInit+0x64>)
 80130be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80130c2:	4a16      	ldr	r2, [pc, #88]	; (801311c <SystemInit+0x64>)
 80130c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80130c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80130cc:	4b14      	ldr	r3, [pc, #80]	; (8013120 <SystemInit+0x68>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4a13      	ldr	r2, [pc, #76]	; (8013120 <SystemInit+0x68>)
 80130d2:	f043 0301 	orr.w	r3, r3, #1
 80130d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80130d8:	4b11      	ldr	r3, [pc, #68]	; (8013120 <SystemInit+0x68>)
 80130da:	2200      	movs	r2, #0
 80130dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80130de:	4b10      	ldr	r3, [pc, #64]	; (8013120 <SystemInit+0x68>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	4a0f      	ldr	r2, [pc, #60]	; (8013120 <SystemInit+0x68>)
 80130e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80130e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80130ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80130ee:	4b0c      	ldr	r3, [pc, #48]	; (8013120 <SystemInit+0x68>)
 80130f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80130f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80130f6:	4b0a      	ldr	r3, [pc, #40]	; (8013120 <SystemInit+0x68>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4a09      	ldr	r2, [pc, #36]	; (8013120 <SystemInit+0x68>)
 80130fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013100:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8013102:	4b07      	ldr	r3, [pc, #28]	; (8013120 <SystemInit+0x68>)
 8013104:	2200      	movs	r2, #0
 8013106:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8013108:	4b04      	ldr	r3, [pc, #16]	; (801311c <SystemInit+0x64>)
 801310a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801310e:	609a      	str	r2, [r3, #8]
#endif
}
 8013110:	bf00      	nop
 8013112:	46bd      	mov	sp, r7
 8013114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013118:	4770      	bx	lr
 801311a:	bf00      	nop
 801311c:	e000ed00 	.word	0xe000ed00
 8013120:	40021000 	.word	0x40021000

08013124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8013124:	f8df d034 	ldr.w	sp, [pc, #52]	; 801315c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8013128:	f7ff ffc6 	bl	80130b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801312c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801312e:	e003      	b.n	8013138 <LoopCopyDataInit>

08013130 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8013130:	4b0b      	ldr	r3, [pc, #44]	; (8013160 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8013132:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8013134:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8013136:	3104      	adds	r1, #4

08013138 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8013138:	480a      	ldr	r0, [pc, #40]	; (8013164 <LoopForever+0xa>)
	ldr	r3, =_edata
 801313a:	4b0b      	ldr	r3, [pc, #44]	; (8013168 <LoopForever+0xe>)
	adds	r2, r0, r1
 801313c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801313e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8013140:	d3f6      	bcc.n	8013130 <CopyDataInit>
	ldr	r2, =_sbss
 8013142:	4a0a      	ldr	r2, [pc, #40]	; (801316c <LoopForever+0x12>)
	b	LoopFillZerobss
 8013144:	e002      	b.n	801314c <LoopFillZerobss>

08013146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8013146:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8013148:	f842 3b04 	str.w	r3, [r2], #4

0801314c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801314c:	4b08      	ldr	r3, [pc, #32]	; (8013170 <LoopForever+0x16>)
	cmp	r2, r3
 801314e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8013150:	d3f9      	bcc.n	8013146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8013152:	f000 f821 	bl	8013198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8013156:	f7fd fefb 	bl	8010f50 <main>

0801315a <LoopForever>:

LoopForever:
    b LoopForever
 801315a:	e7fe      	b.n	801315a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 801315c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8013160:	0801cbb0 	.word	0x0801cbb0
	ldr	r0, =_sdata
 8013164:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8013168:	20000584 	.word	0x20000584
	ldr	r2, =_sbss
 801316c:	20000588 	.word	0x20000588
	ldr	r3, = _ebss
 8013170:	20033974 	.word	0x20033974

08013174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8013174:	e7fe      	b.n	8013174 <ADC1_2_IRQHandler>

08013176 <atof>:
 8013176:	2100      	movs	r1, #0
 8013178:	f001 bdfa 	b.w	8014d70 <strtod>

0801317c <atoi>:
 801317c:	220a      	movs	r2, #10
 801317e:	2100      	movs	r1, #0
 8013180:	f001 beb4 	b.w	8014eec <strtol>

08013184 <atol>:
 8013184:	220a      	movs	r2, #10
 8013186:	2100      	movs	r1, #0
 8013188:	f001 beb0 	b.w	8014eec <strtol>

0801318c <__errno>:
 801318c:	4b01      	ldr	r3, [pc, #4]	; (8013194 <__errno+0x8>)
 801318e:	6818      	ldr	r0, [r3, #0]
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	200003ac 	.word	0x200003ac

08013198 <__libc_init_array>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	4d0d      	ldr	r5, [pc, #52]	; (80131d0 <__libc_init_array+0x38>)
 801319c:	4c0d      	ldr	r4, [pc, #52]	; (80131d4 <__libc_init_array+0x3c>)
 801319e:	1b64      	subs	r4, r4, r5
 80131a0:	10a4      	asrs	r4, r4, #2
 80131a2:	2600      	movs	r6, #0
 80131a4:	42a6      	cmp	r6, r4
 80131a6:	d109      	bne.n	80131bc <__libc_init_array+0x24>
 80131a8:	4d0b      	ldr	r5, [pc, #44]	; (80131d8 <__libc_init_array+0x40>)
 80131aa:	4c0c      	ldr	r4, [pc, #48]	; (80131dc <__libc_init_array+0x44>)
 80131ac:	f007 faf6 	bl	801a79c <_init>
 80131b0:	1b64      	subs	r4, r4, r5
 80131b2:	10a4      	asrs	r4, r4, #2
 80131b4:	2600      	movs	r6, #0
 80131b6:	42a6      	cmp	r6, r4
 80131b8:	d105      	bne.n	80131c6 <__libc_init_array+0x2e>
 80131ba:	bd70      	pop	{r4, r5, r6, pc}
 80131bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80131c0:	4798      	blx	r3
 80131c2:	3601      	adds	r6, #1
 80131c4:	e7ee      	b.n	80131a4 <__libc_init_array+0xc>
 80131c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ca:	4798      	blx	r3
 80131cc:	3601      	adds	r6, #1
 80131ce:	e7f2      	b.n	80131b6 <__libc_init_array+0x1e>
 80131d0:	0801cba8 	.word	0x0801cba8
 80131d4:	0801cba8 	.word	0x0801cba8
 80131d8:	0801cba8 	.word	0x0801cba8
 80131dc:	0801cbac 	.word	0x0801cbac

080131e0 <malloc>:
 80131e0:	4b02      	ldr	r3, [pc, #8]	; (80131ec <malloc+0xc>)
 80131e2:	4601      	mov	r1, r0
 80131e4:	6818      	ldr	r0, [r3, #0]
 80131e6:	f000 b869 	b.w	80132bc <_malloc_r>
 80131ea:	bf00      	nop
 80131ec:	200003ac 	.word	0x200003ac

080131f0 <memcpy>:
 80131f0:	440a      	add	r2, r1
 80131f2:	4291      	cmp	r1, r2
 80131f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80131f8:	d100      	bne.n	80131fc <memcpy+0xc>
 80131fa:	4770      	bx	lr
 80131fc:	b510      	push	{r4, lr}
 80131fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013206:	4291      	cmp	r1, r2
 8013208:	d1f9      	bne.n	80131fe <memcpy+0xe>
 801320a:	bd10      	pop	{r4, pc}

0801320c <memset>:
 801320c:	4402      	add	r2, r0
 801320e:	4603      	mov	r3, r0
 8013210:	4293      	cmp	r3, r2
 8013212:	d100      	bne.n	8013216 <memset+0xa>
 8013214:	4770      	bx	lr
 8013216:	f803 1b01 	strb.w	r1, [r3], #1
 801321a:	e7f9      	b.n	8013210 <memset+0x4>

0801321c <_free_r>:
 801321c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801321e:	2900      	cmp	r1, #0
 8013220:	d048      	beq.n	80132b4 <_free_r+0x98>
 8013222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013226:	9001      	str	r0, [sp, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	f1a1 0404 	sub.w	r4, r1, #4
 801322e:	bfb8      	it	lt
 8013230:	18e4      	addlt	r4, r4, r3
 8013232:	f003 fb61 	bl	80168f8 <__malloc_lock>
 8013236:	4a20      	ldr	r2, [pc, #128]	; (80132b8 <_free_r+0x9c>)
 8013238:	9801      	ldr	r0, [sp, #4]
 801323a:	6813      	ldr	r3, [r2, #0]
 801323c:	4615      	mov	r5, r2
 801323e:	b933      	cbnz	r3, 801324e <_free_r+0x32>
 8013240:	6063      	str	r3, [r4, #4]
 8013242:	6014      	str	r4, [r2, #0]
 8013244:	b003      	add	sp, #12
 8013246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801324a:	f003 bb5b 	b.w	8016904 <__malloc_unlock>
 801324e:	42a3      	cmp	r3, r4
 8013250:	d90b      	bls.n	801326a <_free_r+0x4e>
 8013252:	6821      	ldr	r1, [r4, #0]
 8013254:	1862      	adds	r2, r4, r1
 8013256:	4293      	cmp	r3, r2
 8013258:	bf04      	itt	eq
 801325a:	681a      	ldreq	r2, [r3, #0]
 801325c:	685b      	ldreq	r3, [r3, #4]
 801325e:	6063      	str	r3, [r4, #4]
 8013260:	bf04      	itt	eq
 8013262:	1852      	addeq	r2, r2, r1
 8013264:	6022      	streq	r2, [r4, #0]
 8013266:	602c      	str	r4, [r5, #0]
 8013268:	e7ec      	b.n	8013244 <_free_r+0x28>
 801326a:	461a      	mov	r2, r3
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	b10b      	cbz	r3, 8013274 <_free_r+0x58>
 8013270:	42a3      	cmp	r3, r4
 8013272:	d9fa      	bls.n	801326a <_free_r+0x4e>
 8013274:	6811      	ldr	r1, [r2, #0]
 8013276:	1855      	adds	r5, r2, r1
 8013278:	42a5      	cmp	r5, r4
 801327a:	d10b      	bne.n	8013294 <_free_r+0x78>
 801327c:	6824      	ldr	r4, [r4, #0]
 801327e:	4421      	add	r1, r4
 8013280:	1854      	adds	r4, r2, r1
 8013282:	42a3      	cmp	r3, r4
 8013284:	6011      	str	r1, [r2, #0]
 8013286:	d1dd      	bne.n	8013244 <_free_r+0x28>
 8013288:	681c      	ldr	r4, [r3, #0]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	6053      	str	r3, [r2, #4]
 801328e:	4421      	add	r1, r4
 8013290:	6011      	str	r1, [r2, #0]
 8013292:	e7d7      	b.n	8013244 <_free_r+0x28>
 8013294:	d902      	bls.n	801329c <_free_r+0x80>
 8013296:	230c      	movs	r3, #12
 8013298:	6003      	str	r3, [r0, #0]
 801329a:	e7d3      	b.n	8013244 <_free_r+0x28>
 801329c:	6825      	ldr	r5, [r4, #0]
 801329e:	1961      	adds	r1, r4, r5
 80132a0:	428b      	cmp	r3, r1
 80132a2:	bf04      	itt	eq
 80132a4:	6819      	ldreq	r1, [r3, #0]
 80132a6:	685b      	ldreq	r3, [r3, #4]
 80132a8:	6063      	str	r3, [r4, #4]
 80132aa:	bf04      	itt	eq
 80132ac:	1949      	addeq	r1, r1, r5
 80132ae:	6021      	streq	r1, [r4, #0]
 80132b0:	6054      	str	r4, [r2, #4]
 80132b2:	e7c7      	b.n	8013244 <_free_r+0x28>
 80132b4:	b003      	add	sp, #12
 80132b6:	bd30      	pop	{r4, r5, pc}
 80132b8:	20032100 	.word	0x20032100

080132bc <_malloc_r>:
 80132bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132be:	1ccd      	adds	r5, r1, #3
 80132c0:	f025 0503 	bic.w	r5, r5, #3
 80132c4:	3508      	adds	r5, #8
 80132c6:	2d0c      	cmp	r5, #12
 80132c8:	bf38      	it	cc
 80132ca:	250c      	movcc	r5, #12
 80132cc:	2d00      	cmp	r5, #0
 80132ce:	4606      	mov	r6, r0
 80132d0:	db01      	blt.n	80132d6 <_malloc_r+0x1a>
 80132d2:	42a9      	cmp	r1, r5
 80132d4:	d903      	bls.n	80132de <_malloc_r+0x22>
 80132d6:	230c      	movs	r3, #12
 80132d8:	6033      	str	r3, [r6, #0]
 80132da:	2000      	movs	r0, #0
 80132dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132de:	f003 fb0b 	bl	80168f8 <__malloc_lock>
 80132e2:	4921      	ldr	r1, [pc, #132]	; (8013368 <_malloc_r+0xac>)
 80132e4:	680a      	ldr	r2, [r1, #0]
 80132e6:	4614      	mov	r4, r2
 80132e8:	b99c      	cbnz	r4, 8013312 <_malloc_r+0x56>
 80132ea:	4f20      	ldr	r7, [pc, #128]	; (801336c <_malloc_r+0xb0>)
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	b923      	cbnz	r3, 80132fa <_malloc_r+0x3e>
 80132f0:	4621      	mov	r1, r4
 80132f2:	4630      	mov	r0, r6
 80132f4:	f000 feb6 	bl	8014064 <_sbrk_r>
 80132f8:	6038      	str	r0, [r7, #0]
 80132fa:	4629      	mov	r1, r5
 80132fc:	4630      	mov	r0, r6
 80132fe:	f000 feb1 	bl	8014064 <_sbrk_r>
 8013302:	1c43      	adds	r3, r0, #1
 8013304:	d123      	bne.n	801334e <_malloc_r+0x92>
 8013306:	230c      	movs	r3, #12
 8013308:	6033      	str	r3, [r6, #0]
 801330a:	4630      	mov	r0, r6
 801330c:	f003 fafa 	bl	8016904 <__malloc_unlock>
 8013310:	e7e3      	b.n	80132da <_malloc_r+0x1e>
 8013312:	6823      	ldr	r3, [r4, #0]
 8013314:	1b5b      	subs	r3, r3, r5
 8013316:	d417      	bmi.n	8013348 <_malloc_r+0x8c>
 8013318:	2b0b      	cmp	r3, #11
 801331a:	d903      	bls.n	8013324 <_malloc_r+0x68>
 801331c:	6023      	str	r3, [r4, #0]
 801331e:	441c      	add	r4, r3
 8013320:	6025      	str	r5, [r4, #0]
 8013322:	e004      	b.n	801332e <_malloc_r+0x72>
 8013324:	6863      	ldr	r3, [r4, #4]
 8013326:	42a2      	cmp	r2, r4
 8013328:	bf0c      	ite	eq
 801332a:	600b      	streq	r3, [r1, #0]
 801332c:	6053      	strne	r3, [r2, #4]
 801332e:	4630      	mov	r0, r6
 8013330:	f003 fae8 	bl	8016904 <__malloc_unlock>
 8013334:	f104 000b 	add.w	r0, r4, #11
 8013338:	1d23      	adds	r3, r4, #4
 801333a:	f020 0007 	bic.w	r0, r0, #7
 801333e:	1ac2      	subs	r2, r0, r3
 8013340:	d0cc      	beq.n	80132dc <_malloc_r+0x20>
 8013342:	1a1b      	subs	r3, r3, r0
 8013344:	50a3      	str	r3, [r4, r2]
 8013346:	e7c9      	b.n	80132dc <_malloc_r+0x20>
 8013348:	4622      	mov	r2, r4
 801334a:	6864      	ldr	r4, [r4, #4]
 801334c:	e7cc      	b.n	80132e8 <_malloc_r+0x2c>
 801334e:	1cc4      	adds	r4, r0, #3
 8013350:	f024 0403 	bic.w	r4, r4, #3
 8013354:	42a0      	cmp	r0, r4
 8013356:	d0e3      	beq.n	8013320 <_malloc_r+0x64>
 8013358:	1a21      	subs	r1, r4, r0
 801335a:	4630      	mov	r0, r6
 801335c:	f000 fe82 	bl	8014064 <_sbrk_r>
 8013360:	3001      	adds	r0, #1
 8013362:	d1dd      	bne.n	8013320 <_malloc_r+0x64>
 8013364:	e7cf      	b.n	8013306 <_malloc_r+0x4a>
 8013366:	bf00      	nop
 8013368:	20032100 	.word	0x20032100
 801336c:	20032104 	.word	0x20032104

08013370 <__cvt>:
 8013370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013374:	ec55 4b10 	vmov	r4, r5, d0
 8013378:	2d00      	cmp	r5, #0
 801337a:	460e      	mov	r6, r1
 801337c:	4619      	mov	r1, r3
 801337e:	462b      	mov	r3, r5
 8013380:	bfbb      	ittet	lt
 8013382:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013386:	461d      	movlt	r5, r3
 8013388:	2300      	movge	r3, #0
 801338a:	232d      	movlt	r3, #45	; 0x2d
 801338c:	700b      	strb	r3, [r1, #0]
 801338e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013390:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013394:	4691      	mov	r9, r2
 8013396:	f023 0820 	bic.w	r8, r3, #32
 801339a:	bfbc      	itt	lt
 801339c:	4622      	movlt	r2, r4
 801339e:	4614      	movlt	r4, r2
 80133a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133a4:	d005      	beq.n	80133b2 <__cvt+0x42>
 80133a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80133aa:	d100      	bne.n	80133ae <__cvt+0x3e>
 80133ac:	3601      	adds	r6, #1
 80133ae:	2102      	movs	r1, #2
 80133b0:	e000      	b.n	80133b4 <__cvt+0x44>
 80133b2:	2103      	movs	r1, #3
 80133b4:	ab03      	add	r3, sp, #12
 80133b6:	9301      	str	r3, [sp, #4]
 80133b8:	ab02      	add	r3, sp, #8
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	ec45 4b10 	vmov	d0, r4, r5
 80133c0:	4653      	mov	r3, sl
 80133c2:	4632      	mov	r2, r6
 80133c4:	f001 ff08 	bl	80151d8 <_dtoa_r>
 80133c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80133cc:	4607      	mov	r7, r0
 80133ce:	d102      	bne.n	80133d6 <__cvt+0x66>
 80133d0:	f019 0f01 	tst.w	r9, #1
 80133d4:	d022      	beq.n	801341c <__cvt+0xac>
 80133d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133da:	eb07 0906 	add.w	r9, r7, r6
 80133de:	d110      	bne.n	8013402 <__cvt+0x92>
 80133e0:	783b      	ldrb	r3, [r7, #0]
 80133e2:	2b30      	cmp	r3, #48	; 0x30
 80133e4:	d10a      	bne.n	80133fc <__cvt+0x8c>
 80133e6:	2200      	movs	r2, #0
 80133e8:	2300      	movs	r3, #0
 80133ea:	4620      	mov	r0, r4
 80133ec:	4629      	mov	r1, r5
 80133ee:	f7ed fb8b 	bl	8000b08 <__aeabi_dcmpeq>
 80133f2:	b918      	cbnz	r0, 80133fc <__cvt+0x8c>
 80133f4:	f1c6 0601 	rsb	r6, r6, #1
 80133f8:	f8ca 6000 	str.w	r6, [sl]
 80133fc:	f8da 3000 	ldr.w	r3, [sl]
 8013400:	4499      	add	r9, r3
 8013402:	2200      	movs	r2, #0
 8013404:	2300      	movs	r3, #0
 8013406:	4620      	mov	r0, r4
 8013408:	4629      	mov	r1, r5
 801340a:	f7ed fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 801340e:	b108      	cbz	r0, 8013414 <__cvt+0xa4>
 8013410:	f8cd 900c 	str.w	r9, [sp, #12]
 8013414:	2230      	movs	r2, #48	; 0x30
 8013416:	9b03      	ldr	r3, [sp, #12]
 8013418:	454b      	cmp	r3, r9
 801341a:	d307      	bcc.n	801342c <__cvt+0xbc>
 801341c:	9b03      	ldr	r3, [sp, #12]
 801341e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013420:	1bdb      	subs	r3, r3, r7
 8013422:	4638      	mov	r0, r7
 8013424:	6013      	str	r3, [r2, #0]
 8013426:	b004      	add	sp, #16
 8013428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801342c:	1c59      	adds	r1, r3, #1
 801342e:	9103      	str	r1, [sp, #12]
 8013430:	701a      	strb	r2, [r3, #0]
 8013432:	e7f0      	b.n	8013416 <__cvt+0xa6>

08013434 <__exponent>:
 8013434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013436:	4603      	mov	r3, r0
 8013438:	2900      	cmp	r1, #0
 801343a:	bfb8      	it	lt
 801343c:	4249      	neglt	r1, r1
 801343e:	f803 2b02 	strb.w	r2, [r3], #2
 8013442:	bfb4      	ite	lt
 8013444:	222d      	movlt	r2, #45	; 0x2d
 8013446:	222b      	movge	r2, #43	; 0x2b
 8013448:	2909      	cmp	r1, #9
 801344a:	7042      	strb	r2, [r0, #1]
 801344c:	dd2a      	ble.n	80134a4 <__exponent+0x70>
 801344e:	f10d 0407 	add.w	r4, sp, #7
 8013452:	46a4      	mov	ip, r4
 8013454:	270a      	movs	r7, #10
 8013456:	46a6      	mov	lr, r4
 8013458:	460a      	mov	r2, r1
 801345a:	fb91 f6f7 	sdiv	r6, r1, r7
 801345e:	fb07 1516 	mls	r5, r7, r6, r1
 8013462:	3530      	adds	r5, #48	; 0x30
 8013464:	2a63      	cmp	r2, #99	; 0x63
 8013466:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801346a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801346e:	4631      	mov	r1, r6
 8013470:	dcf1      	bgt.n	8013456 <__exponent+0x22>
 8013472:	3130      	adds	r1, #48	; 0x30
 8013474:	f1ae 0502 	sub.w	r5, lr, #2
 8013478:	f804 1c01 	strb.w	r1, [r4, #-1]
 801347c:	1c44      	adds	r4, r0, #1
 801347e:	4629      	mov	r1, r5
 8013480:	4561      	cmp	r1, ip
 8013482:	d30a      	bcc.n	801349a <__exponent+0x66>
 8013484:	f10d 0209 	add.w	r2, sp, #9
 8013488:	eba2 020e 	sub.w	r2, r2, lr
 801348c:	4565      	cmp	r5, ip
 801348e:	bf88      	it	hi
 8013490:	2200      	movhi	r2, #0
 8013492:	4413      	add	r3, r2
 8013494:	1a18      	subs	r0, r3, r0
 8013496:	b003      	add	sp, #12
 8013498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801349a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801349e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80134a2:	e7ed      	b.n	8013480 <__exponent+0x4c>
 80134a4:	2330      	movs	r3, #48	; 0x30
 80134a6:	3130      	adds	r1, #48	; 0x30
 80134a8:	7083      	strb	r3, [r0, #2]
 80134aa:	70c1      	strb	r1, [r0, #3]
 80134ac:	1d03      	adds	r3, r0, #4
 80134ae:	e7f1      	b.n	8013494 <__exponent+0x60>

080134b0 <_printf_float>:
 80134b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b4:	ed2d 8b02 	vpush	{d8}
 80134b8:	b08d      	sub	sp, #52	; 0x34
 80134ba:	460c      	mov	r4, r1
 80134bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80134c0:	4616      	mov	r6, r2
 80134c2:	461f      	mov	r7, r3
 80134c4:	4605      	mov	r5, r0
 80134c6:	f003 f999 	bl	80167fc <_localeconv_r>
 80134ca:	f8d0 a000 	ldr.w	sl, [r0]
 80134ce:	4650      	mov	r0, sl
 80134d0:	f7ec fe98 	bl	8000204 <strlen>
 80134d4:	2300      	movs	r3, #0
 80134d6:	930a      	str	r3, [sp, #40]	; 0x28
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	9305      	str	r3, [sp, #20]
 80134dc:	f8d8 3000 	ldr.w	r3, [r8]
 80134e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80134e4:	3307      	adds	r3, #7
 80134e6:	f023 0307 	bic.w	r3, r3, #7
 80134ea:	f103 0208 	add.w	r2, r3, #8
 80134ee:	f8c8 2000 	str.w	r2, [r8]
 80134f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80134fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80134fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013502:	9307      	str	r3, [sp, #28]
 8013504:	f8cd 8018 	str.w	r8, [sp, #24]
 8013508:	ee08 0a10 	vmov	s16, r0
 801350c:	4b9f      	ldr	r3, [pc, #636]	; (801378c <_printf_float+0x2dc>)
 801350e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013516:	f7ed fb29 	bl	8000b6c <__aeabi_dcmpun>
 801351a:	bb88      	cbnz	r0, 8013580 <_printf_float+0xd0>
 801351c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013520:	4b9a      	ldr	r3, [pc, #616]	; (801378c <_printf_float+0x2dc>)
 8013522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013526:	f7ed fb03 	bl	8000b30 <__aeabi_dcmple>
 801352a:	bb48      	cbnz	r0, 8013580 <_printf_float+0xd0>
 801352c:	2200      	movs	r2, #0
 801352e:	2300      	movs	r3, #0
 8013530:	4640      	mov	r0, r8
 8013532:	4649      	mov	r1, r9
 8013534:	f7ed faf2 	bl	8000b1c <__aeabi_dcmplt>
 8013538:	b110      	cbz	r0, 8013540 <_printf_float+0x90>
 801353a:	232d      	movs	r3, #45	; 0x2d
 801353c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013540:	4b93      	ldr	r3, [pc, #588]	; (8013790 <_printf_float+0x2e0>)
 8013542:	4894      	ldr	r0, [pc, #592]	; (8013794 <_printf_float+0x2e4>)
 8013544:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013548:	bf94      	ite	ls
 801354a:	4698      	movls	r8, r3
 801354c:	4680      	movhi	r8, r0
 801354e:	2303      	movs	r3, #3
 8013550:	6123      	str	r3, [r4, #16]
 8013552:	9b05      	ldr	r3, [sp, #20]
 8013554:	f023 0204 	bic.w	r2, r3, #4
 8013558:	6022      	str	r2, [r4, #0]
 801355a:	f04f 0900 	mov.w	r9, #0
 801355e:	9700      	str	r7, [sp, #0]
 8013560:	4633      	mov	r3, r6
 8013562:	aa0b      	add	r2, sp, #44	; 0x2c
 8013564:	4621      	mov	r1, r4
 8013566:	4628      	mov	r0, r5
 8013568:	f000 f9d8 	bl	801391c <_printf_common>
 801356c:	3001      	adds	r0, #1
 801356e:	f040 8090 	bne.w	8013692 <_printf_float+0x1e2>
 8013572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013576:	b00d      	add	sp, #52	; 0x34
 8013578:	ecbd 8b02 	vpop	{d8}
 801357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013580:	4642      	mov	r2, r8
 8013582:	464b      	mov	r3, r9
 8013584:	4640      	mov	r0, r8
 8013586:	4649      	mov	r1, r9
 8013588:	f7ed faf0 	bl	8000b6c <__aeabi_dcmpun>
 801358c:	b140      	cbz	r0, 80135a0 <_printf_float+0xf0>
 801358e:	464b      	mov	r3, r9
 8013590:	2b00      	cmp	r3, #0
 8013592:	bfbc      	itt	lt
 8013594:	232d      	movlt	r3, #45	; 0x2d
 8013596:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801359a:	487f      	ldr	r0, [pc, #508]	; (8013798 <_printf_float+0x2e8>)
 801359c:	4b7f      	ldr	r3, [pc, #508]	; (801379c <_printf_float+0x2ec>)
 801359e:	e7d1      	b.n	8013544 <_printf_float+0x94>
 80135a0:	6863      	ldr	r3, [r4, #4]
 80135a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80135a6:	9206      	str	r2, [sp, #24]
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	d13f      	bne.n	801362c <_printf_float+0x17c>
 80135ac:	2306      	movs	r3, #6
 80135ae:	6063      	str	r3, [r4, #4]
 80135b0:	9b05      	ldr	r3, [sp, #20]
 80135b2:	6861      	ldr	r1, [r4, #4]
 80135b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80135b8:	2300      	movs	r3, #0
 80135ba:	9303      	str	r3, [sp, #12]
 80135bc:	ab0a      	add	r3, sp, #40	; 0x28
 80135be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80135c2:	ab09      	add	r3, sp, #36	; 0x24
 80135c4:	ec49 8b10 	vmov	d0, r8, r9
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	6022      	str	r2, [r4, #0]
 80135cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80135d0:	4628      	mov	r0, r5
 80135d2:	f7ff fecd 	bl	8013370 <__cvt>
 80135d6:	9b06      	ldr	r3, [sp, #24]
 80135d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135da:	2b47      	cmp	r3, #71	; 0x47
 80135dc:	4680      	mov	r8, r0
 80135de:	d108      	bne.n	80135f2 <_printf_float+0x142>
 80135e0:	1cc8      	adds	r0, r1, #3
 80135e2:	db02      	blt.n	80135ea <_printf_float+0x13a>
 80135e4:	6863      	ldr	r3, [r4, #4]
 80135e6:	4299      	cmp	r1, r3
 80135e8:	dd41      	ble.n	801366e <_printf_float+0x1be>
 80135ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80135ee:	fa5f fb8b 	uxtb.w	fp, fp
 80135f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135f6:	d820      	bhi.n	801363a <_printf_float+0x18a>
 80135f8:	3901      	subs	r1, #1
 80135fa:	465a      	mov	r2, fp
 80135fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013600:	9109      	str	r1, [sp, #36]	; 0x24
 8013602:	f7ff ff17 	bl	8013434 <__exponent>
 8013606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013608:	1813      	adds	r3, r2, r0
 801360a:	2a01      	cmp	r2, #1
 801360c:	4681      	mov	r9, r0
 801360e:	6123      	str	r3, [r4, #16]
 8013610:	dc02      	bgt.n	8013618 <_printf_float+0x168>
 8013612:	6822      	ldr	r2, [r4, #0]
 8013614:	07d2      	lsls	r2, r2, #31
 8013616:	d501      	bpl.n	801361c <_printf_float+0x16c>
 8013618:	3301      	adds	r3, #1
 801361a:	6123      	str	r3, [r4, #16]
 801361c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013620:	2b00      	cmp	r3, #0
 8013622:	d09c      	beq.n	801355e <_printf_float+0xae>
 8013624:	232d      	movs	r3, #45	; 0x2d
 8013626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801362a:	e798      	b.n	801355e <_printf_float+0xae>
 801362c:	9a06      	ldr	r2, [sp, #24]
 801362e:	2a47      	cmp	r2, #71	; 0x47
 8013630:	d1be      	bne.n	80135b0 <_printf_float+0x100>
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1bc      	bne.n	80135b0 <_printf_float+0x100>
 8013636:	2301      	movs	r3, #1
 8013638:	e7b9      	b.n	80135ae <_printf_float+0xfe>
 801363a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801363e:	d118      	bne.n	8013672 <_printf_float+0x1c2>
 8013640:	2900      	cmp	r1, #0
 8013642:	6863      	ldr	r3, [r4, #4]
 8013644:	dd0b      	ble.n	801365e <_printf_float+0x1ae>
 8013646:	6121      	str	r1, [r4, #16]
 8013648:	b913      	cbnz	r3, 8013650 <_printf_float+0x1a0>
 801364a:	6822      	ldr	r2, [r4, #0]
 801364c:	07d0      	lsls	r0, r2, #31
 801364e:	d502      	bpl.n	8013656 <_printf_float+0x1a6>
 8013650:	3301      	adds	r3, #1
 8013652:	440b      	add	r3, r1
 8013654:	6123      	str	r3, [r4, #16]
 8013656:	65a1      	str	r1, [r4, #88]	; 0x58
 8013658:	f04f 0900 	mov.w	r9, #0
 801365c:	e7de      	b.n	801361c <_printf_float+0x16c>
 801365e:	b913      	cbnz	r3, 8013666 <_printf_float+0x1b6>
 8013660:	6822      	ldr	r2, [r4, #0]
 8013662:	07d2      	lsls	r2, r2, #31
 8013664:	d501      	bpl.n	801366a <_printf_float+0x1ba>
 8013666:	3302      	adds	r3, #2
 8013668:	e7f4      	b.n	8013654 <_printf_float+0x1a4>
 801366a:	2301      	movs	r3, #1
 801366c:	e7f2      	b.n	8013654 <_printf_float+0x1a4>
 801366e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013674:	4299      	cmp	r1, r3
 8013676:	db05      	blt.n	8013684 <_printf_float+0x1d4>
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	6121      	str	r1, [r4, #16]
 801367c:	07d8      	lsls	r0, r3, #31
 801367e:	d5ea      	bpl.n	8013656 <_printf_float+0x1a6>
 8013680:	1c4b      	adds	r3, r1, #1
 8013682:	e7e7      	b.n	8013654 <_printf_float+0x1a4>
 8013684:	2900      	cmp	r1, #0
 8013686:	bfd4      	ite	le
 8013688:	f1c1 0202 	rsble	r2, r1, #2
 801368c:	2201      	movgt	r2, #1
 801368e:	4413      	add	r3, r2
 8013690:	e7e0      	b.n	8013654 <_printf_float+0x1a4>
 8013692:	6823      	ldr	r3, [r4, #0]
 8013694:	055a      	lsls	r2, r3, #21
 8013696:	d407      	bmi.n	80136a8 <_printf_float+0x1f8>
 8013698:	6923      	ldr	r3, [r4, #16]
 801369a:	4642      	mov	r2, r8
 801369c:	4631      	mov	r1, r6
 801369e:	4628      	mov	r0, r5
 80136a0:	47b8      	blx	r7
 80136a2:	3001      	adds	r0, #1
 80136a4:	d12c      	bne.n	8013700 <_printf_float+0x250>
 80136a6:	e764      	b.n	8013572 <_printf_float+0xc2>
 80136a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80136ac:	f240 80e0 	bls.w	8013870 <_printf_float+0x3c0>
 80136b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136b4:	2200      	movs	r2, #0
 80136b6:	2300      	movs	r3, #0
 80136b8:	f7ed fa26 	bl	8000b08 <__aeabi_dcmpeq>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d034      	beq.n	801372a <_printf_float+0x27a>
 80136c0:	4a37      	ldr	r2, [pc, #220]	; (80137a0 <_printf_float+0x2f0>)
 80136c2:	2301      	movs	r3, #1
 80136c4:	4631      	mov	r1, r6
 80136c6:	4628      	mov	r0, r5
 80136c8:	47b8      	blx	r7
 80136ca:	3001      	adds	r0, #1
 80136cc:	f43f af51 	beq.w	8013572 <_printf_float+0xc2>
 80136d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136d4:	429a      	cmp	r2, r3
 80136d6:	db02      	blt.n	80136de <_printf_float+0x22e>
 80136d8:	6823      	ldr	r3, [r4, #0]
 80136da:	07d8      	lsls	r0, r3, #31
 80136dc:	d510      	bpl.n	8013700 <_printf_float+0x250>
 80136de:	ee18 3a10 	vmov	r3, s16
 80136e2:	4652      	mov	r2, sl
 80136e4:	4631      	mov	r1, r6
 80136e6:	4628      	mov	r0, r5
 80136e8:	47b8      	blx	r7
 80136ea:	3001      	adds	r0, #1
 80136ec:	f43f af41 	beq.w	8013572 <_printf_float+0xc2>
 80136f0:	f04f 0800 	mov.w	r8, #0
 80136f4:	f104 091a 	add.w	r9, r4, #26
 80136f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136fa:	3b01      	subs	r3, #1
 80136fc:	4543      	cmp	r3, r8
 80136fe:	dc09      	bgt.n	8013714 <_printf_float+0x264>
 8013700:	6823      	ldr	r3, [r4, #0]
 8013702:	079b      	lsls	r3, r3, #30
 8013704:	f100 8105 	bmi.w	8013912 <_printf_float+0x462>
 8013708:	68e0      	ldr	r0, [r4, #12]
 801370a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801370c:	4298      	cmp	r0, r3
 801370e:	bfb8      	it	lt
 8013710:	4618      	movlt	r0, r3
 8013712:	e730      	b.n	8013576 <_printf_float+0xc6>
 8013714:	2301      	movs	r3, #1
 8013716:	464a      	mov	r2, r9
 8013718:	4631      	mov	r1, r6
 801371a:	4628      	mov	r0, r5
 801371c:	47b8      	blx	r7
 801371e:	3001      	adds	r0, #1
 8013720:	f43f af27 	beq.w	8013572 <_printf_float+0xc2>
 8013724:	f108 0801 	add.w	r8, r8, #1
 8013728:	e7e6      	b.n	80136f8 <_printf_float+0x248>
 801372a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801372c:	2b00      	cmp	r3, #0
 801372e:	dc39      	bgt.n	80137a4 <_printf_float+0x2f4>
 8013730:	4a1b      	ldr	r2, [pc, #108]	; (80137a0 <_printf_float+0x2f0>)
 8013732:	2301      	movs	r3, #1
 8013734:	4631      	mov	r1, r6
 8013736:	4628      	mov	r0, r5
 8013738:	47b8      	blx	r7
 801373a:	3001      	adds	r0, #1
 801373c:	f43f af19 	beq.w	8013572 <_printf_float+0xc2>
 8013740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013744:	4313      	orrs	r3, r2
 8013746:	d102      	bne.n	801374e <_printf_float+0x29e>
 8013748:	6823      	ldr	r3, [r4, #0]
 801374a:	07d9      	lsls	r1, r3, #31
 801374c:	d5d8      	bpl.n	8013700 <_printf_float+0x250>
 801374e:	ee18 3a10 	vmov	r3, s16
 8013752:	4652      	mov	r2, sl
 8013754:	4631      	mov	r1, r6
 8013756:	4628      	mov	r0, r5
 8013758:	47b8      	blx	r7
 801375a:	3001      	adds	r0, #1
 801375c:	f43f af09 	beq.w	8013572 <_printf_float+0xc2>
 8013760:	f04f 0900 	mov.w	r9, #0
 8013764:	f104 0a1a 	add.w	sl, r4, #26
 8013768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801376a:	425b      	negs	r3, r3
 801376c:	454b      	cmp	r3, r9
 801376e:	dc01      	bgt.n	8013774 <_printf_float+0x2c4>
 8013770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013772:	e792      	b.n	801369a <_printf_float+0x1ea>
 8013774:	2301      	movs	r3, #1
 8013776:	4652      	mov	r2, sl
 8013778:	4631      	mov	r1, r6
 801377a:	4628      	mov	r0, r5
 801377c:	47b8      	blx	r7
 801377e:	3001      	adds	r0, #1
 8013780:	f43f aef7 	beq.w	8013572 <_printf_float+0xc2>
 8013784:	f109 0901 	add.w	r9, r9, #1
 8013788:	e7ee      	b.n	8013768 <_printf_float+0x2b8>
 801378a:	bf00      	nop
 801378c:	7fefffff 	.word	0x7fefffff
 8013790:	0801c450 	.word	0x0801c450
 8013794:	0801c454 	.word	0x0801c454
 8013798:	0801c45c 	.word	0x0801c45c
 801379c:	0801c458 	.word	0x0801c458
 80137a0:	0801c460 	.word	0x0801c460
 80137a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137a8:	429a      	cmp	r2, r3
 80137aa:	bfa8      	it	ge
 80137ac:	461a      	movge	r2, r3
 80137ae:	2a00      	cmp	r2, #0
 80137b0:	4691      	mov	r9, r2
 80137b2:	dc37      	bgt.n	8013824 <_printf_float+0x374>
 80137b4:	f04f 0b00 	mov.w	fp, #0
 80137b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137bc:	f104 021a 	add.w	r2, r4, #26
 80137c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137c2:	9305      	str	r3, [sp, #20]
 80137c4:	eba3 0309 	sub.w	r3, r3, r9
 80137c8:	455b      	cmp	r3, fp
 80137ca:	dc33      	bgt.n	8013834 <_printf_float+0x384>
 80137cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137d0:	429a      	cmp	r2, r3
 80137d2:	db3b      	blt.n	801384c <_printf_float+0x39c>
 80137d4:	6823      	ldr	r3, [r4, #0]
 80137d6:	07da      	lsls	r2, r3, #31
 80137d8:	d438      	bmi.n	801384c <_printf_float+0x39c>
 80137da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137dc:	9b05      	ldr	r3, [sp, #20]
 80137de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137e0:	1ad3      	subs	r3, r2, r3
 80137e2:	eba2 0901 	sub.w	r9, r2, r1
 80137e6:	4599      	cmp	r9, r3
 80137e8:	bfa8      	it	ge
 80137ea:	4699      	movge	r9, r3
 80137ec:	f1b9 0f00 	cmp.w	r9, #0
 80137f0:	dc35      	bgt.n	801385e <_printf_float+0x3ae>
 80137f2:	f04f 0800 	mov.w	r8, #0
 80137f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137fa:	f104 0a1a 	add.w	sl, r4, #26
 80137fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013802:	1a9b      	subs	r3, r3, r2
 8013804:	eba3 0309 	sub.w	r3, r3, r9
 8013808:	4543      	cmp	r3, r8
 801380a:	f77f af79 	ble.w	8013700 <_printf_float+0x250>
 801380e:	2301      	movs	r3, #1
 8013810:	4652      	mov	r2, sl
 8013812:	4631      	mov	r1, r6
 8013814:	4628      	mov	r0, r5
 8013816:	47b8      	blx	r7
 8013818:	3001      	adds	r0, #1
 801381a:	f43f aeaa 	beq.w	8013572 <_printf_float+0xc2>
 801381e:	f108 0801 	add.w	r8, r8, #1
 8013822:	e7ec      	b.n	80137fe <_printf_float+0x34e>
 8013824:	4613      	mov	r3, r2
 8013826:	4631      	mov	r1, r6
 8013828:	4642      	mov	r2, r8
 801382a:	4628      	mov	r0, r5
 801382c:	47b8      	blx	r7
 801382e:	3001      	adds	r0, #1
 8013830:	d1c0      	bne.n	80137b4 <_printf_float+0x304>
 8013832:	e69e      	b.n	8013572 <_printf_float+0xc2>
 8013834:	2301      	movs	r3, #1
 8013836:	4631      	mov	r1, r6
 8013838:	4628      	mov	r0, r5
 801383a:	9205      	str	r2, [sp, #20]
 801383c:	47b8      	blx	r7
 801383e:	3001      	adds	r0, #1
 8013840:	f43f ae97 	beq.w	8013572 <_printf_float+0xc2>
 8013844:	9a05      	ldr	r2, [sp, #20]
 8013846:	f10b 0b01 	add.w	fp, fp, #1
 801384a:	e7b9      	b.n	80137c0 <_printf_float+0x310>
 801384c:	ee18 3a10 	vmov	r3, s16
 8013850:	4652      	mov	r2, sl
 8013852:	4631      	mov	r1, r6
 8013854:	4628      	mov	r0, r5
 8013856:	47b8      	blx	r7
 8013858:	3001      	adds	r0, #1
 801385a:	d1be      	bne.n	80137da <_printf_float+0x32a>
 801385c:	e689      	b.n	8013572 <_printf_float+0xc2>
 801385e:	9a05      	ldr	r2, [sp, #20]
 8013860:	464b      	mov	r3, r9
 8013862:	4442      	add	r2, r8
 8013864:	4631      	mov	r1, r6
 8013866:	4628      	mov	r0, r5
 8013868:	47b8      	blx	r7
 801386a:	3001      	adds	r0, #1
 801386c:	d1c1      	bne.n	80137f2 <_printf_float+0x342>
 801386e:	e680      	b.n	8013572 <_printf_float+0xc2>
 8013870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013872:	2a01      	cmp	r2, #1
 8013874:	dc01      	bgt.n	801387a <_printf_float+0x3ca>
 8013876:	07db      	lsls	r3, r3, #31
 8013878:	d538      	bpl.n	80138ec <_printf_float+0x43c>
 801387a:	2301      	movs	r3, #1
 801387c:	4642      	mov	r2, r8
 801387e:	4631      	mov	r1, r6
 8013880:	4628      	mov	r0, r5
 8013882:	47b8      	blx	r7
 8013884:	3001      	adds	r0, #1
 8013886:	f43f ae74 	beq.w	8013572 <_printf_float+0xc2>
 801388a:	ee18 3a10 	vmov	r3, s16
 801388e:	4652      	mov	r2, sl
 8013890:	4631      	mov	r1, r6
 8013892:	4628      	mov	r0, r5
 8013894:	47b8      	blx	r7
 8013896:	3001      	adds	r0, #1
 8013898:	f43f ae6b 	beq.w	8013572 <_printf_float+0xc2>
 801389c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80138a0:	2200      	movs	r2, #0
 80138a2:	2300      	movs	r3, #0
 80138a4:	f7ed f930 	bl	8000b08 <__aeabi_dcmpeq>
 80138a8:	b9d8      	cbnz	r0, 80138e2 <_printf_float+0x432>
 80138aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138ac:	f108 0201 	add.w	r2, r8, #1
 80138b0:	3b01      	subs	r3, #1
 80138b2:	4631      	mov	r1, r6
 80138b4:	4628      	mov	r0, r5
 80138b6:	47b8      	blx	r7
 80138b8:	3001      	adds	r0, #1
 80138ba:	d10e      	bne.n	80138da <_printf_float+0x42a>
 80138bc:	e659      	b.n	8013572 <_printf_float+0xc2>
 80138be:	2301      	movs	r3, #1
 80138c0:	4652      	mov	r2, sl
 80138c2:	4631      	mov	r1, r6
 80138c4:	4628      	mov	r0, r5
 80138c6:	47b8      	blx	r7
 80138c8:	3001      	adds	r0, #1
 80138ca:	f43f ae52 	beq.w	8013572 <_printf_float+0xc2>
 80138ce:	f108 0801 	add.w	r8, r8, #1
 80138d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138d4:	3b01      	subs	r3, #1
 80138d6:	4543      	cmp	r3, r8
 80138d8:	dcf1      	bgt.n	80138be <_printf_float+0x40e>
 80138da:	464b      	mov	r3, r9
 80138dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80138e0:	e6dc      	b.n	801369c <_printf_float+0x1ec>
 80138e2:	f04f 0800 	mov.w	r8, #0
 80138e6:	f104 0a1a 	add.w	sl, r4, #26
 80138ea:	e7f2      	b.n	80138d2 <_printf_float+0x422>
 80138ec:	2301      	movs	r3, #1
 80138ee:	4642      	mov	r2, r8
 80138f0:	e7df      	b.n	80138b2 <_printf_float+0x402>
 80138f2:	2301      	movs	r3, #1
 80138f4:	464a      	mov	r2, r9
 80138f6:	4631      	mov	r1, r6
 80138f8:	4628      	mov	r0, r5
 80138fa:	47b8      	blx	r7
 80138fc:	3001      	adds	r0, #1
 80138fe:	f43f ae38 	beq.w	8013572 <_printf_float+0xc2>
 8013902:	f108 0801 	add.w	r8, r8, #1
 8013906:	68e3      	ldr	r3, [r4, #12]
 8013908:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801390a:	1a5b      	subs	r3, r3, r1
 801390c:	4543      	cmp	r3, r8
 801390e:	dcf0      	bgt.n	80138f2 <_printf_float+0x442>
 8013910:	e6fa      	b.n	8013708 <_printf_float+0x258>
 8013912:	f04f 0800 	mov.w	r8, #0
 8013916:	f104 0919 	add.w	r9, r4, #25
 801391a:	e7f4      	b.n	8013906 <_printf_float+0x456>

0801391c <_printf_common>:
 801391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013920:	4616      	mov	r6, r2
 8013922:	4699      	mov	r9, r3
 8013924:	688a      	ldr	r2, [r1, #8]
 8013926:	690b      	ldr	r3, [r1, #16]
 8013928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801392c:	4293      	cmp	r3, r2
 801392e:	bfb8      	it	lt
 8013930:	4613      	movlt	r3, r2
 8013932:	6033      	str	r3, [r6, #0]
 8013934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013938:	4607      	mov	r7, r0
 801393a:	460c      	mov	r4, r1
 801393c:	b10a      	cbz	r2, 8013942 <_printf_common+0x26>
 801393e:	3301      	adds	r3, #1
 8013940:	6033      	str	r3, [r6, #0]
 8013942:	6823      	ldr	r3, [r4, #0]
 8013944:	0699      	lsls	r1, r3, #26
 8013946:	bf42      	ittt	mi
 8013948:	6833      	ldrmi	r3, [r6, #0]
 801394a:	3302      	addmi	r3, #2
 801394c:	6033      	strmi	r3, [r6, #0]
 801394e:	6825      	ldr	r5, [r4, #0]
 8013950:	f015 0506 	ands.w	r5, r5, #6
 8013954:	d106      	bne.n	8013964 <_printf_common+0x48>
 8013956:	f104 0a19 	add.w	sl, r4, #25
 801395a:	68e3      	ldr	r3, [r4, #12]
 801395c:	6832      	ldr	r2, [r6, #0]
 801395e:	1a9b      	subs	r3, r3, r2
 8013960:	42ab      	cmp	r3, r5
 8013962:	dc26      	bgt.n	80139b2 <_printf_common+0x96>
 8013964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013968:	1e13      	subs	r3, r2, #0
 801396a:	6822      	ldr	r2, [r4, #0]
 801396c:	bf18      	it	ne
 801396e:	2301      	movne	r3, #1
 8013970:	0692      	lsls	r2, r2, #26
 8013972:	d42b      	bmi.n	80139cc <_printf_common+0xb0>
 8013974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013978:	4649      	mov	r1, r9
 801397a:	4638      	mov	r0, r7
 801397c:	47c0      	blx	r8
 801397e:	3001      	adds	r0, #1
 8013980:	d01e      	beq.n	80139c0 <_printf_common+0xa4>
 8013982:	6823      	ldr	r3, [r4, #0]
 8013984:	68e5      	ldr	r5, [r4, #12]
 8013986:	6832      	ldr	r2, [r6, #0]
 8013988:	f003 0306 	and.w	r3, r3, #6
 801398c:	2b04      	cmp	r3, #4
 801398e:	bf08      	it	eq
 8013990:	1aad      	subeq	r5, r5, r2
 8013992:	68a3      	ldr	r3, [r4, #8]
 8013994:	6922      	ldr	r2, [r4, #16]
 8013996:	bf0c      	ite	eq
 8013998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801399c:	2500      	movne	r5, #0
 801399e:	4293      	cmp	r3, r2
 80139a0:	bfc4      	itt	gt
 80139a2:	1a9b      	subgt	r3, r3, r2
 80139a4:	18ed      	addgt	r5, r5, r3
 80139a6:	2600      	movs	r6, #0
 80139a8:	341a      	adds	r4, #26
 80139aa:	42b5      	cmp	r5, r6
 80139ac:	d11a      	bne.n	80139e4 <_printf_common+0xc8>
 80139ae:	2000      	movs	r0, #0
 80139b0:	e008      	b.n	80139c4 <_printf_common+0xa8>
 80139b2:	2301      	movs	r3, #1
 80139b4:	4652      	mov	r2, sl
 80139b6:	4649      	mov	r1, r9
 80139b8:	4638      	mov	r0, r7
 80139ba:	47c0      	blx	r8
 80139bc:	3001      	adds	r0, #1
 80139be:	d103      	bne.n	80139c8 <_printf_common+0xac>
 80139c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139c8:	3501      	adds	r5, #1
 80139ca:	e7c6      	b.n	801395a <_printf_common+0x3e>
 80139cc:	18e1      	adds	r1, r4, r3
 80139ce:	1c5a      	adds	r2, r3, #1
 80139d0:	2030      	movs	r0, #48	; 0x30
 80139d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139d6:	4422      	add	r2, r4
 80139d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139e0:	3302      	adds	r3, #2
 80139e2:	e7c7      	b.n	8013974 <_printf_common+0x58>
 80139e4:	2301      	movs	r3, #1
 80139e6:	4622      	mov	r2, r4
 80139e8:	4649      	mov	r1, r9
 80139ea:	4638      	mov	r0, r7
 80139ec:	47c0      	blx	r8
 80139ee:	3001      	adds	r0, #1
 80139f0:	d0e6      	beq.n	80139c0 <_printf_common+0xa4>
 80139f2:	3601      	adds	r6, #1
 80139f4:	e7d9      	b.n	80139aa <_printf_common+0x8e>
	...

080139f8 <_printf_i>:
 80139f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139fc:	460c      	mov	r4, r1
 80139fe:	4691      	mov	r9, r2
 8013a00:	7e27      	ldrb	r7, [r4, #24]
 8013a02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a04:	2f78      	cmp	r7, #120	; 0x78
 8013a06:	4680      	mov	r8, r0
 8013a08:	469a      	mov	sl, r3
 8013a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a0e:	d807      	bhi.n	8013a20 <_printf_i+0x28>
 8013a10:	2f62      	cmp	r7, #98	; 0x62
 8013a12:	d80a      	bhi.n	8013a2a <_printf_i+0x32>
 8013a14:	2f00      	cmp	r7, #0
 8013a16:	f000 80d8 	beq.w	8013bca <_printf_i+0x1d2>
 8013a1a:	2f58      	cmp	r7, #88	; 0x58
 8013a1c:	f000 80a3 	beq.w	8013b66 <_printf_i+0x16e>
 8013a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a28:	e03a      	b.n	8013aa0 <_printf_i+0xa8>
 8013a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a2e:	2b15      	cmp	r3, #21
 8013a30:	d8f6      	bhi.n	8013a20 <_printf_i+0x28>
 8013a32:	a001      	add	r0, pc, #4	; (adr r0, 8013a38 <_printf_i+0x40>)
 8013a34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013a38:	08013a91 	.word	0x08013a91
 8013a3c:	08013aa5 	.word	0x08013aa5
 8013a40:	08013a21 	.word	0x08013a21
 8013a44:	08013a21 	.word	0x08013a21
 8013a48:	08013a21 	.word	0x08013a21
 8013a4c:	08013a21 	.word	0x08013a21
 8013a50:	08013aa5 	.word	0x08013aa5
 8013a54:	08013a21 	.word	0x08013a21
 8013a58:	08013a21 	.word	0x08013a21
 8013a5c:	08013a21 	.word	0x08013a21
 8013a60:	08013a21 	.word	0x08013a21
 8013a64:	08013bb1 	.word	0x08013bb1
 8013a68:	08013ad5 	.word	0x08013ad5
 8013a6c:	08013b93 	.word	0x08013b93
 8013a70:	08013a21 	.word	0x08013a21
 8013a74:	08013a21 	.word	0x08013a21
 8013a78:	08013bd3 	.word	0x08013bd3
 8013a7c:	08013a21 	.word	0x08013a21
 8013a80:	08013ad5 	.word	0x08013ad5
 8013a84:	08013a21 	.word	0x08013a21
 8013a88:	08013a21 	.word	0x08013a21
 8013a8c:	08013b9b 	.word	0x08013b9b
 8013a90:	680b      	ldr	r3, [r1, #0]
 8013a92:	1d1a      	adds	r2, r3, #4
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	600a      	str	r2, [r1, #0]
 8013a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	e0a3      	b.n	8013bec <_printf_i+0x1f4>
 8013aa4:	6825      	ldr	r5, [r4, #0]
 8013aa6:	6808      	ldr	r0, [r1, #0]
 8013aa8:	062e      	lsls	r6, r5, #24
 8013aaa:	f100 0304 	add.w	r3, r0, #4
 8013aae:	d50a      	bpl.n	8013ac6 <_printf_i+0xce>
 8013ab0:	6805      	ldr	r5, [r0, #0]
 8013ab2:	600b      	str	r3, [r1, #0]
 8013ab4:	2d00      	cmp	r5, #0
 8013ab6:	da03      	bge.n	8013ac0 <_printf_i+0xc8>
 8013ab8:	232d      	movs	r3, #45	; 0x2d
 8013aba:	426d      	negs	r5, r5
 8013abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ac0:	485e      	ldr	r0, [pc, #376]	; (8013c3c <_printf_i+0x244>)
 8013ac2:	230a      	movs	r3, #10
 8013ac4:	e019      	b.n	8013afa <_printf_i+0x102>
 8013ac6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013aca:	6805      	ldr	r5, [r0, #0]
 8013acc:	600b      	str	r3, [r1, #0]
 8013ace:	bf18      	it	ne
 8013ad0:	b22d      	sxthne	r5, r5
 8013ad2:	e7ef      	b.n	8013ab4 <_printf_i+0xbc>
 8013ad4:	680b      	ldr	r3, [r1, #0]
 8013ad6:	6825      	ldr	r5, [r4, #0]
 8013ad8:	1d18      	adds	r0, r3, #4
 8013ada:	6008      	str	r0, [r1, #0]
 8013adc:	0628      	lsls	r0, r5, #24
 8013ade:	d501      	bpl.n	8013ae4 <_printf_i+0xec>
 8013ae0:	681d      	ldr	r5, [r3, #0]
 8013ae2:	e002      	b.n	8013aea <_printf_i+0xf2>
 8013ae4:	0669      	lsls	r1, r5, #25
 8013ae6:	d5fb      	bpl.n	8013ae0 <_printf_i+0xe8>
 8013ae8:	881d      	ldrh	r5, [r3, #0]
 8013aea:	4854      	ldr	r0, [pc, #336]	; (8013c3c <_printf_i+0x244>)
 8013aec:	2f6f      	cmp	r7, #111	; 0x6f
 8013aee:	bf0c      	ite	eq
 8013af0:	2308      	moveq	r3, #8
 8013af2:	230a      	movne	r3, #10
 8013af4:	2100      	movs	r1, #0
 8013af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013afa:	6866      	ldr	r6, [r4, #4]
 8013afc:	60a6      	str	r6, [r4, #8]
 8013afe:	2e00      	cmp	r6, #0
 8013b00:	bfa2      	ittt	ge
 8013b02:	6821      	ldrge	r1, [r4, #0]
 8013b04:	f021 0104 	bicge.w	r1, r1, #4
 8013b08:	6021      	strge	r1, [r4, #0]
 8013b0a:	b90d      	cbnz	r5, 8013b10 <_printf_i+0x118>
 8013b0c:	2e00      	cmp	r6, #0
 8013b0e:	d04d      	beq.n	8013bac <_printf_i+0x1b4>
 8013b10:	4616      	mov	r6, r2
 8013b12:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b16:	fb03 5711 	mls	r7, r3, r1, r5
 8013b1a:	5dc7      	ldrb	r7, [r0, r7]
 8013b1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b20:	462f      	mov	r7, r5
 8013b22:	42bb      	cmp	r3, r7
 8013b24:	460d      	mov	r5, r1
 8013b26:	d9f4      	bls.n	8013b12 <_printf_i+0x11a>
 8013b28:	2b08      	cmp	r3, #8
 8013b2a:	d10b      	bne.n	8013b44 <_printf_i+0x14c>
 8013b2c:	6823      	ldr	r3, [r4, #0]
 8013b2e:	07df      	lsls	r7, r3, #31
 8013b30:	d508      	bpl.n	8013b44 <_printf_i+0x14c>
 8013b32:	6923      	ldr	r3, [r4, #16]
 8013b34:	6861      	ldr	r1, [r4, #4]
 8013b36:	4299      	cmp	r1, r3
 8013b38:	bfde      	ittt	le
 8013b3a:	2330      	movle	r3, #48	; 0x30
 8013b3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8013b44:	1b92      	subs	r2, r2, r6
 8013b46:	6122      	str	r2, [r4, #16]
 8013b48:	f8cd a000 	str.w	sl, [sp]
 8013b4c:	464b      	mov	r3, r9
 8013b4e:	aa03      	add	r2, sp, #12
 8013b50:	4621      	mov	r1, r4
 8013b52:	4640      	mov	r0, r8
 8013b54:	f7ff fee2 	bl	801391c <_printf_common>
 8013b58:	3001      	adds	r0, #1
 8013b5a:	d14c      	bne.n	8013bf6 <_printf_i+0x1fe>
 8013b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b60:	b004      	add	sp, #16
 8013b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b66:	4835      	ldr	r0, [pc, #212]	; (8013c3c <_printf_i+0x244>)
 8013b68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b6c:	6823      	ldr	r3, [r4, #0]
 8013b6e:	680e      	ldr	r6, [r1, #0]
 8013b70:	061f      	lsls	r7, r3, #24
 8013b72:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b76:	600e      	str	r6, [r1, #0]
 8013b78:	d514      	bpl.n	8013ba4 <_printf_i+0x1ac>
 8013b7a:	07d9      	lsls	r1, r3, #31
 8013b7c:	bf44      	itt	mi
 8013b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8013b82:	6023      	strmi	r3, [r4, #0]
 8013b84:	b91d      	cbnz	r5, 8013b8e <_printf_i+0x196>
 8013b86:	6823      	ldr	r3, [r4, #0]
 8013b88:	f023 0320 	bic.w	r3, r3, #32
 8013b8c:	6023      	str	r3, [r4, #0]
 8013b8e:	2310      	movs	r3, #16
 8013b90:	e7b0      	b.n	8013af4 <_printf_i+0xfc>
 8013b92:	6823      	ldr	r3, [r4, #0]
 8013b94:	f043 0320 	orr.w	r3, r3, #32
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	2378      	movs	r3, #120	; 0x78
 8013b9c:	4828      	ldr	r0, [pc, #160]	; (8013c40 <_printf_i+0x248>)
 8013b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013ba2:	e7e3      	b.n	8013b6c <_printf_i+0x174>
 8013ba4:	065e      	lsls	r6, r3, #25
 8013ba6:	bf48      	it	mi
 8013ba8:	b2ad      	uxthmi	r5, r5
 8013baa:	e7e6      	b.n	8013b7a <_printf_i+0x182>
 8013bac:	4616      	mov	r6, r2
 8013bae:	e7bb      	b.n	8013b28 <_printf_i+0x130>
 8013bb0:	680b      	ldr	r3, [r1, #0]
 8013bb2:	6826      	ldr	r6, [r4, #0]
 8013bb4:	6960      	ldr	r0, [r4, #20]
 8013bb6:	1d1d      	adds	r5, r3, #4
 8013bb8:	600d      	str	r5, [r1, #0]
 8013bba:	0635      	lsls	r5, r6, #24
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	d501      	bpl.n	8013bc4 <_printf_i+0x1cc>
 8013bc0:	6018      	str	r0, [r3, #0]
 8013bc2:	e002      	b.n	8013bca <_printf_i+0x1d2>
 8013bc4:	0671      	lsls	r1, r6, #25
 8013bc6:	d5fb      	bpl.n	8013bc0 <_printf_i+0x1c8>
 8013bc8:	8018      	strh	r0, [r3, #0]
 8013bca:	2300      	movs	r3, #0
 8013bcc:	6123      	str	r3, [r4, #16]
 8013bce:	4616      	mov	r6, r2
 8013bd0:	e7ba      	b.n	8013b48 <_printf_i+0x150>
 8013bd2:	680b      	ldr	r3, [r1, #0]
 8013bd4:	1d1a      	adds	r2, r3, #4
 8013bd6:	600a      	str	r2, [r1, #0]
 8013bd8:	681e      	ldr	r6, [r3, #0]
 8013bda:	6862      	ldr	r2, [r4, #4]
 8013bdc:	2100      	movs	r1, #0
 8013bde:	4630      	mov	r0, r6
 8013be0:	f7ec fb1e 	bl	8000220 <memchr>
 8013be4:	b108      	cbz	r0, 8013bea <_printf_i+0x1f2>
 8013be6:	1b80      	subs	r0, r0, r6
 8013be8:	6060      	str	r0, [r4, #4]
 8013bea:	6863      	ldr	r3, [r4, #4]
 8013bec:	6123      	str	r3, [r4, #16]
 8013bee:	2300      	movs	r3, #0
 8013bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bf4:	e7a8      	b.n	8013b48 <_printf_i+0x150>
 8013bf6:	6923      	ldr	r3, [r4, #16]
 8013bf8:	4632      	mov	r2, r6
 8013bfa:	4649      	mov	r1, r9
 8013bfc:	4640      	mov	r0, r8
 8013bfe:	47d0      	blx	sl
 8013c00:	3001      	adds	r0, #1
 8013c02:	d0ab      	beq.n	8013b5c <_printf_i+0x164>
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	079b      	lsls	r3, r3, #30
 8013c08:	d413      	bmi.n	8013c32 <_printf_i+0x23a>
 8013c0a:	68e0      	ldr	r0, [r4, #12]
 8013c0c:	9b03      	ldr	r3, [sp, #12]
 8013c0e:	4298      	cmp	r0, r3
 8013c10:	bfb8      	it	lt
 8013c12:	4618      	movlt	r0, r3
 8013c14:	e7a4      	b.n	8013b60 <_printf_i+0x168>
 8013c16:	2301      	movs	r3, #1
 8013c18:	4632      	mov	r2, r6
 8013c1a:	4649      	mov	r1, r9
 8013c1c:	4640      	mov	r0, r8
 8013c1e:	47d0      	blx	sl
 8013c20:	3001      	adds	r0, #1
 8013c22:	d09b      	beq.n	8013b5c <_printf_i+0x164>
 8013c24:	3501      	adds	r5, #1
 8013c26:	68e3      	ldr	r3, [r4, #12]
 8013c28:	9903      	ldr	r1, [sp, #12]
 8013c2a:	1a5b      	subs	r3, r3, r1
 8013c2c:	42ab      	cmp	r3, r5
 8013c2e:	dcf2      	bgt.n	8013c16 <_printf_i+0x21e>
 8013c30:	e7eb      	b.n	8013c0a <_printf_i+0x212>
 8013c32:	2500      	movs	r5, #0
 8013c34:	f104 0619 	add.w	r6, r4, #25
 8013c38:	e7f5      	b.n	8013c26 <_printf_i+0x22e>
 8013c3a:	bf00      	nop
 8013c3c:	0801c462 	.word	0x0801c462
 8013c40:	0801c473 	.word	0x0801c473

08013c44 <_scanf_float>:
 8013c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c48:	b087      	sub	sp, #28
 8013c4a:	4617      	mov	r7, r2
 8013c4c:	9303      	str	r3, [sp, #12]
 8013c4e:	688b      	ldr	r3, [r1, #8]
 8013c50:	1e5a      	subs	r2, r3, #1
 8013c52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c56:	bf83      	ittte	hi
 8013c58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c5c:	195b      	addhi	r3, r3, r5
 8013c5e:	9302      	strhi	r3, [sp, #8]
 8013c60:	2300      	movls	r3, #0
 8013c62:	bf86      	itte	hi
 8013c64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c68:	608b      	strhi	r3, [r1, #8]
 8013c6a:	9302      	strls	r3, [sp, #8]
 8013c6c:	680b      	ldr	r3, [r1, #0]
 8013c6e:	468b      	mov	fp, r1
 8013c70:	2500      	movs	r5, #0
 8013c72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013c76:	f84b 3b1c 	str.w	r3, [fp], #28
 8013c7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013c7e:	4680      	mov	r8, r0
 8013c80:	460c      	mov	r4, r1
 8013c82:	465e      	mov	r6, fp
 8013c84:	46aa      	mov	sl, r5
 8013c86:	46a9      	mov	r9, r5
 8013c88:	9501      	str	r5, [sp, #4]
 8013c8a:	68a2      	ldr	r2, [r4, #8]
 8013c8c:	b152      	cbz	r2, 8013ca4 <_scanf_float+0x60>
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	2b4e      	cmp	r3, #78	; 0x4e
 8013c94:	d864      	bhi.n	8013d60 <_scanf_float+0x11c>
 8013c96:	2b40      	cmp	r3, #64	; 0x40
 8013c98:	d83c      	bhi.n	8013d14 <_scanf_float+0xd0>
 8013c9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013c9e:	b2c8      	uxtb	r0, r1
 8013ca0:	280e      	cmp	r0, #14
 8013ca2:	d93a      	bls.n	8013d1a <_scanf_float+0xd6>
 8013ca4:	f1b9 0f00 	cmp.w	r9, #0
 8013ca8:	d003      	beq.n	8013cb2 <_scanf_float+0x6e>
 8013caa:	6823      	ldr	r3, [r4, #0]
 8013cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013cb0:	6023      	str	r3, [r4, #0]
 8013cb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013cb6:	f1ba 0f01 	cmp.w	sl, #1
 8013cba:	f200 8113 	bhi.w	8013ee4 <_scanf_float+0x2a0>
 8013cbe:	455e      	cmp	r6, fp
 8013cc0:	f200 8105 	bhi.w	8013ece <_scanf_float+0x28a>
 8013cc4:	2501      	movs	r5, #1
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	b007      	add	sp, #28
 8013cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013cd2:	2a0d      	cmp	r2, #13
 8013cd4:	d8e6      	bhi.n	8013ca4 <_scanf_float+0x60>
 8013cd6:	a101      	add	r1, pc, #4	; (adr r1, 8013cdc <_scanf_float+0x98>)
 8013cd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013cdc:	08013e1b 	.word	0x08013e1b
 8013ce0:	08013ca5 	.word	0x08013ca5
 8013ce4:	08013ca5 	.word	0x08013ca5
 8013ce8:	08013ca5 	.word	0x08013ca5
 8013cec:	08013e7b 	.word	0x08013e7b
 8013cf0:	08013e53 	.word	0x08013e53
 8013cf4:	08013ca5 	.word	0x08013ca5
 8013cf8:	08013ca5 	.word	0x08013ca5
 8013cfc:	08013e29 	.word	0x08013e29
 8013d00:	08013ca5 	.word	0x08013ca5
 8013d04:	08013ca5 	.word	0x08013ca5
 8013d08:	08013ca5 	.word	0x08013ca5
 8013d0c:	08013ca5 	.word	0x08013ca5
 8013d10:	08013de1 	.word	0x08013de1
 8013d14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013d18:	e7db      	b.n	8013cd2 <_scanf_float+0x8e>
 8013d1a:	290e      	cmp	r1, #14
 8013d1c:	d8c2      	bhi.n	8013ca4 <_scanf_float+0x60>
 8013d1e:	a001      	add	r0, pc, #4	; (adr r0, 8013d24 <_scanf_float+0xe0>)
 8013d20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013d24:	08013dd3 	.word	0x08013dd3
 8013d28:	08013ca5 	.word	0x08013ca5
 8013d2c:	08013dd3 	.word	0x08013dd3
 8013d30:	08013e67 	.word	0x08013e67
 8013d34:	08013ca5 	.word	0x08013ca5
 8013d38:	08013d81 	.word	0x08013d81
 8013d3c:	08013dbd 	.word	0x08013dbd
 8013d40:	08013dbd 	.word	0x08013dbd
 8013d44:	08013dbd 	.word	0x08013dbd
 8013d48:	08013dbd 	.word	0x08013dbd
 8013d4c:	08013dbd 	.word	0x08013dbd
 8013d50:	08013dbd 	.word	0x08013dbd
 8013d54:	08013dbd 	.word	0x08013dbd
 8013d58:	08013dbd 	.word	0x08013dbd
 8013d5c:	08013dbd 	.word	0x08013dbd
 8013d60:	2b6e      	cmp	r3, #110	; 0x6e
 8013d62:	d809      	bhi.n	8013d78 <_scanf_float+0x134>
 8013d64:	2b60      	cmp	r3, #96	; 0x60
 8013d66:	d8b2      	bhi.n	8013cce <_scanf_float+0x8a>
 8013d68:	2b54      	cmp	r3, #84	; 0x54
 8013d6a:	d077      	beq.n	8013e5c <_scanf_float+0x218>
 8013d6c:	2b59      	cmp	r3, #89	; 0x59
 8013d6e:	d199      	bne.n	8013ca4 <_scanf_float+0x60>
 8013d70:	2d07      	cmp	r5, #7
 8013d72:	d197      	bne.n	8013ca4 <_scanf_float+0x60>
 8013d74:	2508      	movs	r5, #8
 8013d76:	e029      	b.n	8013dcc <_scanf_float+0x188>
 8013d78:	2b74      	cmp	r3, #116	; 0x74
 8013d7a:	d06f      	beq.n	8013e5c <_scanf_float+0x218>
 8013d7c:	2b79      	cmp	r3, #121	; 0x79
 8013d7e:	e7f6      	b.n	8013d6e <_scanf_float+0x12a>
 8013d80:	6821      	ldr	r1, [r4, #0]
 8013d82:	05c8      	lsls	r0, r1, #23
 8013d84:	d51a      	bpl.n	8013dbc <_scanf_float+0x178>
 8013d86:	9b02      	ldr	r3, [sp, #8]
 8013d88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013d8c:	6021      	str	r1, [r4, #0]
 8013d8e:	f109 0901 	add.w	r9, r9, #1
 8013d92:	b11b      	cbz	r3, 8013d9c <_scanf_float+0x158>
 8013d94:	3b01      	subs	r3, #1
 8013d96:	3201      	adds	r2, #1
 8013d98:	9302      	str	r3, [sp, #8]
 8013d9a:	60a2      	str	r2, [r4, #8]
 8013d9c:	68a3      	ldr	r3, [r4, #8]
 8013d9e:	3b01      	subs	r3, #1
 8013da0:	60a3      	str	r3, [r4, #8]
 8013da2:	6923      	ldr	r3, [r4, #16]
 8013da4:	3301      	adds	r3, #1
 8013da6:	6123      	str	r3, [r4, #16]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	3b01      	subs	r3, #1
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	607b      	str	r3, [r7, #4]
 8013db0:	f340 8084 	ble.w	8013ebc <_scanf_float+0x278>
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	3301      	adds	r3, #1
 8013db8:	603b      	str	r3, [r7, #0]
 8013dba:	e766      	b.n	8013c8a <_scanf_float+0x46>
 8013dbc:	eb1a 0f05 	cmn.w	sl, r5
 8013dc0:	f47f af70 	bne.w	8013ca4 <_scanf_float+0x60>
 8013dc4:	6822      	ldr	r2, [r4, #0]
 8013dc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013dca:	6022      	str	r2, [r4, #0]
 8013dcc:	f806 3b01 	strb.w	r3, [r6], #1
 8013dd0:	e7e4      	b.n	8013d9c <_scanf_float+0x158>
 8013dd2:	6822      	ldr	r2, [r4, #0]
 8013dd4:	0610      	lsls	r0, r2, #24
 8013dd6:	f57f af65 	bpl.w	8013ca4 <_scanf_float+0x60>
 8013dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013dde:	e7f4      	b.n	8013dca <_scanf_float+0x186>
 8013de0:	f1ba 0f00 	cmp.w	sl, #0
 8013de4:	d10e      	bne.n	8013e04 <_scanf_float+0x1c0>
 8013de6:	f1b9 0f00 	cmp.w	r9, #0
 8013dea:	d10e      	bne.n	8013e0a <_scanf_float+0x1c6>
 8013dec:	6822      	ldr	r2, [r4, #0]
 8013dee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013df2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013df6:	d108      	bne.n	8013e0a <_scanf_float+0x1c6>
 8013df8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013dfc:	6022      	str	r2, [r4, #0]
 8013dfe:	f04f 0a01 	mov.w	sl, #1
 8013e02:	e7e3      	b.n	8013dcc <_scanf_float+0x188>
 8013e04:	f1ba 0f02 	cmp.w	sl, #2
 8013e08:	d055      	beq.n	8013eb6 <_scanf_float+0x272>
 8013e0a:	2d01      	cmp	r5, #1
 8013e0c:	d002      	beq.n	8013e14 <_scanf_float+0x1d0>
 8013e0e:	2d04      	cmp	r5, #4
 8013e10:	f47f af48 	bne.w	8013ca4 <_scanf_float+0x60>
 8013e14:	3501      	adds	r5, #1
 8013e16:	b2ed      	uxtb	r5, r5
 8013e18:	e7d8      	b.n	8013dcc <_scanf_float+0x188>
 8013e1a:	f1ba 0f01 	cmp.w	sl, #1
 8013e1e:	f47f af41 	bne.w	8013ca4 <_scanf_float+0x60>
 8013e22:	f04f 0a02 	mov.w	sl, #2
 8013e26:	e7d1      	b.n	8013dcc <_scanf_float+0x188>
 8013e28:	b97d      	cbnz	r5, 8013e4a <_scanf_float+0x206>
 8013e2a:	f1b9 0f00 	cmp.w	r9, #0
 8013e2e:	f47f af3c 	bne.w	8013caa <_scanf_float+0x66>
 8013e32:	6822      	ldr	r2, [r4, #0]
 8013e34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013e38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013e3c:	f47f af39 	bne.w	8013cb2 <_scanf_float+0x6e>
 8013e40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e44:	6022      	str	r2, [r4, #0]
 8013e46:	2501      	movs	r5, #1
 8013e48:	e7c0      	b.n	8013dcc <_scanf_float+0x188>
 8013e4a:	2d03      	cmp	r5, #3
 8013e4c:	d0e2      	beq.n	8013e14 <_scanf_float+0x1d0>
 8013e4e:	2d05      	cmp	r5, #5
 8013e50:	e7de      	b.n	8013e10 <_scanf_float+0x1cc>
 8013e52:	2d02      	cmp	r5, #2
 8013e54:	f47f af26 	bne.w	8013ca4 <_scanf_float+0x60>
 8013e58:	2503      	movs	r5, #3
 8013e5a:	e7b7      	b.n	8013dcc <_scanf_float+0x188>
 8013e5c:	2d06      	cmp	r5, #6
 8013e5e:	f47f af21 	bne.w	8013ca4 <_scanf_float+0x60>
 8013e62:	2507      	movs	r5, #7
 8013e64:	e7b2      	b.n	8013dcc <_scanf_float+0x188>
 8013e66:	6822      	ldr	r2, [r4, #0]
 8013e68:	0591      	lsls	r1, r2, #22
 8013e6a:	f57f af1b 	bpl.w	8013ca4 <_scanf_float+0x60>
 8013e6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013e72:	6022      	str	r2, [r4, #0]
 8013e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e78:	e7a8      	b.n	8013dcc <_scanf_float+0x188>
 8013e7a:	6822      	ldr	r2, [r4, #0]
 8013e7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013e80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013e84:	d006      	beq.n	8013e94 <_scanf_float+0x250>
 8013e86:	0550      	lsls	r0, r2, #21
 8013e88:	f57f af0c 	bpl.w	8013ca4 <_scanf_float+0x60>
 8013e8c:	f1b9 0f00 	cmp.w	r9, #0
 8013e90:	f43f af0f 	beq.w	8013cb2 <_scanf_float+0x6e>
 8013e94:	0591      	lsls	r1, r2, #22
 8013e96:	bf58      	it	pl
 8013e98:	9901      	ldrpl	r1, [sp, #4]
 8013e9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e9e:	bf58      	it	pl
 8013ea0:	eba9 0101 	subpl.w	r1, r9, r1
 8013ea4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013ea8:	bf58      	it	pl
 8013eaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013eae:	6022      	str	r2, [r4, #0]
 8013eb0:	f04f 0900 	mov.w	r9, #0
 8013eb4:	e78a      	b.n	8013dcc <_scanf_float+0x188>
 8013eb6:	f04f 0a03 	mov.w	sl, #3
 8013eba:	e787      	b.n	8013dcc <_scanf_float+0x188>
 8013ebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	4640      	mov	r0, r8
 8013ec4:	4798      	blx	r3
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	f43f aedf 	beq.w	8013c8a <_scanf_float+0x46>
 8013ecc:	e6ea      	b.n	8013ca4 <_scanf_float+0x60>
 8013ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ed6:	463a      	mov	r2, r7
 8013ed8:	4640      	mov	r0, r8
 8013eda:	4798      	blx	r3
 8013edc:	6923      	ldr	r3, [r4, #16]
 8013ede:	3b01      	subs	r3, #1
 8013ee0:	6123      	str	r3, [r4, #16]
 8013ee2:	e6ec      	b.n	8013cbe <_scanf_float+0x7a>
 8013ee4:	1e6b      	subs	r3, r5, #1
 8013ee6:	2b06      	cmp	r3, #6
 8013ee8:	d825      	bhi.n	8013f36 <_scanf_float+0x2f2>
 8013eea:	2d02      	cmp	r5, #2
 8013eec:	d836      	bhi.n	8013f5c <_scanf_float+0x318>
 8013eee:	455e      	cmp	r6, fp
 8013ef0:	f67f aee8 	bls.w	8013cc4 <_scanf_float+0x80>
 8013ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ef8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013efc:	463a      	mov	r2, r7
 8013efe:	4640      	mov	r0, r8
 8013f00:	4798      	blx	r3
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	3b01      	subs	r3, #1
 8013f06:	6123      	str	r3, [r4, #16]
 8013f08:	e7f1      	b.n	8013eee <_scanf_float+0x2aa>
 8013f0a:	9802      	ldr	r0, [sp, #8]
 8013f0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013f14:	9002      	str	r0, [sp, #8]
 8013f16:	463a      	mov	r2, r7
 8013f18:	4640      	mov	r0, r8
 8013f1a:	4798      	blx	r3
 8013f1c:	6923      	ldr	r3, [r4, #16]
 8013f1e:	3b01      	subs	r3, #1
 8013f20:	6123      	str	r3, [r4, #16]
 8013f22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013f26:	fa5f fa8a 	uxtb.w	sl, sl
 8013f2a:	f1ba 0f02 	cmp.w	sl, #2
 8013f2e:	d1ec      	bne.n	8013f0a <_scanf_float+0x2c6>
 8013f30:	3d03      	subs	r5, #3
 8013f32:	b2ed      	uxtb	r5, r5
 8013f34:	1b76      	subs	r6, r6, r5
 8013f36:	6823      	ldr	r3, [r4, #0]
 8013f38:	05da      	lsls	r2, r3, #23
 8013f3a:	d52f      	bpl.n	8013f9c <_scanf_float+0x358>
 8013f3c:	055b      	lsls	r3, r3, #21
 8013f3e:	d510      	bpl.n	8013f62 <_scanf_float+0x31e>
 8013f40:	455e      	cmp	r6, fp
 8013f42:	f67f aebf 	bls.w	8013cc4 <_scanf_float+0x80>
 8013f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f4e:	463a      	mov	r2, r7
 8013f50:	4640      	mov	r0, r8
 8013f52:	4798      	blx	r3
 8013f54:	6923      	ldr	r3, [r4, #16]
 8013f56:	3b01      	subs	r3, #1
 8013f58:	6123      	str	r3, [r4, #16]
 8013f5a:	e7f1      	b.n	8013f40 <_scanf_float+0x2fc>
 8013f5c:	46aa      	mov	sl, r5
 8013f5e:	9602      	str	r6, [sp, #8]
 8013f60:	e7df      	b.n	8013f22 <_scanf_float+0x2de>
 8013f62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013f66:	6923      	ldr	r3, [r4, #16]
 8013f68:	2965      	cmp	r1, #101	; 0x65
 8013f6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013f6e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8013f72:	6123      	str	r3, [r4, #16]
 8013f74:	d00c      	beq.n	8013f90 <_scanf_float+0x34c>
 8013f76:	2945      	cmp	r1, #69	; 0x45
 8013f78:	d00a      	beq.n	8013f90 <_scanf_float+0x34c>
 8013f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f7e:	463a      	mov	r2, r7
 8013f80:	4640      	mov	r0, r8
 8013f82:	4798      	blx	r3
 8013f84:	6923      	ldr	r3, [r4, #16]
 8013f86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013f8a:	3b01      	subs	r3, #1
 8013f8c:	1eb5      	subs	r5, r6, #2
 8013f8e:	6123      	str	r3, [r4, #16]
 8013f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f94:	463a      	mov	r2, r7
 8013f96:	4640      	mov	r0, r8
 8013f98:	4798      	blx	r3
 8013f9a:	462e      	mov	r6, r5
 8013f9c:	6825      	ldr	r5, [r4, #0]
 8013f9e:	f015 0510 	ands.w	r5, r5, #16
 8013fa2:	d158      	bne.n	8014056 <_scanf_float+0x412>
 8013fa4:	7035      	strb	r5, [r6, #0]
 8013fa6:	6823      	ldr	r3, [r4, #0]
 8013fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fb0:	d11c      	bne.n	8013fec <_scanf_float+0x3a8>
 8013fb2:	9b01      	ldr	r3, [sp, #4]
 8013fb4:	454b      	cmp	r3, r9
 8013fb6:	eba3 0209 	sub.w	r2, r3, r9
 8013fba:	d124      	bne.n	8014006 <_scanf_float+0x3c2>
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	4659      	mov	r1, fp
 8013fc0:	4640      	mov	r0, r8
 8013fc2:	f000 fecf 	bl	8014d64 <_strtod_r>
 8013fc6:	9b03      	ldr	r3, [sp, #12]
 8013fc8:	6821      	ldr	r1, [r4, #0]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	f011 0f02 	tst.w	r1, #2
 8013fd0:	ec57 6b10 	vmov	r6, r7, d0
 8013fd4:	f103 0204 	add.w	r2, r3, #4
 8013fd8:	d020      	beq.n	801401c <_scanf_float+0x3d8>
 8013fda:	9903      	ldr	r1, [sp, #12]
 8013fdc:	600a      	str	r2, [r1, #0]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	e9c3 6700 	strd	r6, r7, [r3]
 8013fe4:	68e3      	ldr	r3, [r4, #12]
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	60e3      	str	r3, [r4, #12]
 8013fea:	e66c      	b.n	8013cc6 <_scanf_float+0x82>
 8013fec:	9b04      	ldr	r3, [sp, #16]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d0e4      	beq.n	8013fbc <_scanf_float+0x378>
 8013ff2:	9905      	ldr	r1, [sp, #20]
 8013ff4:	230a      	movs	r3, #10
 8013ff6:	462a      	mov	r2, r5
 8013ff8:	3101      	adds	r1, #1
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	f000 ff74 	bl	8014ee8 <_strtol_r>
 8014000:	9b04      	ldr	r3, [sp, #16]
 8014002:	9e05      	ldr	r6, [sp, #20]
 8014004:	1ac2      	subs	r2, r0, r3
 8014006:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801400a:	429e      	cmp	r6, r3
 801400c:	bf28      	it	cs
 801400e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014012:	4912      	ldr	r1, [pc, #72]	; (801405c <_scanf_float+0x418>)
 8014014:	4630      	mov	r0, r6
 8014016:	f000 f83b 	bl	8014090 <siprintf>
 801401a:	e7cf      	b.n	8013fbc <_scanf_float+0x378>
 801401c:	f011 0f04 	tst.w	r1, #4
 8014020:	9903      	ldr	r1, [sp, #12]
 8014022:	600a      	str	r2, [r1, #0]
 8014024:	d1db      	bne.n	8013fde <_scanf_float+0x39a>
 8014026:	f8d3 8000 	ldr.w	r8, [r3]
 801402a:	ee10 2a10 	vmov	r2, s0
 801402e:	ee10 0a10 	vmov	r0, s0
 8014032:	463b      	mov	r3, r7
 8014034:	4639      	mov	r1, r7
 8014036:	f7ec fd99 	bl	8000b6c <__aeabi_dcmpun>
 801403a:	b128      	cbz	r0, 8014048 <_scanf_float+0x404>
 801403c:	4808      	ldr	r0, [pc, #32]	; (8014060 <_scanf_float+0x41c>)
 801403e:	f000 f821 	bl	8014084 <nanf>
 8014042:	ed88 0a00 	vstr	s0, [r8]
 8014046:	e7cd      	b.n	8013fe4 <_scanf_float+0x3a0>
 8014048:	4630      	mov	r0, r6
 801404a:	4639      	mov	r1, r7
 801404c:	f7ec fdec 	bl	8000c28 <__aeabi_d2f>
 8014050:	f8c8 0000 	str.w	r0, [r8]
 8014054:	e7c6      	b.n	8013fe4 <_scanf_float+0x3a0>
 8014056:	2500      	movs	r5, #0
 8014058:	e635      	b.n	8013cc6 <_scanf_float+0x82>
 801405a:	bf00      	nop
 801405c:	0801c484 	.word	0x0801c484
 8014060:	0801c900 	.word	0x0801c900

08014064 <_sbrk_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4d06      	ldr	r5, [pc, #24]	; (8014080 <_sbrk_r+0x1c>)
 8014068:	2300      	movs	r3, #0
 801406a:	4604      	mov	r4, r0
 801406c:	4608      	mov	r0, r1
 801406e:	602b      	str	r3, [r5, #0]
 8014070:	f7fe ffec 	bl	801304c <_sbrk>
 8014074:	1c43      	adds	r3, r0, #1
 8014076:	d102      	bne.n	801407e <_sbrk_r+0x1a>
 8014078:	682b      	ldr	r3, [r5, #0]
 801407a:	b103      	cbz	r3, 801407e <_sbrk_r+0x1a>
 801407c:	6023      	str	r3, [r4, #0]
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	20033970 	.word	0x20033970

08014084 <nanf>:
 8014084:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801408c <nanf+0x8>
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop
 801408c:	7fc00000 	.word	0x7fc00000

08014090 <siprintf>:
 8014090:	b40e      	push	{r1, r2, r3}
 8014092:	b500      	push	{lr}
 8014094:	b09c      	sub	sp, #112	; 0x70
 8014096:	ab1d      	add	r3, sp, #116	; 0x74
 8014098:	9002      	str	r0, [sp, #8]
 801409a:	9006      	str	r0, [sp, #24]
 801409c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80140a0:	4809      	ldr	r0, [pc, #36]	; (80140c8 <siprintf+0x38>)
 80140a2:	9107      	str	r1, [sp, #28]
 80140a4:	9104      	str	r1, [sp, #16]
 80140a6:	4909      	ldr	r1, [pc, #36]	; (80140cc <siprintf+0x3c>)
 80140a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80140ac:	9105      	str	r1, [sp, #20]
 80140ae:	6800      	ldr	r0, [r0, #0]
 80140b0:	9301      	str	r3, [sp, #4]
 80140b2:	a902      	add	r1, sp, #8
 80140b4:	f003 f952 	bl	801735c <_svfiprintf_r>
 80140b8:	9b02      	ldr	r3, [sp, #8]
 80140ba:	2200      	movs	r2, #0
 80140bc:	701a      	strb	r2, [r3, #0]
 80140be:	b01c      	add	sp, #112	; 0x70
 80140c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80140c4:	b003      	add	sp, #12
 80140c6:	4770      	bx	lr
 80140c8:	200003ac 	.word	0x200003ac
 80140cc:	ffff0208 	.word	0xffff0208

080140d0 <strchr>:
 80140d0:	b2c9      	uxtb	r1, r1
 80140d2:	4603      	mov	r3, r0
 80140d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140d8:	b11a      	cbz	r2, 80140e2 <strchr+0x12>
 80140da:	428a      	cmp	r2, r1
 80140dc:	d1f9      	bne.n	80140d2 <strchr+0x2>
 80140de:	4618      	mov	r0, r3
 80140e0:	4770      	bx	lr
 80140e2:	2900      	cmp	r1, #0
 80140e4:	bf18      	it	ne
 80140e6:	2300      	movne	r3, #0
 80140e8:	e7f9      	b.n	80140de <strchr+0xe>

080140ea <strstr>:
 80140ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140ec:	780c      	ldrb	r4, [r1, #0]
 80140ee:	b164      	cbz	r4, 801410a <strstr+0x20>
 80140f0:	4603      	mov	r3, r0
 80140f2:	781a      	ldrb	r2, [r3, #0]
 80140f4:	4618      	mov	r0, r3
 80140f6:	1c5e      	adds	r6, r3, #1
 80140f8:	b90a      	cbnz	r2, 80140fe <strstr+0x14>
 80140fa:	4610      	mov	r0, r2
 80140fc:	e005      	b.n	801410a <strstr+0x20>
 80140fe:	4294      	cmp	r4, r2
 8014100:	d108      	bne.n	8014114 <strstr+0x2a>
 8014102:	460d      	mov	r5, r1
 8014104:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8014108:	b902      	cbnz	r2, 801410c <strstr+0x22>
 801410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801410c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8014110:	4297      	cmp	r7, r2
 8014112:	d0f7      	beq.n	8014104 <strstr+0x1a>
 8014114:	4633      	mov	r3, r6
 8014116:	e7ec      	b.n	80140f2 <strstr+0x8>

08014118 <sulp>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	4604      	mov	r4, r0
 801411c:	460d      	mov	r5, r1
 801411e:	ec45 4b10 	vmov	d0, r4, r5
 8014122:	4616      	mov	r6, r2
 8014124:	f002 ff60 	bl	8016fe8 <__ulp>
 8014128:	ec51 0b10 	vmov	r0, r1, d0
 801412c:	b17e      	cbz	r6, 801414e <sulp+0x36>
 801412e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014132:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014136:	2b00      	cmp	r3, #0
 8014138:	dd09      	ble.n	801414e <sulp+0x36>
 801413a:	051b      	lsls	r3, r3, #20
 801413c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014140:	2400      	movs	r4, #0
 8014142:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014146:	4622      	mov	r2, r4
 8014148:	462b      	mov	r3, r5
 801414a:	f7ec fa75 	bl	8000638 <__aeabi_dmul>
 801414e:	bd70      	pop	{r4, r5, r6, pc}

08014150 <_strtod_l>:
 8014150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014154:	b0a3      	sub	sp, #140	; 0x8c
 8014156:	461f      	mov	r7, r3
 8014158:	2300      	movs	r3, #0
 801415a:	931e      	str	r3, [sp, #120]	; 0x78
 801415c:	4ba4      	ldr	r3, [pc, #656]	; (80143f0 <_strtod_l+0x2a0>)
 801415e:	9219      	str	r2, [sp, #100]	; 0x64
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	9307      	str	r3, [sp, #28]
 8014164:	4604      	mov	r4, r0
 8014166:	4618      	mov	r0, r3
 8014168:	4688      	mov	r8, r1
 801416a:	f7ec f84b 	bl	8000204 <strlen>
 801416e:	f04f 0a00 	mov.w	sl, #0
 8014172:	4605      	mov	r5, r0
 8014174:	f04f 0b00 	mov.w	fp, #0
 8014178:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801417c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801417e:	781a      	ldrb	r2, [r3, #0]
 8014180:	2a2b      	cmp	r2, #43	; 0x2b
 8014182:	d04c      	beq.n	801421e <_strtod_l+0xce>
 8014184:	d839      	bhi.n	80141fa <_strtod_l+0xaa>
 8014186:	2a0d      	cmp	r2, #13
 8014188:	d832      	bhi.n	80141f0 <_strtod_l+0xa0>
 801418a:	2a08      	cmp	r2, #8
 801418c:	d832      	bhi.n	80141f4 <_strtod_l+0xa4>
 801418e:	2a00      	cmp	r2, #0
 8014190:	d03c      	beq.n	801420c <_strtod_l+0xbc>
 8014192:	2300      	movs	r3, #0
 8014194:	930e      	str	r3, [sp, #56]	; 0x38
 8014196:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014198:	7833      	ldrb	r3, [r6, #0]
 801419a:	2b30      	cmp	r3, #48	; 0x30
 801419c:	f040 80b4 	bne.w	8014308 <_strtod_l+0x1b8>
 80141a0:	7873      	ldrb	r3, [r6, #1]
 80141a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80141a6:	2b58      	cmp	r3, #88	; 0x58
 80141a8:	d16c      	bne.n	8014284 <_strtod_l+0x134>
 80141aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141ac:	9301      	str	r3, [sp, #4]
 80141ae:	ab1e      	add	r3, sp, #120	; 0x78
 80141b0:	9702      	str	r7, [sp, #8]
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	4a8f      	ldr	r2, [pc, #572]	; (80143f4 <_strtod_l+0x2a4>)
 80141b6:	ab1f      	add	r3, sp, #124	; 0x7c
 80141b8:	a91d      	add	r1, sp, #116	; 0x74
 80141ba:	4620      	mov	r0, r4
 80141bc:	f002 f816 	bl	80161ec <__gethex>
 80141c0:	f010 0707 	ands.w	r7, r0, #7
 80141c4:	4605      	mov	r5, r0
 80141c6:	d005      	beq.n	80141d4 <_strtod_l+0x84>
 80141c8:	2f06      	cmp	r7, #6
 80141ca:	d12a      	bne.n	8014222 <_strtod_l+0xd2>
 80141cc:	3601      	adds	r6, #1
 80141ce:	2300      	movs	r3, #0
 80141d0:	961d      	str	r6, [sp, #116]	; 0x74
 80141d2:	930e      	str	r3, [sp, #56]	; 0x38
 80141d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f040 8596 	bne.w	8014d08 <_strtod_l+0xbb8>
 80141dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141de:	b1db      	cbz	r3, 8014218 <_strtod_l+0xc8>
 80141e0:	4652      	mov	r2, sl
 80141e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80141e6:	ec43 2b10 	vmov	d0, r2, r3
 80141ea:	b023      	add	sp, #140	; 0x8c
 80141ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f0:	2a20      	cmp	r2, #32
 80141f2:	d1ce      	bne.n	8014192 <_strtod_l+0x42>
 80141f4:	3301      	adds	r3, #1
 80141f6:	931d      	str	r3, [sp, #116]	; 0x74
 80141f8:	e7c0      	b.n	801417c <_strtod_l+0x2c>
 80141fa:	2a2d      	cmp	r2, #45	; 0x2d
 80141fc:	d1c9      	bne.n	8014192 <_strtod_l+0x42>
 80141fe:	2201      	movs	r2, #1
 8014200:	920e      	str	r2, [sp, #56]	; 0x38
 8014202:	1c5a      	adds	r2, r3, #1
 8014204:	921d      	str	r2, [sp, #116]	; 0x74
 8014206:	785b      	ldrb	r3, [r3, #1]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d1c4      	bne.n	8014196 <_strtod_l+0x46>
 801420c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801420e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014212:	2b00      	cmp	r3, #0
 8014214:	f040 8576 	bne.w	8014d04 <_strtod_l+0xbb4>
 8014218:	4652      	mov	r2, sl
 801421a:	465b      	mov	r3, fp
 801421c:	e7e3      	b.n	80141e6 <_strtod_l+0x96>
 801421e:	2200      	movs	r2, #0
 8014220:	e7ee      	b.n	8014200 <_strtod_l+0xb0>
 8014222:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014224:	b13a      	cbz	r2, 8014236 <_strtod_l+0xe6>
 8014226:	2135      	movs	r1, #53	; 0x35
 8014228:	a820      	add	r0, sp, #128	; 0x80
 801422a:	f002 ffe8 	bl	80171fe <__copybits>
 801422e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014230:	4620      	mov	r0, r4
 8014232:	f002 fbad 	bl	8016990 <_Bfree>
 8014236:	3f01      	subs	r7, #1
 8014238:	2f05      	cmp	r7, #5
 801423a:	d807      	bhi.n	801424c <_strtod_l+0xfc>
 801423c:	e8df f007 	tbb	[pc, r7]
 8014240:	1d180b0e 	.word	0x1d180b0e
 8014244:	030e      	.short	0x030e
 8014246:	f04f 0b00 	mov.w	fp, #0
 801424a:	46da      	mov	sl, fp
 801424c:	0728      	lsls	r0, r5, #28
 801424e:	d5c1      	bpl.n	80141d4 <_strtod_l+0x84>
 8014250:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014254:	e7be      	b.n	80141d4 <_strtod_l+0x84>
 8014256:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801425a:	e7f7      	b.n	801424c <_strtod_l+0xfc>
 801425c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014260:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014262:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014266:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801426a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801426e:	e7ed      	b.n	801424c <_strtod_l+0xfc>
 8014270:	f8df b184 	ldr.w	fp, [pc, #388]	; 80143f8 <_strtod_l+0x2a8>
 8014274:	f04f 0a00 	mov.w	sl, #0
 8014278:	e7e8      	b.n	801424c <_strtod_l+0xfc>
 801427a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801427e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014282:	e7e3      	b.n	801424c <_strtod_l+0xfc>
 8014284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014286:	1c5a      	adds	r2, r3, #1
 8014288:	921d      	str	r2, [sp, #116]	; 0x74
 801428a:	785b      	ldrb	r3, [r3, #1]
 801428c:	2b30      	cmp	r3, #48	; 0x30
 801428e:	d0f9      	beq.n	8014284 <_strtod_l+0x134>
 8014290:	2b00      	cmp	r3, #0
 8014292:	d09f      	beq.n	80141d4 <_strtod_l+0x84>
 8014294:	2301      	movs	r3, #1
 8014296:	f04f 0900 	mov.w	r9, #0
 801429a:	9304      	str	r3, [sp, #16]
 801429c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801429e:	930a      	str	r3, [sp, #40]	; 0x28
 80142a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80142a4:	464f      	mov	r7, r9
 80142a6:	220a      	movs	r2, #10
 80142a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80142aa:	7806      	ldrb	r6, [r0, #0]
 80142ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80142b0:	b2d9      	uxtb	r1, r3
 80142b2:	2909      	cmp	r1, #9
 80142b4:	d92a      	bls.n	801430c <_strtod_l+0x1bc>
 80142b6:	9907      	ldr	r1, [sp, #28]
 80142b8:	462a      	mov	r2, r5
 80142ba:	f003 faf4 	bl	80178a6 <strncmp>
 80142be:	b398      	cbz	r0, 8014328 <_strtod_l+0x1d8>
 80142c0:	2000      	movs	r0, #0
 80142c2:	4633      	mov	r3, r6
 80142c4:	463d      	mov	r5, r7
 80142c6:	9007      	str	r0, [sp, #28]
 80142c8:	4602      	mov	r2, r0
 80142ca:	2b65      	cmp	r3, #101	; 0x65
 80142cc:	d001      	beq.n	80142d2 <_strtod_l+0x182>
 80142ce:	2b45      	cmp	r3, #69	; 0x45
 80142d0:	d118      	bne.n	8014304 <_strtod_l+0x1b4>
 80142d2:	b91d      	cbnz	r5, 80142dc <_strtod_l+0x18c>
 80142d4:	9b04      	ldr	r3, [sp, #16]
 80142d6:	4303      	orrs	r3, r0
 80142d8:	d098      	beq.n	801420c <_strtod_l+0xbc>
 80142da:	2500      	movs	r5, #0
 80142dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80142e0:	f108 0301 	add.w	r3, r8, #1
 80142e4:	931d      	str	r3, [sp, #116]	; 0x74
 80142e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80142ea:	2b2b      	cmp	r3, #43	; 0x2b
 80142ec:	d075      	beq.n	80143da <_strtod_l+0x28a>
 80142ee:	2b2d      	cmp	r3, #45	; 0x2d
 80142f0:	d07b      	beq.n	80143ea <_strtod_l+0x29a>
 80142f2:	f04f 0c00 	mov.w	ip, #0
 80142f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80142fa:	2909      	cmp	r1, #9
 80142fc:	f240 8082 	bls.w	8014404 <_strtod_l+0x2b4>
 8014300:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014304:	2600      	movs	r6, #0
 8014306:	e09d      	b.n	8014444 <_strtod_l+0x2f4>
 8014308:	2300      	movs	r3, #0
 801430a:	e7c4      	b.n	8014296 <_strtod_l+0x146>
 801430c:	2f08      	cmp	r7, #8
 801430e:	bfd8      	it	le
 8014310:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014312:	f100 0001 	add.w	r0, r0, #1
 8014316:	bfda      	itte	le
 8014318:	fb02 3301 	mlale	r3, r2, r1, r3
 801431c:	9309      	strle	r3, [sp, #36]	; 0x24
 801431e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014322:	3701      	adds	r7, #1
 8014324:	901d      	str	r0, [sp, #116]	; 0x74
 8014326:	e7bf      	b.n	80142a8 <_strtod_l+0x158>
 8014328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801432a:	195a      	adds	r2, r3, r5
 801432c:	921d      	str	r2, [sp, #116]	; 0x74
 801432e:	5d5b      	ldrb	r3, [r3, r5]
 8014330:	2f00      	cmp	r7, #0
 8014332:	d037      	beq.n	80143a4 <_strtod_l+0x254>
 8014334:	9007      	str	r0, [sp, #28]
 8014336:	463d      	mov	r5, r7
 8014338:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801433c:	2a09      	cmp	r2, #9
 801433e:	d912      	bls.n	8014366 <_strtod_l+0x216>
 8014340:	2201      	movs	r2, #1
 8014342:	e7c2      	b.n	80142ca <_strtod_l+0x17a>
 8014344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014346:	1c5a      	adds	r2, r3, #1
 8014348:	921d      	str	r2, [sp, #116]	; 0x74
 801434a:	785b      	ldrb	r3, [r3, #1]
 801434c:	3001      	adds	r0, #1
 801434e:	2b30      	cmp	r3, #48	; 0x30
 8014350:	d0f8      	beq.n	8014344 <_strtod_l+0x1f4>
 8014352:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014356:	2a08      	cmp	r2, #8
 8014358:	f200 84db 	bhi.w	8014d12 <_strtod_l+0xbc2>
 801435c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801435e:	9007      	str	r0, [sp, #28]
 8014360:	2000      	movs	r0, #0
 8014362:	920a      	str	r2, [sp, #40]	; 0x28
 8014364:	4605      	mov	r5, r0
 8014366:	3b30      	subs	r3, #48	; 0x30
 8014368:	f100 0201 	add.w	r2, r0, #1
 801436c:	d014      	beq.n	8014398 <_strtod_l+0x248>
 801436e:	9907      	ldr	r1, [sp, #28]
 8014370:	4411      	add	r1, r2
 8014372:	9107      	str	r1, [sp, #28]
 8014374:	462a      	mov	r2, r5
 8014376:	eb00 0e05 	add.w	lr, r0, r5
 801437a:	210a      	movs	r1, #10
 801437c:	4572      	cmp	r2, lr
 801437e:	d113      	bne.n	80143a8 <_strtod_l+0x258>
 8014380:	182a      	adds	r2, r5, r0
 8014382:	2a08      	cmp	r2, #8
 8014384:	f105 0501 	add.w	r5, r5, #1
 8014388:	4405      	add	r5, r0
 801438a:	dc1c      	bgt.n	80143c6 <_strtod_l+0x276>
 801438c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801438e:	220a      	movs	r2, #10
 8014390:	fb02 3301 	mla	r3, r2, r1, r3
 8014394:	9309      	str	r3, [sp, #36]	; 0x24
 8014396:	2200      	movs	r2, #0
 8014398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801439a:	1c59      	adds	r1, r3, #1
 801439c:	911d      	str	r1, [sp, #116]	; 0x74
 801439e:	785b      	ldrb	r3, [r3, #1]
 80143a0:	4610      	mov	r0, r2
 80143a2:	e7c9      	b.n	8014338 <_strtod_l+0x1e8>
 80143a4:	4638      	mov	r0, r7
 80143a6:	e7d2      	b.n	801434e <_strtod_l+0x1fe>
 80143a8:	2a08      	cmp	r2, #8
 80143aa:	dc04      	bgt.n	80143b6 <_strtod_l+0x266>
 80143ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80143ae:	434e      	muls	r6, r1
 80143b0:	9609      	str	r6, [sp, #36]	; 0x24
 80143b2:	3201      	adds	r2, #1
 80143b4:	e7e2      	b.n	801437c <_strtod_l+0x22c>
 80143b6:	f102 0c01 	add.w	ip, r2, #1
 80143ba:	f1bc 0f10 	cmp.w	ip, #16
 80143be:	bfd8      	it	le
 80143c0:	fb01 f909 	mulle.w	r9, r1, r9
 80143c4:	e7f5      	b.n	80143b2 <_strtod_l+0x262>
 80143c6:	2d10      	cmp	r5, #16
 80143c8:	bfdc      	itt	le
 80143ca:	220a      	movle	r2, #10
 80143cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80143d0:	e7e1      	b.n	8014396 <_strtod_l+0x246>
 80143d2:	2300      	movs	r3, #0
 80143d4:	9307      	str	r3, [sp, #28]
 80143d6:	2201      	movs	r2, #1
 80143d8:	e77c      	b.n	80142d4 <_strtod_l+0x184>
 80143da:	f04f 0c00 	mov.w	ip, #0
 80143de:	f108 0302 	add.w	r3, r8, #2
 80143e2:	931d      	str	r3, [sp, #116]	; 0x74
 80143e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80143e8:	e785      	b.n	80142f6 <_strtod_l+0x1a6>
 80143ea:	f04f 0c01 	mov.w	ip, #1
 80143ee:	e7f6      	b.n	80143de <_strtod_l+0x28e>
 80143f0:	0801c744 	.word	0x0801c744
 80143f4:	0801c48c 	.word	0x0801c48c
 80143f8:	7ff00000 	.word	0x7ff00000
 80143fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143fe:	1c59      	adds	r1, r3, #1
 8014400:	911d      	str	r1, [sp, #116]	; 0x74
 8014402:	785b      	ldrb	r3, [r3, #1]
 8014404:	2b30      	cmp	r3, #48	; 0x30
 8014406:	d0f9      	beq.n	80143fc <_strtod_l+0x2ac>
 8014408:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801440c:	2908      	cmp	r1, #8
 801440e:	f63f af79 	bhi.w	8014304 <_strtod_l+0x1b4>
 8014412:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014416:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014418:	9308      	str	r3, [sp, #32]
 801441a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801441c:	1c59      	adds	r1, r3, #1
 801441e:	911d      	str	r1, [sp, #116]	; 0x74
 8014420:	785b      	ldrb	r3, [r3, #1]
 8014422:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8014426:	2e09      	cmp	r6, #9
 8014428:	d937      	bls.n	801449a <_strtod_l+0x34a>
 801442a:	9e08      	ldr	r6, [sp, #32]
 801442c:	1b89      	subs	r1, r1, r6
 801442e:	2908      	cmp	r1, #8
 8014430:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014434:	dc02      	bgt.n	801443c <_strtod_l+0x2ec>
 8014436:	4576      	cmp	r6, lr
 8014438:	bfa8      	it	ge
 801443a:	4676      	movge	r6, lr
 801443c:	f1bc 0f00 	cmp.w	ip, #0
 8014440:	d000      	beq.n	8014444 <_strtod_l+0x2f4>
 8014442:	4276      	negs	r6, r6
 8014444:	2d00      	cmp	r5, #0
 8014446:	d14f      	bne.n	80144e8 <_strtod_l+0x398>
 8014448:	9904      	ldr	r1, [sp, #16]
 801444a:	4301      	orrs	r1, r0
 801444c:	f47f aec2 	bne.w	80141d4 <_strtod_l+0x84>
 8014450:	2a00      	cmp	r2, #0
 8014452:	f47f aedb 	bne.w	801420c <_strtod_l+0xbc>
 8014456:	2b69      	cmp	r3, #105	; 0x69
 8014458:	d027      	beq.n	80144aa <_strtod_l+0x35a>
 801445a:	dc24      	bgt.n	80144a6 <_strtod_l+0x356>
 801445c:	2b49      	cmp	r3, #73	; 0x49
 801445e:	d024      	beq.n	80144aa <_strtod_l+0x35a>
 8014460:	2b4e      	cmp	r3, #78	; 0x4e
 8014462:	f47f aed3 	bne.w	801420c <_strtod_l+0xbc>
 8014466:	499e      	ldr	r1, [pc, #632]	; (80146e0 <_strtod_l+0x590>)
 8014468:	a81d      	add	r0, sp, #116	; 0x74
 801446a:	f002 f917 	bl	801669c <__match>
 801446e:	2800      	cmp	r0, #0
 8014470:	f43f aecc 	beq.w	801420c <_strtod_l+0xbc>
 8014474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	2b28      	cmp	r3, #40	; 0x28
 801447a:	d12d      	bne.n	80144d8 <_strtod_l+0x388>
 801447c:	4999      	ldr	r1, [pc, #612]	; (80146e4 <_strtod_l+0x594>)
 801447e:	aa20      	add	r2, sp, #128	; 0x80
 8014480:	a81d      	add	r0, sp, #116	; 0x74
 8014482:	f002 f91f 	bl	80166c4 <__hexnan>
 8014486:	2805      	cmp	r0, #5
 8014488:	d126      	bne.n	80144d8 <_strtod_l+0x388>
 801448a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801448c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014490:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014494:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014498:	e69c      	b.n	80141d4 <_strtod_l+0x84>
 801449a:	210a      	movs	r1, #10
 801449c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80144a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80144a4:	e7b9      	b.n	801441a <_strtod_l+0x2ca>
 80144a6:	2b6e      	cmp	r3, #110	; 0x6e
 80144a8:	e7db      	b.n	8014462 <_strtod_l+0x312>
 80144aa:	498f      	ldr	r1, [pc, #572]	; (80146e8 <_strtod_l+0x598>)
 80144ac:	a81d      	add	r0, sp, #116	; 0x74
 80144ae:	f002 f8f5 	bl	801669c <__match>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	f43f aeaa 	beq.w	801420c <_strtod_l+0xbc>
 80144b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144ba:	498c      	ldr	r1, [pc, #560]	; (80146ec <_strtod_l+0x59c>)
 80144bc:	3b01      	subs	r3, #1
 80144be:	a81d      	add	r0, sp, #116	; 0x74
 80144c0:	931d      	str	r3, [sp, #116]	; 0x74
 80144c2:	f002 f8eb 	bl	801669c <__match>
 80144c6:	b910      	cbnz	r0, 80144ce <_strtod_l+0x37e>
 80144c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144ca:	3301      	adds	r3, #1
 80144cc:	931d      	str	r3, [sp, #116]	; 0x74
 80144ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80146fc <_strtod_l+0x5ac>
 80144d2:	f04f 0a00 	mov.w	sl, #0
 80144d6:	e67d      	b.n	80141d4 <_strtod_l+0x84>
 80144d8:	4885      	ldr	r0, [pc, #532]	; (80146f0 <_strtod_l+0x5a0>)
 80144da:	f003 f999 	bl	8017810 <nan>
 80144de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80144e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80144e6:	e675      	b.n	80141d4 <_strtod_l+0x84>
 80144e8:	9b07      	ldr	r3, [sp, #28]
 80144ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144ec:	1af3      	subs	r3, r6, r3
 80144ee:	2f00      	cmp	r7, #0
 80144f0:	bf08      	it	eq
 80144f2:	462f      	moveq	r7, r5
 80144f4:	2d10      	cmp	r5, #16
 80144f6:	9308      	str	r3, [sp, #32]
 80144f8:	46a8      	mov	r8, r5
 80144fa:	bfa8      	it	ge
 80144fc:	f04f 0810 	movge.w	r8, #16
 8014500:	f7ec f820 	bl	8000544 <__aeabi_ui2d>
 8014504:	2d09      	cmp	r5, #9
 8014506:	4682      	mov	sl, r0
 8014508:	468b      	mov	fp, r1
 801450a:	dd13      	ble.n	8014534 <_strtod_l+0x3e4>
 801450c:	4b79      	ldr	r3, [pc, #484]	; (80146f4 <_strtod_l+0x5a4>)
 801450e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014512:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014516:	f7ec f88f 	bl	8000638 <__aeabi_dmul>
 801451a:	4682      	mov	sl, r0
 801451c:	4648      	mov	r0, r9
 801451e:	468b      	mov	fp, r1
 8014520:	f7ec f810 	bl	8000544 <__aeabi_ui2d>
 8014524:	4602      	mov	r2, r0
 8014526:	460b      	mov	r3, r1
 8014528:	4650      	mov	r0, sl
 801452a:	4659      	mov	r1, fp
 801452c:	f7eb fece 	bl	80002cc <__adddf3>
 8014530:	4682      	mov	sl, r0
 8014532:	468b      	mov	fp, r1
 8014534:	2d0f      	cmp	r5, #15
 8014536:	dc38      	bgt.n	80145aa <_strtod_l+0x45a>
 8014538:	9b08      	ldr	r3, [sp, #32]
 801453a:	2b00      	cmp	r3, #0
 801453c:	f43f ae4a 	beq.w	80141d4 <_strtod_l+0x84>
 8014540:	dd24      	ble.n	801458c <_strtod_l+0x43c>
 8014542:	2b16      	cmp	r3, #22
 8014544:	dc0b      	bgt.n	801455e <_strtod_l+0x40e>
 8014546:	4d6b      	ldr	r5, [pc, #428]	; (80146f4 <_strtod_l+0x5a4>)
 8014548:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801454c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014550:	4652      	mov	r2, sl
 8014552:	465b      	mov	r3, fp
 8014554:	f7ec f870 	bl	8000638 <__aeabi_dmul>
 8014558:	4682      	mov	sl, r0
 801455a:	468b      	mov	fp, r1
 801455c:	e63a      	b.n	80141d4 <_strtod_l+0x84>
 801455e:	9a08      	ldr	r2, [sp, #32]
 8014560:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014564:	4293      	cmp	r3, r2
 8014566:	db20      	blt.n	80145aa <_strtod_l+0x45a>
 8014568:	4c62      	ldr	r4, [pc, #392]	; (80146f4 <_strtod_l+0x5a4>)
 801456a:	f1c5 050f 	rsb	r5, r5, #15
 801456e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014572:	4652      	mov	r2, sl
 8014574:	465b      	mov	r3, fp
 8014576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801457a:	f7ec f85d 	bl	8000638 <__aeabi_dmul>
 801457e:	9b08      	ldr	r3, [sp, #32]
 8014580:	1b5d      	subs	r5, r3, r5
 8014582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014586:	e9d4 2300 	ldrd	r2, r3, [r4]
 801458a:	e7e3      	b.n	8014554 <_strtod_l+0x404>
 801458c:	9b08      	ldr	r3, [sp, #32]
 801458e:	3316      	adds	r3, #22
 8014590:	db0b      	blt.n	80145aa <_strtod_l+0x45a>
 8014592:	9b07      	ldr	r3, [sp, #28]
 8014594:	4a57      	ldr	r2, [pc, #348]	; (80146f4 <_strtod_l+0x5a4>)
 8014596:	1b9e      	subs	r6, r3, r6
 8014598:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801459c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80145a0:	4650      	mov	r0, sl
 80145a2:	4659      	mov	r1, fp
 80145a4:	f7ec f972 	bl	800088c <__aeabi_ddiv>
 80145a8:	e7d6      	b.n	8014558 <_strtod_l+0x408>
 80145aa:	9b08      	ldr	r3, [sp, #32]
 80145ac:	eba5 0808 	sub.w	r8, r5, r8
 80145b0:	4498      	add	r8, r3
 80145b2:	f1b8 0f00 	cmp.w	r8, #0
 80145b6:	dd71      	ble.n	801469c <_strtod_l+0x54c>
 80145b8:	f018 030f 	ands.w	r3, r8, #15
 80145bc:	d00a      	beq.n	80145d4 <_strtod_l+0x484>
 80145be:	494d      	ldr	r1, [pc, #308]	; (80146f4 <_strtod_l+0x5a4>)
 80145c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80145c4:	4652      	mov	r2, sl
 80145c6:	465b      	mov	r3, fp
 80145c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145cc:	f7ec f834 	bl	8000638 <__aeabi_dmul>
 80145d0:	4682      	mov	sl, r0
 80145d2:	468b      	mov	fp, r1
 80145d4:	f038 080f 	bics.w	r8, r8, #15
 80145d8:	d04d      	beq.n	8014676 <_strtod_l+0x526>
 80145da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80145de:	dd22      	ble.n	8014626 <_strtod_l+0x4d6>
 80145e0:	2500      	movs	r5, #0
 80145e2:	462e      	mov	r6, r5
 80145e4:	9509      	str	r5, [sp, #36]	; 0x24
 80145e6:	9507      	str	r5, [sp, #28]
 80145e8:	2322      	movs	r3, #34	; 0x22
 80145ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 80146fc <_strtod_l+0x5ac>
 80145ee:	6023      	str	r3, [r4, #0]
 80145f0:	f04f 0a00 	mov.w	sl, #0
 80145f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	f43f adec 	beq.w	80141d4 <_strtod_l+0x84>
 80145fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80145fe:	4620      	mov	r0, r4
 8014600:	f002 f9c6 	bl	8016990 <_Bfree>
 8014604:	9907      	ldr	r1, [sp, #28]
 8014606:	4620      	mov	r0, r4
 8014608:	f002 f9c2 	bl	8016990 <_Bfree>
 801460c:	4631      	mov	r1, r6
 801460e:	4620      	mov	r0, r4
 8014610:	f002 f9be 	bl	8016990 <_Bfree>
 8014614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014616:	4620      	mov	r0, r4
 8014618:	f002 f9ba 	bl	8016990 <_Bfree>
 801461c:	4629      	mov	r1, r5
 801461e:	4620      	mov	r0, r4
 8014620:	f002 f9b6 	bl	8016990 <_Bfree>
 8014624:	e5d6      	b.n	80141d4 <_strtod_l+0x84>
 8014626:	2300      	movs	r3, #0
 8014628:	ea4f 1828 	mov.w	r8, r8, asr #4
 801462c:	4650      	mov	r0, sl
 801462e:	4659      	mov	r1, fp
 8014630:	4699      	mov	r9, r3
 8014632:	f1b8 0f01 	cmp.w	r8, #1
 8014636:	dc21      	bgt.n	801467c <_strtod_l+0x52c>
 8014638:	b10b      	cbz	r3, 801463e <_strtod_l+0x4ee>
 801463a:	4682      	mov	sl, r0
 801463c:	468b      	mov	fp, r1
 801463e:	4b2e      	ldr	r3, [pc, #184]	; (80146f8 <_strtod_l+0x5a8>)
 8014640:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014644:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014648:	4652      	mov	r2, sl
 801464a:	465b      	mov	r3, fp
 801464c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014650:	f7eb fff2 	bl	8000638 <__aeabi_dmul>
 8014654:	4b29      	ldr	r3, [pc, #164]	; (80146fc <_strtod_l+0x5ac>)
 8014656:	460a      	mov	r2, r1
 8014658:	400b      	ands	r3, r1
 801465a:	4929      	ldr	r1, [pc, #164]	; (8014700 <_strtod_l+0x5b0>)
 801465c:	428b      	cmp	r3, r1
 801465e:	4682      	mov	sl, r0
 8014660:	d8be      	bhi.n	80145e0 <_strtod_l+0x490>
 8014662:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014666:	428b      	cmp	r3, r1
 8014668:	bf86      	itte	hi
 801466a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014704 <_strtod_l+0x5b4>
 801466e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8014672:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014676:	2300      	movs	r3, #0
 8014678:	9304      	str	r3, [sp, #16]
 801467a:	e081      	b.n	8014780 <_strtod_l+0x630>
 801467c:	f018 0f01 	tst.w	r8, #1
 8014680:	d007      	beq.n	8014692 <_strtod_l+0x542>
 8014682:	4b1d      	ldr	r3, [pc, #116]	; (80146f8 <_strtod_l+0x5a8>)
 8014684:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468c:	f7eb ffd4 	bl	8000638 <__aeabi_dmul>
 8014690:	2301      	movs	r3, #1
 8014692:	f109 0901 	add.w	r9, r9, #1
 8014696:	ea4f 0868 	mov.w	r8, r8, asr #1
 801469a:	e7ca      	b.n	8014632 <_strtod_l+0x4e2>
 801469c:	d0eb      	beq.n	8014676 <_strtod_l+0x526>
 801469e:	f1c8 0800 	rsb	r8, r8, #0
 80146a2:	f018 020f 	ands.w	r2, r8, #15
 80146a6:	d00a      	beq.n	80146be <_strtod_l+0x56e>
 80146a8:	4b12      	ldr	r3, [pc, #72]	; (80146f4 <_strtod_l+0x5a4>)
 80146aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146ae:	4650      	mov	r0, sl
 80146b0:	4659      	mov	r1, fp
 80146b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b6:	f7ec f8e9 	bl	800088c <__aeabi_ddiv>
 80146ba:	4682      	mov	sl, r0
 80146bc:	468b      	mov	fp, r1
 80146be:	ea5f 1828 	movs.w	r8, r8, asr #4
 80146c2:	d0d8      	beq.n	8014676 <_strtod_l+0x526>
 80146c4:	f1b8 0f1f 	cmp.w	r8, #31
 80146c8:	dd1e      	ble.n	8014708 <_strtod_l+0x5b8>
 80146ca:	2500      	movs	r5, #0
 80146cc:	462e      	mov	r6, r5
 80146ce:	9509      	str	r5, [sp, #36]	; 0x24
 80146d0:	9507      	str	r5, [sp, #28]
 80146d2:	2322      	movs	r3, #34	; 0x22
 80146d4:	f04f 0a00 	mov.w	sl, #0
 80146d8:	f04f 0b00 	mov.w	fp, #0
 80146dc:	6023      	str	r3, [r4, #0]
 80146de:	e789      	b.n	80145f4 <_strtod_l+0x4a4>
 80146e0:	0801c45d 	.word	0x0801c45d
 80146e4:	0801c4a0 	.word	0x0801c4a0
 80146e8:	0801c455 	.word	0x0801c455
 80146ec:	0801c5e4 	.word	0x0801c5e4
 80146f0:	0801c900 	.word	0x0801c900
 80146f4:	0801c7e0 	.word	0x0801c7e0
 80146f8:	0801c7b8 	.word	0x0801c7b8
 80146fc:	7ff00000 	.word	0x7ff00000
 8014700:	7ca00000 	.word	0x7ca00000
 8014704:	7fefffff 	.word	0x7fefffff
 8014708:	f018 0310 	ands.w	r3, r8, #16
 801470c:	bf18      	it	ne
 801470e:	236a      	movne	r3, #106	; 0x6a
 8014710:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014ac8 <_strtod_l+0x978>
 8014714:	9304      	str	r3, [sp, #16]
 8014716:	4650      	mov	r0, sl
 8014718:	4659      	mov	r1, fp
 801471a:	2300      	movs	r3, #0
 801471c:	f018 0f01 	tst.w	r8, #1
 8014720:	d004      	beq.n	801472c <_strtod_l+0x5dc>
 8014722:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014726:	f7eb ff87 	bl	8000638 <__aeabi_dmul>
 801472a:	2301      	movs	r3, #1
 801472c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014730:	f109 0908 	add.w	r9, r9, #8
 8014734:	d1f2      	bne.n	801471c <_strtod_l+0x5cc>
 8014736:	b10b      	cbz	r3, 801473c <_strtod_l+0x5ec>
 8014738:	4682      	mov	sl, r0
 801473a:	468b      	mov	fp, r1
 801473c:	9b04      	ldr	r3, [sp, #16]
 801473e:	b1bb      	cbz	r3, 8014770 <_strtod_l+0x620>
 8014740:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014744:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014748:	2b00      	cmp	r3, #0
 801474a:	4659      	mov	r1, fp
 801474c:	dd10      	ble.n	8014770 <_strtod_l+0x620>
 801474e:	2b1f      	cmp	r3, #31
 8014750:	f340 8128 	ble.w	80149a4 <_strtod_l+0x854>
 8014754:	2b34      	cmp	r3, #52	; 0x34
 8014756:	bfde      	ittt	le
 8014758:	3b20      	suble	r3, #32
 801475a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801475e:	fa02 f303 	lslle.w	r3, r2, r3
 8014762:	f04f 0a00 	mov.w	sl, #0
 8014766:	bfcc      	ite	gt
 8014768:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801476c:	ea03 0b01 	andle.w	fp, r3, r1
 8014770:	2200      	movs	r2, #0
 8014772:	2300      	movs	r3, #0
 8014774:	4650      	mov	r0, sl
 8014776:	4659      	mov	r1, fp
 8014778:	f7ec f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 801477c:	2800      	cmp	r0, #0
 801477e:	d1a4      	bne.n	80146ca <_strtod_l+0x57a>
 8014780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014782:	9300      	str	r3, [sp, #0]
 8014784:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014786:	462b      	mov	r3, r5
 8014788:	463a      	mov	r2, r7
 801478a:	4620      	mov	r0, r4
 801478c:	f002 f96c 	bl	8016a68 <__s2b>
 8014790:	9009      	str	r0, [sp, #36]	; 0x24
 8014792:	2800      	cmp	r0, #0
 8014794:	f43f af24 	beq.w	80145e0 <_strtod_l+0x490>
 8014798:	9b07      	ldr	r3, [sp, #28]
 801479a:	1b9e      	subs	r6, r3, r6
 801479c:	9b08      	ldr	r3, [sp, #32]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	bfb4      	ite	lt
 80147a2:	4633      	movlt	r3, r6
 80147a4:	2300      	movge	r3, #0
 80147a6:	9310      	str	r3, [sp, #64]	; 0x40
 80147a8:	9b08      	ldr	r3, [sp, #32]
 80147aa:	2500      	movs	r5, #0
 80147ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80147b0:	9318      	str	r3, [sp, #96]	; 0x60
 80147b2:	462e      	mov	r6, r5
 80147b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b6:	4620      	mov	r0, r4
 80147b8:	6859      	ldr	r1, [r3, #4]
 80147ba:	f002 f8a9 	bl	8016910 <_Balloc>
 80147be:	9007      	str	r0, [sp, #28]
 80147c0:	2800      	cmp	r0, #0
 80147c2:	f43f af11 	beq.w	80145e8 <_strtod_l+0x498>
 80147c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147c8:	691a      	ldr	r2, [r3, #16]
 80147ca:	3202      	adds	r2, #2
 80147cc:	f103 010c 	add.w	r1, r3, #12
 80147d0:	0092      	lsls	r2, r2, #2
 80147d2:	300c      	adds	r0, #12
 80147d4:	f7fe fd0c 	bl	80131f0 <memcpy>
 80147d8:	ec4b ab10 	vmov	d0, sl, fp
 80147dc:	aa20      	add	r2, sp, #128	; 0x80
 80147de:	a91f      	add	r1, sp, #124	; 0x7c
 80147e0:	4620      	mov	r0, r4
 80147e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80147e6:	f002 fc7b 	bl	80170e0 <__d2b>
 80147ea:	901e      	str	r0, [sp, #120]	; 0x78
 80147ec:	2800      	cmp	r0, #0
 80147ee:	f43f aefb 	beq.w	80145e8 <_strtod_l+0x498>
 80147f2:	2101      	movs	r1, #1
 80147f4:	4620      	mov	r0, r4
 80147f6:	f002 f9d1 	bl	8016b9c <__i2b>
 80147fa:	4606      	mov	r6, r0
 80147fc:	2800      	cmp	r0, #0
 80147fe:	f43f aef3 	beq.w	80145e8 <_strtod_l+0x498>
 8014802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014804:	9904      	ldr	r1, [sp, #16]
 8014806:	2b00      	cmp	r3, #0
 8014808:	bfab      	itete	ge
 801480a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801480c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801480e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014810:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8014814:	bfac      	ite	ge
 8014816:	eb03 0902 	addge.w	r9, r3, r2
 801481a:	1ad7      	sublt	r7, r2, r3
 801481c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801481e:	eba3 0801 	sub.w	r8, r3, r1
 8014822:	4490      	add	r8, r2
 8014824:	4ba3      	ldr	r3, [pc, #652]	; (8014ab4 <_strtod_l+0x964>)
 8014826:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801482a:	4598      	cmp	r8, r3
 801482c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014830:	f280 80cc 	bge.w	80149cc <_strtod_l+0x87c>
 8014834:	eba3 0308 	sub.w	r3, r3, r8
 8014838:	2b1f      	cmp	r3, #31
 801483a:	eba2 0203 	sub.w	r2, r2, r3
 801483e:	f04f 0101 	mov.w	r1, #1
 8014842:	f300 80b6 	bgt.w	80149b2 <_strtod_l+0x862>
 8014846:	fa01 f303 	lsl.w	r3, r1, r3
 801484a:	9311      	str	r3, [sp, #68]	; 0x44
 801484c:	2300      	movs	r3, #0
 801484e:	930c      	str	r3, [sp, #48]	; 0x30
 8014850:	eb09 0802 	add.w	r8, r9, r2
 8014854:	9b04      	ldr	r3, [sp, #16]
 8014856:	45c1      	cmp	r9, r8
 8014858:	4417      	add	r7, r2
 801485a:	441f      	add	r7, r3
 801485c:	464b      	mov	r3, r9
 801485e:	bfa8      	it	ge
 8014860:	4643      	movge	r3, r8
 8014862:	42bb      	cmp	r3, r7
 8014864:	bfa8      	it	ge
 8014866:	463b      	movge	r3, r7
 8014868:	2b00      	cmp	r3, #0
 801486a:	bfc2      	ittt	gt
 801486c:	eba8 0803 	subgt.w	r8, r8, r3
 8014870:	1aff      	subgt	r7, r7, r3
 8014872:	eba9 0903 	subgt.w	r9, r9, r3
 8014876:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014878:	2b00      	cmp	r3, #0
 801487a:	dd17      	ble.n	80148ac <_strtod_l+0x75c>
 801487c:	4631      	mov	r1, r6
 801487e:	461a      	mov	r2, r3
 8014880:	4620      	mov	r0, r4
 8014882:	f002 fa47 	bl	8016d14 <__pow5mult>
 8014886:	4606      	mov	r6, r0
 8014888:	2800      	cmp	r0, #0
 801488a:	f43f aead 	beq.w	80145e8 <_strtod_l+0x498>
 801488e:	4601      	mov	r1, r0
 8014890:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014892:	4620      	mov	r0, r4
 8014894:	f002 f998 	bl	8016bc8 <__multiply>
 8014898:	900f      	str	r0, [sp, #60]	; 0x3c
 801489a:	2800      	cmp	r0, #0
 801489c:	f43f aea4 	beq.w	80145e8 <_strtod_l+0x498>
 80148a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80148a2:	4620      	mov	r0, r4
 80148a4:	f002 f874 	bl	8016990 <_Bfree>
 80148a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148aa:	931e      	str	r3, [sp, #120]	; 0x78
 80148ac:	f1b8 0f00 	cmp.w	r8, #0
 80148b0:	f300 8091 	bgt.w	80149d6 <_strtod_l+0x886>
 80148b4:	9b08      	ldr	r3, [sp, #32]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	dd08      	ble.n	80148cc <_strtod_l+0x77c>
 80148ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80148bc:	9907      	ldr	r1, [sp, #28]
 80148be:	4620      	mov	r0, r4
 80148c0:	f002 fa28 	bl	8016d14 <__pow5mult>
 80148c4:	9007      	str	r0, [sp, #28]
 80148c6:	2800      	cmp	r0, #0
 80148c8:	f43f ae8e 	beq.w	80145e8 <_strtod_l+0x498>
 80148cc:	2f00      	cmp	r7, #0
 80148ce:	dd08      	ble.n	80148e2 <_strtod_l+0x792>
 80148d0:	9907      	ldr	r1, [sp, #28]
 80148d2:	463a      	mov	r2, r7
 80148d4:	4620      	mov	r0, r4
 80148d6:	f002 fa77 	bl	8016dc8 <__lshift>
 80148da:	9007      	str	r0, [sp, #28]
 80148dc:	2800      	cmp	r0, #0
 80148de:	f43f ae83 	beq.w	80145e8 <_strtod_l+0x498>
 80148e2:	f1b9 0f00 	cmp.w	r9, #0
 80148e6:	dd08      	ble.n	80148fa <_strtod_l+0x7aa>
 80148e8:	4631      	mov	r1, r6
 80148ea:	464a      	mov	r2, r9
 80148ec:	4620      	mov	r0, r4
 80148ee:	f002 fa6b 	bl	8016dc8 <__lshift>
 80148f2:	4606      	mov	r6, r0
 80148f4:	2800      	cmp	r0, #0
 80148f6:	f43f ae77 	beq.w	80145e8 <_strtod_l+0x498>
 80148fa:	9a07      	ldr	r2, [sp, #28]
 80148fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80148fe:	4620      	mov	r0, r4
 8014900:	f002 faea 	bl	8016ed8 <__mdiff>
 8014904:	4605      	mov	r5, r0
 8014906:	2800      	cmp	r0, #0
 8014908:	f43f ae6e 	beq.w	80145e8 <_strtod_l+0x498>
 801490c:	68c3      	ldr	r3, [r0, #12]
 801490e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014910:	2300      	movs	r3, #0
 8014912:	60c3      	str	r3, [r0, #12]
 8014914:	4631      	mov	r1, r6
 8014916:	f002 fac3 	bl	8016ea0 <__mcmp>
 801491a:	2800      	cmp	r0, #0
 801491c:	da65      	bge.n	80149ea <_strtod_l+0x89a>
 801491e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014920:	ea53 030a 	orrs.w	r3, r3, sl
 8014924:	f040 8087 	bne.w	8014a36 <_strtod_l+0x8e6>
 8014928:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801492c:	2b00      	cmp	r3, #0
 801492e:	f040 8082 	bne.w	8014a36 <_strtod_l+0x8e6>
 8014932:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014936:	0d1b      	lsrs	r3, r3, #20
 8014938:	051b      	lsls	r3, r3, #20
 801493a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801493e:	d97a      	bls.n	8014a36 <_strtod_l+0x8e6>
 8014940:	696b      	ldr	r3, [r5, #20]
 8014942:	b913      	cbnz	r3, 801494a <_strtod_l+0x7fa>
 8014944:	692b      	ldr	r3, [r5, #16]
 8014946:	2b01      	cmp	r3, #1
 8014948:	dd75      	ble.n	8014a36 <_strtod_l+0x8e6>
 801494a:	4629      	mov	r1, r5
 801494c:	2201      	movs	r2, #1
 801494e:	4620      	mov	r0, r4
 8014950:	f002 fa3a 	bl	8016dc8 <__lshift>
 8014954:	4631      	mov	r1, r6
 8014956:	4605      	mov	r5, r0
 8014958:	f002 faa2 	bl	8016ea0 <__mcmp>
 801495c:	2800      	cmp	r0, #0
 801495e:	dd6a      	ble.n	8014a36 <_strtod_l+0x8e6>
 8014960:	9904      	ldr	r1, [sp, #16]
 8014962:	4a55      	ldr	r2, [pc, #340]	; (8014ab8 <_strtod_l+0x968>)
 8014964:	465b      	mov	r3, fp
 8014966:	2900      	cmp	r1, #0
 8014968:	f000 8085 	beq.w	8014a76 <_strtod_l+0x926>
 801496c:	ea02 010b 	and.w	r1, r2, fp
 8014970:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014974:	dc7f      	bgt.n	8014a76 <_strtod_l+0x926>
 8014976:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801497a:	f77f aeaa 	ble.w	80146d2 <_strtod_l+0x582>
 801497e:	4a4f      	ldr	r2, [pc, #316]	; (8014abc <_strtod_l+0x96c>)
 8014980:	2300      	movs	r3, #0
 8014982:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014986:	4650      	mov	r0, sl
 8014988:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801498c:	4659      	mov	r1, fp
 801498e:	f7eb fe53 	bl	8000638 <__aeabi_dmul>
 8014992:	460b      	mov	r3, r1
 8014994:	4303      	orrs	r3, r0
 8014996:	bf08      	it	eq
 8014998:	2322      	moveq	r3, #34	; 0x22
 801499a:	4682      	mov	sl, r0
 801499c:	468b      	mov	fp, r1
 801499e:	bf08      	it	eq
 80149a0:	6023      	streq	r3, [r4, #0]
 80149a2:	e62b      	b.n	80145fc <_strtod_l+0x4ac>
 80149a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149a8:	fa02 f303 	lsl.w	r3, r2, r3
 80149ac:	ea03 0a0a 	and.w	sl, r3, sl
 80149b0:	e6de      	b.n	8014770 <_strtod_l+0x620>
 80149b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80149b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80149ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80149be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80149c2:	fa01 f308 	lsl.w	r3, r1, r8
 80149c6:	930c      	str	r3, [sp, #48]	; 0x30
 80149c8:	9111      	str	r1, [sp, #68]	; 0x44
 80149ca:	e741      	b.n	8014850 <_strtod_l+0x700>
 80149cc:	2300      	movs	r3, #0
 80149ce:	930c      	str	r3, [sp, #48]	; 0x30
 80149d0:	2301      	movs	r3, #1
 80149d2:	9311      	str	r3, [sp, #68]	; 0x44
 80149d4:	e73c      	b.n	8014850 <_strtod_l+0x700>
 80149d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80149d8:	4642      	mov	r2, r8
 80149da:	4620      	mov	r0, r4
 80149dc:	f002 f9f4 	bl	8016dc8 <__lshift>
 80149e0:	901e      	str	r0, [sp, #120]	; 0x78
 80149e2:	2800      	cmp	r0, #0
 80149e4:	f47f af66 	bne.w	80148b4 <_strtod_l+0x764>
 80149e8:	e5fe      	b.n	80145e8 <_strtod_l+0x498>
 80149ea:	465f      	mov	r7, fp
 80149ec:	d16e      	bne.n	8014acc <_strtod_l+0x97c>
 80149ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149f4:	b342      	cbz	r2, 8014a48 <_strtod_l+0x8f8>
 80149f6:	4a32      	ldr	r2, [pc, #200]	; (8014ac0 <_strtod_l+0x970>)
 80149f8:	4293      	cmp	r3, r2
 80149fa:	d128      	bne.n	8014a4e <_strtod_l+0x8fe>
 80149fc:	9b04      	ldr	r3, [sp, #16]
 80149fe:	4650      	mov	r0, sl
 8014a00:	b1eb      	cbz	r3, 8014a3e <_strtod_l+0x8ee>
 8014a02:	4a2d      	ldr	r2, [pc, #180]	; (8014ab8 <_strtod_l+0x968>)
 8014a04:	403a      	ands	r2, r7
 8014a06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014a0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a0e:	d819      	bhi.n	8014a44 <_strtod_l+0x8f4>
 8014a10:	0d12      	lsrs	r2, r2, #20
 8014a12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014a16:	fa01 f303 	lsl.w	r3, r1, r3
 8014a1a:	4298      	cmp	r0, r3
 8014a1c:	d117      	bne.n	8014a4e <_strtod_l+0x8fe>
 8014a1e:	4b29      	ldr	r3, [pc, #164]	; (8014ac4 <_strtod_l+0x974>)
 8014a20:	429f      	cmp	r7, r3
 8014a22:	d102      	bne.n	8014a2a <_strtod_l+0x8da>
 8014a24:	3001      	adds	r0, #1
 8014a26:	f43f addf 	beq.w	80145e8 <_strtod_l+0x498>
 8014a2a:	4b23      	ldr	r3, [pc, #140]	; (8014ab8 <_strtod_l+0x968>)
 8014a2c:	403b      	ands	r3, r7
 8014a2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014a32:	f04f 0a00 	mov.w	sl, #0
 8014a36:	9b04      	ldr	r3, [sp, #16]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d1a0      	bne.n	801497e <_strtod_l+0x82e>
 8014a3c:	e5de      	b.n	80145fc <_strtod_l+0x4ac>
 8014a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a42:	e7ea      	b.n	8014a1a <_strtod_l+0x8ca>
 8014a44:	460b      	mov	r3, r1
 8014a46:	e7e8      	b.n	8014a1a <_strtod_l+0x8ca>
 8014a48:	ea53 030a 	orrs.w	r3, r3, sl
 8014a4c:	d088      	beq.n	8014960 <_strtod_l+0x810>
 8014a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a50:	b1db      	cbz	r3, 8014a8a <_strtod_l+0x93a>
 8014a52:	423b      	tst	r3, r7
 8014a54:	d0ef      	beq.n	8014a36 <_strtod_l+0x8e6>
 8014a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a58:	9a04      	ldr	r2, [sp, #16]
 8014a5a:	4650      	mov	r0, sl
 8014a5c:	4659      	mov	r1, fp
 8014a5e:	b1c3      	cbz	r3, 8014a92 <_strtod_l+0x942>
 8014a60:	f7ff fb5a 	bl	8014118 <sulp>
 8014a64:	4602      	mov	r2, r0
 8014a66:	460b      	mov	r3, r1
 8014a68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a6c:	f7eb fc2e 	bl	80002cc <__adddf3>
 8014a70:	4682      	mov	sl, r0
 8014a72:	468b      	mov	fp, r1
 8014a74:	e7df      	b.n	8014a36 <_strtod_l+0x8e6>
 8014a76:	4013      	ands	r3, r2
 8014a78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014a7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014a80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014a84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014a88:	e7d5      	b.n	8014a36 <_strtod_l+0x8e6>
 8014a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a8c:	ea13 0f0a 	tst.w	r3, sl
 8014a90:	e7e0      	b.n	8014a54 <_strtod_l+0x904>
 8014a92:	f7ff fb41 	bl	8014118 <sulp>
 8014a96:	4602      	mov	r2, r0
 8014a98:	460b      	mov	r3, r1
 8014a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a9e:	f7eb fc13 	bl	80002c8 <__aeabi_dsub>
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	4682      	mov	sl, r0
 8014aa8:	468b      	mov	fp, r1
 8014aaa:	f7ec f82d 	bl	8000b08 <__aeabi_dcmpeq>
 8014aae:	2800      	cmp	r0, #0
 8014ab0:	d0c1      	beq.n	8014a36 <_strtod_l+0x8e6>
 8014ab2:	e60e      	b.n	80146d2 <_strtod_l+0x582>
 8014ab4:	fffffc02 	.word	0xfffffc02
 8014ab8:	7ff00000 	.word	0x7ff00000
 8014abc:	39500000 	.word	0x39500000
 8014ac0:	000fffff 	.word	0x000fffff
 8014ac4:	7fefffff 	.word	0x7fefffff
 8014ac8:	0801c4b8 	.word	0x0801c4b8
 8014acc:	4631      	mov	r1, r6
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f002 fb62 	bl	8017198 <__ratio>
 8014ad4:	ec59 8b10 	vmov	r8, r9, d0
 8014ad8:	ee10 0a10 	vmov	r0, s0
 8014adc:	2200      	movs	r2, #0
 8014ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014ae2:	4649      	mov	r1, r9
 8014ae4:	f7ec f824 	bl	8000b30 <__aeabi_dcmple>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d07c      	beq.n	8014be6 <_strtod_l+0xa96>
 8014aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d04c      	beq.n	8014b8c <_strtod_l+0xa3c>
 8014af2:	4b95      	ldr	r3, [pc, #596]	; (8014d48 <_strtod_l+0xbf8>)
 8014af4:	2200      	movs	r2, #0
 8014af6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014afa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014d48 <_strtod_l+0xbf8>
 8014afe:	f04f 0800 	mov.w	r8, #0
 8014b02:	4b92      	ldr	r3, [pc, #584]	; (8014d4c <_strtod_l+0xbfc>)
 8014b04:	403b      	ands	r3, r7
 8014b06:	9311      	str	r3, [sp, #68]	; 0x44
 8014b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014b0a:	4b91      	ldr	r3, [pc, #580]	; (8014d50 <_strtod_l+0xc00>)
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	f040 80b2 	bne.w	8014c76 <_strtod_l+0xb26>
 8014b12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014b1e:	ec4b ab10 	vmov	d0, sl, fp
 8014b22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014b26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014b2a:	f002 fa5d 	bl	8016fe8 <__ulp>
 8014b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b32:	ec53 2b10 	vmov	r2, r3, d0
 8014b36:	f7eb fd7f 	bl	8000638 <__aeabi_dmul>
 8014b3a:	4652      	mov	r2, sl
 8014b3c:	465b      	mov	r3, fp
 8014b3e:	f7eb fbc5 	bl	80002cc <__adddf3>
 8014b42:	460b      	mov	r3, r1
 8014b44:	4981      	ldr	r1, [pc, #516]	; (8014d4c <_strtod_l+0xbfc>)
 8014b46:	4a83      	ldr	r2, [pc, #524]	; (8014d54 <_strtod_l+0xc04>)
 8014b48:	4019      	ands	r1, r3
 8014b4a:	4291      	cmp	r1, r2
 8014b4c:	4682      	mov	sl, r0
 8014b4e:	d95e      	bls.n	8014c0e <_strtod_l+0xabe>
 8014b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d103      	bne.n	8014b62 <_strtod_l+0xa12>
 8014b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	f43f ad43 	beq.w	80145e8 <_strtod_l+0x498>
 8014b62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014d60 <_strtod_l+0xc10>
 8014b66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014b6a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f001 ff0f 	bl	8016990 <_Bfree>
 8014b72:	9907      	ldr	r1, [sp, #28]
 8014b74:	4620      	mov	r0, r4
 8014b76:	f001 ff0b 	bl	8016990 <_Bfree>
 8014b7a:	4631      	mov	r1, r6
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	f001 ff07 	bl	8016990 <_Bfree>
 8014b82:	4629      	mov	r1, r5
 8014b84:	4620      	mov	r0, r4
 8014b86:	f001 ff03 	bl	8016990 <_Bfree>
 8014b8a:	e613      	b.n	80147b4 <_strtod_l+0x664>
 8014b8c:	f1ba 0f00 	cmp.w	sl, #0
 8014b90:	d11b      	bne.n	8014bca <_strtod_l+0xa7a>
 8014b92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b96:	b9f3      	cbnz	r3, 8014bd6 <_strtod_l+0xa86>
 8014b98:	4b6b      	ldr	r3, [pc, #428]	; (8014d48 <_strtod_l+0xbf8>)
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	4640      	mov	r0, r8
 8014b9e:	4649      	mov	r1, r9
 8014ba0:	f7eb ffbc 	bl	8000b1c <__aeabi_dcmplt>
 8014ba4:	b9d0      	cbnz	r0, 8014bdc <_strtod_l+0xa8c>
 8014ba6:	4640      	mov	r0, r8
 8014ba8:	4649      	mov	r1, r9
 8014baa:	4b6b      	ldr	r3, [pc, #428]	; (8014d58 <_strtod_l+0xc08>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	f7eb fd43 	bl	8000638 <__aeabi_dmul>
 8014bb2:	4680      	mov	r8, r0
 8014bb4:	4689      	mov	r9, r1
 8014bb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014bba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014bbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8014bc0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014bc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014bc8:	e79b      	b.n	8014b02 <_strtod_l+0x9b2>
 8014bca:	f1ba 0f01 	cmp.w	sl, #1
 8014bce:	d102      	bne.n	8014bd6 <_strtod_l+0xa86>
 8014bd0:	2f00      	cmp	r7, #0
 8014bd2:	f43f ad7e 	beq.w	80146d2 <_strtod_l+0x582>
 8014bd6:	4b61      	ldr	r3, [pc, #388]	; (8014d5c <_strtod_l+0xc0c>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	e78c      	b.n	8014af6 <_strtod_l+0x9a6>
 8014bdc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014d58 <_strtod_l+0xc08>
 8014be0:	f04f 0800 	mov.w	r8, #0
 8014be4:	e7e7      	b.n	8014bb6 <_strtod_l+0xa66>
 8014be6:	4b5c      	ldr	r3, [pc, #368]	; (8014d58 <_strtod_l+0xc08>)
 8014be8:	4640      	mov	r0, r8
 8014bea:	4649      	mov	r1, r9
 8014bec:	2200      	movs	r2, #0
 8014bee:	f7eb fd23 	bl	8000638 <__aeabi_dmul>
 8014bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bf4:	4680      	mov	r8, r0
 8014bf6:	4689      	mov	r9, r1
 8014bf8:	b933      	cbnz	r3, 8014c08 <_strtod_l+0xab8>
 8014bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bfe:	9012      	str	r0, [sp, #72]	; 0x48
 8014c00:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014c06:	e7dd      	b.n	8014bc4 <_strtod_l+0xa74>
 8014c08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014c0c:	e7f9      	b.n	8014c02 <_strtod_l+0xab2>
 8014c0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014c12:	9b04      	ldr	r3, [sp, #16]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d1a8      	bne.n	8014b6a <_strtod_l+0xa1a>
 8014c18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c1e:	0d1b      	lsrs	r3, r3, #20
 8014c20:	051b      	lsls	r3, r3, #20
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d1a1      	bne.n	8014b6a <_strtod_l+0xa1a>
 8014c26:	4640      	mov	r0, r8
 8014c28:	4649      	mov	r1, r9
 8014c2a:	f7ec f865 	bl	8000cf8 <__aeabi_d2lz>
 8014c2e:	f7eb fcd5 	bl	80005dc <__aeabi_l2d>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4640      	mov	r0, r8
 8014c38:	4649      	mov	r1, r9
 8014c3a:	f7eb fb45 	bl	80002c8 <__aeabi_dsub>
 8014c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c44:	ea43 030a 	orr.w	r3, r3, sl
 8014c48:	4313      	orrs	r3, r2
 8014c4a:	4680      	mov	r8, r0
 8014c4c:	4689      	mov	r9, r1
 8014c4e:	d053      	beq.n	8014cf8 <_strtod_l+0xba8>
 8014c50:	a335      	add	r3, pc, #212	; (adr r3, 8014d28 <_strtod_l+0xbd8>)
 8014c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c56:	f7eb ff61 	bl	8000b1c <__aeabi_dcmplt>
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	f47f acce 	bne.w	80145fc <_strtod_l+0x4ac>
 8014c60:	a333      	add	r3, pc, #204	; (adr r3, 8014d30 <_strtod_l+0xbe0>)
 8014c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c66:	4640      	mov	r0, r8
 8014c68:	4649      	mov	r1, r9
 8014c6a:	f7eb ff75 	bl	8000b58 <__aeabi_dcmpgt>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	f43f af7b 	beq.w	8014b6a <_strtod_l+0xa1a>
 8014c74:	e4c2      	b.n	80145fc <_strtod_l+0x4ac>
 8014c76:	9b04      	ldr	r3, [sp, #16]
 8014c78:	b333      	cbz	r3, 8014cc8 <_strtod_l+0xb78>
 8014c7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c80:	d822      	bhi.n	8014cc8 <_strtod_l+0xb78>
 8014c82:	a32d      	add	r3, pc, #180	; (adr r3, 8014d38 <_strtod_l+0xbe8>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	4640      	mov	r0, r8
 8014c8a:	4649      	mov	r1, r9
 8014c8c:	f7eb ff50 	bl	8000b30 <__aeabi_dcmple>
 8014c90:	b1a0      	cbz	r0, 8014cbc <_strtod_l+0xb6c>
 8014c92:	4649      	mov	r1, r9
 8014c94:	4640      	mov	r0, r8
 8014c96:	f7eb ffa7 	bl	8000be8 <__aeabi_d2uiz>
 8014c9a:	2801      	cmp	r0, #1
 8014c9c:	bf38      	it	cc
 8014c9e:	2001      	movcc	r0, #1
 8014ca0:	f7eb fc50 	bl	8000544 <__aeabi_ui2d>
 8014ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ca6:	4680      	mov	r8, r0
 8014ca8:	4689      	mov	r9, r1
 8014caa:	bb13      	cbnz	r3, 8014cf2 <_strtod_l+0xba2>
 8014cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cb0:	9014      	str	r0, [sp, #80]	; 0x50
 8014cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8014cb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014cb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014cc4:	1a9b      	subs	r3, r3, r2
 8014cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8014cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ccc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014cd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014cd4:	f002 f988 	bl	8016fe8 <__ulp>
 8014cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014cdc:	ec53 2b10 	vmov	r2, r3, d0
 8014ce0:	f7eb fcaa 	bl	8000638 <__aeabi_dmul>
 8014ce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ce8:	f7eb faf0 	bl	80002cc <__adddf3>
 8014cec:	4682      	mov	sl, r0
 8014cee:	468b      	mov	fp, r1
 8014cf0:	e78f      	b.n	8014c12 <_strtod_l+0xac2>
 8014cf2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014cf6:	e7dd      	b.n	8014cb4 <_strtod_l+0xb64>
 8014cf8:	a311      	add	r3, pc, #68	; (adr r3, 8014d40 <_strtod_l+0xbf0>)
 8014cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cfe:	f7eb ff0d 	bl	8000b1c <__aeabi_dcmplt>
 8014d02:	e7b4      	b.n	8014c6e <_strtod_l+0xb1e>
 8014d04:	2300      	movs	r3, #0
 8014d06:	930e      	str	r3, [sp, #56]	; 0x38
 8014d08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014d0c:	6013      	str	r3, [r2, #0]
 8014d0e:	f7ff ba65 	b.w	80141dc <_strtod_l+0x8c>
 8014d12:	2b65      	cmp	r3, #101	; 0x65
 8014d14:	f43f ab5d 	beq.w	80143d2 <_strtod_l+0x282>
 8014d18:	2b45      	cmp	r3, #69	; 0x45
 8014d1a:	f43f ab5a 	beq.w	80143d2 <_strtod_l+0x282>
 8014d1e:	2201      	movs	r2, #1
 8014d20:	f7ff bb92 	b.w	8014448 <_strtod_l+0x2f8>
 8014d24:	f3af 8000 	nop.w
 8014d28:	94a03595 	.word	0x94a03595
 8014d2c:	3fdfffff 	.word	0x3fdfffff
 8014d30:	35afe535 	.word	0x35afe535
 8014d34:	3fe00000 	.word	0x3fe00000
 8014d38:	ffc00000 	.word	0xffc00000
 8014d3c:	41dfffff 	.word	0x41dfffff
 8014d40:	94a03595 	.word	0x94a03595
 8014d44:	3fcfffff 	.word	0x3fcfffff
 8014d48:	3ff00000 	.word	0x3ff00000
 8014d4c:	7ff00000 	.word	0x7ff00000
 8014d50:	7fe00000 	.word	0x7fe00000
 8014d54:	7c9fffff 	.word	0x7c9fffff
 8014d58:	3fe00000 	.word	0x3fe00000
 8014d5c:	bff00000 	.word	0xbff00000
 8014d60:	7fefffff 	.word	0x7fefffff

08014d64 <_strtod_r>:
 8014d64:	4b01      	ldr	r3, [pc, #4]	; (8014d6c <_strtod_r+0x8>)
 8014d66:	f7ff b9f3 	b.w	8014150 <_strtod_l>
 8014d6a:	bf00      	nop
 8014d6c:	20000414 	.word	0x20000414

08014d70 <strtod>:
 8014d70:	460a      	mov	r2, r1
 8014d72:	4601      	mov	r1, r0
 8014d74:	4802      	ldr	r0, [pc, #8]	; (8014d80 <strtod+0x10>)
 8014d76:	4b03      	ldr	r3, [pc, #12]	; (8014d84 <strtod+0x14>)
 8014d78:	6800      	ldr	r0, [r0, #0]
 8014d7a:	f7ff b9e9 	b.w	8014150 <_strtod_l>
 8014d7e:	bf00      	nop
 8014d80:	200003ac 	.word	0x200003ac
 8014d84:	20000414 	.word	0x20000414

08014d88 <__strtok_r>:
 8014d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d8a:	b908      	cbnz	r0, 8014d90 <__strtok_r+0x8>
 8014d8c:	6810      	ldr	r0, [r2, #0]
 8014d8e:	b188      	cbz	r0, 8014db4 <__strtok_r+0x2c>
 8014d90:	4604      	mov	r4, r0
 8014d92:	4620      	mov	r0, r4
 8014d94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014d98:	460f      	mov	r7, r1
 8014d9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014d9e:	b91e      	cbnz	r6, 8014da8 <__strtok_r+0x20>
 8014da0:	b965      	cbnz	r5, 8014dbc <__strtok_r+0x34>
 8014da2:	6015      	str	r5, [r2, #0]
 8014da4:	4628      	mov	r0, r5
 8014da6:	e005      	b.n	8014db4 <__strtok_r+0x2c>
 8014da8:	42b5      	cmp	r5, r6
 8014daa:	d1f6      	bne.n	8014d9a <__strtok_r+0x12>
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d1f0      	bne.n	8014d92 <__strtok_r+0xa>
 8014db0:	6014      	str	r4, [r2, #0]
 8014db2:	7003      	strb	r3, [r0, #0]
 8014db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014db6:	461c      	mov	r4, r3
 8014db8:	e00c      	b.n	8014dd4 <__strtok_r+0x4c>
 8014dba:	b915      	cbnz	r5, 8014dc2 <__strtok_r+0x3a>
 8014dbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014dc0:	460e      	mov	r6, r1
 8014dc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014dc6:	42ab      	cmp	r3, r5
 8014dc8:	d1f7      	bne.n	8014dba <__strtok_r+0x32>
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d0f3      	beq.n	8014db6 <__strtok_r+0x2e>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014dd4:	6014      	str	r4, [r2, #0]
 8014dd6:	e7ed      	b.n	8014db4 <__strtok_r+0x2c>

08014dd8 <strtok_r>:
 8014dd8:	2301      	movs	r3, #1
 8014dda:	f7ff bfd5 	b.w	8014d88 <__strtok_r>
	...

08014de0 <_strtol_l.isra.0>:
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014de6:	d001      	beq.n	8014dec <_strtol_l.isra.0+0xc>
 8014de8:	2b24      	cmp	r3, #36	; 0x24
 8014dea:	d906      	bls.n	8014dfa <_strtol_l.isra.0+0x1a>
 8014dec:	f7fe f9ce 	bl	801318c <__errno>
 8014df0:	2316      	movs	r3, #22
 8014df2:	6003      	str	r3, [r0, #0]
 8014df4:	2000      	movs	r0, #0
 8014df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dfa:	4f3a      	ldr	r7, [pc, #232]	; (8014ee4 <_strtol_l.isra.0+0x104>)
 8014dfc:	468e      	mov	lr, r1
 8014dfe:	4676      	mov	r6, lr
 8014e00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e04:	5de5      	ldrb	r5, [r4, r7]
 8014e06:	f015 0508 	ands.w	r5, r5, #8
 8014e0a:	d1f8      	bne.n	8014dfe <_strtol_l.isra.0+0x1e>
 8014e0c:	2c2d      	cmp	r4, #45	; 0x2d
 8014e0e:	d134      	bne.n	8014e7a <_strtol_l.isra.0+0x9a>
 8014e10:	f89e 4000 	ldrb.w	r4, [lr]
 8014e14:	f04f 0801 	mov.w	r8, #1
 8014e18:	f106 0e02 	add.w	lr, r6, #2
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d05c      	beq.n	8014eda <_strtol_l.isra.0+0xfa>
 8014e20:	2b10      	cmp	r3, #16
 8014e22:	d10c      	bne.n	8014e3e <_strtol_l.isra.0+0x5e>
 8014e24:	2c30      	cmp	r4, #48	; 0x30
 8014e26:	d10a      	bne.n	8014e3e <_strtol_l.isra.0+0x5e>
 8014e28:	f89e 4000 	ldrb.w	r4, [lr]
 8014e2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e30:	2c58      	cmp	r4, #88	; 0x58
 8014e32:	d14d      	bne.n	8014ed0 <_strtol_l.isra.0+0xf0>
 8014e34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014e38:	2310      	movs	r3, #16
 8014e3a:	f10e 0e02 	add.w	lr, lr, #2
 8014e3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014e42:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8014e46:	2600      	movs	r6, #0
 8014e48:	fbbc f9f3 	udiv	r9, ip, r3
 8014e4c:	4635      	mov	r5, r6
 8014e4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8014e52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014e56:	2f09      	cmp	r7, #9
 8014e58:	d818      	bhi.n	8014e8c <_strtol_l.isra.0+0xac>
 8014e5a:	463c      	mov	r4, r7
 8014e5c:	42a3      	cmp	r3, r4
 8014e5e:	dd24      	ble.n	8014eaa <_strtol_l.isra.0+0xca>
 8014e60:	2e00      	cmp	r6, #0
 8014e62:	db1f      	blt.n	8014ea4 <_strtol_l.isra.0+0xc4>
 8014e64:	45a9      	cmp	r9, r5
 8014e66:	d31d      	bcc.n	8014ea4 <_strtol_l.isra.0+0xc4>
 8014e68:	d101      	bne.n	8014e6e <_strtol_l.isra.0+0x8e>
 8014e6a:	45a2      	cmp	sl, r4
 8014e6c:	db1a      	blt.n	8014ea4 <_strtol_l.isra.0+0xc4>
 8014e6e:	fb05 4503 	mla	r5, r5, r3, r4
 8014e72:	2601      	movs	r6, #1
 8014e74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e78:	e7eb      	b.n	8014e52 <_strtol_l.isra.0+0x72>
 8014e7a:	2c2b      	cmp	r4, #43	; 0x2b
 8014e7c:	bf08      	it	eq
 8014e7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014e82:	46a8      	mov	r8, r5
 8014e84:	bf08      	it	eq
 8014e86:	f106 0e02 	addeq.w	lr, r6, #2
 8014e8a:	e7c7      	b.n	8014e1c <_strtol_l.isra.0+0x3c>
 8014e8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014e90:	2f19      	cmp	r7, #25
 8014e92:	d801      	bhi.n	8014e98 <_strtol_l.isra.0+0xb8>
 8014e94:	3c37      	subs	r4, #55	; 0x37
 8014e96:	e7e1      	b.n	8014e5c <_strtol_l.isra.0+0x7c>
 8014e98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014e9c:	2f19      	cmp	r7, #25
 8014e9e:	d804      	bhi.n	8014eaa <_strtol_l.isra.0+0xca>
 8014ea0:	3c57      	subs	r4, #87	; 0x57
 8014ea2:	e7db      	b.n	8014e5c <_strtol_l.isra.0+0x7c>
 8014ea4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014ea8:	e7e4      	b.n	8014e74 <_strtol_l.isra.0+0x94>
 8014eaa:	2e00      	cmp	r6, #0
 8014eac:	da05      	bge.n	8014eba <_strtol_l.isra.0+0xda>
 8014eae:	2322      	movs	r3, #34	; 0x22
 8014eb0:	6003      	str	r3, [r0, #0]
 8014eb2:	4665      	mov	r5, ip
 8014eb4:	b942      	cbnz	r2, 8014ec8 <_strtol_l.isra.0+0xe8>
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	e79d      	b.n	8014df6 <_strtol_l.isra.0+0x16>
 8014eba:	f1b8 0f00 	cmp.w	r8, #0
 8014ebe:	d000      	beq.n	8014ec2 <_strtol_l.isra.0+0xe2>
 8014ec0:	426d      	negs	r5, r5
 8014ec2:	2a00      	cmp	r2, #0
 8014ec4:	d0f7      	beq.n	8014eb6 <_strtol_l.isra.0+0xd6>
 8014ec6:	b10e      	cbz	r6, 8014ecc <_strtol_l.isra.0+0xec>
 8014ec8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8014ecc:	6011      	str	r1, [r2, #0]
 8014ece:	e7f2      	b.n	8014eb6 <_strtol_l.isra.0+0xd6>
 8014ed0:	2430      	movs	r4, #48	; 0x30
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1b3      	bne.n	8014e3e <_strtol_l.isra.0+0x5e>
 8014ed6:	2308      	movs	r3, #8
 8014ed8:	e7b1      	b.n	8014e3e <_strtol_l.isra.0+0x5e>
 8014eda:	2c30      	cmp	r4, #48	; 0x30
 8014edc:	d0a4      	beq.n	8014e28 <_strtol_l.isra.0+0x48>
 8014ede:	230a      	movs	r3, #10
 8014ee0:	e7ad      	b.n	8014e3e <_strtol_l.isra.0+0x5e>
 8014ee2:	bf00      	nop
 8014ee4:	0801c4e1 	.word	0x0801c4e1

08014ee8 <_strtol_r>:
 8014ee8:	f7ff bf7a 	b.w	8014de0 <_strtol_l.isra.0>

08014eec <strtol>:
 8014eec:	4613      	mov	r3, r2
 8014eee:	460a      	mov	r2, r1
 8014ef0:	4601      	mov	r1, r0
 8014ef2:	4802      	ldr	r0, [pc, #8]	; (8014efc <strtol+0x10>)
 8014ef4:	6800      	ldr	r0, [r0, #0]
 8014ef6:	f7ff bf73 	b.w	8014de0 <_strtol_l.isra.0>
 8014efa:	bf00      	nop
 8014efc:	200003ac 	.word	0x200003ac

08014f00 <_vsiprintf_r>:
 8014f00:	b500      	push	{lr}
 8014f02:	b09b      	sub	sp, #108	; 0x6c
 8014f04:	9100      	str	r1, [sp, #0]
 8014f06:	9104      	str	r1, [sp, #16]
 8014f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f0c:	9105      	str	r1, [sp, #20]
 8014f0e:	9102      	str	r1, [sp, #8]
 8014f10:	4905      	ldr	r1, [pc, #20]	; (8014f28 <_vsiprintf_r+0x28>)
 8014f12:	9103      	str	r1, [sp, #12]
 8014f14:	4669      	mov	r1, sp
 8014f16:	f002 fa21 	bl	801735c <_svfiprintf_r>
 8014f1a:	9b00      	ldr	r3, [sp, #0]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	701a      	strb	r2, [r3, #0]
 8014f20:	b01b      	add	sp, #108	; 0x6c
 8014f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f26:	bf00      	nop
 8014f28:	ffff0208 	.word	0xffff0208

08014f2c <vsiprintf>:
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	460a      	mov	r2, r1
 8014f30:	4601      	mov	r1, r0
 8014f32:	4802      	ldr	r0, [pc, #8]	; (8014f3c <vsiprintf+0x10>)
 8014f34:	6800      	ldr	r0, [r0, #0]
 8014f36:	f7ff bfe3 	b.w	8014f00 <_vsiprintf_r>
 8014f3a:	bf00      	nop
 8014f3c:	200003ac 	.word	0x200003ac

08014f40 <__swbuf_r>:
 8014f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f42:	460e      	mov	r6, r1
 8014f44:	4614      	mov	r4, r2
 8014f46:	4605      	mov	r5, r0
 8014f48:	b118      	cbz	r0, 8014f52 <__swbuf_r+0x12>
 8014f4a:	6983      	ldr	r3, [r0, #24]
 8014f4c:	b90b      	cbnz	r3, 8014f52 <__swbuf_r+0x12>
 8014f4e:	f001 f849 	bl	8015fe4 <__sinit>
 8014f52:	4b21      	ldr	r3, [pc, #132]	; (8014fd8 <__swbuf_r+0x98>)
 8014f54:	429c      	cmp	r4, r3
 8014f56:	d12b      	bne.n	8014fb0 <__swbuf_r+0x70>
 8014f58:	686c      	ldr	r4, [r5, #4]
 8014f5a:	69a3      	ldr	r3, [r4, #24]
 8014f5c:	60a3      	str	r3, [r4, #8]
 8014f5e:	89a3      	ldrh	r3, [r4, #12]
 8014f60:	071a      	lsls	r2, r3, #28
 8014f62:	d52f      	bpl.n	8014fc4 <__swbuf_r+0x84>
 8014f64:	6923      	ldr	r3, [r4, #16]
 8014f66:	b36b      	cbz	r3, 8014fc4 <__swbuf_r+0x84>
 8014f68:	6923      	ldr	r3, [r4, #16]
 8014f6a:	6820      	ldr	r0, [r4, #0]
 8014f6c:	1ac0      	subs	r0, r0, r3
 8014f6e:	6963      	ldr	r3, [r4, #20]
 8014f70:	b2f6      	uxtb	r6, r6
 8014f72:	4283      	cmp	r3, r0
 8014f74:	4637      	mov	r7, r6
 8014f76:	dc04      	bgt.n	8014f82 <__swbuf_r+0x42>
 8014f78:	4621      	mov	r1, r4
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f000 ff9e 	bl	8015ebc <_fflush_r>
 8014f80:	bb30      	cbnz	r0, 8014fd0 <__swbuf_r+0x90>
 8014f82:	68a3      	ldr	r3, [r4, #8]
 8014f84:	3b01      	subs	r3, #1
 8014f86:	60a3      	str	r3, [r4, #8]
 8014f88:	6823      	ldr	r3, [r4, #0]
 8014f8a:	1c5a      	adds	r2, r3, #1
 8014f8c:	6022      	str	r2, [r4, #0]
 8014f8e:	701e      	strb	r6, [r3, #0]
 8014f90:	6963      	ldr	r3, [r4, #20]
 8014f92:	3001      	adds	r0, #1
 8014f94:	4283      	cmp	r3, r0
 8014f96:	d004      	beq.n	8014fa2 <__swbuf_r+0x62>
 8014f98:	89a3      	ldrh	r3, [r4, #12]
 8014f9a:	07db      	lsls	r3, r3, #31
 8014f9c:	d506      	bpl.n	8014fac <__swbuf_r+0x6c>
 8014f9e:	2e0a      	cmp	r6, #10
 8014fa0:	d104      	bne.n	8014fac <__swbuf_r+0x6c>
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f000 ff89 	bl	8015ebc <_fflush_r>
 8014faa:	b988      	cbnz	r0, 8014fd0 <__swbuf_r+0x90>
 8014fac:	4638      	mov	r0, r7
 8014fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fb0:	4b0a      	ldr	r3, [pc, #40]	; (8014fdc <__swbuf_r+0x9c>)
 8014fb2:	429c      	cmp	r4, r3
 8014fb4:	d101      	bne.n	8014fba <__swbuf_r+0x7a>
 8014fb6:	68ac      	ldr	r4, [r5, #8]
 8014fb8:	e7cf      	b.n	8014f5a <__swbuf_r+0x1a>
 8014fba:	4b09      	ldr	r3, [pc, #36]	; (8014fe0 <__swbuf_r+0xa0>)
 8014fbc:	429c      	cmp	r4, r3
 8014fbe:	bf08      	it	eq
 8014fc0:	68ec      	ldreq	r4, [r5, #12]
 8014fc2:	e7ca      	b.n	8014f5a <__swbuf_r+0x1a>
 8014fc4:	4621      	mov	r1, r4
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f000 f80c 	bl	8014fe4 <__swsetup_r>
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d0cb      	beq.n	8014f68 <__swbuf_r+0x28>
 8014fd0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014fd4:	e7ea      	b.n	8014fac <__swbuf_r+0x6c>
 8014fd6:	bf00      	nop
 8014fd8:	0801c698 	.word	0x0801c698
 8014fdc:	0801c6b8 	.word	0x0801c6b8
 8014fe0:	0801c678 	.word	0x0801c678

08014fe4 <__swsetup_r>:
 8014fe4:	4b32      	ldr	r3, [pc, #200]	; (80150b0 <__swsetup_r+0xcc>)
 8014fe6:	b570      	push	{r4, r5, r6, lr}
 8014fe8:	681d      	ldr	r5, [r3, #0]
 8014fea:	4606      	mov	r6, r0
 8014fec:	460c      	mov	r4, r1
 8014fee:	b125      	cbz	r5, 8014ffa <__swsetup_r+0x16>
 8014ff0:	69ab      	ldr	r3, [r5, #24]
 8014ff2:	b913      	cbnz	r3, 8014ffa <__swsetup_r+0x16>
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	f000 fff5 	bl	8015fe4 <__sinit>
 8014ffa:	4b2e      	ldr	r3, [pc, #184]	; (80150b4 <__swsetup_r+0xd0>)
 8014ffc:	429c      	cmp	r4, r3
 8014ffe:	d10f      	bne.n	8015020 <__swsetup_r+0x3c>
 8015000:	686c      	ldr	r4, [r5, #4]
 8015002:	89a3      	ldrh	r3, [r4, #12]
 8015004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015008:	0719      	lsls	r1, r3, #28
 801500a:	d42c      	bmi.n	8015066 <__swsetup_r+0x82>
 801500c:	06dd      	lsls	r5, r3, #27
 801500e:	d411      	bmi.n	8015034 <__swsetup_r+0x50>
 8015010:	2309      	movs	r3, #9
 8015012:	6033      	str	r3, [r6, #0]
 8015014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015018:	81a3      	strh	r3, [r4, #12]
 801501a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801501e:	e03e      	b.n	801509e <__swsetup_r+0xba>
 8015020:	4b25      	ldr	r3, [pc, #148]	; (80150b8 <__swsetup_r+0xd4>)
 8015022:	429c      	cmp	r4, r3
 8015024:	d101      	bne.n	801502a <__swsetup_r+0x46>
 8015026:	68ac      	ldr	r4, [r5, #8]
 8015028:	e7eb      	b.n	8015002 <__swsetup_r+0x1e>
 801502a:	4b24      	ldr	r3, [pc, #144]	; (80150bc <__swsetup_r+0xd8>)
 801502c:	429c      	cmp	r4, r3
 801502e:	bf08      	it	eq
 8015030:	68ec      	ldreq	r4, [r5, #12]
 8015032:	e7e6      	b.n	8015002 <__swsetup_r+0x1e>
 8015034:	0758      	lsls	r0, r3, #29
 8015036:	d512      	bpl.n	801505e <__swsetup_r+0x7a>
 8015038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801503a:	b141      	cbz	r1, 801504e <__swsetup_r+0x6a>
 801503c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015040:	4299      	cmp	r1, r3
 8015042:	d002      	beq.n	801504a <__swsetup_r+0x66>
 8015044:	4630      	mov	r0, r6
 8015046:	f7fe f8e9 	bl	801321c <_free_r>
 801504a:	2300      	movs	r3, #0
 801504c:	6363      	str	r3, [r4, #52]	; 0x34
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015054:	81a3      	strh	r3, [r4, #12]
 8015056:	2300      	movs	r3, #0
 8015058:	6063      	str	r3, [r4, #4]
 801505a:	6923      	ldr	r3, [r4, #16]
 801505c:	6023      	str	r3, [r4, #0]
 801505e:	89a3      	ldrh	r3, [r4, #12]
 8015060:	f043 0308 	orr.w	r3, r3, #8
 8015064:	81a3      	strh	r3, [r4, #12]
 8015066:	6923      	ldr	r3, [r4, #16]
 8015068:	b94b      	cbnz	r3, 801507e <__swsetup_r+0x9a>
 801506a:	89a3      	ldrh	r3, [r4, #12]
 801506c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015074:	d003      	beq.n	801507e <__swsetup_r+0x9a>
 8015076:	4621      	mov	r1, r4
 8015078:	4630      	mov	r0, r6
 801507a:	f001 fbeb 	bl	8016854 <__smakebuf_r>
 801507e:	89a0      	ldrh	r0, [r4, #12]
 8015080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015084:	f010 0301 	ands.w	r3, r0, #1
 8015088:	d00a      	beq.n	80150a0 <__swsetup_r+0xbc>
 801508a:	2300      	movs	r3, #0
 801508c:	60a3      	str	r3, [r4, #8]
 801508e:	6963      	ldr	r3, [r4, #20]
 8015090:	425b      	negs	r3, r3
 8015092:	61a3      	str	r3, [r4, #24]
 8015094:	6923      	ldr	r3, [r4, #16]
 8015096:	b943      	cbnz	r3, 80150aa <__swsetup_r+0xc6>
 8015098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801509c:	d1ba      	bne.n	8015014 <__swsetup_r+0x30>
 801509e:	bd70      	pop	{r4, r5, r6, pc}
 80150a0:	0781      	lsls	r1, r0, #30
 80150a2:	bf58      	it	pl
 80150a4:	6963      	ldrpl	r3, [r4, #20]
 80150a6:	60a3      	str	r3, [r4, #8]
 80150a8:	e7f4      	b.n	8015094 <__swsetup_r+0xb0>
 80150aa:	2000      	movs	r0, #0
 80150ac:	e7f7      	b.n	801509e <__swsetup_r+0xba>
 80150ae:	bf00      	nop
 80150b0:	200003ac 	.word	0x200003ac
 80150b4:	0801c698 	.word	0x0801c698
 80150b8:	0801c6b8 	.word	0x0801c6b8
 80150bc:	0801c678 	.word	0x0801c678

080150c0 <quorem>:
 80150c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c4:	6903      	ldr	r3, [r0, #16]
 80150c6:	690c      	ldr	r4, [r1, #16]
 80150c8:	42a3      	cmp	r3, r4
 80150ca:	4607      	mov	r7, r0
 80150cc:	f2c0 8081 	blt.w	80151d2 <quorem+0x112>
 80150d0:	3c01      	subs	r4, #1
 80150d2:	f101 0814 	add.w	r8, r1, #20
 80150d6:	f100 0514 	add.w	r5, r0, #20
 80150da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150de:	9301      	str	r3, [sp, #4]
 80150e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80150e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80150e8:	3301      	adds	r3, #1
 80150ea:	429a      	cmp	r2, r3
 80150ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80150f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80150f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80150f8:	d331      	bcc.n	801515e <quorem+0x9e>
 80150fa:	f04f 0e00 	mov.w	lr, #0
 80150fe:	4640      	mov	r0, r8
 8015100:	46ac      	mov	ip, r5
 8015102:	46f2      	mov	sl, lr
 8015104:	f850 2b04 	ldr.w	r2, [r0], #4
 8015108:	b293      	uxth	r3, r2
 801510a:	fb06 e303 	mla	r3, r6, r3, lr
 801510e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015112:	b29b      	uxth	r3, r3
 8015114:	ebaa 0303 	sub.w	r3, sl, r3
 8015118:	0c12      	lsrs	r2, r2, #16
 801511a:	f8dc a000 	ldr.w	sl, [ip]
 801511e:	fb06 e202 	mla	r2, r6, r2, lr
 8015122:	fa13 f38a 	uxtah	r3, r3, sl
 8015126:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801512a:	fa1f fa82 	uxth.w	sl, r2
 801512e:	f8dc 2000 	ldr.w	r2, [ip]
 8015132:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015136:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801513a:	b29b      	uxth	r3, r3
 801513c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015140:	4581      	cmp	r9, r0
 8015142:	f84c 3b04 	str.w	r3, [ip], #4
 8015146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801514a:	d2db      	bcs.n	8015104 <quorem+0x44>
 801514c:	f855 300b 	ldr.w	r3, [r5, fp]
 8015150:	b92b      	cbnz	r3, 801515e <quorem+0x9e>
 8015152:	9b01      	ldr	r3, [sp, #4]
 8015154:	3b04      	subs	r3, #4
 8015156:	429d      	cmp	r5, r3
 8015158:	461a      	mov	r2, r3
 801515a:	d32e      	bcc.n	80151ba <quorem+0xfa>
 801515c:	613c      	str	r4, [r7, #16]
 801515e:	4638      	mov	r0, r7
 8015160:	f001 fe9e 	bl	8016ea0 <__mcmp>
 8015164:	2800      	cmp	r0, #0
 8015166:	db24      	blt.n	80151b2 <quorem+0xf2>
 8015168:	3601      	adds	r6, #1
 801516a:	4628      	mov	r0, r5
 801516c:	f04f 0c00 	mov.w	ip, #0
 8015170:	f858 2b04 	ldr.w	r2, [r8], #4
 8015174:	f8d0 e000 	ldr.w	lr, [r0]
 8015178:	b293      	uxth	r3, r2
 801517a:	ebac 0303 	sub.w	r3, ip, r3
 801517e:	0c12      	lsrs	r2, r2, #16
 8015180:	fa13 f38e 	uxtah	r3, r3, lr
 8015184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801518c:	b29b      	uxth	r3, r3
 801518e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015192:	45c1      	cmp	r9, r8
 8015194:	f840 3b04 	str.w	r3, [r0], #4
 8015198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801519c:	d2e8      	bcs.n	8015170 <quorem+0xb0>
 801519e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151a6:	b922      	cbnz	r2, 80151b2 <quorem+0xf2>
 80151a8:	3b04      	subs	r3, #4
 80151aa:	429d      	cmp	r5, r3
 80151ac:	461a      	mov	r2, r3
 80151ae:	d30a      	bcc.n	80151c6 <quorem+0x106>
 80151b0:	613c      	str	r4, [r7, #16]
 80151b2:	4630      	mov	r0, r6
 80151b4:	b003      	add	sp, #12
 80151b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ba:	6812      	ldr	r2, [r2, #0]
 80151bc:	3b04      	subs	r3, #4
 80151be:	2a00      	cmp	r2, #0
 80151c0:	d1cc      	bne.n	801515c <quorem+0x9c>
 80151c2:	3c01      	subs	r4, #1
 80151c4:	e7c7      	b.n	8015156 <quorem+0x96>
 80151c6:	6812      	ldr	r2, [r2, #0]
 80151c8:	3b04      	subs	r3, #4
 80151ca:	2a00      	cmp	r2, #0
 80151cc:	d1f0      	bne.n	80151b0 <quorem+0xf0>
 80151ce:	3c01      	subs	r4, #1
 80151d0:	e7eb      	b.n	80151aa <quorem+0xea>
 80151d2:	2000      	movs	r0, #0
 80151d4:	e7ee      	b.n	80151b4 <quorem+0xf4>
	...

080151d8 <_dtoa_r>:
 80151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151dc:	ed2d 8b02 	vpush	{d8}
 80151e0:	ec57 6b10 	vmov	r6, r7, d0
 80151e4:	b095      	sub	sp, #84	; 0x54
 80151e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80151e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80151ec:	9105      	str	r1, [sp, #20]
 80151ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80151f2:	4604      	mov	r4, r0
 80151f4:	9209      	str	r2, [sp, #36]	; 0x24
 80151f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80151f8:	b975      	cbnz	r5, 8015218 <_dtoa_r+0x40>
 80151fa:	2010      	movs	r0, #16
 80151fc:	f7fd fff0 	bl	80131e0 <malloc>
 8015200:	4602      	mov	r2, r0
 8015202:	6260      	str	r0, [r4, #36]	; 0x24
 8015204:	b920      	cbnz	r0, 8015210 <_dtoa_r+0x38>
 8015206:	4bb2      	ldr	r3, [pc, #712]	; (80154d0 <_dtoa_r+0x2f8>)
 8015208:	21ea      	movs	r1, #234	; 0xea
 801520a:	48b2      	ldr	r0, [pc, #712]	; (80154d4 <_dtoa_r+0x2fc>)
 801520c:	f002 fb7c 	bl	8017908 <__assert_func>
 8015210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015214:	6005      	str	r5, [r0, #0]
 8015216:	60c5      	str	r5, [r0, #12]
 8015218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801521a:	6819      	ldr	r1, [r3, #0]
 801521c:	b151      	cbz	r1, 8015234 <_dtoa_r+0x5c>
 801521e:	685a      	ldr	r2, [r3, #4]
 8015220:	604a      	str	r2, [r1, #4]
 8015222:	2301      	movs	r3, #1
 8015224:	4093      	lsls	r3, r2
 8015226:	608b      	str	r3, [r1, #8]
 8015228:	4620      	mov	r0, r4
 801522a:	f001 fbb1 	bl	8016990 <_Bfree>
 801522e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015230:	2200      	movs	r2, #0
 8015232:	601a      	str	r2, [r3, #0]
 8015234:	1e3b      	subs	r3, r7, #0
 8015236:	bfb9      	ittee	lt
 8015238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801523c:	9303      	strlt	r3, [sp, #12]
 801523e:	2300      	movge	r3, #0
 8015240:	f8c8 3000 	strge.w	r3, [r8]
 8015244:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015248:	4ba3      	ldr	r3, [pc, #652]	; (80154d8 <_dtoa_r+0x300>)
 801524a:	bfbc      	itt	lt
 801524c:	2201      	movlt	r2, #1
 801524e:	f8c8 2000 	strlt.w	r2, [r8]
 8015252:	ea33 0309 	bics.w	r3, r3, r9
 8015256:	d11b      	bne.n	8015290 <_dtoa_r+0xb8>
 8015258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801525a:	f242 730f 	movw	r3, #9999	; 0x270f
 801525e:	6013      	str	r3, [r2, #0]
 8015260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015264:	4333      	orrs	r3, r6
 8015266:	f000 857a 	beq.w	8015d5e <_dtoa_r+0xb86>
 801526a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801526c:	b963      	cbnz	r3, 8015288 <_dtoa_r+0xb0>
 801526e:	4b9b      	ldr	r3, [pc, #620]	; (80154dc <_dtoa_r+0x304>)
 8015270:	e024      	b.n	80152bc <_dtoa_r+0xe4>
 8015272:	4b9b      	ldr	r3, [pc, #620]	; (80154e0 <_dtoa_r+0x308>)
 8015274:	9300      	str	r3, [sp, #0]
 8015276:	3308      	adds	r3, #8
 8015278:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801527a:	6013      	str	r3, [r2, #0]
 801527c:	9800      	ldr	r0, [sp, #0]
 801527e:	b015      	add	sp, #84	; 0x54
 8015280:	ecbd 8b02 	vpop	{d8}
 8015284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015288:	4b94      	ldr	r3, [pc, #592]	; (80154dc <_dtoa_r+0x304>)
 801528a:	9300      	str	r3, [sp, #0]
 801528c:	3303      	adds	r3, #3
 801528e:	e7f3      	b.n	8015278 <_dtoa_r+0xa0>
 8015290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015294:	2200      	movs	r2, #0
 8015296:	ec51 0b17 	vmov	r0, r1, d7
 801529a:	2300      	movs	r3, #0
 801529c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80152a0:	f7eb fc32 	bl	8000b08 <__aeabi_dcmpeq>
 80152a4:	4680      	mov	r8, r0
 80152a6:	b158      	cbz	r0, 80152c0 <_dtoa_r+0xe8>
 80152a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152aa:	2301      	movs	r3, #1
 80152ac:	6013      	str	r3, [r2, #0]
 80152ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	f000 8551 	beq.w	8015d58 <_dtoa_r+0xb80>
 80152b6:	488b      	ldr	r0, [pc, #556]	; (80154e4 <_dtoa_r+0x30c>)
 80152b8:	6018      	str	r0, [r3, #0]
 80152ba:	1e43      	subs	r3, r0, #1
 80152bc:	9300      	str	r3, [sp, #0]
 80152be:	e7dd      	b.n	801527c <_dtoa_r+0xa4>
 80152c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80152c4:	aa12      	add	r2, sp, #72	; 0x48
 80152c6:	a913      	add	r1, sp, #76	; 0x4c
 80152c8:	4620      	mov	r0, r4
 80152ca:	f001 ff09 	bl	80170e0 <__d2b>
 80152ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80152d2:	4683      	mov	fp, r0
 80152d4:	2d00      	cmp	r5, #0
 80152d6:	d07c      	beq.n	80153d2 <_dtoa_r+0x1fa>
 80152d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80152de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80152e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80152ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80152ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80152f2:	4b7d      	ldr	r3, [pc, #500]	; (80154e8 <_dtoa_r+0x310>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	4630      	mov	r0, r6
 80152f8:	4639      	mov	r1, r7
 80152fa:	f7ea ffe5 	bl	80002c8 <__aeabi_dsub>
 80152fe:	a36e      	add	r3, pc, #440	; (adr r3, 80154b8 <_dtoa_r+0x2e0>)
 8015300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015304:	f7eb f998 	bl	8000638 <__aeabi_dmul>
 8015308:	a36d      	add	r3, pc, #436	; (adr r3, 80154c0 <_dtoa_r+0x2e8>)
 801530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801530e:	f7ea ffdd 	bl	80002cc <__adddf3>
 8015312:	4606      	mov	r6, r0
 8015314:	4628      	mov	r0, r5
 8015316:	460f      	mov	r7, r1
 8015318:	f7eb f924 	bl	8000564 <__aeabi_i2d>
 801531c:	a36a      	add	r3, pc, #424	; (adr r3, 80154c8 <_dtoa_r+0x2f0>)
 801531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015322:	f7eb f989 	bl	8000638 <__aeabi_dmul>
 8015326:	4602      	mov	r2, r0
 8015328:	460b      	mov	r3, r1
 801532a:	4630      	mov	r0, r6
 801532c:	4639      	mov	r1, r7
 801532e:	f7ea ffcd 	bl	80002cc <__adddf3>
 8015332:	4606      	mov	r6, r0
 8015334:	460f      	mov	r7, r1
 8015336:	f7eb fc2f 	bl	8000b98 <__aeabi_d2iz>
 801533a:	2200      	movs	r2, #0
 801533c:	4682      	mov	sl, r0
 801533e:	2300      	movs	r3, #0
 8015340:	4630      	mov	r0, r6
 8015342:	4639      	mov	r1, r7
 8015344:	f7eb fbea 	bl	8000b1c <__aeabi_dcmplt>
 8015348:	b148      	cbz	r0, 801535e <_dtoa_r+0x186>
 801534a:	4650      	mov	r0, sl
 801534c:	f7eb f90a 	bl	8000564 <__aeabi_i2d>
 8015350:	4632      	mov	r2, r6
 8015352:	463b      	mov	r3, r7
 8015354:	f7eb fbd8 	bl	8000b08 <__aeabi_dcmpeq>
 8015358:	b908      	cbnz	r0, 801535e <_dtoa_r+0x186>
 801535a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801535e:	f1ba 0f16 	cmp.w	sl, #22
 8015362:	d854      	bhi.n	801540e <_dtoa_r+0x236>
 8015364:	4b61      	ldr	r3, [pc, #388]	; (80154ec <_dtoa_r+0x314>)
 8015366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015372:	f7eb fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8015376:	2800      	cmp	r0, #0
 8015378:	d04b      	beq.n	8015412 <_dtoa_r+0x23a>
 801537a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801537e:	2300      	movs	r3, #0
 8015380:	930e      	str	r3, [sp, #56]	; 0x38
 8015382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015384:	1b5d      	subs	r5, r3, r5
 8015386:	1e6b      	subs	r3, r5, #1
 8015388:	9304      	str	r3, [sp, #16]
 801538a:	bf43      	ittte	mi
 801538c:	2300      	movmi	r3, #0
 801538e:	f1c5 0801 	rsbmi	r8, r5, #1
 8015392:	9304      	strmi	r3, [sp, #16]
 8015394:	f04f 0800 	movpl.w	r8, #0
 8015398:	f1ba 0f00 	cmp.w	sl, #0
 801539c:	db3b      	blt.n	8015416 <_dtoa_r+0x23e>
 801539e:	9b04      	ldr	r3, [sp, #16]
 80153a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80153a4:	4453      	add	r3, sl
 80153a6:	9304      	str	r3, [sp, #16]
 80153a8:	2300      	movs	r3, #0
 80153aa:	9306      	str	r3, [sp, #24]
 80153ac:	9b05      	ldr	r3, [sp, #20]
 80153ae:	2b09      	cmp	r3, #9
 80153b0:	d869      	bhi.n	8015486 <_dtoa_r+0x2ae>
 80153b2:	2b05      	cmp	r3, #5
 80153b4:	bfc4      	itt	gt
 80153b6:	3b04      	subgt	r3, #4
 80153b8:	9305      	strgt	r3, [sp, #20]
 80153ba:	9b05      	ldr	r3, [sp, #20]
 80153bc:	f1a3 0302 	sub.w	r3, r3, #2
 80153c0:	bfcc      	ite	gt
 80153c2:	2500      	movgt	r5, #0
 80153c4:	2501      	movle	r5, #1
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	d869      	bhi.n	801549e <_dtoa_r+0x2c6>
 80153ca:	e8df f003 	tbb	[pc, r3]
 80153ce:	4e2c      	.short	0x4e2c
 80153d0:	5a4c      	.short	0x5a4c
 80153d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80153d6:	441d      	add	r5, r3
 80153d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80153dc:	2b20      	cmp	r3, #32
 80153de:	bfc1      	itttt	gt
 80153e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80153e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80153e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80153ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80153f0:	bfda      	itte	le
 80153f2:	f1c3 0320 	rsble	r3, r3, #32
 80153f6:	fa06 f003 	lslle.w	r0, r6, r3
 80153fa:	4318      	orrgt	r0, r3
 80153fc:	f7eb f8a2 	bl	8000544 <__aeabi_ui2d>
 8015400:	2301      	movs	r3, #1
 8015402:	4606      	mov	r6, r0
 8015404:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015408:	3d01      	subs	r5, #1
 801540a:	9310      	str	r3, [sp, #64]	; 0x40
 801540c:	e771      	b.n	80152f2 <_dtoa_r+0x11a>
 801540e:	2301      	movs	r3, #1
 8015410:	e7b6      	b.n	8015380 <_dtoa_r+0x1a8>
 8015412:	900e      	str	r0, [sp, #56]	; 0x38
 8015414:	e7b5      	b.n	8015382 <_dtoa_r+0x1aa>
 8015416:	f1ca 0300 	rsb	r3, sl, #0
 801541a:	9306      	str	r3, [sp, #24]
 801541c:	2300      	movs	r3, #0
 801541e:	eba8 080a 	sub.w	r8, r8, sl
 8015422:	930d      	str	r3, [sp, #52]	; 0x34
 8015424:	e7c2      	b.n	80153ac <_dtoa_r+0x1d4>
 8015426:	2300      	movs	r3, #0
 8015428:	9308      	str	r3, [sp, #32]
 801542a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801542c:	2b00      	cmp	r3, #0
 801542e:	dc39      	bgt.n	80154a4 <_dtoa_r+0x2cc>
 8015430:	f04f 0901 	mov.w	r9, #1
 8015434:	f8cd 9004 	str.w	r9, [sp, #4]
 8015438:	464b      	mov	r3, r9
 801543a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801543e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015440:	2200      	movs	r2, #0
 8015442:	6042      	str	r2, [r0, #4]
 8015444:	2204      	movs	r2, #4
 8015446:	f102 0614 	add.w	r6, r2, #20
 801544a:	429e      	cmp	r6, r3
 801544c:	6841      	ldr	r1, [r0, #4]
 801544e:	d92f      	bls.n	80154b0 <_dtoa_r+0x2d8>
 8015450:	4620      	mov	r0, r4
 8015452:	f001 fa5d 	bl	8016910 <_Balloc>
 8015456:	9000      	str	r0, [sp, #0]
 8015458:	2800      	cmp	r0, #0
 801545a:	d14b      	bne.n	80154f4 <_dtoa_r+0x31c>
 801545c:	4b24      	ldr	r3, [pc, #144]	; (80154f0 <_dtoa_r+0x318>)
 801545e:	4602      	mov	r2, r0
 8015460:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015464:	e6d1      	b.n	801520a <_dtoa_r+0x32>
 8015466:	2301      	movs	r3, #1
 8015468:	e7de      	b.n	8015428 <_dtoa_r+0x250>
 801546a:	2300      	movs	r3, #0
 801546c:	9308      	str	r3, [sp, #32]
 801546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015470:	eb0a 0903 	add.w	r9, sl, r3
 8015474:	f109 0301 	add.w	r3, r9, #1
 8015478:	2b01      	cmp	r3, #1
 801547a:	9301      	str	r3, [sp, #4]
 801547c:	bfb8      	it	lt
 801547e:	2301      	movlt	r3, #1
 8015480:	e7dd      	b.n	801543e <_dtoa_r+0x266>
 8015482:	2301      	movs	r3, #1
 8015484:	e7f2      	b.n	801546c <_dtoa_r+0x294>
 8015486:	2501      	movs	r5, #1
 8015488:	2300      	movs	r3, #0
 801548a:	9305      	str	r3, [sp, #20]
 801548c:	9508      	str	r5, [sp, #32]
 801548e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8015492:	2200      	movs	r2, #0
 8015494:	f8cd 9004 	str.w	r9, [sp, #4]
 8015498:	2312      	movs	r3, #18
 801549a:	9209      	str	r2, [sp, #36]	; 0x24
 801549c:	e7cf      	b.n	801543e <_dtoa_r+0x266>
 801549e:	2301      	movs	r3, #1
 80154a0:	9308      	str	r3, [sp, #32]
 80154a2:	e7f4      	b.n	801548e <_dtoa_r+0x2b6>
 80154a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80154a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80154ac:	464b      	mov	r3, r9
 80154ae:	e7c6      	b.n	801543e <_dtoa_r+0x266>
 80154b0:	3101      	adds	r1, #1
 80154b2:	6041      	str	r1, [r0, #4]
 80154b4:	0052      	lsls	r2, r2, #1
 80154b6:	e7c6      	b.n	8015446 <_dtoa_r+0x26e>
 80154b8:	636f4361 	.word	0x636f4361
 80154bc:	3fd287a7 	.word	0x3fd287a7
 80154c0:	8b60c8b3 	.word	0x8b60c8b3
 80154c4:	3fc68a28 	.word	0x3fc68a28
 80154c8:	509f79fb 	.word	0x509f79fb
 80154cc:	3fd34413 	.word	0x3fd34413
 80154d0:	0801c5ee 	.word	0x0801c5ee
 80154d4:	0801c605 	.word	0x0801c605
 80154d8:	7ff00000 	.word	0x7ff00000
 80154dc:	0801c5ea 	.word	0x0801c5ea
 80154e0:	0801c5e1 	.word	0x0801c5e1
 80154e4:	0801c461 	.word	0x0801c461
 80154e8:	3ff80000 	.word	0x3ff80000
 80154ec:	0801c7e0 	.word	0x0801c7e0
 80154f0:	0801c664 	.word	0x0801c664
 80154f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154f6:	9a00      	ldr	r2, [sp, #0]
 80154f8:	601a      	str	r2, [r3, #0]
 80154fa:	9b01      	ldr	r3, [sp, #4]
 80154fc:	2b0e      	cmp	r3, #14
 80154fe:	f200 80ad 	bhi.w	801565c <_dtoa_r+0x484>
 8015502:	2d00      	cmp	r5, #0
 8015504:	f000 80aa 	beq.w	801565c <_dtoa_r+0x484>
 8015508:	f1ba 0f00 	cmp.w	sl, #0
 801550c:	dd36      	ble.n	801557c <_dtoa_r+0x3a4>
 801550e:	4ac3      	ldr	r2, [pc, #780]	; (801581c <_dtoa_r+0x644>)
 8015510:	f00a 030f 	and.w	r3, sl, #15
 8015514:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015518:	ed93 7b00 	vldr	d7, [r3]
 801551c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015520:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015524:	eeb0 8a47 	vmov.f32	s16, s14
 8015528:	eef0 8a67 	vmov.f32	s17, s15
 801552c:	d016      	beq.n	801555c <_dtoa_r+0x384>
 801552e:	4bbc      	ldr	r3, [pc, #752]	; (8015820 <_dtoa_r+0x648>)
 8015530:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015538:	f7eb f9a8 	bl	800088c <__aeabi_ddiv>
 801553c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015540:	f007 070f 	and.w	r7, r7, #15
 8015544:	2503      	movs	r5, #3
 8015546:	4eb6      	ldr	r6, [pc, #728]	; (8015820 <_dtoa_r+0x648>)
 8015548:	b957      	cbnz	r7, 8015560 <_dtoa_r+0x388>
 801554a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801554e:	ec53 2b18 	vmov	r2, r3, d8
 8015552:	f7eb f99b 	bl	800088c <__aeabi_ddiv>
 8015556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801555a:	e029      	b.n	80155b0 <_dtoa_r+0x3d8>
 801555c:	2502      	movs	r5, #2
 801555e:	e7f2      	b.n	8015546 <_dtoa_r+0x36e>
 8015560:	07f9      	lsls	r1, r7, #31
 8015562:	d508      	bpl.n	8015576 <_dtoa_r+0x39e>
 8015564:	ec51 0b18 	vmov	r0, r1, d8
 8015568:	e9d6 2300 	ldrd	r2, r3, [r6]
 801556c:	f7eb f864 	bl	8000638 <__aeabi_dmul>
 8015570:	ec41 0b18 	vmov	d8, r0, r1
 8015574:	3501      	adds	r5, #1
 8015576:	107f      	asrs	r7, r7, #1
 8015578:	3608      	adds	r6, #8
 801557a:	e7e5      	b.n	8015548 <_dtoa_r+0x370>
 801557c:	f000 80a6 	beq.w	80156cc <_dtoa_r+0x4f4>
 8015580:	f1ca 0600 	rsb	r6, sl, #0
 8015584:	4ba5      	ldr	r3, [pc, #660]	; (801581c <_dtoa_r+0x644>)
 8015586:	4fa6      	ldr	r7, [pc, #664]	; (8015820 <_dtoa_r+0x648>)
 8015588:	f006 020f 	and.w	r2, r6, #15
 801558c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015594:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015598:	f7eb f84e 	bl	8000638 <__aeabi_dmul>
 801559c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155a0:	1136      	asrs	r6, r6, #4
 80155a2:	2300      	movs	r3, #0
 80155a4:	2502      	movs	r5, #2
 80155a6:	2e00      	cmp	r6, #0
 80155a8:	f040 8085 	bne.w	80156b6 <_dtoa_r+0x4de>
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d1d2      	bne.n	8015556 <_dtoa_r+0x37e>
 80155b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	f000 808c 	beq.w	80156d0 <_dtoa_r+0x4f8>
 80155b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80155bc:	4b99      	ldr	r3, [pc, #612]	; (8015824 <_dtoa_r+0x64c>)
 80155be:	2200      	movs	r2, #0
 80155c0:	4630      	mov	r0, r6
 80155c2:	4639      	mov	r1, r7
 80155c4:	f7eb faaa 	bl	8000b1c <__aeabi_dcmplt>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	f000 8081 	beq.w	80156d0 <_dtoa_r+0x4f8>
 80155ce:	9b01      	ldr	r3, [sp, #4]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d07d      	beq.n	80156d0 <_dtoa_r+0x4f8>
 80155d4:	f1b9 0f00 	cmp.w	r9, #0
 80155d8:	dd3c      	ble.n	8015654 <_dtoa_r+0x47c>
 80155da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80155de:	9307      	str	r3, [sp, #28]
 80155e0:	2200      	movs	r2, #0
 80155e2:	4b91      	ldr	r3, [pc, #580]	; (8015828 <_dtoa_r+0x650>)
 80155e4:	4630      	mov	r0, r6
 80155e6:	4639      	mov	r1, r7
 80155e8:	f7eb f826 	bl	8000638 <__aeabi_dmul>
 80155ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155f0:	3501      	adds	r5, #1
 80155f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80155f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80155fa:	4628      	mov	r0, r5
 80155fc:	f7ea ffb2 	bl	8000564 <__aeabi_i2d>
 8015600:	4632      	mov	r2, r6
 8015602:	463b      	mov	r3, r7
 8015604:	f7eb f818 	bl	8000638 <__aeabi_dmul>
 8015608:	4b88      	ldr	r3, [pc, #544]	; (801582c <_dtoa_r+0x654>)
 801560a:	2200      	movs	r2, #0
 801560c:	f7ea fe5e 	bl	80002cc <__adddf3>
 8015610:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015618:	9303      	str	r3, [sp, #12]
 801561a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801561c:	2b00      	cmp	r3, #0
 801561e:	d15c      	bne.n	80156da <_dtoa_r+0x502>
 8015620:	4b83      	ldr	r3, [pc, #524]	; (8015830 <_dtoa_r+0x658>)
 8015622:	2200      	movs	r2, #0
 8015624:	4630      	mov	r0, r6
 8015626:	4639      	mov	r1, r7
 8015628:	f7ea fe4e 	bl	80002c8 <__aeabi_dsub>
 801562c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015630:	4606      	mov	r6, r0
 8015632:	460f      	mov	r7, r1
 8015634:	f7eb fa90 	bl	8000b58 <__aeabi_dcmpgt>
 8015638:	2800      	cmp	r0, #0
 801563a:	f040 8296 	bne.w	8015b6a <_dtoa_r+0x992>
 801563e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015642:	4630      	mov	r0, r6
 8015644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015648:	4639      	mov	r1, r7
 801564a:	f7eb fa67 	bl	8000b1c <__aeabi_dcmplt>
 801564e:	2800      	cmp	r0, #0
 8015650:	f040 8288 	bne.w	8015b64 <_dtoa_r+0x98c>
 8015654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015658:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801565c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801565e:	2b00      	cmp	r3, #0
 8015660:	f2c0 8158 	blt.w	8015914 <_dtoa_r+0x73c>
 8015664:	f1ba 0f0e 	cmp.w	sl, #14
 8015668:	f300 8154 	bgt.w	8015914 <_dtoa_r+0x73c>
 801566c:	4b6b      	ldr	r3, [pc, #428]	; (801581c <_dtoa_r+0x644>)
 801566e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015672:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015678:	2b00      	cmp	r3, #0
 801567a:	f280 80e3 	bge.w	8015844 <_dtoa_r+0x66c>
 801567e:	9b01      	ldr	r3, [sp, #4]
 8015680:	2b00      	cmp	r3, #0
 8015682:	f300 80df 	bgt.w	8015844 <_dtoa_r+0x66c>
 8015686:	f040 826d 	bne.w	8015b64 <_dtoa_r+0x98c>
 801568a:	4b69      	ldr	r3, [pc, #420]	; (8015830 <_dtoa_r+0x658>)
 801568c:	2200      	movs	r2, #0
 801568e:	4640      	mov	r0, r8
 8015690:	4649      	mov	r1, r9
 8015692:	f7ea ffd1 	bl	8000638 <__aeabi_dmul>
 8015696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801569a:	f7eb fa53 	bl	8000b44 <__aeabi_dcmpge>
 801569e:	9e01      	ldr	r6, [sp, #4]
 80156a0:	4637      	mov	r7, r6
 80156a2:	2800      	cmp	r0, #0
 80156a4:	f040 8243 	bne.w	8015b2e <_dtoa_r+0x956>
 80156a8:	9d00      	ldr	r5, [sp, #0]
 80156aa:	2331      	movs	r3, #49	; 0x31
 80156ac:	f805 3b01 	strb.w	r3, [r5], #1
 80156b0:	f10a 0a01 	add.w	sl, sl, #1
 80156b4:	e23f      	b.n	8015b36 <_dtoa_r+0x95e>
 80156b6:	07f2      	lsls	r2, r6, #31
 80156b8:	d505      	bpl.n	80156c6 <_dtoa_r+0x4ee>
 80156ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80156be:	f7ea ffbb 	bl	8000638 <__aeabi_dmul>
 80156c2:	3501      	adds	r5, #1
 80156c4:	2301      	movs	r3, #1
 80156c6:	1076      	asrs	r6, r6, #1
 80156c8:	3708      	adds	r7, #8
 80156ca:	e76c      	b.n	80155a6 <_dtoa_r+0x3ce>
 80156cc:	2502      	movs	r5, #2
 80156ce:	e76f      	b.n	80155b0 <_dtoa_r+0x3d8>
 80156d0:	9b01      	ldr	r3, [sp, #4]
 80156d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80156d6:	930c      	str	r3, [sp, #48]	; 0x30
 80156d8:	e78d      	b.n	80155f6 <_dtoa_r+0x41e>
 80156da:	9900      	ldr	r1, [sp, #0]
 80156dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80156de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156e0:	4b4e      	ldr	r3, [pc, #312]	; (801581c <_dtoa_r+0x644>)
 80156e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80156e6:	4401      	add	r1, r0
 80156e8:	9102      	str	r1, [sp, #8]
 80156ea:	9908      	ldr	r1, [sp, #32]
 80156ec:	eeb0 8a47 	vmov.f32	s16, s14
 80156f0:	eef0 8a67 	vmov.f32	s17, s15
 80156f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80156f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80156fc:	2900      	cmp	r1, #0
 80156fe:	d045      	beq.n	801578c <_dtoa_r+0x5b4>
 8015700:	494c      	ldr	r1, [pc, #304]	; (8015834 <_dtoa_r+0x65c>)
 8015702:	2000      	movs	r0, #0
 8015704:	f7eb f8c2 	bl	800088c <__aeabi_ddiv>
 8015708:	ec53 2b18 	vmov	r2, r3, d8
 801570c:	f7ea fddc 	bl	80002c8 <__aeabi_dsub>
 8015710:	9d00      	ldr	r5, [sp, #0]
 8015712:	ec41 0b18 	vmov	d8, r0, r1
 8015716:	4639      	mov	r1, r7
 8015718:	4630      	mov	r0, r6
 801571a:	f7eb fa3d 	bl	8000b98 <__aeabi_d2iz>
 801571e:	900c      	str	r0, [sp, #48]	; 0x30
 8015720:	f7ea ff20 	bl	8000564 <__aeabi_i2d>
 8015724:	4602      	mov	r2, r0
 8015726:	460b      	mov	r3, r1
 8015728:	4630      	mov	r0, r6
 801572a:	4639      	mov	r1, r7
 801572c:	f7ea fdcc 	bl	80002c8 <__aeabi_dsub>
 8015730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015732:	3330      	adds	r3, #48	; 0x30
 8015734:	f805 3b01 	strb.w	r3, [r5], #1
 8015738:	ec53 2b18 	vmov	r2, r3, d8
 801573c:	4606      	mov	r6, r0
 801573e:	460f      	mov	r7, r1
 8015740:	f7eb f9ec 	bl	8000b1c <__aeabi_dcmplt>
 8015744:	2800      	cmp	r0, #0
 8015746:	d165      	bne.n	8015814 <_dtoa_r+0x63c>
 8015748:	4632      	mov	r2, r6
 801574a:	463b      	mov	r3, r7
 801574c:	4935      	ldr	r1, [pc, #212]	; (8015824 <_dtoa_r+0x64c>)
 801574e:	2000      	movs	r0, #0
 8015750:	f7ea fdba 	bl	80002c8 <__aeabi_dsub>
 8015754:	ec53 2b18 	vmov	r2, r3, d8
 8015758:	f7eb f9e0 	bl	8000b1c <__aeabi_dcmplt>
 801575c:	2800      	cmp	r0, #0
 801575e:	f040 80b9 	bne.w	80158d4 <_dtoa_r+0x6fc>
 8015762:	9b02      	ldr	r3, [sp, #8]
 8015764:	429d      	cmp	r5, r3
 8015766:	f43f af75 	beq.w	8015654 <_dtoa_r+0x47c>
 801576a:	4b2f      	ldr	r3, [pc, #188]	; (8015828 <_dtoa_r+0x650>)
 801576c:	ec51 0b18 	vmov	r0, r1, d8
 8015770:	2200      	movs	r2, #0
 8015772:	f7ea ff61 	bl	8000638 <__aeabi_dmul>
 8015776:	4b2c      	ldr	r3, [pc, #176]	; (8015828 <_dtoa_r+0x650>)
 8015778:	ec41 0b18 	vmov	d8, r0, r1
 801577c:	2200      	movs	r2, #0
 801577e:	4630      	mov	r0, r6
 8015780:	4639      	mov	r1, r7
 8015782:	f7ea ff59 	bl	8000638 <__aeabi_dmul>
 8015786:	4606      	mov	r6, r0
 8015788:	460f      	mov	r7, r1
 801578a:	e7c4      	b.n	8015716 <_dtoa_r+0x53e>
 801578c:	ec51 0b17 	vmov	r0, r1, d7
 8015790:	f7ea ff52 	bl	8000638 <__aeabi_dmul>
 8015794:	9b02      	ldr	r3, [sp, #8]
 8015796:	9d00      	ldr	r5, [sp, #0]
 8015798:	930c      	str	r3, [sp, #48]	; 0x30
 801579a:	ec41 0b18 	vmov	d8, r0, r1
 801579e:	4639      	mov	r1, r7
 80157a0:	4630      	mov	r0, r6
 80157a2:	f7eb f9f9 	bl	8000b98 <__aeabi_d2iz>
 80157a6:	9011      	str	r0, [sp, #68]	; 0x44
 80157a8:	f7ea fedc 	bl	8000564 <__aeabi_i2d>
 80157ac:	4602      	mov	r2, r0
 80157ae:	460b      	mov	r3, r1
 80157b0:	4630      	mov	r0, r6
 80157b2:	4639      	mov	r1, r7
 80157b4:	f7ea fd88 	bl	80002c8 <__aeabi_dsub>
 80157b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157ba:	3330      	adds	r3, #48	; 0x30
 80157bc:	f805 3b01 	strb.w	r3, [r5], #1
 80157c0:	9b02      	ldr	r3, [sp, #8]
 80157c2:	429d      	cmp	r5, r3
 80157c4:	4606      	mov	r6, r0
 80157c6:	460f      	mov	r7, r1
 80157c8:	f04f 0200 	mov.w	r2, #0
 80157cc:	d134      	bne.n	8015838 <_dtoa_r+0x660>
 80157ce:	4b19      	ldr	r3, [pc, #100]	; (8015834 <_dtoa_r+0x65c>)
 80157d0:	ec51 0b18 	vmov	r0, r1, d8
 80157d4:	f7ea fd7a 	bl	80002cc <__adddf3>
 80157d8:	4602      	mov	r2, r0
 80157da:	460b      	mov	r3, r1
 80157dc:	4630      	mov	r0, r6
 80157de:	4639      	mov	r1, r7
 80157e0:	f7eb f9ba 	bl	8000b58 <__aeabi_dcmpgt>
 80157e4:	2800      	cmp	r0, #0
 80157e6:	d175      	bne.n	80158d4 <_dtoa_r+0x6fc>
 80157e8:	ec53 2b18 	vmov	r2, r3, d8
 80157ec:	4911      	ldr	r1, [pc, #68]	; (8015834 <_dtoa_r+0x65c>)
 80157ee:	2000      	movs	r0, #0
 80157f0:	f7ea fd6a 	bl	80002c8 <__aeabi_dsub>
 80157f4:	4602      	mov	r2, r0
 80157f6:	460b      	mov	r3, r1
 80157f8:	4630      	mov	r0, r6
 80157fa:	4639      	mov	r1, r7
 80157fc:	f7eb f98e 	bl	8000b1c <__aeabi_dcmplt>
 8015800:	2800      	cmp	r0, #0
 8015802:	f43f af27 	beq.w	8015654 <_dtoa_r+0x47c>
 8015806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015808:	1e6b      	subs	r3, r5, #1
 801580a:	930c      	str	r3, [sp, #48]	; 0x30
 801580c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015810:	2b30      	cmp	r3, #48	; 0x30
 8015812:	d0f8      	beq.n	8015806 <_dtoa_r+0x62e>
 8015814:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015818:	e04a      	b.n	80158b0 <_dtoa_r+0x6d8>
 801581a:	bf00      	nop
 801581c:	0801c7e0 	.word	0x0801c7e0
 8015820:	0801c7b8 	.word	0x0801c7b8
 8015824:	3ff00000 	.word	0x3ff00000
 8015828:	40240000 	.word	0x40240000
 801582c:	401c0000 	.word	0x401c0000
 8015830:	40140000 	.word	0x40140000
 8015834:	3fe00000 	.word	0x3fe00000
 8015838:	4baf      	ldr	r3, [pc, #700]	; (8015af8 <_dtoa_r+0x920>)
 801583a:	f7ea fefd 	bl	8000638 <__aeabi_dmul>
 801583e:	4606      	mov	r6, r0
 8015840:	460f      	mov	r7, r1
 8015842:	e7ac      	b.n	801579e <_dtoa_r+0x5c6>
 8015844:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015848:	9d00      	ldr	r5, [sp, #0]
 801584a:	4642      	mov	r2, r8
 801584c:	464b      	mov	r3, r9
 801584e:	4630      	mov	r0, r6
 8015850:	4639      	mov	r1, r7
 8015852:	f7eb f81b 	bl	800088c <__aeabi_ddiv>
 8015856:	f7eb f99f 	bl	8000b98 <__aeabi_d2iz>
 801585a:	9002      	str	r0, [sp, #8]
 801585c:	f7ea fe82 	bl	8000564 <__aeabi_i2d>
 8015860:	4642      	mov	r2, r8
 8015862:	464b      	mov	r3, r9
 8015864:	f7ea fee8 	bl	8000638 <__aeabi_dmul>
 8015868:	4602      	mov	r2, r0
 801586a:	460b      	mov	r3, r1
 801586c:	4630      	mov	r0, r6
 801586e:	4639      	mov	r1, r7
 8015870:	f7ea fd2a 	bl	80002c8 <__aeabi_dsub>
 8015874:	9e02      	ldr	r6, [sp, #8]
 8015876:	9f01      	ldr	r7, [sp, #4]
 8015878:	3630      	adds	r6, #48	; 0x30
 801587a:	f805 6b01 	strb.w	r6, [r5], #1
 801587e:	9e00      	ldr	r6, [sp, #0]
 8015880:	1bae      	subs	r6, r5, r6
 8015882:	42b7      	cmp	r7, r6
 8015884:	4602      	mov	r2, r0
 8015886:	460b      	mov	r3, r1
 8015888:	d137      	bne.n	80158fa <_dtoa_r+0x722>
 801588a:	f7ea fd1f 	bl	80002cc <__adddf3>
 801588e:	4642      	mov	r2, r8
 8015890:	464b      	mov	r3, r9
 8015892:	4606      	mov	r6, r0
 8015894:	460f      	mov	r7, r1
 8015896:	f7eb f95f 	bl	8000b58 <__aeabi_dcmpgt>
 801589a:	b9c8      	cbnz	r0, 80158d0 <_dtoa_r+0x6f8>
 801589c:	4642      	mov	r2, r8
 801589e:	464b      	mov	r3, r9
 80158a0:	4630      	mov	r0, r6
 80158a2:	4639      	mov	r1, r7
 80158a4:	f7eb f930 	bl	8000b08 <__aeabi_dcmpeq>
 80158a8:	b110      	cbz	r0, 80158b0 <_dtoa_r+0x6d8>
 80158aa:	9b02      	ldr	r3, [sp, #8]
 80158ac:	07d9      	lsls	r1, r3, #31
 80158ae:	d40f      	bmi.n	80158d0 <_dtoa_r+0x6f8>
 80158b0:	4620      	mov	r0, r4
 80158b2:	4659      	mov	r1, fp
 80158b4:	f001 f86c 	bl	8016990 <_Bfree>
 80158b8:	2300      	movs	r3, #0
 80158ba:	702b      	strb	r3, [r5, #0]
 80158bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158be:	f10a 0001 	add.w	r0, sl, #1
 80158c2:	6018      	str	r0, [r3, #0]
 80158c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	f43f acd8 	beq.w	801527c <_dtoa_r+0xa4>
 80158cc:	601d      	str	r5, [r3, #0]
 80158ce:	e4d5      	b.n	801527c <_dtoa_r+0xa4>
 80158d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80158d4:	462b      	mov	r3, r5
 80158d6:	461d      	mov	r5, r3
 80158d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158dc:	2a39      	cmp	r2, #57	; 0x39
 80158de:	d108      	bne.n	80158f2 <_dtoa_r+0x71a>
 80158e0:	9a00      	ldr	r2, [sp, #0]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d1f7      	bne.n	80158d6 <_dtoa_r+0x6fe>
 80158e6:	9a07      	ldr	r2, [sp, #28]
 80158e8:	9900      	ldr	r1, [sp, #0]
 80158ea:	3201      	adds	r2, #1
 80158ec:	9207      	str	r2, [sp, #28]
 80158ee:	2230      	movs	r2, #48	; 0x30
 80158f0:	700a      	strb	r2, [r1, #0]
 80158f2:	781a      	ldrb	r2, [r3, #0]
 80158f4:	3201      	adds	r2, #1
 80158f6:	701a      	strb	r2, [r3, #0]
 80158f8:	e78c      	b.n	8015814 <_dtoa_r+0x63c>
 80158fa:	4b7f      	ldr	r3, [pc, #508]	; (8015af8 <_dtoa_r+0x920>)
 80158fc:	2200      	movs	r2, #0
 80158fe:	f7ea fe9b 	bl	8000638 <__aeabi_dmul>
 8015902:	2200      	movs	r2, #0
 8015904:	2300      	movs	r3, #0
 8015906:	4606      	mov	r6, r0
 8015908:	460f      	mov	r7, r1
 801590a:	f7eb f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 801590e:	2800      	cmp	r0, #0
 8015910:	d09b      	beq.n	801584a <_dtoa_r+0x672>
 8015912:	e7cd      	b.n	80158b0 <_dtoa_r+0x6d8>
 8015914:	9a08      	ldr	r2, [sp, #32]
 8015916:	2a00      	cmp	r2, #0
 8015918:	f000 80c4 	beq.w	8015aa4 <_dtoa_r+0x8cc>
 801591c:	9a05      	ldr	r2, [sp, #20]
 801591e:	2a01      	cmp	r2, #1
 8015920:	f300 80a8 	bgt.w	8015a74 <_dtoa_r+0x89c>
 8015924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015926:	2a00      	cmp	r2, #0
 8015928:	f000 80a0 	beq.w	8015a6c <_dtoa_r+0x894>
 801592c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015930:	9e06      	ldr	r6, [sp, #24]
 8015932:	4645      	mov	r5, r8
 8015934:	9a04      	ldr	r2, [sp, #16]
 8015936:	2101      	movs	r1, #1
 8015938:	441a      	add	r2, r3
 801593a:	4620      	mov	r0, r4
 801593c:	4498      	add	r8, r3
 801593e:	9204      	str	r2, [sp, #16]
 8015940:	f001 f92c 	bl	8016b9c <__i2b>
 8015944:	4607      	mov	r7, r0
 8015946:	2d00      	cmp	r5, #0
 8015948:	dd0b      	ble.n	8015962 <_dtoa_r+0x78a>
 801594a:	9b04      	ldr	r3, [sp, #16]
 801594c:	2b00      	cmp	r3, #0
 801594e:	dd08      	ble.n	8015962 <_dtoa_r+0x78a>
 8015950:	42ab      	cmp	r3, r5
 8015952:	9a04      	ldr	r2, [sp, #16]
 8015954:	bfa8      	it	ge
 8015956:	462b      	movge	r3, r5
 8015958:	eba8 0803 	sub.w	r8, r8, r3
 801595c:	1aed      	subs	r5, r5, r3
 801595e:	1ad3      	subs	r3, r2, r3
 8015960:	9304      	str	r3, [sp, #16]
 8015962:	9b06      	ldr	r3, [sp, #24]
 8015964:	b1fb      	cbz	r3, 80159a6 <_dtoa_r+0x7ce>
 8015966:	9b08      	ldr	r3, [sp, #32]
 8015968:	2b00      	cmp	r3, #0
 801596a:	f000 809f 	beq.w	8015aac <_dtoa_r+0x8d4>
 801596e:	2e00      	cmp	r6, #0
 8015970:	dd11      	ble.n	8015996 <_dtoa_r+0x7be>
 8015972:	4639      	mov	r1, r7
 8015974:	4632      	mov	r2, r6
 8015976:	4620      	mov	r0, r4
 8015978:	f001 f9cc 	bl	8016d14 <__pow5mult>
 801597c:	465a      	mov	r2, fp
 801597e:	4601      	mov	r1, r0
 8015980:	4607      	mov	r7, r0
 8015982:	4620      	mov	r0, r4
 8015984:	f001 f920 	bl	8016bc8 <__multiply>
 8015988:	4659      	mov	r1, fp
 801598a:	9007      	str	r0, [sp, #28]
 801598c:	4620      	mov	r0, r4
 801598e:	f000 ffff 	bl	8016990 <_Bfree>
 8015992:	9b07      	ldr	r3, [sp, #28]
 8015994:	469b      	mov	fp, r3
 8015996:	9b06      	ldr	r3, [sp, #24]
 8015998:	1b9a      	subs	r2, r3, r6
 801599a:	d004      	beq.n	80159a6 <_dtoa_r+0x7ce>
 801599c:	4659      	mov	r1, fp
 801599e:	4620      	mov	r0, r4
 80159a0:	f001 f9b8 	bl	8016d14 <__pow5mult>
 80159a4:	4683      	mov	fp, r0
 80159a6:	2101      	movs	r1, #1
 80159a8:	4620      	mov	r0, r4
 80159aa:	f001 f8f7 	bl	8016b9c <__i2b>
 80159ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	4606      	mov	r6, r0
 80159b4:	dd7c      	ble.n	8015ab0 <_dtoa_r+0x8d8>
 80159b6:	461a      	mov	r2, r3
 80159b8:	4601      	mov	r1, r0
 80159ba:	4620      	mov	r0, r4
 80159bc:	f001 f9aa 	bl	8016d14 <__pow5mult>
 80159c0:	9b05      	ldr	r3, [sp, #20]
 80159c2:	2b01      	cmp	r3, #1
 80159c4:	4606      	mov	r6, r0
 80159c6:	dd76      	ble.n	8015ab6 <_dtoa_r+0x8de>
 80159c8:	2300      	movs	r3, #0
 80159ca:	9306      	str	r3, [sp, #24]
 80159cc:	6933      	ldr	r3, [r6, #16]
 80159ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80159d2:	6918      	ldr	r0, [r3, #16]
 80159d4:	f001 f892 	bl	8016afc <__hi0bits>
 80159d8:	f1c0 0020 	rsb	r0, r0, #32
 80159dc:	9b04      	ldr	r3, [sp, #16]
 80159de:	4418      	add	r0, r3
 80159e0:	f010 001f 	ands.w	r0, r0, #31
 80159e4:	f000 8086 	beq.w	8015af4 <_dtoa_r+0x91c>
 80159e8:	f1c0 0320 	rsb	r3, r0, #32
 80159ec:	2b04      	cmp	r3, #4
 80159ee:	dd7f      	ble.n	8015af0 <_dtoa_r+0x918>
 80159f0:	f1c0 001c 	rsb	r0, r0, #28
 80159f4:	9b04      	ldr	r3, [sp, #16]
 80159f6:	4403      	add	r3, r0
 80159f8:	4480      	add	r8, r0
 80159fa:	4405      	add	r5, r0
 80159fc:	9304      	str	r3, [sp, #16]
 80159fe:	f1b8 0f00 	cmp.w	r8, #0
 8015a02:	dd05      	ble.n	8015a10 <_dtoa_r+0x838>
 8015a04:	4659      	mov	r1, fp
 8015a06:	4642      	mov	r2, r8
 8015a08:	4620      	mov	r0, r4
 8015a0a:	f001 f9dd 	bl	8016dc8 <__lshift>
 8015a0e:	4683      	mov	fp, r0
 8015a10:	9b04      	ldr	r3, [sp, #16]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	dd05      	ble.n	8015a22 <_dtoa_r+0x84a>
 8015a16:	4631      	mov	r1, r6
 8015a18:	461a      	mov	r2, r3
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	f001 f9d4 	bl	8016dc8 <__lshift>
 8015a20:	4606      	mov	r6, r0
 8015a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d069      	beq.n	8015afc <_dtoa_r+0x924>
 8015a28:	4631      	mov	r1, r6
 8015a2a:	4658      	mov	r0, fp
 8015a2c:	f001 fa38 	bl	8016ea0 <__mcmp>
 8015a30:	2800      	cmp	r0, #0
 8015a32:	da63      	bge.n	8015afc <_dtoa_r+0x924>
 8015a34:	2300      	movs	r3, #0
 8015a36:	4659      	mov	r1, fp
 8015a38:	220a      	movs	r2, #10
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	f000 ffca 	bl	80169d4 <__multadd>
 8015a40:	9b08      	ldr	r3, [sp, #32]
 8015a42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015a46:	4683      	mov	fp, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f000 818f 	beq.w	8015d6c <_dtoa_r+0xb94>
 8015a4e:	4639      	mov	r1, r7
 8015a50:	2300      	movs	r3, #0
 8015a52:	220a      	movs	r2, #10
 8015a54:	4620      	mov	r0, r4
 8015a56:	f000 ffbd 	bl	80169d4 <__multadd>
 8015a5a:	f1b9 0f00 	cmp.w	r9, #0
 8015a5e:	4607      	mov	r7, r0
 8015a60:	f300 808e 	bgt.w	8015b80 <_dtoa_r+0x9a8>
 8015a64:	9b05      	ldr	r3, [sp, #20]
 8015a66:	2b02      	cmp	r3, #2
 8015a68:	dc50      	bgt.n	8015b0c <_dtoa_r+0x934>
 8015a6a:	e089      	b.n	8015b80 <_dtoa_r+0x9a8>
 8015a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a72:	e75d      	b.n	8015930 <_dtoa_r+0x758>
 8015a74:	9b01      	ldr	r3, [sp, #4]
 8015a76:	1e5e      	subs	r6, r3, #1
 8015a78:	9b06      	ldr	r3, [sp, #24]
 8015a7a:	42b3      	cmp	r3, r6
 8015a7c:	bfbf      	itttt	lt
 8015a7e:	9b06      	ldrlt	r3, [sp, #24]
 8015a80:	9606      	strlt	r6, [sp, #24]
 8015a82:	1af2      	sublt	r2, r6, r3
 8015a84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015a86:	bfb6      	itet	lt
 8015a88:	189b      	addlt	r3, r3, r2
 8015a8a:	1b9e      	subge	r6, r3, r6
 8015a8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015a8e:	9b01      	ldr	r3, [sp, #4]
 8015a90:	bfb8      	it	lt
 8015a92:	2600      	movlt	r6, #0
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	bfb5      	itete	lt
 8015a98:	eba8 0503 	sublt.w	r5, r8, r3
 8015a9c:	9b01      	ldrge	r3, [sp, #4]
 8015a9e:	2300      	movlt	r3, #0
 8015aa0:	4645      	movge	r5, r8
 8015aa2:	e747      	b.n	8015934 <_dtoa_r+0x75c>
 8015aa4:	9e06      	ldr	r6, [sp, #24]
 8015aa6:	9f08      	ldr	r7, [sp, #32]
 8015aa8:	4645      	mov	r5, r8
 8015aaa:	e74c      	b.n	8015946 <_dtoa_r+0x76e>
 8015aac:	9a06      	ldr	r2, [sp, #24]
 8015aae:	e775      	b.n	801599c <_dtoa_r+0x7c4>
 8015ab0:	9b05      	ldr	r3, [sp, #20]
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	dc18      	bgt.n	8015ae8 <_dtoa_r+0x910>
 8015ab6:	9b02      	ldr	r3, [sp, #8]
 8015ab8:	b9b3      	cbnz	r3, 8015ae8 <_dtoa_r+0x910>
 8015aba:	9b03      	ldr	r3, [sp, #12]
 8015abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ac0:	b9a3      	cbnz	r3, 8015aec <_dtoa_r+0x914>
 8015ac2:	9b03      	ldr	r3, [sp, #12]
 8015ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ac8:	0d1b      	lsrs	r3, r3, #20
 8015aca:	051b      	lsls	r3, r3, #20
 8015acc:	b12b      	cbz	r3, 8015ada <_dtoa_r+0x902>
 8015ace:	9b04      	ldr	r3, [sp, #16]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	9304      	str	r3, [sp, #16]
 8015ad4:	f108 0801 	add.w	r8, r8, #1
 8015ad8:	2301      	movs	r3, #1
 8015ada:	9306      	str	r3, [sp, #24]
 8015adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f47f af74 	bne.w	80159cc <_dtoa_r+0x7f4>
 8015ae4:	2001      	movs	r0, #1
 8015ae6:	e779      	b.n	80159dc <_dtoa_r+0x804>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	e7f6      	b.n	8015ada <_dtoa_r+0x902>
 8015aec:	9b02      	ldr	r3, [sp, #8]
 8015aee:	e7f4      	b.n	8015ada <_dtoa_r+0x902>
 8015af0:	d085      	beq.n	80159fe <_dtoa_r+0x826>
 8015af2:	4618      	mov	r0, r3
 8015af4:	301c      	adds	r0, #28
 8015af6:	e77d      	b.n	80159f4 <_dtoa_r+0x81c>
 8015af8:	40240000 	.word	0x40240000
 8015afc:	9b01      	ldr	r3, [sp, #4]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	dc38      	bgt.n	8015b74 <_dtoa_r+0x99c>
 8015b02:	9b05      	ldr	r3, [sp, #20]
 8015b04:	2b02      	cmp	r3, #2
 8015b06:	dd35      	ble.n	8015b74 <_dtoa_r+0x99c>
 8015b08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015b0c:	f1b9 0f00 	cmp.w	r9, #0
 8015b10:	d10d      	bne.n	8015b2e <_dtoa_r+0x956>
 8015b12:	4631      	mov	r1, r6
 8015b14:	464b      	mov	r3, r9
 8015b16:	2205      	movs	r2, #5
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f000 ff5b 	bl	80169d4 <__multadd>
 8015b1e:	4601      	mov	r1, r0
 8015b20:	4606      	mov	r6, r0
 8015b22:	4658      	mov	r0, fp
 8015b24:	f001 f9bc 	bl	8016ea0 <__mcmp>
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	f73f adbd 	bgt.w	80156a8 <_dtoa_r+0x4d0>
 8015b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b30:	9d00      	ldr	r5, [sp, #0]
 8015b32:	ea6f 0a03 	mvn.w	sl, r3
 8015b36:	f04f 0800 	mov.w	r8, #0
 8015b3a:	4631      	mov	r1, r6
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f000 ff27 	bl	8016990 <_Bfree>
 8015b42:	2f00      	cmp	r7, #0
 8015b44:	f43f aeb4 	beq.w	80158b0 <_dtoa_r+0x6d8>
 8015b48:	f1b8 0f00 	cmp.w	r8, #0
 8015b4c:	d005      	beq.n	8015b5a <_dtoa_r+0x982>
 8015b4e:	45b8      	cmp	r8, r7
 8015b50:	d003      	beq.n	8015b5a <_dtoa_r+0x982>
 8015b52:	4641      	mov	r1, r8
 8015b54:	4620      	mov	r0, r4
 8015b56:	f000 ff1b 	bl	8016990 <_Bfree>
 8015b5a:	4639      	mov	r1, r7
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f000 ff17 	bl	8016990 <_Bfree>
 8015b62:	e6a5      	b.n	80158b0 <_dtoa_r+0x6d8>
 8015b64:	2600      	movs	r6, #0
 8015b66:	4637      	mov	r7, r6
 8015b68:	e7e1      	b.n	8015b2e <_dtoa_r+0x956>
 8015b6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015b6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015b70:	4637      	mov	r7, r6
 8015b72:	e599      	b.n	80156a8 <_dtoa_r+0x4d0>
 8015b74:	9b08      	ldr	r3, [sp, #32]
 8015b76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	f000 80fd 	beq.w	8015d7a <_dtoa_r+0xba2>
 8015b80:	2d00      	cmp	r5, #0
 8015b82:	dd05      	ble.n	8015b90 <_dtoa_r+0x9b8>
 8015b84:	4639      	mov	r1, r7
 8015b86:	462a      	mov	r2, r5
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f001 f91d 	bl	8016dc8 <__lshift>
 8015b8e:	4607      	mov	r7, r0
 8015b90:	9b06      	ldr	r3, [sp, #24]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d05c      	beq.n	8015c50 <_dtoa_r+0xa78>
 8015b96:	6879      	ldr	r1, [r7, #4]
 8015b98:	4620      	mov	r0, r4
 8015b9a:	f000 feb9 	bl	8016910 <_Balloc>
 8015b9e:	4605      	mov	r5, r0
 8015ba0:	b928      	cbnz	r0, 8015bae <_dtoa_r+0x9d6>
 8015ba2:	4b80      	ldr	r3, [pc, #512]	; (8015da4 <_dtoa_r+0xbcc>)
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015baa:	f7ff bb2e 	b.w	801520a <_dtoa_r+0x32>
 8015bae:	693a      	ldr	r2, [r7, #16]
 8015bb0:	3202      	adds	r2, #2
 8015bb2:	0092      	lsls	r2, r2, #2
 8015bb4:	f107 010c 	add.w	r1, r7, #12
 8015bb8:	300c      	adds	r0, #12
 8015bba:	f7fd fb19 	bl	80131f0 <memcpy>
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f001 f900 	bl	8016dc8 <__lshift>
 8015bc8:	9b00      	ldr	r3, [sp, #0]
 8015bca:	3301      	adds	r3, #1
 8015bcc:	9301      	str	r3, [sp, #4]
 8015bce:	9b00      	ldr	r3, [sp, #0]
 8015bd0:	444b      	add	r3, r9
 8015bd2:	9307      	str	r3, [sp, #28]
 8015bd4:	9b02      	ldr	r3, [sp, #8]
 8015bd6:	f003 0301 	and.w	r3, r3, #1
 8015bda:	46b8      	mov	r8, r7
 8015bdc:	9306      	str	r3, [sp, #24]
 8015bde:	4607      	mov	r7, r0
 8015be0:	9b01      	ldr	r3, [sp, #4]
 8015be2:	4631      	mov	r1, r6
 8015be4:	3b01      	subs	r3, #1
 8015be6:	4658      	mov	r0, fp
 8015be8:	9302      	str	r3, [sp, #8]
 8015bea:	f7ff fa69 	bl	80150c0 <quorem>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	3330      	adds	r3, #48	; 0x30
 8015bf2:	9004      	str	r0, [sp, #16]
 8015bf4:	4641      	mov	r1, r8
 8015bf6:	4658      	mov	r0, fp
 8015bf8:	9308      	str	r3, [sp, #32]
 8015bfa:	f001 f951 	bl	8016ea0 <__mcmp>
 8015bfe:	463a      	mov	r2, r7
 8015c00:	4681      	mov	r9, r0
 8015c02:	4631      	mov	r1, r6
 8015c04:	4620      	mov	r0, r4
 8015c06:	f001 f967 	bl	8016ed8 <__mdiff>
 8015c0a:	68c2      	ldr	r2, [r0, #12]
 8015c0c:	9b08      	ldr	r3, [sp, #32]
 8015c0e:	4605      	mov	r5, r0
 8015c10:	bb02      	cbnz	r2, 8015c54 <_dtoa_r+0xa7c>
 8015c12:	4601      	mov	r1, r0
 8015c14:	4658      	mov	r0, fp
 8015c16:	f001 f943 	bl	8016ea0 <__mcmp>
 8015c1a:	9b08      	ldr	r3, [sp, #32]
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	4629      	mov	r1, r5
 8015c20:	4620      	mov	r0, r4
 8015c22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015c26:	f000 feb3 	bl	8016990 <_Bfree>
 8015c2a:	9b05      	ldr	r3, [sp, #20]
 8015c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c2e:	9d01      	ldr	r5, [sp, #4]
 8015c30:	ea43 0102 	orr.w	r1, r3, r2
 8015c34:	9b06      	ldr	r3, [sp, #24]
 8015c36:	430b      	orrs	r3, r1
 8015c38:	9b08      	ldr	r3, [sp, #32]
 8015c3a:	d10d      	bne.n	8015c58 <_dtoa_r+0xa80>
 8015c3c:	2b39      	cmp	r3, #57	; 0x39
 8015c3e:	d029      	beq.n	8015c94 <_dtoa_r+0xabc>
 8015c40:	f1b9 0f00 	cmp.w	r9, #0
 8015c44:	dd01      	ble.n	8015c4a <_dtoa_r+0xa72>
 8015c46:	9b04      	ldr	r3, [sp, #16]
 8015c48:	3331      	adds	r3, #49	; 0x31
 8015c4a:	9a02      	ldr	r2, [sp, #8]
 8015c4c:	7013      	strb	r3, [r2, #0]
 8015c4e:	e774      	b.n	8015b3a <_dtoa_r+0x962>
 8015c50:	4638      	mov	r0, r7
 8015c52:	e7b9      	b.n	8015bc8 <_dtoa_r+0x9f0>
 8015c54:	2201      	movs	r2, #1
 8015c56:	e7e2      	b.n	8015c1e <_dtoa_r+0xa46>
 8015c58:	f1b9 0f00 	cmp.w	r9, #0
 8015c5c:	db06      	blt.n	8015c6c <_dtoa_r+0xa94>
 8015c5e:	9905      	ldr	r1, [sp, #20]
 8015c60:	ea41 0909 	orr.w	r9, r1, r9
 8015c64:	9906      	ldr	r1, [sp, #24]
 8015c66:	ea59 0101 	orrs.w	r1, r9, r1
 8015c6a:	d120      	bne.n	8015cae <_dtoa_r+0xad6>
 8015c6c:	2a00      	cmp	r2, #0
 8015c6e:	ddec      	ble.n	8015c4a <_dtoa_r+0xa72>
 8015c70:	4659      	mov	r1, fp
 8015c72:	2201      	movs	r2, #1
 8015c74:	4620      	mov	r0, r4
 8015c76:	9301      	str	r3, [sp, #4]
 8015c78:	f001 f8a6 	bl	8016dc8 <__lshift>
 8015c7c:	4631      	mov	r1, r6
 8015c7e:	4683      	mov	fp, r0
 8015c80:	f001 f90e 	bl	8016ea0 <__mcmp>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	9b01      	ldr	r3, [sp, #4]
 8015c88:	dc02      	bgt.n	8015c90 <_dtoa_r+0xab8>
 8015c8a:	d1de      	bne.n	8015c4a <_dtoa_r+0xa72>
 8015c8c:	07da      	lsls	r2, r3, #31
 8015c8e:	d5dc      	bpl.n	8015c4a <_dtoa_r+0xa72>
 8015c90:	2b39      	cmp	r3, #57	; 0x39
 8015c92:	d1d8      	bne.n	8015c46 <_dtoa_r+0xa6e>
 8015c94:	9a02      	ldr	r2, [sp, #8]
 8015c96:	2339      	movs	r3, #57	; 0x39
 8015c98:	7013      	strb	r3, [r2, #0]
 8015c9a:	462b      	mov	r3, r5
 8015c9c:	461d      	mov	r5, r3
 8015c9e:	3b01      	subs	r3, #1
 8015ca0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015ca4:	2a39      	cmp	r2, #57	; 0x39
 8015ca6:	d050      	beq.n	8015d4a <_dtoa_r+0xb72>
 8015ca8:	3201      	adds	r2, #1
 8015caa:	701a      	strb	r2, [r3, #0]
 8015cac:	e745      	b.n	8015b3a <_dtoa_r+0x962>
 8015cae:	2a00      	cmp	r2, #0
 8015cb0:	dd03      	ble.n	8015cba <_dtoa_r+0xae2>
 8015cb2:	2b39      	cmp	r3, #57	; 0x39
 8015cb4:	d0ee      	beq.n	8015c94 <_dtoa_r+0xabc>
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	e7c7      	b.n	8015c4a <_dtoa_r+0xa72>
 8015cba:	9a01      	ldr	r2, [sp, #4]
 8015cbc:	9907      	ldr	r1, [sp, #28]
 8015cbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015cc2:	428a      	cmp	r2, r1
 8015cc4:	d02a      	beq.n	8015d1c <_dtoa_r+0xb44>
 8015cc6:	4659      	mov	r1, fp
 8015cc8:	2300      	movs	r3, #0
 8015cca:	220a      	movs	r2, #10
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f000 fe81 	bl	80169d4 <__multadd>
 8015cd2:	45b8      	cmp	r8, r7
 8015cd4:	4683      	mov	fp, r0
 8015cd6:	f04f 0300 	mov.w	r3, #0
 8015cda:	f04f 020a 	mov.w	r2, #10
 8015cde:	4641      	mov	r1, r8
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	d107      	bne.n	8015cf4 <_dtoa_r+0xb1c>
 8015ce4:	f000 fe76 	bl	80169d4 <__multadd>
 8015ce8:	4680      	mov	r8, r0
 8015cea:	4607      	mov	r7, r0
 8015cec:	9b01      	ldr	r3, [sp, #4]
 8015cee:	3301      	adds	r3, #1
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	e775      	b.n	8015be0 <_dtoa_r+0xa08>
 8015cf4:	f000 fe6e 	bl	80169d4 <__multadd>
 8015cf8:	4639      	mov	r1, r7
 8015cfa:	4680      	mov	r8, r0
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	220a      	movs	r2, #10
 8015d00:	4620      	mov	r0, r4
 8015d02:	f000 fe67 	bl	80169d4 <__multadd>
 8015d06:	4607      	mov	r7, r0
 8015d08:	e7f0      	b.n	8015cec <_dtoa_r+0xb14>
 8015d0a:	f1b9 0f00 	cmp.w	r9, #0
 8015d0e:	9a00      	ldr	r2, [sp, #0]
 8015d10:	bfcc      	ite	gt
 8015d12:	464d      	movgt	r5, r9
 8015d14:	2501      	movle	r5, #1
 8015d16:	4415      	add	r5, r2
 8015d18:	f04f 0800 	mov.w	r8, #0
 8015d1c:	4659      	mov	r1, fp
 8015d1e:	2201      	movs	r2, #1
 8015d20:	4620      	mov	r0, r4
 8015d22:	9301      	str	r3, [sp, #4]
 8015d24:	f001 f850 	bl	8016dc8 <__lshift>
 8015d28:	4631      	mov	r1, r6
 8015d2a:	4683      	mov	fp, r0
 8015d2c:	f001 f8b8 	bl	8016ea0 <__mcmp>
 8015d30:	2800      	cmp	r0, #0
 8015d32:	dcb2      	bgt.n	8015c9a <_dtoa_r+0xac2>
 8015d34:	d102      	bne.n	8015d3c <_dtoa_r+0xb64>
 8015d36:	9b01      	ldr	r3, [sp, #4]
 8015d38:	07db      	lsls	r3, r3, #31
 8015d3a:	d4ae      	bmi.n	8015c9a <_dtoa_r+0xac2>
 8015d3c:	462b      	mov	r3, r5
 8015d3e:	461d      	mov	r5, r3
 8015d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d44:	2a30      	cmp	r2, #48	; 0x30
 8015d46:	d0fa      	beq.n	8015d3e <_dtoa_r+0xb66>
 8015d48:	e6f7      	b.n	8015b3a <_dtoa_r+0x962>
 8015d4a:	9a00      	ldr	r2, [sp, #0]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d1a5      	bne.n	8015c9c <_dtoa_r+0xac4>
 8015d50:	f10a 0a01 	add.w	sl, sl, #1
 8015d54:	2331      	movs	r3, #49	; 0x31
 8015d56:	e779      	b.n	8015c4c <_dtoa_r+0xa74>
 8015d58:	4b13      	ldr	r3, [pc, #76]	; (8015da8 <_dtoa_r+0xbd0>)
 8015d5a:	f7ff baaf 	b.w	80152bc <_dtoa_r+0xe4>
 8015d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	f47f aa86 	bne.w	8015272 <_dtoa_r+0x9a>
 8015d66:	4b11      	ldr	r3, [pc, #68]	; (8015dac <_dtoa_r+0xbd4>)
 8015d68:	f7ff baa8 	b.w	80152bc <_dtoa_r+0xe4>
 8015d6c:	f1b9 0f00 	cmp.w	r9, #0
 8015d70:	dc03      	bgt.n	8015d7a <_dtoa_r+0xba2>
 8015d72:	9b05      	ldr	r3, [sp, #20]
 8015d74:	2b02      	cmp	r3, #2
 8015d76:	f73f aec9 	bgt.w	8015b0c <_dtoa_r+0x934>
 8015d7a:	9d00      	ldr	r5, [sp, #0]
 8015d7c:	4631      	mov	r1, r6
 8015d7e:	4658      	mov	r0, fp
 8015d80:	f7ff f99e 	bl	80150c0 <quorem>
 8015d84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015d88:	f805 3b01 	strb.w	r3, [r5], #1
 8015d8c:	9a00      	ldr	r2, [sp, #0]
 8015d8e:	1aaa      	subs	r2, r5, r2
 8015d90:	4591      	cmp	r9, r2
 8015d92:	ddba      	ble.n	8015d0a <_dtoa_r+0xb32>
 8015d94:	4659      	mov	r1, fp
 8015d96:	2300      	movs	r3, #0
 8015d98:	220a      	movs	r2, #10
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f000 fe1a 	bl	80169d4 <__multadd>
 8015da0:	4683      	mov	fp, r0
 8015da2:	e7eb      	b.n	8015d7c <_dtoa_r+0xba4>
 8015da4:	0801c664 	.word	0x0801c664
 8015da8:	0801c460 	.word	0x0801c460
 8015dac:	0801c5e1 	.word	0x0801c5e1

08015db0 <__sflush_r>:
 8015db0:	898a      	ldrh	r2, [r1, #12]
 8015db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db6:	4605      	mov	r5, r0
 8015db8:	0710      	lsls	r0, r2, #28
 8015dba:	460c      	mov	r4, r1
 8015dbc:	d458      	bmi.n	8015e70 <__sflush_r+0xc0>
 8015dbe:	684b      	ldr	r3, [r1, #4]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	dc05      	bgt.n	8015dd0 <__sflush_r+0x20>
 8015dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	dc02      	bgt.n	8015dd0 <__sflush_r+0x20>
 8015dca:	2000      	movs	r0, #0
 8015dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dd2:	2e00      	cmp	r6, #0
 8015dd4:	d0f9      	beq.n	8015dca <__sflush_r+0x1a>
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ddc:	682f      	ldr	r7, [r5, #0]
 8015dde:	602b      	str	r3, [r5, #0]
 8015de0:	d032      	beq.n	8015e48 <__sflush_r+0x98>
 8015de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015de4:	89a3      	ldrh	r3, [r4, #12]
 8015de6:	075a      	lsls	r2, r3, #29
 8015de8:	d505      	bpl.n	8015df6 <__sflush_r+0x46>
 8015dea:	6863      	ldr	r3, [r4, #4]
 8015dec:	1ac0      	subs	r0, r0, r3
 8015dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015df0:	b10b      	cbz	r3, 8015df6 <__sflush_r+0x46>
 8015df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015df4:	1ac0      	subs	r0, r0, r3
 8015df6:	2300      	movs	r3, #0
 8015df8:	4602      	mov	r2, r0
 8015dfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dfc:	6a21      	ldr	r1, [r4, #32]
 8015dfe:	4628      	mov	r0, r5
 8015e00:	47b0      	blx	r6
 8015e02:	1c43      	adds	r3, r0, #1
 8015e04:	89a3      	ldrh	r3, [r4, #12]
 8015e06:	d106      	bne.n	8015e16 <__sflush_r+0x66>
 8015e08:	6829      	ldr	r1, [r5, #0]
 8015e0a:	291d      	cmp	r1, #29
 8015e0c:	d82c      	bhi.n	8015e68 <__sflush_r+0xb8>
 8015e0e:	4a2a      	ldr	r2, [pc, #168]	; (8015eb8 <__sflush_r+0x108>)
 8015e10:	40ca      	lsrs	r2, r1
 8015e12:	07d6      	lsls	r6, r2, #31
 8015e14:	d528      	bpl.n	8015e68 <__sflush_r+0xb8>
 8015e16:	2200      	movs	r2, #0
 8015e18:	6062      	str	r2, [r4, #4]
 8015e1a:	04d9      	lsls	r1, r3, #19
 8015e1c:	6922      	ldr	r2, [r4, #16]
 8015e1e:	6022      	str	r2, [r4, #0]
 8015e20:	d504      	bpl.n	8015e2c <__sflush_r+0x7c>
 8015e22:	1c42      	adds	r2, r0, #1
 8015e24:	d101      	bne.n	8015e2a <__sflush_r+0x7a>
 8015e26:	682b      	ldr	r3, [r5, #0]
 8015e28:	b903      	cbnz	r3, 8015e2c <__sflush_r+0x7c>
 8015e2a:	6560      	str	r0, [r4, #84]	; 0x54
 8015e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e2e:	602f      	str	r7, [r5, #0]
 8015e30:	2900      	cmp	r1, #0
 8015e32:	d0ca      	beq.n	8015dca <__sflush_r+0x1a>
 8015e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e38:	4299      	cmp	r1, r3
 8015e3a:	d002      	beq.n	8015e42 <__sflush_r+0x92>
 8015e3c:	4628      	mov	r0, r5
 8015e3e:	f7fd f9ed 	bl	801321c <_free_r>
 8015e42:	2000      	movs	r0, #0
 8015e44:	6360      	str	r0, [r4, #52]	; 0x34
 8015e46:	e7c1      	b.n	8015dcc <__sflush_r+0x1c>
 8015e48:	6a21      	ldr	r1, [r4, #32]
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	4628      	mov	r0, r5
 8015e4e:	47b0      	blx	r6
 8015e50:	1c41      	adds	r1, r0, #1
 8015e52:	d1c7      	bne.n	8015de4 <__sflush_r+0x34>
 8015e54:	682b      	ldr	r3, [r5, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d0c4      	beq.n	8015de4 <__sflush_r+0x34>
 8015e5a:	2b1d      	cmp	r3, #29
 8015e5c:	d001      	beq.n	8015e62 <__sflush_r+0xb2>
 8015e5e:	2b16      	cmp	r3, #22
 8015e60:	d101      	bne.n	8015e66 <__sflush_r+0xb6>
 8015e62:	602f      	str	r7, [r5, #0]
 8015e64:	e7b1      	b.n	8015dca <__sflush_r+0x1a>
 8015e66:	89a3      	ldrh	r3, [r4, #12]
 8015e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e6c:	81a3      	strh	r3, [r4, #12]
 8015e6e:	e7ad      	b.n	8015dcc <__sflush_r+0x1c>
 8015e70:	690f      	ldr	r7, [r1, #16]
 8015e72:	2f00      	cmp	r7, #0
 8015e74:	d0a9      	beq.n	8015dca <__sflush_r+0x1a>
 8015e76:	0793      	lsls	r3, r2, #30
 8015e78:	680e      	ldr	r6, [r1, #0]
 8015e7a:	bf08      	it	eq
 8015e7c:	694b      	ldreq	r3, [r1, #20]
 8015e7e:	600f      	str	r7, [r1, #0]
 8015e80:	bf18      	it	ne
 8015e82:	2300      	movne	r3, #0
 8015e84:	eba6 0807 	sub.w	r8, r6, r7
 8015e88:	608b      	str	r3, [r1, #8]
 8015e8a:	f1b8 0f00 	cmp.w	r8, #0
 8015e8e:	dd9c      	ble.n	8015dca <__sflush_r+0x1a>
 8015e90:	6a21      	ldr	r1, [r4, #32]
 8015e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e94:	4643      	mov	r3, r8
 8015e96:	463a      	mov	r2, r7
 8015e98:	4628      	mov	r0, r5
 8015e9a:	47b0      	blx	r6
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	dc06      	bgt.n	8015eae <__sflush_r+0xfe>
 8015ea0:	89a3      	ldrh	r3, [r4, #12]
 8015ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ea6:	81a3      	strh	r3, [r4, #12]
 8015ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eac:	e78e      	b.n	8015dcc <__sflush_r+0x1c>
 8015eae:	4407      	add	r7, r0
 8015eb0:	eba8 0800 	sub.w	r8, r8, r0
 8015eb4:	e7e9      	b.n	8015e8a <__sflush_r+0xda>
 8015eb6:	bf00      	nop
 8015eb8:	20400001 	.word	0x20400001

08015ebc <_fflush_r>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	690b      	ldr	r3, [r1, #16]
 8015ec0:	4605      	mov	r5, r0
 8015ec2:	460c      	mov	r4, r1
 8015ec4:	b913      	cbnz	r3, 8015ecc <_fflush_r+0x10>
 8015ec6:	2500      	movs	r5, #0
 8015ec8:	4628      	mov	r0, r5
 8015eca:	bd38      	pop	{r3, r4, r5, pc}
 8015ecc:	b118      	cbz	r0, 8015ed6 <_fflush_r+0x1a>
 8015ece:	6983      	ldr	r3, [r0, #24]
 8015ed0:	b90b      	cbnz	r3, 8015ed6 <_fflush_r+0x1a>
 8015ed2:	f000 f887 	bl	8015fe4 <__sinit>
 8015ed6:	4b14      	ldr	r3, [pc, #80]	; (8015f28 <_fflush_r+0x6c>)
 8015ed8:	429c      	cmp	r4, r3
 8015eda:	d11b      	bne.n	8015f14 <_fflush_r+0x58>
 8015edc:	686c      	ldr	r4, [r5, #4]
 8015ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d0ef      	beq.n	8015ec6 <_fflush_r+0xa>
 8015ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ee8:	07d0      	lsls	r0, r2, #31
 8015eea:	d404      	bmi.n	8015ef6 <_fflush_r+0x3a>
 8015eec:	0599      	lsls	r1, r3, #22
 8015eee:	d402      	bmi.n	8015ef6 <_fflush_r+0x3a>
 8015ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ef2:	f000 fc88 	bl	8016806 <__retarget_lock_acquire_recursive>
 8015ef6:	4628      	mov	r0, r5
 8015ef8:	4621      	mov	r1, r4
 8015efa:	f7ff ff59 	bl	8015db0 <__sflush_r>
 8015efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f00:	07da      	lsls	r2, r3, #31
 8015f02:	4605      	mov	r5, r0
 8015f04:	d4e0      	bmi.n	8015ec8 <_fflush_r+0xc>
 8015f06:	89a3      	ldrh	r3, [r4, #12]
 8015f08:	059b      	lsls	r3, r3, #22
 8015f0a:	d4dd      	bmi.n	8015ec8 <_fflush_r+0xc>
 8015f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f0e:	f000 fc7b 	bl	8016808 <__retarget_lock_release_recursive>
 8015f12:	e7d9      	b.n	8015ec8 <_fflush_r+0xc>
 8015f14:	4b05      	ldr	r3, [pc, #20]	; (8015f2c <_fflush_r+0x70>)
 8015f16:	429c      	cmp	r4, r3
 8015f18:	d101      	bne.n	8015f1e <_fflush_r+0x62>
 8015f1a:	68ac      	ldr	r4, [r5, #8]
 8015f1c:	e7df      	b.n	8015ede <_fflush_r+0x22>
 8015f1e:	4b04      	ldr	r3, [pc, #16]	; (8015f30 <_fflush_r+0x74>)
 8015f20:	429c      	cmp	r4, r3
 8015f22:	bf08      	it	eq
 8015f24:	68ec      	ldreq	r4, [r5, #12]
 8015f26:	e7da      	b.n	8015ede <_fflush_r+0x22>
 8015f28:	0801c698 	.word	0x0801c698
 8015f2c:	0801c6b8 	.word	0x0801c6b8
 8015f30:	0801c678 	.word	0x0801c678

08015f34 <std>:
 8015f34:	2300      	movs	r3, #0
 8015f36:	b510      	push	{r4, lr}
 8015f38:	4604      	mov	r4, r0
 8015f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8015f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f42:	6083      	str	r3, [r0, #8]
 8015f44:	8181      	strh	r1, [r0, #12]
 8015f46:	6643      	str	r3, [r0, #100]	; 0x64
 8015f48:	81c2      	strh	r2, [r0, #14]
 8015f4a:	6183      	str	r3, [r0, #24]
 8015f4c:	4619      	mov	r1, r3
 8015f4e:	2208      	movs	r2, #8
 8015f50:	305c      	adds	r0, #92	; 0x5c
 8015f52:	f7fd f95b 	bl	801320c <memset>
 8015f56:	4b05      	ldr	r3, [pc, #20]	; (8015f6c <std+0x38>)
 8015f58:	6263      	str	r3, [r4, #36]	; 0x24
 8015f5a:	4b05      	ldr	r3, [pc, #20]	; (8015f70 <std+0x3c>)
 8015f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f5e:	4b05      	ldr	r3, [pc, #20]	; (8015f74 <std+0x40>)
 8015f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f62:	4b05      	ldr	r3, [pc, #20]	; (8015f78 <std+0x44>)
 8015f64:	6224      	str	r4, [r4, #32]
 8015f66:	6323      	str	r3, [r4, #48]	; 0x30
 8015f68:	bd10      	pop	{r4, pc}
 8015f6a:	bf00      	nop
 8015f6c:	08017821 	.word	0x08017821
 8015f70:	08017843 	.word	0x08017843
 8015f74:	0801787b 	.word	0x0801787b
 8015f78:	0801789f 	.word	0x0801789f

08015f7c <_cleanup_r>:
 8015f7c:	4901      	ldr	r1, [pc, #4]	; (8015f84 <_cleanup_r+0x8>)
 8015f7e:	f000 b8af 	b.w	80160e0 <_fwalk_reent>
 8015f82:	bf00      	nop
 8015f84:	08015ebd 	.word	0x08015ebd

08015f88 <__sfmoreglue>:
 8015f88:	b570      	push	{r4, r5, r6, lr}
 8015f8a:	1e4a      	subs	r2, r1, #1
 8015f8c:	2568      	movs	r5, #104	; 0x68
 8015f8e:	4355      	muls	r5, r2
 8015f90:	460e      	mov	r6, r1
 8015f92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f96:	f7fd f991 	bl	80132bc <_malloc_r>
 8015f9a:	4604      	mov	r4, r0
 8015f9c:	b140      	cbz	r0, 8015fb0 <__sfmoreglue+0x28>
 8015f9e:	2100      	movs	r1, #0
 8015fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8015fa4:	300c      	adds	r0, #12
 8015fa6:	60a0      	str	r0, [r4, #8]
 8015fa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015fac:	f7fd f92e 	bl	801320c <memset>
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	bd70      	pop	{r4, r5, r6, pc}

08015fb4 <__sfp_lock_acquire>:
 8015fb4:	4801      	ldr	r0, [pc, #4]	; (8015fbc <__sfp_lock_acquire+0x8>)
 8015fb6:	f000 bc26 	b.w	8016806 <__retarget_lock_acquire_recursive>
 8015fba:	bf00      	nop
 8015fbc:	2003396c 	.word	0x2003396c

08015fc0 <__sfp_lock_release>:
 8015fc0:	4801      	ldr	r0, [pc, #4]	; (8015fc8 <__sfp_lock_release+0x8>)
 8015fc2:	f000 bc21 	b.w	8016808 <__retarget_lock_release_recursive>
 8015fc6:	bf00      	nop
 8015fc8:	2003396c 	.word	0x2003396c

08015fcc <__sinit_lock_acquire>:
 8015fcc:	4801      	ldr	r0, [pc, #4]	; (8015fd4 <__sinit_lock_acquire+0x8>)
 8015fce:	f000 bc1a 	b.w	8016806 <__retarget_lock_acquire_recursive>
 8015fd2:	bf00      	nop
 8015fd4:	20033967 	.word	0x20033967

08015fd8 <__sinit_lock_release>:
 8015fd8:	4801      	ldr	r0, [pc, #4]	; (8015fe0 <__sinit_lock_release+0x8>)
 8015fda:	f000 bc15 	b.w	8016808 <__retarget_lock_release_recursive>
 8015fde:	bf00      	nop
 8015fe0:	20033967 	.word	0x20033967

08015fe4 <__sinit>:
 8015fe4:	b510      	push	{r4, lr}
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	f7ff fff0 	bl	8015fcc <__sinit_lock_acquire>
 8015fec:	69a3      	ldr	r3, [r4, #24]
 8015fee:	b11b      	cbz	r3, 8015ff8 <__sinit+0x14>
 8015ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ff4:	f7ff bff0 	b.w	8015fd8 <__sinit_lock_release>
 8015ff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8015ffe:	4b13      	ldr	r3, [pc, #76]	; (801604c <__sinit+0x68>)
 8016000:	4a13      	ldr	r2, [pc, #76]	; (8016050 <__sinit+0x6c>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	62a2      	str	r2, [r4, #40]	; 0x28
 8016006:	42a3      	cmp	r3, r4
 8016008:	bf04      	itt	eq
 801600a:	2301      	moveq	r3, #1
 801600c:	61a3      	streq	r3, [r4, #24]
 801600e:	4620      	mov	r0, r4
 8016010:	f000 f820 	bl	8016054 <__sfp>
 8016014:	6060      	str	r0, [r4, #4]
 8016016:	4620      	mov	r0, r4
 8016018:	f000 f81c 	bl	8016054 <__sfp>
 801601c:	60a0      	str	r0, [r4, #8]
 801601e:	4620      	mov	r0, r4
 8016020:	f000 f818 	bl	8016054 <__sfp>
 8016024:	2200      	movs	r2, #0
 8016026:	60e0      	str	r0, [r4, #12]
 8016028:	2104      	movs	r1, #4
 801602a:	6860      	ldr	r0, [r4, #4]
 801602c:	f7ff ff82 	bl	8015f34 <std>
 8016030:	68a0      	ldr	r0, [r4, #8]
 8016032:	2201      	movs	r2, #1
 8016034:	2109      	movs	r1, #9
 8016036:	f7ff ff7d 	bl	8015f34 <std>
 801603a:	68e0      	ldr	r0, [r4, #12]
 801603c:	2202      	movs	r2, #2
 801603e:	2112      	movs	r1, #18
 8016040:	f7ff ff78 	bl	8015f34 <std>
 8016044:	2301      	movs	r3, #1
 8016046:	61a3      	str	r3, [r4, #24]
 8016048:	e7d2      	b.n	8015ff0 <__sinit+0xc>
 801604a:	bf00      	nop
 801604c:	0801c44c 	.word	0x0801c44c
 8016050:	08015f7d 	.word	0x08015f7d

08016054 <__sfp>:
 8016054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016056:	4607      	mov	r7, r0
 8016058:	f7ff ffac 	bl	8015fb4 <__sfp_lock_acquire>
 801605c:	4b1e      	ldr	r3, [pc, #120]	; (80160d8 <__sfp+0x84>)
 801605e:	681e      	ldr	r6, [r3, #0]
 8016060:	69b3      	ldr	r3, [r6, #24]
 8016062:	b913      	cbnz	r3, 801606a <__sfp+0x16>
 8016064:	4630      	mov	r0, r6
 8016066:	f7ff ffbd 	bl	8015fe4 <__sinit>
 801606a:	3648      	adds	r6, #72	; 0x48
 801606c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016070:	3b01      	subs	r3, #1
 8016072:	d503      	bpl.n	801607c <__sfp+0x28>
 8016074:	6833      	ldr	r3, [r6, #0]
 8016076:	b30b      	cbz	r3, 80160bc <__sfp+0x68>
 8016078:	6836      	ldr	r6, [r6, #0]
 801607a:	e7f7      	b.n	801606c <__sfp+0x18>
 801607c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016080:	b9d5      	cbnz	r5, 80160b8 <__sfp+0x64>
 8016082:	4b16      	ldr	r3, [pc, #88]	; (80160dc <__sfp+0x88>)
 8016084:	60e3      	str	r3, [r4, #12]
 8016086:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801608a:	6665      	str	r5, [r4, #100]	; 0x64
 801608c:	f000 fbba 	bl	8016804 <__retarget_lock_init_recursive>
 8016090:	f7ff ff96 	bl	8015fc0 <__sfp_lock_release>
 8016094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801609c:	6025      	str	r5, [r4, #0]
 801609e:	61a5      	str	r5, [r4, #24]
 80160a0:	2208      	movs	r2, #8
 80160a2:	4629      	mov	r1, r5
 80160a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80160a8:	f7fd f8b0 	bl	801320c <memset>
 80160ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80160b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80160b4:	4620      	mov	r0, r4
 80160b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160b8:	3468      	adds	r4, #104	; 0x68
 80160ba:	e7d9      	b.n	8016070 <__sfp+0x1c>
 80160bc:	2104      	movs	r1, #4
 80160be:	4638      	mov	r0, r7
 80160c0:	f7ff ff62 	bl	8015f88 <__sfmoreglue>
 80160c4:	4604      	mov	r4, r0
 80160c6:	6030      	str	r0, [r6, #0]
 80160c8:	2800      	cmp	r0, #0
 80160ca:	d1d5      	bne.n	8016078 <__sfp+0x24>
 80160cc:	f7ff ff78 	bl	8015fc0 <__sfp_lock_release>
 80160d0:	230c      	movs	r3, #12
 80160d2:	603b      	str	r3, [r7, #0]
 80160d4:	e7ee      	b.n	80160b4 <__sfp+0x60>
 80160d6:	bf00      	nop
 80160d8:	0801c44c 	.word	0x0801c44c
 80160dc:	ffff0001 	.word	0xffff0001

080160e0 <_fwalk_reent>:
 80160e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160e4:	4606      	mov	r6, r0
 80160e6:	4688      	mov	r8, r1
 80160e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160ec:	2700      	movs	r7, #0
 80160ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160f2:	f1b9 0901 	subs.w	r9, r9, #1
 80160f6:	d505      	bpl.n	8016104 <_fwalk_reent+0x24>
 80160f8:	6824      	ldr	r4, [r4, #0]
 80160fa:	2c00      	cmp	r4, #0
 80160fc:	d1f7      	bne.n	80160ee <_fwalk_reent+0xe>
 80160fe:	4638      	mov	r0, r7
 8016100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016104:	89ab      	ldrh	r3, [r5, #12]
 8016106:	2b01      	cmp	r3, #1
 8016108:	d907      	bls.n	801611a <_fwalk_reent+0x3a>
 801610a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801610e:	3301      	adds	r3, #1
 8016110:	d003      	beq.n	801611a <_fwalk_reent+0x3a>
 8016112:	4629      	mov	r1, r5
 8016114:	4630      	mov	r0, r6
 8016116:	47c0      	blx	r8
 8016118:	4307      	orrs	r7, r0
 801611a:	3568      	adds	r5, #104	; 0x68
 801611c:	e7e9      	b.n	80160f2 <_fwalk_reent+0x12>

0801611e <rshift>:
 801611e:	6903      	ldr	r3, [r0, #16]
 8016120:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016128:	ea4f 1261 	mov.w	r2, r1, asr #5
 801612c:	f100 0414 	add.w	r4, r0, #20
 8016130:	dd45      	ble.n	80161be <rshift+0xa0>
 8016132:	f011 011f 	ands.w	r1, r1, #31
 8016136:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801613a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801613e:	d10c      	bne.n	801615a <rshift+0x3c>
 8016140:	f100 0710 	add.w	r7, r0, #16
 8016144:	4629      	mov	r1, r5
 8016146:	42b1      	cmp	r1, r6
 8016148:	d334      	bcc.n	80161b4 <rshift+0x96>
 801614a:	1a9b      	subs	r3, r3, r2
 801614c:	009b      	lsls	r3, r3, #2
 801614e:	1eea      	subs	r2, r5, #3
 8016150:	4296      	cmp	r6, r2
 8016152:	bf38      	it	cc
 8016154:	2300      	movcc	r3, #0
 8016156:	4423      	add	r3, r4
 8016158:	e015      	b.n	8016186 <rshift+0x68>
 801615a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801615e:	f1c1 0820 	rsb	r8, r1, #32
 8016162:	40cf      	lsrs	r7, r1
 8016164:	f105 0e04 	add.w	lr, r5, #4
 8016168:	46a1      	mov	r9, r4
 801616a:	4576      	cmp	r6, lr
 801616c:	46f4      	mov	ip, lr
 801616e:	d815      	bhi.n	801619c <rshift+0x7e>
 8016170:	1a9b      	subs	r3, r3, r2
 8016172:	009a      	lsls	r2, r3, #2
 8016174:	3a04      	subs	r2, #4
 8016176:	3501      	adds	r5, #1
 8016178:	42ae      	cmp	r6, r5
 801617a:	bf38      	it	cc
 801617c:	2200      	movcc	r2, #0
 801617e:	18a3      	adds	r3, r4, r2
 8016180:	50a7      	str	r7, [r4, r2]
 8016182:	b107      	cbz	r7, 8016186 <rshift+0x68>
 8016184:	3304      	adds	r3, #4
 8016186:	1b1a      	subs	r2, r3, r4
 8016188:	42a3      	cmp	r3, r4
 801618a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801618e:	bf08      	it	eq
 8016190:	2300      	moveq	r3, #0
 8016192:	6102      	str	r2, [r0, #16]
 8016194:	bf08      	it	eq
 8016196:	6143      	streq	r3, [r0, #20]
 8016198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801619c:	f8dc c000 	ldr.w	ip, [ip]
 80161a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80161a4:	ea4c 0707 	orr.w	r7, ip, r7
 80161a8:	f849 7b04 	str.w	r7, [r9], #4
 80161ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80161b0:	40cf      	lsrs	r7, r1
 80161b2:	e7da      	b.n	801616a <rshift+0x4c>
 80161b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80161b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80161bc:	e7c3      	b.n	8016146 <rshift+0x28>
 80161be:	4623      	mov	r3, r4
 80161c0:	e7e1      	b.n	8016186 <rshift+0x68>

080161c2 <__hexdig_fun>:
 80161c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80161c6:	2b09      	cmp	r3, #9
 80161c8:	d802      	bhi.n	80161d0 <__hexdig_fun+0xe>
 80161ca:	3820      	subs	r0, #32
 80161cc:	b2c0      	uxtb	r0, r0
 80161ce:	4770      	bx	lr
 80161d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80161d4:	2b05      	cmp	r3, #5
 80161d6:	d801      	bhi.n	80161dc <__hexdig_fun+0x1a>
 80161d8:	3847      	subs	r0, #71	; 0x47
 80161da:	e7f7      	b.n	80161cc <__hexdig_fun+0xa>
 80161dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80161e0:	2b05      	cmp	r3, #5
 80161e2:	d801      	bhi.n	80161e8 <__hexdig_fun+0x26>
 80161e4:	3827      	subs	r0, #39	; 0x27
 80161e6:	e7f1      	b.n	80161cc <__hexdig_fun+0xa>
 80161e8:	2000      	movs	r0, #0
 80161ea:	4770      	bx	lr

080161ec <__gethex>:
 80161ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f0:	ed2d 8b02 	vpush	{d8}
 80161f4:	b089      	sub	sp, #36	; 0x24
 80161f6:	ee08 0a10 	vmov	s16, r0
 80161fa:	9304      	str	r3, [sp, #16]
 80161fc:	4bbc      	ldr	r3, [pc, #752]	; (80164f0 <__gethex+0x304>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	9301      	str	r3, [sp, #4]
 8016202:	4618      	mov	r0, r3
 8016204:	468b      	mov	fp, r1
 8016206:	4690      	mov	r8, r2
 8016208:	f7e9 fffc 	bl	8000204 <strlen>
 801620c:	9b01      	ldr	r3, [sp, #4]
 801620e:	f8db 2000 	ldr.w	r2, [fp]
 8016212:	4403      	add	r3, r0
 8016214:	4682      	mov	sl, r0
 8016216:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801621a:	9305      	str	r3, [sp, #20]
 801621c:	1c93      	adds	r3, r2, #2
 801621e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016222:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016226:	32fe      	adds	r2, #254	; 0xfe
 8016228:	18d1      	adds	r1, r2, r3
 801622a:	461f      	mov	r7, r3
 801622c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016230:	9100      	str	r1, [sp, #0]
 8016232:	2830      	cmp	r0, #48	; 0x30
 8016234:	d0f8      	beq.n	8016228 <__gethex+0x3c>
 8016236:	f7ff ffc4 	bl	80161c2 <__hexdig_fun>
 801623a:	4604      	mov	r4, r0
 801623c:	2800      	cmp	r0, #0
 801623e:	d13a      	bne.n	80162b6 <__gethex+0xca>
 8016240:	9901      	ldr	r1, [sp, #4]
 8016242:	4652      	mov	r2, sl
 8016244:	4638      	mov	r0, r7
 8016246:	f001 fb2e 	bl	80178a6 <strncmp>
 801624a:	4605      	mov	r5, r0
 801624c:	2800      	cmp	r0, #0
 801624e:	d168      	bne.n	8016322 <__gethex+0x136>
 8016250:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016254:	eb07 060a 	add.w	r6, r7, sl
 8016258:	f7ff ffb3 	bl	80161c2 <__hexdig_fun>
 801625c:	2800      	cmp	r0, #0
 801625e:	d062      	beq.n	8016326 <__gethex+0x13a>
 8016260:	4633      	mov	r3, r6
 8016262:	7818      	ldrb	r0, [r3, #0]
 8016264:	2830      	cmp	r0, #48	; 0x30
 8016266:	461f      	mov	r7, r3
 8016268:	f103 0301 	add.w	r3, r3, #1
 801626c:	d0f9      	beq.n	8016262 <__gethex+0x76>
 801626e:	f7ff ffa8 	bl	80161c2 <__hexdig_fun>
 8016272:	2301      	movs	r3, #1
 8016274:	fab0 f480 	clz	r4, r0
 8016278:	0964      	lsrs	r4, r4, #5
 801627a:	4635      	mov	r5, r6
 801627c:	9300      	str	r3, [sp, #0]
 801627e:	463a      	mov	r2, r7
 8016280:	4616      	mov	r6, r2
 8016282:	3201      	adds	r2, #1
 8016284:	7830      	ldrb	r0, [r6, #0]
 8016286:	f7ff ff9c 	bl	80161c2 <__hexdig_fun>
 801628a:	2800      	cmp	r0, #0
 801628c:	d1f8      	bne.n	8016280 <__gethex+0x94>
 801628e:	9901      	ldr	r1, [sp, #4]
 8016290:	4652      	mov	r2, sl
 8016292:	4630      	mov	r0, r6
 8016294:	f001 fb07 	bl	80178a6 <strncmp>
 8016298:	b980      	cbnz	r0, 80162bc <__gethex+0xd0>
 801629a:	b94d      	cbnz	r5, 80162b0 <__gethex+0xc4>
 801629c:	eb06 050a 	add.w	r5, r6, sl
 80162a0:	462a      	mov	r2, r5
 80162a2:	4616      	mov	r6, r2
 80162a4:	3201      	adds	r2, #1
 80162a6:	7830      	ldrb	r0, [r6, #0]
 80162a8:	f7ff ff8b 	bl	80161c2 <__hexdig_fun>
 80162ac:	2800      	cmp	r0, #0
 80162ae:	d1f8      	bne.n	80162a2 <__gethex+0xb6>
 80162b0:	1bad      	subs	r5, r5, r6
 80162b2:	00ad      	lsls	r5, r5, #2
 80162b4:	e004      	b.n	80162c0 <__gethex+0xd4>
 80162b6:	2400      	movs	r4, #0
 80162b8:	4625      	mov	r5, r4
 80162ba:	e7e0      	b.n	801627e <__gethex+0x92>
 80162bc:	2d00      	cmp	r5, #0
 80162be:	d1f7      	bne.n	80162b0 <__gethex+0xc4>
 80162c0:	7833      	ldrb	r3, [r6, #0]
 80162c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80162c6:	2b50      	cmp	r3, #80	; 0x50
 80162c8:	d13b      	bne.n	8016342 <__gethex+0x156>
 80162ca:	7873      	ldrb	r3, [r6, #1]
 80162cc:	2b2b      	cmp	r3, #43	; 0x2b
 80162ce:	d02c      	beq.n	801632a <__gethex+0x13e>
 80162d0:	2b2d      	cmp	r3, #45	; 0x2d
 80162d2:	d02e      	beq.n	8016332 <__gethex+0x146>
 80162d4:	1c71      	adds	r1, r6, #1
 80162d6:	f04f 0900 	mov.w	r9, #0
 80162da:	7808      	ldrb	r0, [r1, #0]
 80162dc:	f7ff ff71 	bl	80161c2 <__hexdig_fun>
 80162e0:	1e43      	subs	r3, r0, #1
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	2b18      	cmp	r3, #24
 80162e6:	d82c      	bhi.n	8016342 <__gethex+0x156>
 80162e8:	f1a0 0210 	sub.w	r2, r0, #16
 80162ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80162f0:	f7ff ff67 	bl	80161c2 <__hexdig_fun>
 80162f4:	1e43      	subs	r3, r0, #1
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	2b18      	cmp	r3, #24
 80162fa:	d91d      	bls.n	8016338 <__gethex+0x14c>
 80162fc:	f1b9 0f00 	cmp.w	r9, #0
 8016300:	d000      	beq.n	8016304 <__gethex+0x118>
 8016302:	4252      	negs	r2, r2
 8016304:	4415      	add	r5, r2
 8016306:	f8cb 1000 	str.w	r1, [fp]
 801630a:	b1e4      	cbz	r4, 8016346 <__gethex+0x15a>
 801630c:	9b00      	ldr	r3, [sp, #0]
 801630e:	2b00      	cmp	r3, #0
 8016310:	bf14      	ite	ne
 8016312:	2700      	movne	r7, #0
 8016314:	2706      	moveq	r7, #6
 8016316:	4638      	mov	r0, r7
 8016318:	b009      	add	sp, #36	; 0x24
 801631a:	ecbd 8b02 	vpop	{d8}
 801631e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016322:	463e      	mov	r6, r7
 8016324:	4625      	mov	r5, r4
 8016326:	2401      	movs	r4, #1
 8016328:	e7ca      	b.n	80162c0 <__gethex+0xd4>
 801632a:	f04f 0900 	mov.w	r9, #0
 801632e:	1cb1      	adds	r1, r6, #2
 8016330:	e7d3      	b.n	80162da <__gethex+0xee>
 8016332:	f04f 0901 	mov.w	r9, #1
 8016336:	e7fa      	b.n	801632e <__gethex+0x142>
 8016338:	230a      	movs	r3, #10
 801633a:	fb03 0202 	mla	r2, r3, r2, r0
 801633e:	3a10      	subs	r2, #16
 8016340:	e7d4      	b.n	80162ec <__gethex+0x100>
 8016342:	4631      	mov	r1, r6
 8016344:	e7df      	b.n	8016306 <__gethex+0x11a>
 8016346:	1bf3      	subs	r3, r6, r7
 8016348:	3b01      	subs	r3, #1
 801634a:	4621      	mov	r1, r4
 801634c:	2b07      	cmp	r3, #7
 801634e:	dc0b      	bgt.n	8016368 <__gethex+0x17c>
 8016350:	ee18 0a10 	vmov	r0, s16
 8016354:	f000 fadc 	bl	8016910 <_Balloc>
 8016358:	4604      	mov	r4, r0
 801635a:	b940      	cbnz	r0, 801636e <__gethex+0x182>
 801635c:	4b65      	ldr	r3, [pc, #404]	; (80164f4 <__gethex+0x308>)
 801635e:	4602      	mov	r2, r0
 8016360:	21de      	movs	r1, #222	; 0xde
 8016362:	4865      	ldr	r0, [pc, #404]	; (80164f8 <__gethex+0x30c>)
 8016364:	f001 fad0 	bl	8017908 <__assert_func>
 8016368:	3101      	adds	r1, #1
 801636a:	105b      	asrs	r3, r3, #1
 801636c:	e7ee      	b.n	801634c <__gethex+0x160>
 801636e:	f100 0914 	add.w	r9, r0, #20
 8016372:	f04f 0b00 	mov.w	fp, #0
 8016376:	f1ca 0301 	rsb	r3, sl, #1
 801637a:	f8cd 9008 	str.w	r9, [sp, #8]
 801637e:	f8cd b000 	str.w	fp, [sp]
 8016382:	9306      	str	r3, [sp, #24]
 8016384:	42b7      	cmp	r7, r6
 8016386:	d340      	bcc.n	801640a <__gethex+0x21e>
 8016388:	9802      	ldr	r0, [sp, #8]
 801638a:	9b00      	ldr	r3, [sp, #0]
 801638c:	f840 3b04 	str.w	r3, [r0], #4
 8016390:	eba0 0009 	sub.w	r0, r0, r9
 8016394:	1080      	asrs	r0, r0, #2
 8016396:	0146      	lsls	r6, r0, #5
 8016398:	6120      	str	r0, [r4, #16]
 801639a:	4618      	mov	r0, r3
 801639c:	f000 fbae 	bl	8016afc <__hi0bits>
 80163a0:	1a30      	subs	r0, r6, r0
 80163a2:	f8d8 6000 	ldr.w	r6, [r8]
 80163a6:	42b0      	cmp	r0, r6
 80163a8:	dd63      	ble.n	8016472 <__gethex+0x286>
 80163aa:	1b87      	subs	r7, r0, r6
 80163ac:	4639      	mov	r1, r7
 80163ae:	4620      	mov	r0, r4
 80163b0:	f000 ff48 	bl	8017244 <__any_on>
 80163b4:	4682      	mov	sl, r0
 80163b6:	b1a8      	cbz	r0, 80163e4 <__gethex+0x1f8>
 80163b8:	1e7b      	subs	r3, r7, #1
 80163ba:	1159      	asrs	r1, r3, #5
 80163bc:	f003 021f 	and.w	r2, r3, #31
 80163c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80163c4:	f04f 0a01 	mov.w	sl, #1
 80163c8:	fa0a f202 	lsl.w	r2, sl, r2
 80163cc:	420a      	tst	r2, r1
 80163ce:	d009      	beq.n	80163e4 <__gethex+0x1f8>
 80163d0:	4553      	cmp	r3, sl
 80163d2:	dd05      	ble.n	80163e0 <__gethex+0x1f4>
 80163d4:	1eb9      	subs	r1, r7, #2
 80163d6:	4620      	mov	r0, r4
 80163d8:	f000 ff34 	bl	8017244 <__any_on>
 80163dc:	2800      	cmp	r0, #0
 80163de:	d145      	bne.n	801646c <__gethex+0x280>
 80163e0:	f04f 0a02 	mov.w	sl, #2
 80163e4:	4639      	mov	r1, r7
 80163e6:	4620      	mov	r0, r4
 80163e8:	f7ff fe99 	bl	801611e <rshift>
 80163ec:	443d      	add	r5, r7
 80163ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80163f2:	42ab      	cmp	r3, r5
 80163f4:	da4c      	bge.n	8016490 <__gethex+0x2a4>
 80163f6:	ee18 0a10 	vmov	r0, s16
 80163fa:	4621      	mov	r1, r4
 80163fc:	f000 fac8 	bl	8016990 <_Bfree>
 8016400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016402:	2300      	movs	r3, #0
 8016404:	6013      	str	r3, [r2, #0]
 8016406:	27a3      	movs	r7, #163	; 0xa3
 8016408:	e785      	b.n	8016316 <__gethex+0x12a>
 801640a:	1e73      	subs	r3, r6, #1
 801640c:	9a05      	ldr	r2, [sp, #20]
 801640e:	9303      	str	r3, [sp, #12]
 8016410:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016414:	4293      	cmp	r3, r2
 8016416:	d019      	beq.n	801644c <__gethex+0x260>
 8016418:	f1bb 0f20 	cmp.w	fp, #32
 801641c:	d107      	bne.n	801642e <__gethex+0x242>
 801641e:	9b02      	ldr	r3, [sp, #8]
 8016420:	9a00      	ldr	r2, [sp, #0]
 8016422:	f843 2b04 	str.w	r2, [r3], #4
 8016426:	9302      	str	r3, [sp, #8]
 8016428:	2300      	movs	r3, #0
 801642a:	9300      	str	r3, [sp, #0]
 801642c:	469b      	mov	fp, r3
 801642e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016432:	f7ff fec6 	bl	80161c2 <__hexdig_fun>
 8016436:	9b00      	ldr	r3, [sp, #0]
 8016438:	f000 000f 	and.w	r0, r0, #15
 801643c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016440:	4303      	orrs	r3, r0
 8016442:	9300      	str	r3, [sp, #0]
 8016444:	f10b 0b04 	add.w	fp, fp, #4
 8016448:	9b03      	ldr	r3, [sp, #12]
 801644a:	e00d      	b.n	8016468 <__gethex+0x27c>
 801644c:	9b03      	ldr	r3, [sp, #12]
 801644e:	9a06      	ldr	r2, [sp, #24]
 8016450:	4413      	add	r3, r2
 8016452:	42bb      	cmp	r3, r7
 8016454:	d3e0      	bcc.n	8016418 <__gethex+0x22c>
 8016456:	4618      	mov	r0, r3
 8016458:	9901      	ldr	r1, [sp, #4]
 801645a:	9307      	str	r3, [sp, #28]
 801645c:	4652      	mov	r2, sl
 801645e:	f001 fa22 	bl	80178a6 <strncmp>
 8016462:	9b07      	ldr	r3, [sp, #28]
 8016464:	2800      	cmp	r0, #0
 8016466:	d1d7      	bne.n	8016418 <__gethex+0x22c>
 8016468:	461e      	mov	r6, r3
 801646a:	e78b      	b.n	8016384 <__gethex+0x198>
 801646c:	f04f 0a03 	mov.w	sl, #3
 8016470:	e7b8      	b.n	80163e4 <__gethex+0x1f8>
 8016472:	da0a      	bge.n	801648a <__gethex+0x29e>
 8016474:	1a37      	subs	r7, r6, r0
 8016476:	4621      	mov	r1, r4
 8016478:	ee18 0a10 	vmov	r0, s16
 801647c:	463a      	mov	r2, r7
 801647e:	f000 fca3 	bl	8016dc8 <__lshift>
 8016482:	1bed      	subs	r5, r5, r7
 8016484:	4604      	mov	r4, r0
 8016486:	f100 0914 	add.w	r9, r0, #20
 801648a:	f04f 0a00 	mov.w	sl, #0
 801648e:	e7ae      	b.n	80163ee <__gethex+0x202>
 8016490:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016494:	42a8      	cmp	r0, r5
 8016496:	dd72      	ble.n	801657e <__gethex+0x392>
 8016498:	1b45      	subs	r5, r0, r5
 801649a:	42ae      	cmp	r6, r5
 801649c:	dc36      	bgt.n	801650c <__gethex+0x320>
 801649e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164a2:	2b02      	cmp	r3, #2
 80164a4:	d02a      	beq.n	80164fc <__gethex+0x310>
 80164a6:	2b03      	cmp	r3, #3
 80164a8:	d02c      	beq.n	8016504 <__gethex+0x318>
 80164aa:	2b01      	cmp	r3, #1
 80164ac:	d115      	bne.n	80164da <__gethex+0x2ee>
 80164ae:	42ae      	cmp	r6, r5
 80164b0:	d113      	bne.n	80164da <__gethex+0x2ee>
 80164b2:	2e01      	cmp	r6, #1
 80164b4:	d10b      	bne.n	80164ce <__gethex+0x2e2>
 80164b6:	9a04      	ldr	r2, [sp, #16]
 80164b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80164bc:	6013      	str	r3, [r2, #0]
 80164be:	2301      	movs	r3, #1
 80164c0:	6123      	str	r3, [r4, #16]
 80164c2:	f8c9 3000 	str.w	r3, [r9]
 80164c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80164c8:	2762      	movs	r7, #98	; 0x62
 80164ca:	601c      	str	r4, [r3, #0]
 80164cc:	e723      	b.n	8016316 <__gethex+0x12a>
 80164ce:	1e71      	subs	r1, r6, #1
 80164d0:	4620      	mov	r0, r4
 80164d2:	f000 feb7 	bl	8017244 <__any_on>
 80164d6:	2800      	cmp	r0, #0
 80164d8:	d1ed      	bne.n	80164b6 <__gethex+0x2ca>
 80164da:	ee18 0a10 	vmov	r0, s16
 80164de:	4621      	mov	r1, r4
 80164e0:	f000 fa56 	bl	8016990 <_Bfree>
 80164e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164e6:	2300      	movs	r3, #0
 80164e8:	6013      	str	r3, [r2, #0]
 80164ea:	2750      	movs	r7, #80	; 0x50
 80164ec:	e713      	b.n	8016316 <__gethex+0x12a>
 80164ee:	bf00      	nop
 80164f0:	0801c744 	.word	0x0801c744
 80164f4:	0801c664 	.word	0x0801c664
 80164f8:	0801c6d8 	.word	0x0801c6d8
 80164fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d1eb      	bne.n	80164da <__gethex+0x2ee>
 8016502:	e7d8      	b.n	80164b6 <__gethex+0x2ca>
 8016504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016506:	2b00      	cmp	r3, #0
 8016508:	d1d5      	bne.n	80164b6 <__gethex+0x2ca>
 801650a:	e7e6      	b.n	80164da <__gethex+0x2ee>
 801650c:	1e6f      	subs	r7, r5, #1
 801650e:	f1ba 0f00 	cmp.w	sl, #0
 8016512:	d131      	bne.n	8016578 <__gethex+0x38c>
 8016514:	b127      	cbz	r7, 8016520 <__gethex+0x334>
 8016516:	4639      	mov	r1, r7
 8016518:	4620      	mov	r0, r4
 801651a:	f000 fe93 	bl	8017244 <__any_on>
 801651e:	4682      	mov	sl, r0
 8016520:	117b      	asrs	r3, r7, #5
 8016522:	2101      	movs	r1, #1
 8016524:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016528:	f007 071f 	and.w	r7, r7, #31
 801652c:	fa01 f707 	lsl.w	r7, r1, r7
 8016530:	421f      	tst	r7, r3
 8016532:	4629      	mov	r1, r5
 8016534:	4620      	mov	r0, r4
 8016536:	bf18      	it	ne
 8016538:	f04a 0a02 	orrne.w	sl, sl, #2
 801653c:	1b76      	subs	r6, r6, r5
 801653e:	f7ff fdee 	bl	801611e <rshift>
 8016542:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016546:	2702      	movs	r7, #2
 8016548:	f1ba 0f00 	cmp.w	sl, #0
 801654c:	d048      	beq.n	80165e0 <__gethex+0x3f4>
 801654e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016552:	2b02      	cmp	r3, #2
 8016554:	d015      	beq.n	8016582 <__gethex+0x396>
 8016556:	2b03      	cmp	r3, #3
 8016558:	d017      	beq.n	801658a <__gethex+0x39e>
 801655a:	2b01      	cmp	r3, #1
 801655c:	d109      	bne.n	8016572 <__gethex+0x386>
 801655e:	f01a 0f02 	tst.w	sl, #2
 8016562:	d006      	beq.n	8016572 <__gethex+0x386>
 8016564:	f8d9 0000 	ldr.w	r0, [r9]
 8016568:	ea4a 0a00 	orr.w	sl, sl, r0
 801656c:	f01a 0f01 	tst.w	sl, #1
 8016570:	d10e      	bne.n	8016590 <__gethex+0x3a4>
 8016572:	f047 0710 	orr.w	r7, r7, #16
 8016576:	e033      	b.n	80165e0 <__gethex+0x3f4>
 8016578:	f04f 0a01 	mov.w	sl, #1
 801657c:	e7d0      	b.n	8016520 <__gethex+0x334>
 801657e:	2701      	movs	r7, #1
 8016580:	e7e2      	b.n	8016548 <__gethex+0x35c>
 8016582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016584:	f1c3 0301 	rsb	r3, r3, #1
 8016588:	9315      	str	r3, [sp, #84]	; 0x54
 801658a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801658c:	2b00      	cmp	r3, #0
 801658e:	d0f0      	beq.n	8016572 <__gethex+0x386>
 8016590:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016594:	f104 0314 	add.w	r3, r4, #20
 8016598:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801659c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80165a0:	f04f 0c00 	mov.w	ip, #0
 80165a4:	4618      	mov	r0, r3
 80165a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80165aa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80165ae:	d01c      	beq.n	80165ea <__gethex+0x3fe>
 80165b0:	3201      	adds	r2, #1
 80165b2:	6002      	str	r2, [r0, #0]
 80165b4:	2f02      	cmp	r7, #2
 80165b6:	f104 0314 	add.w	r3, r4, #20
 80165ba:	d13f      	bne.n	801663c <__gethex+0x450>
 80165bc:	f8d8 2000 	ldr.w	r2, [r8]
 80165c0:	3a01      	subs	r2, #1
 80165c2:	42b2      	cmp	r2, r6
 80165c4:	d10a      	bne.n	80165dc <__gethex+0x3f0>
 80165c6:	1171      	asrs	r1, r6, #5
 80165c8:	2201      	movs	r2, #1
 80165ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80165ce:	f006 061f 	and.w	r6, r6, #31
 80165d2:	fa02 f606 	lsl.w	r6, r2, r6
 80165d6:	421e      	tst	r6, r3
 80165d8:	bf18      	it	ne
 80165da:	4617      	movne	r7, r2
 80165dc:	f047 0720 	orr.w	r7, r7, #32
 80165e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165e2:	601c      	str	r4, [r3, #0]
 80165e4:	9b04      	ldr	r3, [sp, #16]
 80165e6:	601d      	str	r5, [r3, #0]
 80165e8:	e695      	b.n	8016316 <__gethex+0x12a>
 80165ea:	4299      	cmp	r1, r3
 80165ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80165f0:	d8d8      	bhi.n	80165a4 <__gethex+0x3b8>
 80165f2:	68a3      	ldr	r3, [r4, #8]
 80165f4:	459b      	cmp	fp, r3
 80165f6:	db19      	blt.n	801662c <__gethex+0x440>
 80165f8:	6861      	ldr	r1, [r4, #4]
 80165fa:	ee18 0a10 	vmov	r0, s16
 80165fe:	3101      	adds	r1, #1
 8016600:	f000 f986 	bl	8016910 <_Balloc>
 8016604:	4681      	mov	r9, r0
 8016606:	b918      	cbnz	r0, 8016610 <__gethex+0x424>
 8016608:	4b1a      	ldr	r3, [pc, #104]	; (8016674 <__gethex+0x488>)
 801660a:	4602      	mov	r2, r0
 801660c:	2184      	movs	r1, #132	; 0x84
 801660e:	e6a8      	b.n	8016362 <__gethex+0x176>
 8016610:	6922      	ldr	r2, [r4, #16]
 8016612:	3202      	adds	r2, #2
 8016614:	f104 010c 	add.w	r1, r4, #12
 8016618:	0092      	lsls	r2, r2, #2
 801661a:	300c      	adds	r0, #12
 801661c:	f7fc fde8 	bl	80131f0 <memcpy>
 8016620:	4621      	mov	r1, r4
 8016622:	ee18 0a10 	vmov	r0, s16
 8016626:	f000 f9b3 	bl	8016990 <_Bfree>
 801662a:	464c      	mov	r4, r9
 801662c:	6923      	ldr	r3, [r4, #16]
 801662e:	1c5a      	adds	r2, r3, #1
 8016630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016634:	6122      	str	r2, [r4, #16]
 8016636:	2201      	movs	r2, #1
 8016638:	615a      	str	r2, [r3, #20]
 801663a:	e7bb      	b.n	80165b4 <__gethex+0x3c8>
 801663c:	6922      	ldr	r2, [r4, #16]
 801663e:	455a      	cmp	r2, fp
 8016640:	dd0b      	ble.n	801665a <__gethex+0x46e>
 8016642:	2101      	movs	r1, #1
 8016644:	4620      	mov	r0, r4
 8016646:	f7ff fd6a 	bl	801611e <rshift>
 801664a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801664e:	3501      	adds	r5, #1
 8016650:	42ab      	cmp	r3, r5
 8016652:	f6ff aed0 	blt.w	80163f6 <__gethex+0x20a>
 8016656:	2701      	movs	r7, #1
 8016658:	e7c0      	b.n	80165dc <__gethex+0x3f0>
 801665a:	f016 061f 	ands.w	r6, r6, #31
 801665e:	d0fa      	beq.n	8016656 <__gethex+0x46a>
 8016660:	449a      	add	sl, r3
 8016662:	f1c6 0620 	rsb	r6, r6, #32
 8016666:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801666a:	f000 fa47 	bl	8016afc <__hi0bits>
 801666e:	42b0      	cmp	r0, r6
 8016670:	dbe7      	blt.n	8016642 <__gethex+0x456>
 8016672:	e7f0      	b.n	8016656 <__gethex+0x46a>
 8016674:	0801c664 	.word	0x0801c664

08016678 <L_shift>:
 8016678:	f1c2 0208 	rsb	r2, r2, #8
 801667c:	0092      	lsls	r2, r2, #2
 801667e:	b570      	push	{r4, r5, r6, lr}
 8016680:	f1c2 0620 	rsb	r6, r2, #32
 8016684:	6843      	ldr	r3, [r0, #4]
 8016686:	6804      	ldr	r4, [r0, #0]
 8016688:	fa03 f506 	lsl.w	r5, r3, r6
 801668c:	432c      	orrs	r4, r5
 801668e:	40d3      	lsrs	r3, r2
 8016690:	6004      	str	r4, [r0, #0]
 8016692:	f840 3f04 	str.w	r3, [r0, #4]!
 8016696:	4288      	cmp	r0, r1
 8016698:	d3f4      	bcc.n	8016684 <L_shift+0xc>
 801669a:	bd70      	pop	{r4, r5, r6, pc}

0801669c <__match>:
 801669c:	b530      	push	{r4, r5, lr}
 801669e:	6803      	ldr	r3, [r0, #0]
 80166a0:	3301      	adds	r3, #1
 80166a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166a6:	b914      	cbnz	r4, 80166ae <__match+0x12>
 80166a8:	6003      	str	r3, [r0, #0]
 80166aa:	2001      	movs	r0, #1
 80166ac:	bd30      	pop	{r4, r5, pc}
 80166ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80166b6:	2d19      	cmp	r5, #25
 80166b8:	bf98      	it	ls
 80166ba:	3220      	addls	r2, #32
 80166bc:	42a2      	cmp	r2, r4
 80166be:	d0f0      	beq.n	80166a2 <__match+0x6>
 80166c0:	2000      	movs	r0, #0
 80166c2:	e7f3      	b.n	80166ac <__match+0x10>

080166c4 <__hexnan>:
 80166c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c8:	680b      	ldr	r3, [r1, #0]
 80166ca:	6801      	ldr	r1, [r0, #0]
 80166cc:	115e      	asrs	r6, r3, #5
 80166ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80166d2:	f013 031f 	ands.w	r3, r3, #31
 80166d6:	b087      	sub	sp, #28
 80166d8:	bf18      	it	ne
 80166da:	3604      	addne	r6, #4
 80166dc:	2500      	movs	r5, #0
 80166de:	1f37      	subs	r7, r6, #4
 80166e0:	4682      	mov	sl, r0
 80166e2:	4690      	mov	r8, r2
 80166e4:	9301      	str	r3, [sp, #4]
 80166e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80166ea:	46b9      	mov	r9, r7
 80166ec:	463c      	mov	r4, r7
 80166ee:	9502      	str	r5, [sp, #8]
 80166f0:	46ab      	mov	fp, r5
 80166f2:	784a      	ldrb	r2, [r1, #1]
 80166f4:	1c4b      	adds	r3, r1, #1
 80166f6:	9303      	str	r3, [sp, #12]
 80166f8:	b342      	cbz	r2, 801674c <__hexnan+0x88>
 80166fa:	4610      	mov	r0, r2
 80166fc:	9105      	str	r1, [sp, #20]
 80166fe:	9204      	str	r2, [sp, #16]
 8016700:	f7ff fd5f 	bl	80161c2 <__hexdig_fun>
 8016704:	2800      	cmp	r0, #0
 8016706:	d14f      	bne.n	80167a8 <__hexnan+0xe4>
 8016708:	9a04      	ldr	r2, [sp, #16]
 801670a:	9905      	ldr	r1, [sp, #20]
 801670c:	2a20      	cmp	r2, #32
 801670e:	d818      	bhi.n	8016742 <__hexnan+0x7e>
 8016710:	9b02      	ldr	r3, [sp, #8]
 8016712:	459b      	cmp	fp, r3
 8016714:	dd13      	ble.n	801673e <__hexnan+0x7a>
 8016716:	454c      	cmp	r4, r9
 8016718:	d206      	bcs.n	8016728 <__hexnan+0x64>
 801671a:	2d07      	cmp	r5, #7
 801671c:	dc04      	bgt.n	8016728 <__hexnan+0x64>
 801671e:	462a      	mov	r2, r5
 8016720:	4649      	mov	r1, r9
 8016722:	4620      	mov	r0, r4
 8016724:	f7ff ffa8 	bl	8016678 <L_shift>
 8016728:	4544      	cmp	r4, r8
 801672a:	d950      	bls.n	80167ce <__hexnan+0x10a>
 801672c:	2300      	movs	r3, #0
 801672e:	f1a4 0904 	sub.w	r9, r4, #4
 8016732:	f844 3c04 	str.w	r3, [r4, #-4]
 8016736:	f8cd b008 	str.w	fp, [sp, #8]
 801673a:	464c      	mov	r4, r9
 801673c:	461d      	mov	r5, r3
 801673e:	9903      	ldr	r1, [sp, #12]
 8016740:	e7d7      	b.n	80166f2 <__hexnan+0x2e>
 8016742:	2a29      	cmp	r2, #41	; 0x29
 8016744:	d156      	bne.n	80167f4 <__hexnan+0x130>
 8016746:	3102      	adds	r1, #2
 8016748:	f8ca 1000 	str.w	r1, [sl]
 801674c:	f1bb 0f00 	cmp.w	fp, #0
 8016750:	d050      	beq.n	80167f4 <__hexnan+0x130>
 8016752:	454c      	cmp	r4, r9
 8016754:	d206      	bcs.n	8016764 <__hexnan+0xa0>
 8016756:	2d07      	cmp	r5, #7
 8016758:	dc04      	bgt.n	8016764 <__hexnan+0xa0>
 801675a:	462a      	mov	r2, r5
 801675c:	4649      	mov	r1, r9
 801675e:	4620      	mov	r0, r4
 8016760:	f7ff ff8a 	bl	8016678 <L_shift>
 8016764:	4544      	cmp	r4, r8
 8016766:	d934      	bls.n	80167d2 <__hexnan+0x10e>
 8016768:	f1a8 0204 	sub.w	r2, r8, #4
 801676c:	4623      	mov	r3, r4
 801676e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016772:	f842 1f04 	str.w	r1, [r2, #4]!
 8016776:	429f      	cmp	r7, r3
 8016778:	d2f9      	bcs.n	801676e <__hexnan+0xaa>
 801677a:	1b3b      	subs	r3, r7, r4
 801677c:	f023 0303 	bic.w	r3, r3, #3
 8016780:	3304      	adds	r3, #4
 8016782:	3401      	adds	r4, #1
 8016784:	3e03      	subs	r6, #3
 8016786:	42b4      	cmp	r4, r6
 8016788:	bf88      	it	hi
 801678a:	2304      	movhi	r3, #4
 801678c:	4443      	add	r3, r8
 801678e:	2200      	movs	r2, #0
 8016790:	f843 2b04 	str.w	r2, [r3], #4
 8016794:	429f      	cmp	r7, r3
 8016796:	d2fb      	bcs.n	8016790 <__hexnan+0xcc>
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	b91b      	cbnz	r3, 80167a4 <__hexnan+0xe0>
 801679c:	4547      	cmp	r7, r8
 801679e:	d127      	bne.n	80167f0 <__hexnan+0x12c>
 80167a0:	2301      	movs	r3, #1
 80167a2:	603b      	str	r3, [r7, #0]
 80167a4:	2005      	movs	r0, #5
 80167a6:	e026      	b.n	80167f6 <__hexnan+0x132>
 80167a8:	3501      	adds	r5, #1
 80167aa:	2d08      	cmp	r5, #8
 80167ac:	f10b 0b01 	add.w	fp, fp, #1
 80167b0:	dd06      	ble.n	80167c0 <__hexnan+0xfc>
 80167b2:	4544      	cmp	r4, r8
 80167b4:	d9c3      	bls.n	801673e <__hexnan+0x7a>
 80167b6:	2300      	movs	r3, #0
 80167b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80167bc:	2501      	movs	r5, #1
 80167be:	3c04      	subs	r4, #4
 80167c0:	6822      	ldr	r2, [r4, #0]
 80167c2:	f000 000f 	and.w	r0, r0, #15
 80167c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80167ca:	6022      	str	r2, [r4, #0]
 80167cc:	e7b7      	b.n	801673e <__hexnan+0x7a>
 80167ce:	2508      	movs	r5, #8
 80167d0:	e7b5      	b.n	801673e <__hexnan+0x7a>
 80167d2:	9b01      	ldr	r3, [sp, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d0df      	beq.n	8016798 <__hexnan+0xd4>
 80167d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167dc:	f1c3 0320 	rsb	r3, r3, #32
 80167e0:	fa22 f303 	lsr.w	r3, r2, r3
 80167e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80167e8:	401a      	ands	r2, r3
 80167ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80167ee:	e7d3      	b.n	8016798 <__hexnan+0xd4>
 80167f0:	3f04      	subs	r7, #4
 80167f2:	e7d1      	b.n	8016798 <__hexnan+0xd4>
 80167f4:	2004      	movs	r0, #4
 80167f6:	b007      	add	sp, #28
 80167f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167fc <_localeconv_r>:
 80167fc:	4800      	ldr	r0, [pc, #0]	; (8016800 <_localeconv_r+0x4>)
 80167fe:	4770      	bx	lr
 8016800:	20000504 	.word	0x20000504

08016804 <__retarget_lock_init_recursive>:
 8016804:	4770      	bx	lr

08016806 <__retarget_lock_acquire_recursive>:
 8016806:	4770      	bx	lr

08016808 <__retarget_lock_release_recursive>:
 8016808:	4770      	bx	lr

0801680a <__swhatbuf_r>:
 801680a:	b570      	push	{r4, r5, r6, lr}
 801680c:	460e      	mov	r6, r1
 801680e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016812:	2900      	cmp	r1, #0
 8016814:	b096      	sub	sp, #88	; 0x58
 8016816:	4614      	mov	r4, r2
 8016818:	461d      	mov	r5, r3
 801681a:	da07      	bge.n	801682c <__swhatbuf_r+0x22>
 801681c:	2300      	movs	r3, #0
 801681e:	602b      	str	r3, [r5, #0]
 8016820:	89b3      	ldrh	r3, [r6, #12]
 8016822:	061a      	lsls	r2, r3, #24
 8016824:	d410      	bmi.n	8016848 <__swhatbuf_r+0x3e>
 8016826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801682a:	e00e      	b.n	801684a <__swhatbuf_r+0x40>
 801682c:	466a      	mov	r2, sp
 801682e:	f001 f8ab 	bl	8017988 <_fstat_r>
 8016832:	2800      	cmp	r0, #0
 8016834:	dbf2      	blt.n	801681c <__swhatbuf_r+0x12>
 8016836:	9a01      	ldr	r2, [sp, #4]
 8016838:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801683c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016840:	425a      	negs	r2, r3
 8016842:	415a      	adcs	r2, r3
 8016844:	602a      	str	r2, [r5, #0]
 8016846:	e7ee      	b.n	8016826 <__swhatbuf_r+0x1c>
 8016848:	2340      	movs	r3, #64	; 0x40
 801684a:	2000      	movs	r0, #0
 801684c:	6023      	str	r3, [r4, #0]
 801684e:	b016      	add	sp, #88	; 0x58
 8016850:	bd70      	pop	{r4, r5, r6, pc}
	...

08016854 <__smakebuf_r>:
 8016854:	898b      	ldrh	r3, [r1, #12]
 8016856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016858:	079d      	lsls	r5, r3, #30
 801685a:	4606      	mov	r6, r0
 801685c:	460c      	mov	r4, r1
 801685e:	d507      	bpl.n	8016870 <__smakebuf_r+0x1c>
 8016860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016864:	6023      	str	r3, [r4, #0]
 8016866:	6123      	str	r3, [r4, #16]
 8016868:	2301      	movs	r3, #1
 801686a:	6163      	str	r3, [r4, #20]
 801686c:	b002      	add	sp, #8
 801686e:	bd70      	pop	{r4, r5, r6, pc}
 8016870:	ab01      	add	r3, sp, #4
 8016872:	466a      	mov	r2, sp
 8016874:	f7ff ffc9 	bl	801680a <__swhatbuf_r>
 8016878:	9900      	ldr	r1, [sp, #0]
 801687a:	4605      	mov	r5, r0
 801687c:	4630      	mov	r0, r6
 801687e:	f7fc fd1d 	bl	80132bc <_malloc_r>
 8016882:	b948      	cbnz	r0, 8016898 <__smakebuf_r+0x44>
 8016884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016888:	059a      	lsls	r2, r3, #22
 801688a:	d4ef      	bmi.n	801686c <__smakebuf_r+0x18>
 801688c:	f023 0303 	bic.w	r3, r3, #3
 8016890:	f043 0302 	orr.w	r3, r3, #2
 8016894:	81a3      	strh	r3, [r4, #12]
 8016896:	e7e3      	b.n	8016860 <__smakebuf_r+0xc>
 8016898:	4b0d      	ldr	r3, [pc, #52]	; (80168d0 <__smakebuf_r+0x7c>)
 801689a:	62b3      	str	r3, [r6, #40]	; 0x28
 801689c:	89a3      	ldrh	r3, [r4, #12]
 801689e:	6020      	str	r0, [r4, #0]
 80168a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168a4:	81a3      	strh	r3, [r4, #12]
 80168a6:	9b00      	ldr	r3, [sp, #0]
 80168a8:	6163      	str	r3, [r4, #20]
 80168aa:	9b01      	ldr	r3, [sp, #4]
 80168ac:	6120      	str	r0, [r4, #16]
 80168ae:	b15b      	cbz	r3, 80168c8 <__smakebuf_r+0x74>
 80168b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168b4:	4630      	mov	r0, r6
 80168b6:	f001 f879 	bl	80179ac <_isatty_r>
 80168ba:	b128      	cbz	r0, 80168c8 <__smakebuf_r+0x74>
 80168bc:	89a3      	ldrh	r3, [r4, #12]
 80168be:	f023 0303 	bic.w	r3, r3, #3
 80168c2:	f043 0301 	orr.w	r3, r3, #1
 80168c6:	81a3      	strh	r3, [r4, #12]
 80168c8:	89a0      	ldrh	r0, [r4, #12]
 80168ca:	4305      	orrs	r5, r0
 80168cc:	81a5      	strh	r5, [r4, #12]
 80168ce:	e7cd      	b.n	801686c <__smakebuf_r+0x18>
 80168d0:	08015f7d 	.word	0x08015f7d

080168d4 <__ascii_mbtowc>:
 80168d4:	b082      	sub	sp, #8
 80168d6:	b901      	cbnz	r1, 80168da <__ascii_mbtowc+0x6>
 80168d8:	a901      	add	r1, sp, #4
 80168da:	b142      	cbz	r2, 80168ee <__ascii_mbtowc+0x1a>
 80168dc:	b14b      	cbz	r3, 80168f2 <__ascii_mbtowc+0x1e>
 80168de:	7813      	ldrb	r3, [r2, #0]
 80168e0:	600b      	str	r3, [r1, #0]
 80168e2:	7812      	ldrb	r2, [r2, #0]
 80168e4:	1e10      	subs	r0, r2, #0
 80168e6:	bf18      	it	ne
 80168e8:	2001      	movne	r0, #1
 80168ea:	b002      	add	sp, #8
 80168ec:	4770      	bx	lr
 80168ee:	4610      	mov	r0, r2
 80168f0:	e7fb      	b.n	80168ea <__ascii_mbtowc+0x16>
 80168f2:	f06f 0001 	mvn.w	r0, #1
 80168f6:	e7f8      	b.n	80168ea <__ascii_mbtowc+0x16>

080168f8 <__malloc_lock>:
 80168f8:	4801      	ldr	r0, [pc, #4]	; (8016900 <__malloc_lock+0x8>)
 80168fa:	f7ff bf84 	b.w	8016806 <__retarget_lock_acquire_recursive>
 80168fe:	bf00      	nop
 8016900:	20033968 	.word	0x20033968

08016904 <__malloc_unlock>:
 8016904:	4801      	ldr	r0, [pc, #4]	; (801690c <__malloc_unlock+0x8>)
 8016906:	f7ff bf7f 	b.w	8016808 <__retarget_lock_release_recursive>
 801690a:	bf00      	nop
 801690c:	20033968 	.word	0x20033968

08016910 <_Balloc>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016914:	4604      	mov	r4, r0
 8016916:	460d      	mov	r5, r1
 8016918:	b976      	cbnz	r6, 8016938 <_Balloc+0x28>
 801691a:	2010      	movs	r0, #16
 801691c:	f7fc fc60 	bl	80131e0 <malloc>
 8016920:	4602      	mov	r2, r0
 8016922:	6260      	str	r0, [r4, #36]	; 0x24
 8016924:	b920      	cbnz	r0, 8016930 <_Balloc+0x20>
 8016926:	4b18      	ldr	r3, [pc, #96]	; (8016988 <_Balloc+0x78>)
 8016928:	4818      	ldr	r0, [pc, #96]	; (801698c <_Balloc+0x7c>)
 801692a:	2166      	movs	r1, #102	; 0x66
 801692c:	f000 ffec 	bl	8017908 <__assert_func>
 8016930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016934:	6006      	str	r6, [r0, #0]
 8016936:	60c6      	str	r6, [r0, #12]
 8016938:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801693a:	68f3      	ldr	r3, [r6, #12]
 801693c:	b183      	cbz	r3, 8016960 <_Balloc+0x50>
 801693e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016940:	68db      	ldr	r3, [r3, #12]
 8016942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016946:	b9b8      	cbnz	r0, 8016978 <_Balloc+0x68>
 8016948:	2101      	movs	r1, #1
 801694a:	fa01 f605 	lsl.w	r6, r1, r5
 801694e:	1d72      	adds	r2, r6, #5
 8016950:	0092      	lsls	r2, r2, #2
 8016952:	4620      	mov	r0, r4
 8016954:	f000 fc97 	bl	8017286 <_calloc_r>
 8016958:	b160      	cbz	r0, 8016974 <_Balloc+0x64>
 801695a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801695e:	e00e      	b.n	801697e <_Balloc+0x6e>
 8016960:	2221      	movs	r2, #33	; 0x21
 8016962:	2104      	movs	r1, #4
 8016964:	4620      	mov	r0, r4
 8016966:	f000 fc8e 	bl	8017286 <_calloc_r>
 801696a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801696c:	60f0      	str	r0, [r6, #12]
 801696e:	68db      	ldr	r3, [r3, #12]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d1e4      	bne.n	801693e <_Balloc+0x2e>
 8016974:	2000      	movs	r0, #0
 8016976:	bd70      	pop	{r4, r5, r6, pc}
 8016978:	6802      	ldr	r2, [r0, #0]
 801697a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801697e:	2300      	movs	r3, #0
 8016980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016984:	e7f7      	b.n	8016976 <_Balloc+0x66>
 8016986:	bf00      	nop
 8016988:	0801c5ee 	.word	0x0801c5ee
 801698c:	0801c758 	.word	0x0801c758

08016990 <_Bfree>:
 8016990:	b570      	push	{r4, r5, r6, lr}
 8016992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016994:	4605      	mov	r5, r0
 8016996:	460c      	mov	r4, r1
 8016998:	b976      	cbnz	r6, 80169b8 <_Bfree+0x28>
 801699a:	2010      	movs	r0, #16
 801699c:	f7fc fc20 	bl	80131e0 <malloc>
 80169a0:	4602      	mov	r2, r0
 80169a2:	6268      	str	r0, [r5, #36]	; 0x24
 80169a4:	b920      	cbnz	r0, 80169b0 <_Bfree+0x20>
 80169a6:	4b09      	ldr	r3, [pc, #36]	; (80169cc <_Bfree+0x3c>)
 80169a8:	4809      	ldr	r0, [pc, #36]	; (80169d0 <_Bfree+0x40>)
 80169aa:	218a      	movs	r1, #138	; 0x8a
 80169ac:	f000 ffac 	bl	8017908 <__assert_func>
 80169b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80169b4:	6006      	str	r6, [r0, #0]
 80169b6:	60c6      	str	r6, [r0, #12]
 80169b8:	b13c      	cbz	r4, 80169ca <_Bfree+0x3a>
 80169ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80169bc:	6862      	ldr	r2, [r4, #4]
 80169be:	68db      	ldr	r3, [r3, #12]
 80169c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80169c4:	6021      	str	r1, [r4, #0]
 80169c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80169ca:	bd70      	pop	{r4, r5, r6, pc}
 80169cc:	0801c5ee 	.word	0x0801c5ee
 80169d0:	0801c758 	.word	0x0801c758

080169d4 <__multadd>:
 80169d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169d8:	690e      	ldr	r6, [r1, #16]
 80169da:	4607      	mov	r7, r0
 80169dc:	4698      	mov	r8, r3
 80169de:	460c      	mov	r4, r1
 80169e0:	f101 0014 	add.w	r0, r1, #20
 80169e4:	2300      	movs	r3, #0
 80169e6:	6805      	ldr	r5, [r0, #0]
 80169e8:	b2a9      	uxth	r1, r5
 80169ea:	fb02 8101 	mla	r1, r2, r1, r8
 80169ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80169f2:	0c2d      	lsrs	r5, r5, #16
 80169f4:	fb02 c505 	mla	r5, r2, r5, ip
 80169f8:	b289      	uxth	r1, r1
 80169fa:	3301      	adds	r3, #1
 80169fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016a00:	429e      	cmp	r6, r3
 8016a02:	f840 1b04 	str.w	r1, [r0], #4
 8016a06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016a0a:	dcec      	bgt.n	80169e6 <__multadd+0x12>
 8016a0c:	f1b8 0f00 	cmp.w	r8, #0
 8016a10:	d022      	beq.n	8016a58 <__multadd+0x84>
 8016a12:	68a3      	ldr	r3, [r4, #8]
 8016a14:	42b3      	cmp	r3, r6
 8016a16:	dc19      	bgt.n	8016a4c <__multadd+0x78>
 8016a18:	6861      	ldr	r1, [r4, #4]
 8016a1a:	4638      	mov	r0, r7
 8016a1c:	3101      	adds	r1, #1
 8016a1e:	f7ff ff77 	bl	8016910 <_Balloc>
 8016a22:	4605      	mov	r5, r0
 8016a24:	b928      	cbnz	r0, 8016a32 <__multadd+0x5e>
 8016a26:	4602      	mov	r2, r0
 8016a28:	4b0d      	ldr	r3, [pc, #52]	; (8016a60 <__multadd+0x8c>)
 8016a2a:	480e      	ldr	r0, [pc, #56]	; (8016a64 <__multadd+0x90>)
 8016a2c:	21b5      	movs	r1, #181	; 0xb5
 8016a2e:	f000 ff6b 	bl	8017908 <__assert_func>
 8016a32:	6922      	ldr	r2, [r4, #16]
 8016a34:	3202      	adds	r2, #2
 8016a36:	f104 010c 	add.w	r1, r4, #12
 8016a3a:	0092      	lsls	r2, r2, #2
 8016a3c:	300c      	adds	r0, #12
 8016a3e:	f7fc fbd7 	bl	80131f0 <memcpy>
 8016a42:	4621      	mov	r1, r4
 8016a44:	4638      	mov	r0, r7
 8016a46:	f7ff ffa3 	bl	8016990 <_Bfree>
 8016a4a:	462c      	mov	r4, r5
 8016a4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016a50:	3601      	adds	r6, #1
 8016a52:	f8c3 8014 	str.w	r8, [r3, #20]
 8016a56:	6126      	str	r6, [r4, #16]
 8016a58:	4620      	mov	r0, r4
 8016a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a5e:	bf00      	nop
 8016a60:	0801c664 	.word	0x0801c664
 8016a64:	0801c758 	.word	0x0801c758

08016a68 <__s2b>:
 8016a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a6c:	460c      	mov	r4, r1
 8016a6e:	4615      	mov	r5, r2
 8016a70:	461f      	mov	r7, r3
 8016a72:	2209      	movs	r2, #9
 8016a74:	3308      	adds	r3, #8
 8016a76:	4606      	mov	r6, r0
 8016a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a7c:	2100      	movs	r1, #0
 8016a7e:	2201      	movs	r2, #1
 8016a80:	429a      	cmp	r2, r3
 8016a82:	db09      	blt.n	8016a98 <__s2b+0x30>
 8016a84:	4630      	mov	r0, r6
 8016a86:	f7ff ff43 	bl	8016910 <_Balloc>
 8016a8a:	b940      	cbnz	r0, 8016a9e <__s2b+0x36>
 8016a8c:	4602      	mov	r2, r0
 8016a8e:	4b19      	ldr	r3, [pc, #100]	; (8016af4 <__s2b+0x8c>)
 8016a90:	4819      	ldr	r0, [pc, #100]	; (8016af8 <__s2b+0x90>)
 8016a92:	21ce      	movs	r1, #206	; 0xce
 8016a94:	f000 ff38 	bl	8017908 <__assert_func>
 8016a98:	0052      	lsls	r2, r2, #1
 8016a9a:	3101      	adds	r1, #1
 8016a9c:	e7f0      	b.n	8016a80 <__s2b+0x18>
 8016a9e:	9b08      	ldr	r3, [sp, #32]
 8016aa0:	6143      	str	r3, [r0, #20]
 8016aa2:	2d09      	cmp	r5, #9
 8016aa4:	f04f 0301 	mov.w	r3, #1
 8016aa8:	6103      	str	r3, [r0, #16]
 8016aaa:	dd16      	ble.n	8016ada <__s2b+0x72>
 8016aac:	f104 0909 	add.w	r9, r4, #9
 8016ab0:	46c8      	mov	r8, r9
 8016ab2:	442c      	add	r4, r5
 8016ab4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016ab8:	4601      	mov	r1, r0
 8016aba:	3b30      	subs	r3, #48	; 0x30
 8016abc:	220a      	movs	r2, #10
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f7ff ff88 	bl	80169d4 <__multadd>
 8016ac4:	45a0      	cmp	r8, r4
 8016ac6:	d1f5      	bne.n	8016ab4 <__s2b+0x4c>
 8016ac8:	f1a5 0408 	sub.w	r4, r5, #8
 8016acc:	444c      	add	r4, r9
 8016ace:	1b2d      	subs	r5, r5, r4
 8016ad0:	1963      	adds	r3, r4, r5
 8016ad2:	42bb      	cmp	r3, r7
 8016ad4:	db04      	blt.n	8016ae0 <__s2b+0x78>
 8016ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ada:	340a      	adds	r4, #10
 8016adc:	2509      	movs	r5, #9
 8016ade:	e7f6      	b.n	8016ace <__s2b+0x66>
 8016ae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016ae4:	4601      	mov	r1, r0
 8016ae6:	3b30      	subs	r3, #48	; 0x30
 8016ae8:	220a      	movs	r2, #10
 8016aea:	4630      	mov	r0, r6
 8016aec:	f7ff ff72 	bl	80169d4 <__multadd>
 8016af0:	e7ee      	b.n	8016ad0 <__s2b+0x68>
 8016af2:	bf00      	nop
 8016af4:	0801c664 	.word	0x0801c664
 8016af8:	0801c758 	.word	0x0801c758

08016afc <__hi0bits>:
 8016afc:	0c03      	lsrs	r3, r0, #16
 8016afe:	041b      	lsls	r3, r3, #16
 8016b00:	b9d3      	cbnz	r3, 8016b38 <__hi0bits+0x3c>
 8016b02:	0400      	lsls	r0, r0, #16
 8016b04:	2310      	movs	r3, #16
 8016b06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016b0a:	bf04      	itt	eq
 8016b0c:	0200      	lsleq	r0, r0, #8
 8016b0e:	3308      	addeq	r3, #8
 8016b10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016b14:	bf04      	itt	eq
 8016b16:	0100      	lsleq	r0, r0, #4
 8016b18:	3304      	addeq	r3, #4
 8016b1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016b1e:	bf04      	itt	eq
 8016b20:	0080      	lsleq	r0, r0, #2
 8016b22:	3302      	addeq	r3, #2
 8016b24:	2800      	cmp	r0, #0
 8016b26:	db05      	blt.n	8016b34 <__hi0bits+0x38>
 8016b28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016b2c:	f103 0301 	add.w	r3, r3, #1
 8016b30:	bf08      	it	eq
 8016b32:	2320      	moveq	r3, #32
 8016b34:	4618      	mov	r0, r3
 8016b36:	4770      	bx	lr
 8016b38:	2300      	movs	r3, #0
 8016b3a:	e7e4      	b.n	8016b06 <__hi0bits+0xa>

08016b3c <__lo0bits>:
 8016b3c:	6803      	ldr	r3, [r0, #0]
 8016b3e:	f013 0207 	ands.w	r2, r3, #7
 8016b42:	4601      	mov	r1, r0
 8016b44:	d00b      	beq.n	8016b5e <__lo0bits+0x22>
 8016b46:	07da      	lsls	r2, r3, #31
 8016b48:	d424      	bmi.n	8016b94 <__lo0bits+0x58>
 8016b4a:	0798      	lsls	r0, r3, #30
 8016b4c:	bf49      	itett	mi
 8016b4e:	085b      	lsrmi	r3, r3, #1
 8016b50:	089b      	lsrpl	r3, r3, #2
 8016b52:	2001      	movmi	r0, #1
 8016b54:	600b      	strmi	r3, [r1, #0]
 8016b56:	bf5c      	itt	pl
 8016b58:	600b      	strpl	r3, [r1, #0]
 8016b5a:	2002      	movpl	r0, #2
 8016b5c:	4770      	bx	lr
 8016b5e:	b298      	uxth	r0, r3
 8016b60:	b9b0      	cbnz	r0, 8016b90 <__lo0bits+0x54>
 8016b62:	0c1b      	lsrs	r3, r3, #16
 8016b64:	2010      	movs	r0, #16
 8016b66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016b6a:	bf04      	itt	eq
 8016b6c:	0a1b      	lsreq	r3, r3, #8
 8016b6e:	3008      	addeq	r0, #8
 8016b70:	071a      	lsls	r2, r3, #28
 8016b72:	bf04      	itt	eq
 8016b74:	091b      	lsreq	r3, r3, #4
 8016b76:	3004      	addeq	r0, #4
 8016b78:	079a      	lsls	r2, r3, #30
 8016b7a:	bf04      	itt	eq
 8016b7c:	089b      	lsreq	r3, r3, #2
 8016b7e:	3002      	addeq	r0, #2
 8016b80:	07da      	lsls	r2, r3, #31
 8016b82:	d403      	bmi.n	8016b8c <__lo0bits+0x50>
 8016b84:	085b      	lsrs	r3, r3, #1
 8016b86:	f100 0001 	add.w	r0, r0, #1
 8016b8a:	d005      	beq.n	8016b98 <__lo0bits+0x5c>
 8016b8c:	600b      	str	r3, [r1, #0]
 8016b8e:	4770      	bx	lr
 8016b90:	4610      	mov	r0, r2
 8016b92:	e7e8      	b.n	8016b66 <__lo0bits+0x2a>
 8016b94:	2000      	movs	r0, #0
 8016b96:	4770      	bx	lr
 8016b98:	2020      	movs	r0, #32
 8016b9a:	4770      	bx	lr

08016b9c <__i2b>:
 8016b9c:	b510      	push	{r4, lr}
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	2101      	movs	r1, #1
 8016ba2:	f7ff feb5 	bl	8016910 <_Balloc>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	b928      	cbnz	r0, 8016bb6 <__i2b+0x1a>
 8016baa:	4b05      	ldr	r3, [pc, #20]	; (8016bc0 <__i2b+0x24>)
 8016bac:	4805      	ldr	r0, [pc, #20]	; (8016bc4 <__i2b+0x28>)
 8016bae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016bb2:	f000 fea9 	bl	8017908 <__assert_func>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	6144      	str	r4, [r0, #20]
 8016bba:	6103      	str	r3, [r0, #16]
 8016bbc:	bd10      	pop	{r4, pc}
 8016bbe:	bf00      	nop
 8016bc0:	0801c664 	.word	0x0801c664
 8016bc4:	0801c758 	.word	0x0801c758

08016bc8 <__multiply>:
 8016bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bcc:	4614      	mov	r4, r2
 8016bce:	690a      	ldr	r2, [r1, #16]
 8016bd0:	6923      	ldr	r3, [r4, #16]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	bfb8      	it	lt
 8016bd6:	460b      	movlt	r3, r1
 8016bd8:	460d      	mov	r5, r1
 8016bda:	bfbc      	itt	lt
 8016bdc:	4625      	movlt	r5, r4
 8016bde:	461c      	movlt	r4, r3
 8016be0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016be4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016be8:	68ab      	ldr	r3, [r5, #8]
 8016bea:	6869      	ldr	r1, [r5, #4]
 8016bec:	eb0a 0709 	add.w	r7, sl, r9
 8016bf0:	42bb      	cmp	r3, r7
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	bfb8      	it	lt
 8016bf6:	3101      	addlt	r1, #1
 8016bf8:	f7ff fe8a 	bl	8016910 <_Balloc>
 8016bfc:	b930      	cbnz	r0, 8016c0c <__multiply+0x44>
 8016bfe:	4602      	mov	r2, r0
 8016c00:	4b42      	ldr	r3, [pc, #264]	; (8016d0c <__multiply+0x144>)
 8016c02:	4843      	ldr	r0, [pc, #268]	; (8016d10 <__multiply+0x148>)
 8016c04:	f240 115d 	movw	r1, #349	; 0x15d
 8016c08:	f000 fe7e 	bl	8017908 <__assert_func>
 8016c0c:	f100 0614 	add.w	r6, r0, #20
 8016c10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016c14:	4633      	mov	r3, r6
 8016c16:	2200      	movs	r2, #0
 8016c18:	4543      	cmp	r3, r8
 8016c1a:	d31e      	bcc.n	8016c5a <__multiply+0x92>
 8016c1c:	f105 0c14 	add.w	ip, r5, #20
 8016c20:	f104 0314 	add.w	r3, r4, #20
 8016c24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016c28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016c2c:	9202      	str	r2, [sp, #8]
 8016c2e:	ebac 0205 	sub.w	r2, ip, r5
 8016c32:	3a15      	subs	r2, #21
 8016c34:	f022 0203 	bic.w	r2, r2, #3
 8016c38:	3204      	adds	r2, #4
 8016c3a:	f105 0115 	add.w	r1, r5, #21
 8016c3e:	458c      	cmp	ip, r1
 8016c40:	bf38      	it	cc
 8016c42:	2204      	movcc	r2, #4
 8016c44:	9201      	str	r2, [sp, #4]
 8016c46:	9a02      	ldr	r2, [sp, #8]
 8016c48:	9303      	str	r3, [sp, #12]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d808      	bhi.n	8016c60 <__multiply+0x98>
 8016c4e:	2f00      	cmp	r7, #0
 8016c50:	dc55      	bgt.n	8016cfe <__multiply+0x136>
 8016c52:	6107      	str	r7, [r0, #16]
 8016c54:	b005      	add	sp, #20
 8016c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5a:	f843 2b04 	str.w	r2, [r3], #4
 8016c5e:	e7db      	b.n	8016c18 <__multiply+0x50>
 8016c60:	f8b3 a000 	ldrh.w	sl, [r3]
 8016c64:	f1ba 0f00 	cmp.w	sl, #0
 8016c68:	d020      	beq.n	8016cac <__multiply+0xe4>
 8016c6a:	f105 0e14 	add.w	lr, r5, #20
 8016c6e:	46b1      	mov	r9, r6
 8016c70:	2200      	movs	r2, #0
 8016c72:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016c76:	f8d9 b000 	ldr.w	fp, [r9]
 8016c7a:	b2a1      	uxth	r1, r4
 8016c7c:	fa1f fb8b 	uxth.w	fp, fp
 8016c80:	fb0a b101 	mla	r1, sl, r1, fp
 8016c84:	4411      	add	r1, r2
 8016c86:	f8d9 2000 	ldr.w	r2, [r9]
 8016c8a:	0c24      	lsrs	r4, r4, #16
 8016c8c:	0c12      	lsrs	r2, r2, #16
 8016c8e:	fb0a 2404 	mla	r4, sl, r4, r2
 8016c92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016c96:	b289      	uxth	r1, r1
 8016c98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016c9c:	45f4      	cmp	ip, lr
 8016c9e:	f849 1b04 	str.w	r1, [r9], #4
 8016ca2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016ca6:	d8e4      	bhi.n	8016c72 <__multiply+0xaa>
 8016ca8:	9901      	ldr	r1, [sp, #4]
 8016caa:	5072      	str	r2, [r6, r1]
 8016cac:	9a03      	ldr	r2, [sp, #12]
 8016cae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016cb2:	3304      	adds	r3, #4
 8016cb4:	f1b9 0f00 	cmp.w	r9, #0
 8016cb8:	d01f      	beq.n	8016cfa <__multiply+0x132>
 8016cba:	6834      	ldr	r4, [r6, #0]
 8016cbc:	f105 0114 	add.w	r1, r5, #20
 8016cc0:	46b6      	mov	lr, r6
 8016cc2:	f04f 0a00 	mov.w	sl, #0
 8016cc6:	880a      	ldrh	r2, [r1, #0]
 8016cc8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016ccc:	fb09 b202 	mla	r2, r9, r2, fp
 8016cd0:	4492      	add	sl, r2
 8016cd2:	b2a4      	uxth	r4, r4
 8016cd4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016cd8:	f84e 4b04 	str.w	r4, [lr], #4
 8016cdc:	f851 4b04 	ldr.w	r4, [r1], #4
 8016ce0:	f8be 2000 	ldrh.w	r2, [lr]
 8016ce4:	0c24      	lsrs	r4, r4, #16
 8016ce6:	fb09 2404 	mla	r4, r9, r4, r2
 8016cea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016cee:	458c      	cmp	ip, r1
 8016cf0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016cf4:	d8e7      	bhi.n	8016cc6 <__multiply+0xfe>
 8016cf6:	9a01      	ldr	r2, [sp, #4]
 8016cf8:	50b4      	str	r4, [r6, r2]
 8016cfa:	3604      	adds	r6, #4
 8016cfc:	e7a3      	b.n	8016c46 <__multiply+0x7e>
 8016cfe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d1a5      	bne.n	8016c52 <__multiply+0x8a>
 8016d06:	3f01      	subs	r7, #1
 8016d08:	e7a1      	b.n	8016c4e <__multiply+0x86>
 8016d0a:	bf00      	nop
 8016d0c:	0801c664 	.word	0x0801c664
 8016d10:	0801c758 	.word	0x0801c758

08016d14 <__pow5mult>:
 8016d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d18:	4615      	mov	r5, r2
 8016d1a:	f012 0203 	ands.w	r2, r2, #3
 8016d1e:	4606      	mov	r6, r0
 8016d20:	460f      	mov	r7, r1
 8016d22:	d007      	beq.n	8016d34 <__pow5mult+0x20>
 8016d24:	4c25      	ldr	r4, [pc, #148]	; (8016dbc <__pow5mult+0xa8>)
 8016d26:	3a01      	subs	r2, #1
 8016d28:	2300      	movs	r3, #0
 8016d2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016d2e:	f7ff fe51 	bl	80169d4 <__multadd>
 8016d32:	4607      	mov	r7, r0
 8016d34:	10ad      	asrs	r5, r5, #2
 8016d36:	d03d      	beq.n	8016db4 <__pow5mult+0xa0>
 8016d38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016d3a:	b97c      	cbnz	r4, 8016d5c <__pow5mult+0x48>
 8016d3c:	2010      	movs	r0, #16
 8016d3e:	f7fc fa4f 	bl	80131e0 <malloc>
 8016d42:	4602      	mov	r2, r0
 8016d44:	6270      	str	r0, [r6, #36]	; 0x24
 8016d46:	b928      	cbnz	r0, 8016d54 <__pow5mult+0x40>
 8016d48:	4b1d      	ldr	r3, [pc, #116]	; (8016dc0 <__pow5mult+0xac>)
 8016d4a:	481e      	ldr	r0, [pc, #120]	; (8016dc4 <__pow5mult+0xb0>)
 8016d4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016d50:	f000 fdda 	bl	8017908 <__assert_func>
 8016d54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d58:	6004      	str	r4, [r0, #0]
 8016d5a:	60c4      	str	r4, [r0, #12]
 8016d5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016d60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016d64:	b94c      	cbnz	r4, 8016d7a <__pow5mult+0x66>
 8016d66:	f240 2171 	movw	r1, #625	; 0x271
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	f7ff ff16 	bl	8016b9c <__i2b>
 8016d70:	2300      	movs	r3, #0
 8016d72:	f8c8 0008 	str.w	r0, [r8, #8]
 8016d76:	4604      	mov	r4, r0
 8016d78:	6003      	str	r3, [r0, #0]
 8016d7a:	f04f 0900 	mov.w	r9, #0
 8016d7e:	07eb      	lsls	r3, r5, #31
 8016d80:	d50a      	bpl.n	8016d98 <__pow5mult+0x84>
 8016d82:	4639      	mov	r1, r7
 8016d84:	4622      	mov	r2, r4
 8016d86:	4630      	mov	r0, r6
 8016d88:	f7ff ff1e 	bl	8016bc8 <__multiply>
 8016d8c:	4639      	mov	r1, r7
 8016d8e:	4680      	mov	r8, r0
 8016d90:	4630      	mov	r0, r6
 8016d92:	f7ff fdfd 	bl	8016990 <_Bfree>
 8016d96:	4647      	mov	r7, r8
 8016d98:	106d      	asrs	r5, r5, #1
 8016d9a:	d00b      	beq.n	8016db4 <__pow5mult+0xa0>
 8016d9c:	6820      	ldr	r0, [r4, #0]
 8016d9e:	b938      	cbnz	r0, 8016db0 <__pow5mult+0x9c>
 8016da0:	4622      	mov	r2, r4
 8016da2:	4621      	mov	r1, r4
 8016da4:	4630      	mov	r0, r6
 8016da6:	f7ff ff0f 	bl	8016bc8 <__multiply>
 8016daa:	6020      	str	r0, [r4, #0]
 8016dac:	f8c0 9000 	str.w	r9, [r0]
 8016db0:	4604      	mov	r4, r0
 8016db2:	e7e4      	b.n	8016d7e <__pow5mult+0x6a>
 8016db4:	4638      	mov	r0, r7
 8016db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dba:	bf00      	nop
 8016dbc:	0801c8a8 	.word	0x0801c8a8
 8016dc0:	0801c5ee 	.word	0x0801c5ee
 8016dc4:	0801c758 	.word	0x0801c758

08016dc8 <__lshift>:
 8016dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dcc:	460c      	mov	r4, r1
 8016dce:	6849      	ldr	r1, [r1, #4]
 8016dd0:	6923      	ldr	r3, [r4, #16]
 8016dd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016dd6:	68a3      	ldr	r3, [r4, #8]
 8016dd8:	4607      	mov	r7, r0
 8016dda:	4691      	mov	r9, r2
 8016ddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016de0:	f108 0601 	add.w	r6, r8, #1
 8016de4:	42b3      	cmp	r3, r6
 8016de6:	db0b      	blt.n	8016e00 <__lshift+0x38>
 8016de8:	4638      	mov	r0, r7
 8016dea:	f7ff fd91 	bl	8016910 <_Balloc>
 8016dee:	4605      	mov	r5, r0
 8016df0:	b948      	cbnz	r0, 8016e06 <__lshift+0x3e>
 8016df2:	4602      	mov	r2, r0
 8016df4:	4b28      	ldr	r3, [pc, #160]	; (8016e98 <__lshift+0xd0>)
 8016df6:	4829      	ldr	r0, [pc, #164]	; (8016e9c <__lshift+0xd4>)
 8016df8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016dfc:	f000 fd84 	bl	8017908 <__assert_func>
 8016e00:	3101      	adds	r1, #1
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	e7ee      	b.n	8016de4 <__lshift+0x1c>
 8016e06:	2300      	movs	r3, #0
 8016e08:	f100 0114 	add.w	r1, r0, #20
 8016e0c:	f100 0210 	add.w	r2, r0, #16
 8016e10:	4618      	mov	r0, r3
 8016e12:	4553      	cmp	r3, sl
 8016e14:	db33      	blt.n	8016e7e <__lshift+0xb6>
 8016e16:	6920      	ldr	r0, [r4, #16]
 8016e18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016e1c:	f104 0314 	add.w	r3, r4, #20
 8016e20:	f019 091f 	ands.w	r9, r9, #31
 8016e24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016e28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016e2c:	d02b      	beq.n	8016e86 <__lshift+0xbe>
 8016e2e:	f1c9 0e20 	rsb	lr, r9, #32
 8016e32:	468a      	mov	sl, r1
 8016e34:	2200      	movs	r2, #0
 8016e36:	6818      	ldr	r0, [r3, #0]
 8016e38:	fa00 f009 	lsl.w	r0, r0, r9
 8016e3c:	4302      	orrs	r2, r0
 8016e3e:	f84a 2b04 	str.w	r2, [sl], #4
 8016e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e46:	459c      	cmp	ip, r3
 8016e48:	fa22 f20e 	lsr.w	r2, r2, lr
 8016e4c:	d8f3      	bhi.n	8016e36 <__lshift+0x6e>
 8016e4e:	ebac 0304 	sub.w	r3, ip, r4
 8016e52:	3b15      	subs	r3, #21
 8016e54:	f023 0303 	bic.w	r3, r3, #3
 8016e58:	3304      	adds	r3, #4
 8016e5a:	f104 0015 	add.w	r0, r4, #21
 8016e5e:	4584      	cmp	ip, r0
 8016e60:	bf38      	it	cc
 8016e62:	2304      	movcc	r3, #4
 8016e64:	50ca      	str	r2, [r1, r3]
 8016e66:	b10a      	cbz	r2, 8016e6c <__lshift+0xa4>
 8016e68:	f108 0602 	add.w	r6, r8, #2
 8016e6c:	3e01      	subs	r6, #1
 8016e6e:	4638      	mov	r0, r7
 8016e70:	612e      	str	r6, [r5, #16]
 8016e72:	4621      	mov	r1, r4
 8016e74:	f7ff fd8c 	bl	8016990 <_Bfree>
 8016e78:	4628      	mov	r0, r5
 8016e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016e82:	3301      	adds	r3, #1
 8016e84:	e7c5      	b.n	8016e12 <__lshift+0x4a>
 8016e86:	3904      	subs	r1, #4
 8016e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016e90:	459c      	cmp	ip, r3
 8016e92:	d8f9      	bhi.n	8016e88 <__lshift+0xc0>
 8016e94:	e7ea      	b.n	8016e6c <__lshift+0xa4>
 8016e96:	bf00      	nop
 8016e98:	0801c664 	.word	0x0801c664
 8016e9c:	0801c758 	.word	0x0801c758

08016ea0 <__mcmp>:
 8016ea0:	b530      	push	{r4, r5, lr}
 8016ea2:	6902      	ldr	r2, [r0, #16]
 8016ea4:	690c      	ldr	r4, [r1, #16]
 8016ea6:	1b12      	subs	r2, r2, r4
 8016ea8:	d10e      	bne.n	8016ec8 <__mcmp+0x28>
 8016eaa:	f100 0314 	add.w	r3, r0, #20
 8016eae:	3114      	adds	r1, #20
 8016eb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016eb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016eb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016ebc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016ec0:	42a5      	cmp	r5, r4
 8016ec2:	d003      	beq.n	8016ecc <__mcmp+0x2c>
 8016ec4:	d305      	bcc.n	8016ed2 <__mcmp+0x32>
 8016ec6:	2201      	movs	r2, #1
 8016ec8:	4610      	mov	r0, r2
 8016eca:	bd30      	pop	{r4, r5, pc}
 8016ecc:	4283      	cmp	r3, r0
 8016ece:	d3f3      	bcc.n	8016eb8 <__mcmp+0x18>
 8016ed0:	e7fa      	b.n	8016ec8 <__mcmp+0x28>
 8016ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ed6:	e7f7      	b.n	8016ec8 <__mcmp+0x28>

08016ed8 <__mdiff>:
 8016ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016edc:	460c      	mov	r4, r1
 8016ede:	4606      	mov	r6, r0
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	4617      	mov	r7, r2
 8016ee6:	f7ff ffdb 	bl	8016ea0 <__mcmp>
 8016eea:	1e05      	subs	r5, r0, #0
 8016eec:	d110      	bne.n	8016f10 <__mdiff+0x38>
 8016eee:	4629      	mov	r1, r5
 8016ef0:	4630      	mov	r0, r6
 8016ef2:	f7ff fd0d 	bl	8016910 <_Balloc>
 8016ef6:	b930      	cbnz	r0, 8016f06 <__mdiff+0x2e>
 8016ef8:	4b39      	ldr	r3, [pc, #228]	; (8016fe0 <__mdiff+0x108>)
 8016efa:	4602      	mov	r2, r0
 8016efc:	f240 2132 	movw	r1, #562	; 0x232
 8016f00:	4838      	ldr	r0, [pc, #224]	; (8016fe4 <__mdiff+0x10c>)
 8016f02:	f000 fd01 	bl	8017908 <__assert_func>
 8016f06:	2301      	movs	r3, #1
 8016f08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f10:	bfa4      	itt	ge
 8016f12:	463b      	movge	r3, r7
 8016f14:	4627      	movge	r7, r4
 8016f16:	4630      	mov	r0, r6
 8016f18:	6879      	ldr	r1, [r7, #4]
 8016f1a:	bfa6      	itte	ge
 8016f1c:	461c      	movge	r4, r3
 8016f1e:	2500      	movge	r5, #0
 8016f20:	2501      	movlt	r5, #1
 8016f22:	f7ff fcf5 	bl	8016910 <_Balloc>
 8016f26:	b920      	cbnz	r0, 8016f32 <__mdiff+0x5a>
 8016f28:	4b2d      	ldr	r3, [pc, #180]	; (8016fe0 <__mdiff+0x108>)
 8016f2a:	4602      	mov	r2, r0
 8016f2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016f30:	e7e6      	b.n	8016f00 <__mdiff+0x28>
 8016f32:	693e      	ldr	r6, [r7, #16]
 8016f34:	60c5      	str	r5, [r0, #12]
 8016f36:	6925      	ldr	r5, [r4, #16]
 8016f38:	f107 0114 	add.w	r1, r7, #20
 8016f3c:	f104 0914 	add.w	r9, r4, #20
 8016f40:	f100 0e14 	add.w	lr, r0, #20
 8016f44:	f107 0210 	add.w	r2, r7, #16
 8016f48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016f4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016f50:	46f2      	mov	sl, lr
 8016f52:	2700      	movs	r7, #0
 8016f54:	f859 3b04 	ldr.w	r3, [r9], #4
 8016f58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016f5c:	fa1f f883 	uxth.w	r8, r3
 8016f60:	fa17 f78b 	uxtah	r7, r7, fp
 8016f64:	0c1b      	lsrs	r3, r3, #16
 8016f66:	eba7 0808 	sub.w	r8, r7, r8
 8016f6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016f6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016f72:	fa1f f888 	uxth.w	r8, r8
 8016f76:	141f      	asrs	r7, r3, #16
 8016f78:	454d      	cmp	r5, r9
 8016f7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016f7e:	f84a 3b04 	str.w	r3, [sl], #4
 8016f82:	d8e7      	bhi.n	8016f54 <__mdiff+0x7c>
 8016f84:	1b2b      	subs	r3, r5, r4
 8016f86:	3b15      	subs	r3, #21
 8016f88:	f023 0303 	bic.w	r3, r3, #3
 8016f8c:	3304      	adds	r3, #4
 8016f8e:	3415      	adds	r4, #21
 8016f90:	42a5      	cmp	r5, r4
 8016f92:	bf38      	it	cc
 8016f94:	2304      	movcc	r3, #4
 8016f96:	4419      	add	r1, r3
 8016f98:	4473      	add	r3, lr
 8016f9a:	469e      	mov	lr, r3
 8016f9c:	460d      	mov	r5, r1
 8016f9e:	4565      	cmp	r5, ip
 8016fa0:	d30e      	bcc.n	8016fc0 <__mdiff+0xe8>
 8016fa2:	f10c 0203 	add.w	r2, ip, #3
 8016fa6:	1a52      	subs	r2, r2, r1
 8016fa8:	f022 0203 	bic.w	r2, r2, #3
 8016fac:	3903      	subs	r1, #3
 8016fae:	458c      	cmp	ip, r1
 8016fb0:	bf38      	it	cc
 8016fb2:	2200      	movcc	r2, #0
 8016fb4:	441a      	add	r2, r3
 8016fb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016fba:	b17b      	cbz	r3, 8016fdc <__mdiff+0x104>
 8016fbc:	6106      	str	r6, [r0, #16]
 8016fbe:	e7a5      	b.n	8016f0c <__mdiff+0x34>
 8016fc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8016fc4:	fa17 f488 	uxtah	r4, r7, r8
 8016fc8:	1422      	asrs	r2, r4, #16
 8016fca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016fce:	b2a4      	uxth	r4, r4
 8016fd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016fd4:	f84e 4b04 	str.w	r4, [lr], #4
 8016fd8:	1417      	asrs	r7, r2, #16
 8016fda:	e7e0      	b.n	8016f9e <__mdiff+0xc6>
 8016fdc:	3e01      	subs	r6, #1
 8016fde:	e7ea      	b.n	8016fb6 <__mdiff+0xde>
 8016fe0:	0801c664 	.word	0x0801c664
 8016fe4:	0801c758 	.word	0x0801c758

08016fe8 <__ulp>:
 8016fe8:	b082      	sub	sp, #8
 8016fea:	ed8d 0b00 	vstr	d0, [sp]
 8016fee:	9b01      	ldr	r3, [sp, #4]
 8016ff0:	4912      	ldr	r1, [pc, #72]	; (801703c <__ulp+0x54>)
 8016ff2:	4019      	ands	r1, r3
 8016ff4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016ff8:	2900      	cmp	r1, #0
 8016ffa:	dd05      	ble.n	8017008 <__ulp+0x20>
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	460b      	mov	r3, r1
 8017000:	ec43 2b10 	vmov	d0, r2, r3
 8017004:	b002      	add	sp, #8
 8017006:	4770      	bx	lr
 8017008:	4249      	negs	r1, r1
 801700a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801700e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017012:	f04f 0200 	mov.w	r2, #0
 8017016:	f04f 0300 	mov.w	r3, #0
 801701a:	da04      	bge.n	8017026 <__ulp+0x3e>
 801701c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017020:	fa41 f300 	asr.w	r3, r1, r0
 8017024:	e7ec      	b.n	8017000 <__ulp+0x18>
 8017026:	f1a0 0114 	sub.w	r1, r0, #20
 801702a:	291e      	cmp	r1, #30
 801702c:	bfda      	itte	le
 801702e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017032:	fa20 f101 	lsrle.w	r1, r0, r1
 8017036:	2101      	movgt	r1, #1
 8017038:	460a      	mov	r2, r1
 801703a:	e7e1      	b.n	8017000 <__ulp+0x18>
 801703c:	7ff00000 	.word	0x7ff00000

08017040 <__b2d>:
 8017040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017042:	6905      	ldr	r5, [r0, #16]
 8017044:	f100 0714 	add.w	r7, r0, #20
 8017048:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801704c:	1f2e      	subs	r6, r5, #4
 801704e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017052:	4620      	mov	r0, r4
 8017054:	f7ff fd52 	bl	8016afc <__hi0bits>
 8017058:	f1c0 0320 	rsb	r3, r0, #32
 801705c:	280a      	cmp	r0, #10
 801705e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80170dc <__b2d+0x9c>
 8017062:	600b      	str	r3, [r1, #0]
 8017064:	dc14      	bgt.n	8017090 <__b2d+0x50>
 8017066:	f1c0 0e0b 	rsb	lr, r0, #11
 801706a:	fa24 f10e 	lsr.w	r1, r4, lr
 801706e:	42b7      	cmp	r7, r6
 8017070:	ea41 030c 	orr.w	r3, r1, ip
 8017074:	bf34      	ite	cc
 8017076:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801707a:	2100      	movcs	r1, #0
 801707c:	3015      	adds	r0, #21
 801707e:	fa04 f000 	lsl.w	r0, r4, r0
 8017082:	fa21 f10e 	lsr.w	r1, r1, lr
 8017086:	ea40 0201 	orr.w	r2, r0, r1
 801708a:	ec43 2b10 	vmov	d0, r2, r3
 801708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017090:	42b7      	cmp	r7, r6
 8017092:	bf3a      	itte	cc
 8017094:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017098:	f1a5 0608 	subcc.w	r6, r5, #8
 801709c:	2100      	movcs	r1, #0
 801709e:	380b      	subs	r0, #11
 80170a0:	d017      	beq.n	80170d2 <__b2d+0x92>
 80170a2:	f1c0 0c20 	rsb	ip, r0, #32
 80170a6:	fa04 f500 	lsl.w	r5, r4, r0
 80170aa:	42be      	cmp	r6, r7
 80170ac:	fa21 f40c 	lsr.w	r4, r1, ip
 80170b0:	ea45 0504 	orr.w	r5, r5, r4
 80170b4:	bf8c      	ite	hi
 80170b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80170ba:	2400      	movls	r4, #0
 80170bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80170c0:	fa01 f000 	lsl.w	r0, r1, r0
 80170c4:	fa24 f40c 	lsr.w	r4, r4, ip
 80170c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80170cc:	ea40 0204 	orr.w	r2, r0, r4
 80170d0:	e7db      	b.n	801708a <__b2d+0x4a>
 80170d2:	ea44 030c 	orr.w	r3, r4, ip
 80170d6:	460a      	mov	r2, r1
 80170d8:	e7d7      	b.n	801708a <__b2d+0x4a>
 80170da:	bf00      	nop
 80170dc:	3ff00000 	.word	0x3ff00000

080170e0 <__d2b>:
 80170e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80170e4:	4689      	mov	r9, r1
 80170e6:	2101      	movs	r1, #1
 80170e8:	ec57 6b10 	vmov	r6, r7, d0
 80170ec:	4690      	mov	r8, r2
 80170ee:	f7ff fc0f 	bl	8016910 <_Balloc>
 80170f2:	4604      	mov	r4, r0
 80170f4:	b930      	cbnz	r0, 8017104 <__d2b+0x24>
 80170f6:	4602      	mov	r2, r0
 80170f8:	4b25      	ldr	r3, [pc, #148]	; (8017190 <__d2b+0xb0>)
 80170fa:	4826      	ldr	r0, [pc, #152]	; (8017194 <__d2b+0xb4>)
 80170fc:	f240 310a 	movw	r1, #778	; 0x30a
 8017100:	f000 fc02 	bl	8017908 <__assert_func>
 8017104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801710c:	bb35      	cbnz	r5, 801715c <__d2b+0x7c>
 801710e:	2e00      	cmp	r6, #0
 8017110:	9301      	str	r3, [sp, #4]
 8017112:	d028      	beq.n	8017166 <__d2b+0x86>
 8017114:	4668      	mov	r0, sp
 8017116:	9600      	str	r6, [sp, #0]
 8017118:	f7ff fd10 	bl	8016b3c <__lo0bits>
 801711c:	9900      	ldr	r1, [sp, #0]
 801711e:	b300      	cbz	r0, 8017162 <__d2b+0x82>
 8017120:	9a01      	ldr	r2, [sp, #4]
 8017122:	f1c0 0320 	rsb	r3, r0, #32
 8017126:	fa02 f303 	lsl.w	r3, r2, r3
 801712a:	430b      	orrs	r3, r1
 801712c:	40c2      	lsrs	r2, r0
 801712e:	6163      	str	r3, [r4, #20]
 8017130:	9201      	str	r2, [sp, #4]
 8017132:	9b01      	ldr	r3, [sp, #4]
 8017134:	61a3      	str	r3, [r4, #24]
 8017136:	2b00      	cmp	r3, #0
 8017138:	bf14      	ite	ne
 801713a:	2202      	movne	r2, #2
 801713c:	2201      	moveq	r2, #1
 801713e:	6122      	str	r2, [r4, #16]
 8017140:	b1d5      	cbz	r5, 8017178 <__d2b+0x98>
 8017142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017146:	4405      	add	r5, r0
 8017148:	f8c9 5000 	str.w	r5, [r9]
 801714c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017150:	f8c8 0000 	str.w	r0, [r8]
 8017154:	4620      	mov	r0, r4
 8017156:	b003      	add	sp, #12
 8017158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801715c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017160:	e7d5      	b.n	801710e <__d2b+0x2e>
 8017162:	6161      	str	r1, [r4, #20]
 8017164:	e7e5      	b.n	8017132 <__d2b+0x52>
 8017166:	a801      	add	r0, sp, #4
 8017168:	f7ff fce8 	bl	8016b3c <__lo0bits>
 801716c:	9b01      	ldr	r3, [sp, #4]
 801716e:	6163      	str	r3, [r4, #20]
 8017170:	2201      	movs	r2, #1
 8017172:	6122      	str	r2, [r4, #16]
 8017174:	3020      	adds	r0, #32
 8017176:	e7e3      	b.n	8017140 <__d2b+0x60>
 8017178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801717c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017180:	f8c9 0000 	str.w	r0, [r9]
 8017184:	6918      	ldr	r0, [r3, #16]
 8017186:	f7ff fcb9 	bl	8016afc <__hi0bits>
 801718a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801718e:	e7df      	b.n	8017150 <__d2b+0x70>
 8017190:	0801c664 	.word	0x0801c664
 8017194:	0801c758 	.word	0x0801c758

08017198 <__ratio>:
 8017198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801719c:	4688      	mov	r8, r1
 801719e:	4669      	mov	r1, sp
 80171a0:	4681      	mov	r9, r0
 80171a2:	f7ff ff4d 	bl	8017040 <__b2d>
 80171a6:	a901      	add	r1, sp, #4
 80171a8:	4640      	mov	r0, r8
 80171aa:	ec55 4b10 	vmov	r4, r5, d0
 80171ae:	f7ff ff47 	bl	8017040 <__b2d>
 80171b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80171b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80171ba:	eba3 0c02 	sub.w	ip, r3, r2
 80171be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80171c2:	1a9b      	subs	r3, r3, r2
 80171c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80171c8:	ec51 0b10 	vmov	r0, r1, d0
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	bfd6      	itet	le
 80171d0:	460a      	movle	r2, r1
 80171d2:	462a      	movgt	r2, r5
 80171d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80171d8:	468b      	mov	fp, r1
 80171da:	462f      	mov	r7, r5
 80171dc:	bfd4      	ite	le
 80171de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80171e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80171e6:	4620      	mov	r0, r4
 80171e8:	ee10 2a10 	vmov	r2, s0
 80171ec:	465b      	mov	r3, fp
 80171ee:	4639      	mov	r1, r7
 80171f0:	f7e9 fb4c 	bl	800088c <__aeabi_ddiv>
 80171f4:	ec41 0b10 	vmov	d0, r0, r1
 80171f8:	b003      	add	sp, #12
 80171fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171fe <__copybits>:
 80171fe:	3901      	subs	r1, #1
 8017200:	b570      	push	{r4, r5, r6, lr}
 8017202:	1149      	asrs	r1, r1, #5
 8017204:	6914      	ldr	r4, [r2, #16]
 8017206:	3101      	adds	r1, #1
 8017208:	f102 0314 	add.w	r3, r2, #20
 801720c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017210:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017214:	1f05      	subs	r5, r0, #4
 8017216:	42a3      	cmp	r3, r4
 8017218:	d30c      	bcc.n	8017234 <__copybits+0x36>
 801721a:	1aa3      	subs	r3, r4, r2
 801721c:	3b11      	subs	r3, #17
 801721e:	f023 0303 	bic.w	r3, r3, #3
 8017222:	3211      	adds	r2, #17
 8017224:	42a2      	cmp	r2, r4
 8017226:	bf88      	it	hi
 8017228:	2300      	movhi	r3, #0
 801722a:	4418      	add	r0, r3
 801722c:	2300      	movs	r3, #0
 801722e:	4288      	cmp	r0, r1
 8017230:	d305      	bcc.n	801723e <__copybits+0x40>
 8017232:	bd70      	pop	{r4, r5, r6, pc}
 8017234:	f853 6b04 	ldr.w	r6, [r3], #4
 8017238:	f845 6f04 	str.w	r6, [r5, #4]!
 801723c:	e7eb      	b.n	8017216 <__copybits+0x18>
 801723e:	f840 3b04 	str.w	r3, [r0], #4
 8017242:	e7f4      	b.n	801722e <__copybits+0x30>

08017244 <__any_on>:
 8017244:	f100 0214 	add.w	r2, r0, #20
 8017248:	6900      	ldr	r0, [r0, #16]
 801724a:	114b      	asrs	r3, r1, #5
 801724c:	4298      	cmp	r0, r3
 801724e:	b510      	push	{r4, lr}
 8017250:	db11      	blt.n	8017276 <__any_on+0x32>
 8017252:	dd0a      	ble.n	801726a <__any_on+0x26>
 8017254:	f011 011f 	ands.w	r1, r1, #31
 8017258:	d007      	beq.n	801726a <__any_on+0x26>
 801725a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801725e:	fa24 f001 	lsr.w	r0, r4, r1
 8017262:	fa00 f101 	lsl.w	r1, r0, r1
 8017266:	428c      	cmp	r4, r1
 8017268:	d10b      	bne.n	8017282 <__any_on+0x3e>
 801726a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801726e:	4293      	cmp	r3, r2
 8017270:	d803      	bhi.n	801727a <__any_on+0x36>
 8017272:	2000      	movs	r0, #0
 8017274:	bd10      	pop	{r4, pc}
 8017276:	4603      	mov	r3, r0
 8017278:	e7f7      	b.n	801726a <__any_on+0x26>
 801727a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801727e:	2900      	cmp	r1, #0
 8017280:	d0f5      	beq.n	801726e <__any_on+0x2a>
 8017282:	2001      	movs	r0, #1
 8017284:	e7f6      	b.n	8017274 <__any_on+0x30>

08017286 <_calloc_r>:
 8017286:	b513      	push	{r0, r1, r4, lr}
 8017288:	434a      	muls	r2, r1
 801728a:	4611      	mov	r1, r2
 801728c:	9201      	str	r2, [sp, #4]
 801728e:	f7fc f815 	bl	80132bc <_malloc_r>
 8017292:	4604      	mov	r4, r0
 8017294:	b118      	cbz	r0, 801729e <_calloc_r+0x18>
 8017296:	9a01      	ldr	r2, [sp, #4]
 8017298:	2100      	movs	r1, #0
 801729a:	f7fb ffb7 	bl	801320c <memset>
 801729e:	4620      	mov	r0, r4
 80172a0:	b002      	add	sp, #8
 80172a2:	bd10      	pop	{r4, pc}

080172a4 <__ssputs_r>:
 80172a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172a8:	688e      	ldr	r6, [r1, #8]
 80172aa:	429e      	cmp	r6, r3
 80172ac:	4682      	mov	sl, r0
 80172ae:	460c      	mov	r4, r1
 80172b0:	4690      	mov	r8, r2
 80172b2:	461f      	mov	r7, r3
 80172b4:	d838      	bhi.n	8017328 <__ssputs_r+0x84>
 80172b6:	898a      	ldrh	r2, [r1, #12]
 80172b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172bc:	d032      	beq.n	8017324 <__ssputs_r+0x80>
 80172be:	6825      	ldr	r5, [r4, #0]
 80172c0:	6909      	ldr	r1, [r1, #16]
 80172c2:	eba5 0901 	sub.w	r9, r5, r1
 80172c6:	6965      	ldr	r5, [r4, #20]
 80172c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172d0:	3301      	adds	r3, #1
 80172d2:	444b      	add	r3, r9
 80172d4:	106d      	asrs	r5, r5, #1
 80172d6:	429d      	cmp	r5, r3
 80172d8:	bf38      	it	cc
 80172da:	461d      	movcc	r5, r3
 80172dc:	0553      	lsls	r3, r2, #21
 80172de:	d531      	bpl.n	8017344 <__ssputs_r+0xa0>
 80172e0:	4629      	mov	r1, r5
 80172e2:	f7fb ffeb 	bl	80132bc <_malloc_r>
 80172e6:	4606      	mov	r6, r0
 80172e8:	b950      	cbnz	r0, 8017300 <__ssputs_r+0x5c>
 80172ea:	230c      	movs	r3, #12
 80172ec:	f8ca 3000 	str.w	r3, [sl]
 80172f0:	89a3      	ldrh	r3, [r4, #12]
 80172f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172f6:	81a3      	strh	r3, [r4, #12]
 80172f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017300:	6921      	ldr	r1, [r4, #16]
 8017302:	464a      	mov	r2, r9
 8017304:	f7fb ff74 	bl	80131f0 <memcpy>
 8017308:	89a3      	ldrh	r3, [r4, #12]
 801730a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017312:	81a3      	strh	r3, [r4, #12]
 8017314:	6126      	str	r6, [r4, #16]
 8017316:	6165      	str	r5, [r4, #20]
 8017318:	444e      	add	r6, r9
 801731a:	eba5 0509 	sub.w	r5, r5, r9
 801731e:	6026      	str	r6, [r4, #0]
 8017320:	60a5      	str	r5, [r4, #8]
 8017322:	463e      	mov	r6, r7
 8017324:	42be      	cmp	r6, r7
 8017326:	d900      	bls.n	801732a <__ssputs_r+0x86>
 8017328:	463e      	mov	r6, r7
 801732a:	4632      	mov	r2, r6
 801732c:	6820      	ldr	r0, [r4, #0]
 801732e:	4641      	mov	r1, r8
 8017330:	f000 fb5e 	bl	80179f0 <memmove>
 8017334:	68a3      	ldr	r3, [r4, #8]
 8017336:	6822      	ldr	r2, [r4, #0]
 8017338:	1b9b      	subs	r3, r3, r6
 801733a:	4432      	add	r2, r6
 801733c:	60a3      	str	r3, [r4, #8]
 801733e:	6022      	str	r2, [r4, #0]
 8017340:	2000      	movs	r0, #0
 8017342:	e7db      	b.n	80172fc <__ssputs_r+0x58>
 8017344:	462a      	mov	r2, r5
 8017346:	f000 fb6d 	bl	8017a24 <_realloc_r>
 801734a:	4606      	mov	r6, r0
 801734c:	2800      	cmp	r0, #0
 801734e:	d1e1      	bne.n	8017314 <__ssputs_r+0x70>
 8017350:	6921      	ldr	r1, [r4, #16]
 8017352:	4650      	mov	r0, sl
 8017354:	f7fb ff62 	bl	801321c <_free_r>
 8017358:	e7c7      	b.n	80172ea <__ssputs_r+0x46>
	...

0801735c <_svfiprintf_r>:
 801735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017360:	4698      	mov	r8, r3
 8017362:	898b      	ldrh	r3, [r1, #12]
 8017364:	061b      	lsls	r3, r3, #24
 8017366:	b09d      	sub	sp, #116	; 0x74
 8017368:	4607      	mov	r7, r0
 801736a:	460d      	mov	r5, r1
 801736c:	4614      	mov	r4, r2
 801736e:	d50e      	bpl.n	801738e <_svfiprintf_r+0x32>
 8017370:	690b      	ldr	r3, [r1, #16]
 8017372:	b963      	cbnz	r3, 801738e <_svfiprintf_r+0x32>
 8017374:	2140      	movs	r1, #64	; 0x40
 8017376:	f7fb ffa1 	bl	80132bc <_malloc_r>
 801737a:	6028      	str	r0, [r5, #0]
 801737c:	6128      	str	r0, [r5, #16]
 801737e:	b920      	cbnz	r0, 801738a <_svfiprintf_r+0x2e>
 8017380:	230c      	movs	r3, #12
 8017382:	603b      	str	r3, [r7, #0]
 8017384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017388:	e0d1      	b.n	801752e <_svfiprintf_r+0x1d2>
 801738a:	2340      	movs	r3, #64	; 0x40
 801738c:	616b      	str	r3, [r5, #20]
 801738e:	2300      	movs	r3, #0
 8017390:	9309      	str	r3, [sp, #36]	; 0x24
 8017392:	2320      	movs	r3, #32
 8017394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017398:	f8cd 800c 	str.w	r8, [sp, #12]
 801739c:	2330      	movs	r3, #48	; 0x30
 801739e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017548 <_svfiprintf_r+0x1ec>
 80173a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173a6:	f04f 0901 	mov.w	r9, #1
 80173aa:	4623      	mov	r3, r4
 80173ac:	469a      	mov	sl, r3
 80173ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173b2:	b10a      	cbz	r2, 80173b8 <_svfiprintf_r+0x5c>
 80173b4:	2a25      	cmp	r2, #37	; 0x25
 80173b6:	d1f9      	bne.n	80173ac <_svfiprintf_r+0x50>
 80173b8:	ebba 0b04 	subs.w	fp, sl, r4
 80173bc:	d00b      	beq.n	80173d6 <_svfiprintf_r+0x7a>
 80173be:	465b      	mov	r3, fp
 80173c0:	4622      	mov	r2, r4
 80173c2:	4629      	mov	r1, r5
 80173c4:	4638      	mov	r0, r7
 80173c6:	f7ff ff6d 	bl	80172a4 <__ssputs_r>
 80173ca:	3001      	adds	r0, #1
 80173cc:	f000 80aa 	beq.w	8017524 <_svfiprintf_r+0x1c8>
 80173d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173d2:	445a      	add	r2, fp
 80173d4:	9209      	str	r2, [sp, #36]	; 0x24
 80173d6:	f89a 3000 	ldrb.w	r3, [sl]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	f000 80a2 	beq.w	8017524 <_svfiprintf_r+0x1c8>
 80173e0:	2300      	movs	r3, #0
 80173e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173ea:	f10a 0a01 	add.w	sl, sl, #1
 80173ee:	9304      	str	r3, [sp, #16]
 80173f0:	9307      	str	r3, [sp, #28]
 80173f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173f6:	931a      	str	r3, [sp, #104]	; 0x68
 80173f8:	4654      	mov	r4, sl
 80173fa:	2205      	movs	r2, #5
 80173fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017400:	4851      	ldr	r0, [pc, #324]	; (8017548 <_svfiprintf_r+0x1ec>)
 8017402:	f7e8 ff0d 	bl	8000220 <memchr>
 8017406:	9a04      	ldr	r2, [sp, #16]
 8017408:	b9d8      	cbnz	r0, 8017442 <_svfiprintf_r+0xe6>
 801740a:	06d0      	lsls	r0, r2, #27
 801740c:	bf44      	itt	mi
 801740e:	2320      	movmi	r3, #32
 8017410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017414:	0711      	lsls	r1, r2, #28
 8017416:	bf44      	itt	mi
 8017418:	232b      	movmi	r3, #43	; 0x2b
 801741a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801741e:	f89a 3000 	ldrb.w	r3, [sl]
 8017422:	2b2a      	cmp	r3, #42	; 0x2a
 8017424:	d015      	beq.n	8017452 <_svfiprintf_r+0xf6>
 8017426:	9a07      	ldr	r2, [sp, #28]
 8017428:	4654      	mov	r4, sl
 801742a:	2000      	movs	r0, #0
 801742c:	f04f 0c0a 	mov.w	ip, #10
 8017430:	4621      	mov	r1, r4
 8017432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017436:	3b30      	subs	r3, #48	; 0x30
 8017438:	2b09      	cmp	r3, #9
 801743a:	d94e      	bls.n	80174da <_svfiprintf_r+0x17e>
 801743c:	b1b0      	cbz	r0, 801746c <_svfiprintf_r+0x110>
 801743e:	9207      	str	r2, [sp, #28]
 8017440:	e014      	b.n	801746c <_svfiprintf_r+0x110>
 8017442:	eba0 0308 	sub.w	r3, r0, r8
 8017446:	fa09 f303 	lsl.w	r3, r9, r3
 801744a:	4313      	orrs	r3, r2
 801744c:	9304      	str	r3, [sp, #16]
 801744e:	46a2      	mov	sl, r4
 8017450:	e7d2      	b.n	80173f8 <_svfiprintf_r+0x9c>
 8017452:	9b03      	ldr	r3, [sp, #12]
 8017454:	1d19      	adds	r1, r3, #4
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	9103      	str	r1, [sp, #12]
 801745a:	2b00      	cmp	r3, #0
 801745c:	bfbb      	ittet	lt
 801745e:	425b      	neglt	r3, r3
 8017460:	f042 0202 	orrlt.w	r2, r2, #2
 8017464:	9307      	strge	r3, [sp, #28]
 8017466:	9307      	strlt	r3, [sp, #28]
 8017468:	bfb8      	it	lt
 801746a:	9204      	strlt	r2, [sp, #16]
 801746c:	7823      	ldrb	r3, [r4, #0]
 801746e:	2b2e      	cmp	r3, #46	; 0x2e
 8017470:	d10c      	bne.n	801748c <_svfiprintf_r+0x130>
 8017472:	7863      	ldrb	r3, [r4, #1]
 8017474:	2b2a      	cmp	r3, #42	; 0x2a
 8017476:	d135      	bne.n	80174e4 <_svfiprintf_r+0x188>
 8017478:	9b03      	ldr	r3, [sp, #12]
 801747a:	1d1a      	adds	r2, r3, #4
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	9203      	str	r2, [sp, #12]
 8017480:	2b00      	cmp	r3, #0
 8017482:	bfb8      	it	lt
 8017484:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017488:	3402      	adds	r4, #2
 801748a:	9305      	str	r3, [sp, #20]
 801748c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017558 <_svfiprintf_r+0x1fc>
 8017490:	7821      	ldrb	r1, [r4, #0]
 8017492:	2203      	movs	r2, #3
 8017494:	4650      	mov	r0, sl
 8017496:	f7e8 fec3 	bl	8000220 <memchr>
 801749a:	b140      	cbz	r0, 80174ae <_svfiprintf_r+0x152>
 801749c:	2340      	movs	r3, #64	; 0x40
 801749e:	eba0 000a 	sub.w	r0, r0, sl
 80174a2:	fa03 f000 	lsl.w	r0, r3, r0
 80174a6:	9b04      	ldr	r3, [sp, #16]
 80174a8:	4303      	orrs	r3, r0
 80174aa:	3401      	adds	r4, #1
 80174ac:	9304      	str	r3, [sp, #16]
 80174ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174b2:	4826      	ldr	r0, [pc, #152]	; (801754c <_svfiprintf_r+0x1f0>)
 80174b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174b8:	2206      	movs	r2, #6
 80174ba:	f7e8 feb1 	bl	8000220 <memchr>
 80174be:	2800      	cmp	r0, #0
 80174c0:	d038      	beq.n	8017534 <_svfiprintf_r+0x1d8>
 80174c2:	4b23      	ldr	r3, [pc, #140]	; (8017550 <_svfiprintf_r+0x1f4>)
 80174c4:	bb1b      	cbnz	r3, 801750e <_svfiprintf_r+0x1b2>
 80174c6:	9b03      	ldr	r3, [sp, #12]
 80174c8:	3307      	adds	r3, #7
 80174ca:	f023 0307 	bic.w	r3, r3, #7
 80174ce:	3308      	adds	r3, #8
 80174d0:	9303      	str	r3, [sp, #12]
 80174d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d4:	4433      	add	r3, r6
 80174d6:	9309      	str	r3, [sp, #36]	; 0x24
 80174d8:	e767      	b.n	80173aa <_svfiprintf_r+0x4e>
 80174da:	fb0c 3202 	mla	r2, ip, r2, r3
 80174de:	460c      	mov	r4, r1
 80174e0:	2001      	movs	r0, #1
 80174e2:	e7a5      	b.n	8017430 <_svfiprintf_r+0xd4>
 80174e4:	2300      	movs	r3, #0
 80174e6:	3401      	adds	r4, #1
 80174e8:	9305      	str	r3, [sp, #20]
 80174ea:	4619      	mov	r1, r3
 80174ec:	f04f 0c0a 	mov.w	ip, #10
 80174f0:	4620      	mov	r0, r4
 80174f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174f6:	3a30      	subs	r2, #48	; 0x30
 80174f8:	2a09      	cmp	r2, #9
 80174fa:	d903      	bls.n	8017504 <_svfiprintf_r+0x1a8>
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d0c5      	beq.n	801748c <_svfiprintf_r+0x130>
 8017500:	9105      	str	r1, [sp, #20]
 8017502:	e7c3      	b.n	801748c <_svfiprintf_r+0x130>
 8017504:	fb0c 2101 	mla	r1, ip, r1, r2
 8017508:	4604      	mov	r4, r0
 801750a:	2301      	movs	r3, #1
 801750c:	e7f0      	b.n	80174f0 <_svfiprintf_r+0x194>
 801750e:	ab03      	add	r3, sp, #12
 8017510:	9300      	str	r3, [sp, #0]
 8017512:	462a      	mov	r2, r5
 8017514:	4b0f      	ldr	r3, [pc, #60]	; (8017554 <_svfiprintf_r+0x1f8>)
 8017516:	a904      	add	r1, sp, #16
 8017518:	4638      	mov	r0, r7
 801751a:	f7fb ffc9 	bl	80134b0 <_printf_float>
 801751e:	1c42      	adds	r2, r0, #1
 8017520:	4606      	mov	r6, r0
 8017522:	d1d6      	bne.n	80174d2 <_svfiprintf_r+0x176>
 8017524:	89ab      	ldrh	r3, [r5, #12]
 8017526:	065b      	lsls	r3, r3, #25
 8017528:	f53f af2c 	bmi.w	8017384 <_svfiprintf_r+0x28>
 801752c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801752e:	b01d      	add	sp, #116	; 0x74
 8017530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017534:	ab03      	add	r3, sp, #12
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	462a      	mov	r2, r5
 801753a:	4b06      	ldr	r3, [pc, #24]	; (8017554 <_svfiprintf_r+0x1f8>)
 801753c:	a904      	add	r1, sp, #16
 801753e:	4638      	mov	r0, r7
 8017540:	f7fc fa5a 	bl	80139f8 <_printf_i>
 8017544:	e7eb      	b.n	801751e <_svfiprintf_r+0x1c2>
 8017546:	bf00      	nop
 8017548:	0801c8b4 	.word	0x0801c8b4
 801754c:	0801c8be 	.word	0x0801c8be
 8017550:	080134b1 	.word	0x080134b1
 8017554:	080172a5 	.word	0x080172a5
 8017558:	0801c8ba 	.word	0x0801c8ba

0801755c <__sfputc_r>:
 801755c:	6893      	ldr	r3, [r2, #8]
 801755e:	3b01      	subs	r3, #1
 8017560:	2b00      	cmp	r3, #0
 8017562:	b410      	push	{r4}
 8017564:	6093      	str	r3, [r2, #8]
 8017566:	da08      	bge.n	801757a <__sfputc_r+0x1e>
 8017568:	6994      	ldr	r4, [r2, #24]
 801756a:	42a3      	cmp	r3, r4
 801756c:	db01      	blt.n	8017572 <__sfputc_r+0x16>
 801756e:	290a      	cmp	r1, #10
 8017570:	d103      	bne.n	801757a <__sfputc_r+0x1e>
 8017572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017576:	f7fd bce3 	b.w	8014f40 <__swbuf_r>
 801757a:	6813      	ldr	r3, [r2, #0]
 801757c:	1c58      	adds	r0, r3, #1
 801757e:	6010      	str	r0, [r2, #0]
 8017580:	7019      	strb	r1, [r3, #0]
 8017582:	4608      	mov	r0, r1
 8017584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017588:	4770      	bx	lr

0801758a <__sfputs_r>:
 801758a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758c:	4606      	mov	r6, r0
 801758e:	460f      	mov	r7, r1
 8017590:	4614      	mov	r4, r2
 8017592:	18d5      	adds	r5, r2, r3
 8017594:	42ac      	cmp	r4, r5
 8017596:	d101      	bne.n	801759c <__sfputs_r+0x12>
 8017598:	2000      	movs	r0, #0
 801759a:	e007      	b.n	80175ac <__sfputs_r+0x22>
 801759c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a0:	463a      	mov	r2, r7
 80175a2:	4630      	mov	r0, r6
 80175a4:	f7ff ffda 	bl	801755c <__sfputc_r>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d1f3      	bne.n	8017594 <__sfputs_r+0xa>
 80175ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175b0 <_vfiprintf_r>:
 80175b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b4:	460d      	mov	r5, r1
 80175b6:	b09d      	sub	sp, #116	; 0x74
 80175b8:	4614      	mov	r4, r2
 80175ba:	4698      	mov	r8, r3
 80175bc:	4606      	mov	r6, r0
 80175be:	b118      	cbz	r0, 80175c8 <_vfiprintf_r+0x18>
 80175c0:	6983      	ldr	r3, [r0, #24]
 80175c2:	b90b      	cbnz	r3, 80175c8 <_vfiprintf_r+0x18>
 80175c4:	f7fe fd0e 	bl	8015fe4 <__sinit>
 80175c8:	4b89      	ldr	r3, [pc, #548]	; (80177f0 <_vfiprintf_r+0x240>)
 80175ca:	429d      	cmp	r5, r3
 80175cc:	d11b      	bne.n	8017606 <_vfiprintf_r+0x56>
 80175ce:	6875      	ldr	r5, [r6, #4]
 80175d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175d2:	07d9      	lsls	r1, r3, #31
 80175d4:	d405      	bmi.n	80175e2 <_vfiprintf_r+0x32>
 80175d6:	89ab      	ldrh	r3, [r5, #12]
 80175d8:	059a      	lsls	r2, r3, #22
 80175da:	d402      	bmi.n	80175e2 <_vfiprintf_r+0x32>
 80175dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175de:	f7ff f912 	bl	8016806 <__retarget_lock_acquire_recursive>
 80175e2:	89ab      	ldrh	r3, [r5, #12]
 80175e4:	071b      	lsls	r3, r3, #28
 80175e6:	d501      	bpl.n	80175ec <_vfiprintf_r+0x3c>
 80175e8:	692b      	ldr	r3, [r5, #16]
 80175ea:	b9eb      	cbnz	r3, 8017628 <_vfiprintf_r+0x78>
 80175ec:	4629      	mov	r1, r5
 80175ee:	4630      	mov	r0, r6
 80175f0:	f7fd fcf8 	bl	8014fe4 <__swsetup_r>
 80175f4:	b1c0      	cbz	r0, 8017628 <_vfiprintf_r+0x78>
 80175f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175f8:	07dc      	lsls	r4, r3, #31
 80175fa:	d50e      	bpl.n	801761a <_vfiprintf_r+0x6a>
 80175fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017600:	b01d      	add	sp, #116	; 0x74
 8017602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017606:	4b7b      	ldr	r3, [pc, #492]	; (80177f4 <_vfiprintf_r+0x244>)
 8017608:	429d      	cmp	r5, r3
 801760a:	d101      	bne.n	8017610 <_vfiprintf_r+0x60>
 801760c:	68b5      	ldr	r5, [r6, #8]
 801760e:	e7df      	b.n	80175d0 <_vfiprintf_r+0x20>
 8017610:	4b79      	ldr	r3, [pc, #484]	; (80177f8 <_vfiprintf_r+0x248>)
 8017612:	429d      	cmp	r5, r3
 8017614:	bf08      	it	eq
 8017616:	68f5      	ldreq	r5, [r6, #12]
 8017618:	e7da      	b.n	80175d0 <_vfiprintf_r+0x20>
 801761a:	89ab      	ldrh	r3, [r5, #12]
 801761c:	0598      	lsls	r0, r3, #22
 801761e:	d4ed      	bmi.n	80175fc <_vfiprintf_r+0x4c>
 8017620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017622:	f7ff f8f1 	bl	8016808 <__retarget_lock_release_recursive>
 8017626:	e7e9      	b.n	80175fc <_vfiprintf_r+0x4c>
 8017628:	2300      	movs	r3, #0
 801762a:	9309      	str	r3, [sp, #36]	; 0x24
 801762c:	2320      	movs	r3, #32
 801762e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017632:	f8cd 800c 	str.w	r8, [sp, #12]
 8017636:	2330      	movs	r3, #48	; 0x30
 8017638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80177fc <_vfiprintf_r+0x24c>
 801763c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017640:	f04f 0901 	mov.w	r9, #1
 8017644:	4623      	mov	r3, r4
 8017646:	469a      	mov	sl, r3
 8017648:	f813 2b01 	ldrb.w	r2, [r3], #1
 801764c:	b10a      	cbz	r2, 8017652 <_vfiprintf_r+0xa2>
 801764e:	2a25      	cmp	r2, #37	; 0x25
 8017650:	d1f9      	bne.n	8017646 <_vfiprintf_r+0x96>
 8017652:	ebba 0b04 	subs.w	fp, sl, r4
 8017656:	d00b      	beq.n	8017670 <_vfiprintf_r+0xc0>
 8017658:	465b      	mov	r3, fp
 801765a:	4622      	mov	r2, r4
 801765c:	4629      	mov	r1, r5
 801765e:	4630      	mov	r0, r6
 8017660:	f7ff ff93 	bl	801758a <__sfputs_r>
 8017664:	3001      	adds	r0, #1
 8017666:	f000 80aa 	beq.w	80177be <_vfiprintf_r+0x20e>
 801766a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801766c:	445a      	add	r2, fp
 801766e:	9209      	str	r2, [sp, #36]	; 0x24
 8017670:	f89a 3000 	ldrb.w	r3, [sl]
 8017674:	2b00      	cmp	r3, #0
 8017676:	f000 80a2 	beq.w	80177be <_vfiprintf_r+0x20e>
 801767a:	2300      	movs	r3, #0
 801767c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017684:	f10a 0a01 	add.w	sl, sl, #1
 8017688:	9304      	str	r3, [sp, #16]
 801768a:	9307      	str	r3, [sp, #28]
 801768c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017690:	931a      	str	r3, [sp, #104]	; 0x68
 8017692:	4654      	mov	r4, sl
 8017694:	2205      	movs	r2, #5
 8017696:	f814 1b01 	ldrb.w	r1, [r4], #1
 801769a:	4858      	ldr	r0, [pc, #352]	; (80177fc <_vfiprintf_r+0x24c>)
 801769c:	f7e8 fdc0 	bl	8000220 <memchr>
 80176a0:	9a04      	ldr	r2, [sp, #16]
 80176a2:	b9d8      	cbnz	r0, 80176dc <_vfiprintf_r+0x12c>
 80176a4:	06d1      	lsls	r1, r2, #27
 80176a6:	bf44      	itt	mi
 80176a8:	2320      	movmi	r3, #32
 80176aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176ae:	0713      	lsls	r3, r2, #28
 80176b0:	bf44      	itt	mi
 80176b2:	232b      	movmi	r3, #43	; 0x2b
 80176b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176b8:	f89a 3000 	ldrb.w	r3, [sl]
 80176bc:	2b2a      	cmp	r3, #42	; 0x2a
 80176be:	d015      	beq.n	80176ec <_vfiprintf_r+0x13c>
 80176c0:	9a07      	ldr	r2, [sp, #28]
 80176c2:	4654      	mov	r4, sl
 80176c4:	2000      	movs	r0, #0
 80176c6:	f04f 0c0a 	mov.w	ip, #10
 80176ca:	4621      	mov	r1, r4
 80176cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176d0:	3b30      	subs	r3, #48	; 0x30
 80176d2:	2b09      	cmp	r3, #9
 80176d4:	d94e      	bls.n	8017774 <_vfiprintf_r+0x1c4>
 80176d6:	b1b0      	cbz	r0, 8017706 <_vfiprintf_r+0x156>
 80176d8:	9207      	str	r2, [sp, #28]
 80176da:	e014      	b.n	8017706 <_vfiprintf_r+0x156>
 80176dc:	eba0 0308 	sub.w	r3, r0, r8
 80176e0:	fa09 f303 	lsl.w	r3, r9, r3
 80176e4:	4313      	orrs	r3, r2
 80176e6:	9304      	str	r3, [sp, #16]
 80176e8:	46a2      	mov	sl, r4
 80176ea:	e7d2      	b.n	8017692 <_vfiprintf_r+0xe2>
 80176ec:	9b03      	ldr	r3, [sp, #12]
 80176ee:	1d19      	adds	r1, r3, #4
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	9103      	str	r1, [sp, #12]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	bfbb      	ittet	lt
 80176f8:	425b      	neglt	r3, r3
 80176fa:	f042 0202 	orrlt.w	r2, r2, #2
 80176fe:	9307      	strge	r3, [sp, #28]
 8017700:	9307      	strlt	r3, [sp, #28]
 8017702:	bfb8      	it	lt
 8017704:	9204      	strlt	r2, [sp, #16]
 8017706:	7823      	ldrb	r3, [r4, #0]
 8017708:	2b2e      	cmp	r3, #46	; 0x2e
 801770a:	d10c      	bne.n	8017726 <_vfiprintf_r+0x176>
 801770c:	7863      	ldrb	r3, [r4, #1]
 801770e:	2b2a      	cmp	r3, #42	; 0x2a
 8017710:	d135      	bne.n	801777e <_vfiprintf_r+0x1ce>
 8017712:	9b03      	ldr	r3, [sp, #12]
 8017714:	1d1a      	adds	r2, r3, #4
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	9203      	str	r2, [sp, #12]
 801771a:	2b00      	cmp	r3, #0
 801771c:	bfb8      	it	lt
 801771e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017722:	3402      	adds	r4, #2
 8017724:	9305      	str	r3, [sp, #20]
 8017726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801780c <_vfiprintf_r+0x25c>
 801772a:	7821      	ldrb	r1, [r4, #0]
 801772c:	2203      	movs	r2, #3
 801772e:	4650      	mov	r0, sl
 8017730:	f7e8 fd76 	bl	8000220 <memchr>
 8017734:	b140      	cbz	r0, 8017748 <_vfiprintf_r+0x198>
 8017736:	2340      	movs	r3, #64	; 0x40
 8017738:	eba0 000a 	sub.w	r0, r0, sl
 801773c:	fa03 f000 	lsl.w	r0, r3, r0
 8017740:	9b04      	ldr	r3, [sp, #16]
 8017742:	4303      	orrs	r3, r0
 8017744:	3401      	adds	r4, #1
 8017746:	9304      	str	r3, [sp, #16]
 8017748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801774c:	482c      	ldr	r0, [pc, #176]	; (8017800 <_vfiprintf_r+0x250>)
 801774e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017752:	2206      	movs	r2, #6
 8017754:	f7e8 fd64 	bl	8000220 <memchr>
 8017758:	2800      	cmp	r0, #0
 801775a:	d03f      	beq.n	80177dc <_vfiprintf_r+0x22c>
 801775c:	4b29      	ldr	r3, [pc, #164]	; (8017804 <_vfiprintf_r+0x254>)
 801775e:	bb1b      	cbnz	r3, 80177a8 <_vfiprintf_r+0x1f8>
 8017760:	9b03      	ldr	r3, [sp, #12]
 8017762:	3307      	adds	r3, #7
 8017764:	f023 0307 	bic.w	r3, r3, #7
 8017768:	3308      	adds	r3, #8
 801776a:	9303      	str	r3, [sp, #12]
 801776c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801776e:	443b      	add	r3, r7
 8017770:	9309      	str	r3, [sp, #36]	; 0x24
 8017772:	e767      	b.n	8017644 <_vfiprintf_r+0x94>
 8017774:	fb0c 3202 	mla	r2, ip, r2, r3
 8017778:	460c      	mov	r4, r1
 801777a:	2001      	movs	r0, #1
 801777c:	e7a5      	b.n	80176ca <_vfiprintf_r+0x11a>
 801777e:	2300      	movs	r3, #0
 8017780:	3401      	adds	r4, #1
 8017782:	9305      	str	r3, [sp, #20]
 8017784:	4619      	mov	r1, r3
 8017786:	f04f 0c0a 	mov.w	ip, #10
 801778a:	4620      	mov	r0, r4
 801778c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017790:	3a30      	subs	r2, #48	; 0x30
 8017792:	2a09      	cmp	r2, #9
 8017794:	d903      	bls.n	801779e <_vfiprintf_r+0x1ee>
 8017796:	2b00      	cmp	r3, #0
 8017798:	d0c5      	beq.n	8017726 <_vfiprintf_r+0x176>
 801779a:	9105      	str	r1, [sp, #20]
 801779c:	e7c3      	b.n	8017726 <_vfiprintf_r+0x176>
 801779e:	fb0c 2101 	mla	r1, ip, r1, r2
 80177a2:	4604      	mov	r4, r0
 80177a4:	2301      	movs	r3, #1
 80177a6:	e7f0      	b.n	801778a <_vfiprintf_r+0x1da>
 80177a8:	ab03      	add	r3, sp, #12
 80177aa:	9300      	str	r3, [sp, #0]
 80177ac:	462a      	mov	r2, r5
 80177ae:	4b16      	ldr	r3, [pc, #88]	; (8017808 <_vfiprintf_r+0x258>)
 80177b0:	a904      	add	r1, sp, #16
 80177b2:	4630      	mov	r0, r6
 80177b4:	f7fb fe7c 	bl	80134b0 <_printf_float>
 80177b8:	4607      	mov	r7, r0
 80177ba:	1c78      	adds	r0, r7, #1
 80177bc:	d1d6      	bne.n	801776c <_vfiprintf_r+0x1bc>
 80177be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80177c0:	07d9      	lsls	r1, r3, #31
 80177c2:	d405      	bmi.n	80177d0 <_vfiprintf_r+0x220>
 80177c4:	89ab      	ldrh	r3, [r5, #12]
 80177c6:	059a      	lsls	r2, r3, #22
 80177c8:	d402      	bmi.n	80177d0 <_vfiprintf_r+0x220>
 80177ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80177cc:	f7ff f81c 	bl	8016808 <__retarget_lock_release_recursive>
 80177d0:	89ab      	ldrh	r3, [r5, #12]
 80177d2:	065b      	lsls	r3, r3, #25
 80177d4:	f53f af12 	bmi.w	80175fc <_vfiprintf_r+0x4c>
 80177d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177da:	e711      	b.n	8017600 <_vfiprintf_r+0x50>
 80177dc:	ab03      	add	r3, sp, #12
 80177de:	9300      	str	r3, [sp, #0]
 80177e0:	462a      	mov	r2, r5
 80177e2:	4b09      	ldr	r3, [pc, #36]	; (8017808 <_vfiprintf_r+0x258>)
 80177e4:	a904      	add	r1, sp, #16
 80177e6:	4630      	mov	r0, r6
 80177e8:	f7fc f906 	bl	80139f8 <_printf_i>
 80177ec:	e7e4      	b.n	80177b8 <_vfiprintf_r+0x208>
 80177ee:	bf00      	nop
 80177f0:	0801c698 	.word	0x0801c698
 80177f4:	0801c6b8 	.word	0x0801c6b8
 80177f8:	0801c678 	.word	0x0801c678
 80177fc:	0801c8b4 	.word	0x0801c8b4
 8017800:	0801c8be 	.word	0x0801c8be
 8017804:	080134b1 	.word	0x080134b1
 8017808:	0801758b 	.word	0x0801758b
 801780c:	0801c8ba 	.word	0x0801c8ba

08017810 <nan>:
 8017810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017818 <nan+0x8>
 8017814:	4770      	bx	lr
 8017816:	bf00      	nop
 8017818:	00000000 	.word	0x00000000
 801781c:	7ff80000 	.word	0x7ff80000

08017820 <__sread>:
 8017820:	b510      	push	{r4, lr}
 8017822:	460c      	mov	r4, r1
 8017824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017828:	f000 f922 	bl	8017a70 <_read_r>
 801782c:	2800      	cmp	r0, #0
 801782e:	bfab      	itete	ge
 8017830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017832:	89a3      	ldrhlt	r3, [r4, #12]
 8017834:	181b      	addge	r3, r3, r0
 8017836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801783a:	bfac      	ite	ge
 801783c:	6563      	strge	r3, [r4, #84]	; 0x54
 801783e:	81a3      	strhlt	r3, [r4, #12]
 8017840:	bd10      	pop	{r4, pc}

08017842 <__swrite>:
 8017842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017846:	461f      	mov	r7, r3
 8017848:	898b      	ldrh	r3, [r1, #12]
 801784a:	05db      	lsls	r3, r3, #23
 801784c:	4605      	mov	r5, r0
 801784e:	460c      	mov	r4, r1
 8017850:	4616      	mov	r6, r2
 8017852:	d505      	bpl.n	8017860 <__swrite+0x1e>
 8017854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017858:	2302      	movs	r3, #2
 801785a:	2200      	movs	r2, #0
 801785c:	f000 f8b6 	bl	80179cc <_lseek_r>
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801786a:	81a3      	strh	r3, [r4, #12]
 801786c:	4632      	mov	r2, r6
 801786e:	463b      	mov	r3, r7
 8017870:	4628      	mov	r0, r5
 8017872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017876:	f000 b835 	b.w	80178e4 <_write_r>

0801787a <__sseek>:
 801787a:	b510      	push	{r4, lr}
 801787c:	460c      	mov	r4, r1
 801787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017882:	f000 f8a3 	bl	80179cc <_lseek_r>
 8017886:	1c43      	adds	r3, r0, #1
 8017888:	89a3      	ldrh	r3, [r4, #12]
 801788a:	bf15      	itete	ne
 801788c:	6560      	strne	r0, [r4, #84]	; 0x54
 801788e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017896:	81a3      	strheq	r3, [r4, #12]
 8017898:	bf18      	it	ne
 801789a:	81a3      	strhne	r3, [r4, #12]
 801789c:	bd10      	pop	{r4, pc}

0801789e <__sclose>:
 801789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178a2:	f000 b84f 	b.w	8017944 <_close_r>

080178a6 <strncmp>:
 80178a6:	b510      	push	{r4, lr}
 80178a8:	b16a      	cbz	r2, 80178c6 <strncmp+0x20>
 80178aa:	3901      	subs	r1, #1
 80178ac:	1884      	adds	r4, r0, r2
 80178ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80178b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80178b6:	4293      	cmp	r3, r2
 80178b8:	d103      	bne.n	80178c2 <strncmp+0x1c>
 80178ba:	42a0      	cmp	r0, r4
 80178bc:	d001      	beq.n	80178c2 <strncmp+0x1c>
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d1f5      	bne.n	80178ae <strncmp+0x8>
 80178c2:	1a98      	subs	r0, r3, r2
 80178c4:	bd10      	pop	{r4, pc}
 80178c6:	4610      	mov	r0, r2
 80178c8:	e7fc      	b.n	80178c4 <strncmp+0x1e>

080178ca <__ascii_wctomb>:
 80178ca:	b149      	cbz	r1, 80178e0 <__ascii_wctomb+0x16>
 80178cc:	2aff      	cmp	r2, #255	; 0xff
 80178ce:	bf85      	ittet	hi
 80178d0:	238a      	movhi	r3, #138	; 0x8a
 80178d2:	6003      	strhi	r3, [r0, #0]
 80178d4:	700a      	strbls	r2, [r1, #0]
 80178d6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80178da:	bf98      	it	ls
 80178dc:	2001      	movls	r0, #1
 80178de:	4770      	bx	lr
 80178e0:	4608      	mov	r0, r1
 80178e2:	4770      	bx	lr

080178e4 <_write_r>:
 80178e4:	b538      	push	{r3, r4, r5, lr}
 80178e6:	4d07      	ldr	r5, [pc, #28]	; (8017904 <_write_r+0x20>)
 80178e8:	4604      	mov	r4, r0
 80178ea:	4608      	mov	r0, r1
 80178ec:	4611      	mov	r1, r2
 80178ee:	2200      	movs	r2, #0
 80178f0:	602a      	str	r2, [r5, #0]
 80178f2:	461a      	mov	r2, r3
 80178f4:	f7fb fb59 	bl	8012faa <_write>
 80178f8:	1c43      	adds	r3, r0, #1
 80178fa:	d102      	bne.n	8017902 <_write_r+0x1e>
 80178fc:	682b      	ldr	r3, [r5, #0]
 80178fe:	b103      	cbz	r3, 8017902 <_write_r+0x1e>
 8017900:	6023      	str	r3, [r4, #0]
 8017902:	bd38      	pop	{r3, r4, r5, pc}
 8017904:	20033970 	.word	0x20033970

08017908 <__assert_func>:
 8017908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801790a:	4614      	mov	r4, r2
 801790c:	461a      	mov	r2, r3
 801790e:	4b09      	ldr	r3, [pc, #36]	; (8017934 <__assert_func+0x2c>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	4605      	mov	r5, r0
 8017914:	68d8      	ldr	r0, [r3, #12]
 8017916:	b14c      	cbz	r4, 801792c <__assert_func+0x24>
 8017918:	4b07      	ldr	r3, [pc, #28]	; (8017938 <__assert_func+0x30>)
 801791a:	9100      	str	r1, [sp, #0]
 801791c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017920:	4906      	ldr	r1, [pc, #24]	; (801793c <__assert_func+0x34>)
 8017922:	462b      	mov	r3, r5
 8017924:	f000 f81e 	bl	8017964 <fiprintf>
 8017928:	f000 f8b4 	bl	8017a94 <abort>
 801792c:	4b04      	ldr	r3, [pc, #16]	; (8017940 <__assert_func+0x38>)
 801792e:	461c      	mov	r4, r3
 8017930:	e7f3      	b.n	801791a <__assert_func+0x12>
 8017932:	bf00      	nop
 8017934:	200003ac 	.word	0x200003ac
 8017938:	0801c8c5 	.word	0x0801c8c5
 801793c:	0801c8d2 	.word	0x0801c8d2
 8017940:	0801c900 	.word	0x0801c900

08017944 <_close_r>:
 8017944:	b538      	push	{r3, r4, r5, lr}
 8017946:	4d06      	ldr	r5, [pc, #24]	; (8017960 <_close_r+0x1c>)
 8017948:	2300      	movs	r3, #0
 801794a:	4604      	mov	r4, r0
 801794c:	4608      	mov	r0, r1
 801794e:	602b      	str	r3, [r5, #0]
 8017950:	f7fb fb47 	bl	8012fe2 <_close>
 8017954:	1c43      	adds	r3, r0, #1
 8017956:	d102      	bne.n	801795e <_close_r+0x1a>
 8017958:	682b      	ldr	r3, [r5, #0]
 801795a:	b103      	cbz	r3, 801795e <_close_r+0x1a>
 801795c:	6023      	str	r3, [r4, #0]
 801795e:	bd38      	pop	{r3, r4, r5, pc}
 8017960:	20033970 	.word	0x20033970

08017964 <fiprintf>:
 8017964:	b40e      	push	{r1, r2, r3}
 8017966:	b503      	push	{r0, r1, lr}
 8017968:	4601      	mov	r1, r0
 801796a:	ab03      	add	r3, sp, #12
 801796c:	4805      	ldr	r0, [pc, #20]	; (8017984 <fiprintf+0x20>)
 801796e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017972:	6800      	ldr	r0, [r0, #0]
 8017974:	9301      	str	r3, [sp, #4]
 8017976:	f7ff fe1b 	bl	80175b0 <_vfiprintf_r>
 801797a:	b002      	add	sp, #8
 801797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017980:	b003      	add	sp, #12
 8017982:	4770      	bx	lr
 8017984:	200003ac 	.word	0x200003ac

08017988 <_fstat_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	4d07      	ldr	r5, [pc, #28]	; (80179a8 <_fstat_r+0x20>)
 801798c:	2300      	movs	r3, #0
 801798e:	4604      	mov	r4, r0
 8017990:	4608      	mov	r0, r1
 8017992:	4611      	mov	r1, r2
 8017994:	602b      	str	r3, [r5, #0]
 8017996:	f7fb fb30 	bl	8012ffa <_fstat>
 801799a:	1c43      	adds	r3, r0, #1
 801799c:	d102      	bne.n	80179a4 <_fstat_r+0x1c>
 801799e:	682b      	ldr	r3, [r5, #0]
 80179a0:	b103      	cbz	r3, 80179a4 <_fstat_r+0x1c>
 80179a2:	6023      	str	r3, [r4, #0]
 80179a4:	bd38      	pop	{r3, r4, r5, pc}
 80179a6:	bf00      	nop
 80179a8:	20033970 	.word	0x20033970

080179ac <_isatty_r>:
 80179ac:	b538      	push	{r3, r4, r5, lr}
 80179ae:	4d06      	ldr	r5, [pc, #24]	; (80179c8 <_isatty_r+0x1c>)
 80179b0:	2300      	movs	r3, #0
 80179b2:	4604      	mov	r4, r0
 80179b4:	4608      	mov	r0, r1
 80179b6:	602b      	str	r3, [r5, #0]
 80179b8:	f7fb fb2f 	bl	801301a <_isatty>
 80179bc:	1c43      	adds	r3, r0, #1
 80179be:	d102      	bne.n	80179c6 <_isatty_r+0x1a>
 80179c0:	682b      	ldr	r3, [r5, #0]
 80179c2:	b103      	cbz	r3, 80179c6 <_isatty_r+0x1a>
 80179c4:	6023      	str	r3, [r4, #0]
 80179c6:	bd38      	pop	{r3, r4, r5, pc}
 80179c8:	20033970 	.word	0x20033970

080179cc <_lseek_r>:
 80179cc:	b538      	push	{r3, r4, r5, lr}
 80179ce:	4d07      	ldr	r5, [pc, #28]	; (80179ec <_lseek_r+0x20>)
 80179d0:	4604      	mov	r4, r0
 80179d2:	4608      	mov	r0, r1
 80179d4:	4611      	mov	r1, r2
 80179d6:	2200      	movs	r2, #0
 80179d8:	602a      	str	r2, [r5, #0]
 80179da:	461a      	mov	r2, r3
 80179dc:	f7fb fb28 	bl	8013030 <_lseek>
 80179e0:	1c43      	adds	r3, r0, #1
 80179e2:	d102      	bne.n	80179ea <_lseek_r+0x1e>
 80179e4:	682b      	ldr	r3, [r5, #0]
 80179e6:	b103      	cbz	r3, 80179ea <_lseek_r+0x1e>
 80179e8:	6023      	str	r3, [r4, #0]
 80179ea:	bd38      	pop	{r3, r4, r5, pc}
 80179ec:	20033970 	.word	0x20033970

080179f0 <memmove>:
 80179f0:	4288      	cmp	r0, r1
 80179f2:	b510      	push	{r4, lr}
 80179f4:	eb01 0402 	add.w	r4, r1, r2
 80179f8:	d902      	bls.n	8017a00 <memmove+0x10>
 80179fa:	4284      	cmp	r4, r0
 80179fc:	4623      	mov	r3, r4
 80179fe:	d807      	bhi.n	8017a10 <memmove+0x20>
 8017a00:	1e43      	subs	r3, r0, #1
 8017a02:	42a1      	cmp	r1, r4
 8017a04:	d008      	beq.n	8017a18 <memmove+0x28>
 8017a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a0e:	e7f8      	b.n	8017a02 <memmove+0x12>
 8017a10:	4402      	add	r2, r0
 8017a12:	4601      	mov	r1, r0
 8017a14:	428a      	cmp	r2, r1
 8017a16:	d100      	bne.n	8017a1a <memmove+0x2a>
 8017a18:	bd10      	pop	{r4, pc}
 8017a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a22:	e7f7      	b.n	8017a14 <memmove+0x24>

08017a24 <_realloc_r>:
 8017a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a26:	4607      	mov	r7, r0
 8017a28:	4614      	mov	r4, r2
 8017a2a:	460e      	mov	r6, r1
 8017a2c:	b921      	cbnz	r1, 8017a38 <_realloc_r+0x14>
 8017a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017a32:	4611      	mov	r1, r2
 8017a34:	f7fb bc42 	b.w	80132bc <_malloc_r>
 8017a38:	b922      	cbnz	r2, 8017a44 <_realloc_r+0x20>
 8017a3a:	f7fb fbef 	bl	801321c <_free_r>
 8017a3e:	4625      	mov	r5, r4
 8017a40:	4628      	mov	r0, r5
 8017a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a44:	f000 f82d 	bl	8017aa2 <_malloc_usable_size_r>
 8017a48:	42a0      	cmp	r0, r4
 8017a4a:	d20f      	bcs.n	8017a6c <_realloc_r+0x48>
 8017a4c:	4621      	mov	r1, r4
 8017a4e:	4638      	mov	r0, r7
 8017a50:	f7fb fc34 	bl	80132bc <_malloc_r>
 8017a54:	4605      	mov	r5, r0
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d0f2      	beq.n	8017a40 <_realloc_r+0x1c>
 8017a5a:	4631      	mov	r1, r6
 8017a5c:	4622      	mov	r2, r4
 8017a5e:	f7fb fbc7 	bl	80131f0 <memcpy>
 8017a62:	4631      	mov	r1, r6
 8017a64:	4638      	mov	r0, r7
 8017a66:	f7fb fbd9 	bl	801321c <_free_r>
 8017a6a:	e7e9      	b.n	8017a40 <_realloc_r+0x1c>
 8017a6c:	4635      	mov	r5, r6
 8017a6e:	e7e7      	b.n	8017a40 <_realloc_r+0x1c>

08017a70 <_read_r>:
 8017a70:	b538      	push	{r3, r4, r5, lr}
 8017a72:	4d07      	ldr	r5, [pc, #28]	; (8017a90 <_read_r+0x20>)
 8017a74:	4604      	mov	r4, r0
 8017a76:	4608      	mov	r0, r1
 8017a78:	4611      	mov	r1, r2
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	602a      	str	r2, [r5, #0]
 8017a7e:	461a      	mov	r2, r3
 8017a80:	f7fb fa76 	bl	8012f70 <_read>
 8017a84:	1c43      	adds	r3, r0, #1
 8017a86:	d102      	bne.n	8017a8e <_read_r+0x1e>
 8017a88:	682b      	ldr	r3, [r5, #0]
 8017a8a:	b103      	cbz	r3, 8017a8e <_read_r+0x1e>
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	bd38      	pop	{r3, r4, r5, pc}
 8017a90:	20033970 	.word	0x20033970

08017a94 <abort>:
 8017a94:	b508      	push	{r3, lr}
 8017a96:	2006      	movs	r0, #6
 8017a98:	f000 f834 	bl	8017b04 <raise>
 8017a9c:	2001      	movs	r0, #1
 8017a9e:	f7fb fa5d 	bl	8012f5c <_exit>

08017aa2 <_malloc_usable_size_r>:
 8017aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017aa6:	1f18      	subs	r0, r3, #4
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	bfbc      	itt	lt
 8017aac:	580b      	ldrlt	r3, [r1, r0]
 8017aae:	18c0      	addlt	r0, r0, r3
 8017ab0:	4770      	bx	lr

08017ab2 <_raise_r>:
 8017ab2:	291f      	cmp	r1, #31
 8017ab4:	b538      	push	{r3, r4, r5, lr}
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	460d      	mov	r5, r1
 8017aba:	d904      	bls.n	8017ac6 <_raise_r+0x14>
 8017abc:	2316      	movs	r3, #22
 8017abe:	6003      	str	r3, [r0, #0]
 8017ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ac4:	bd38      	pop	{r3, r4, r5, pc}
 8017ac6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ac8:	b112      	cbz	r2, 8017ad0 <_raise_r+0x1e>
 8017aca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ace:	b94b      	cbnz	r3, 8017ae4 <_raise_r+0x32>
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f000 f831 	bl	8017b38 <_getpid_r>
 8017ad6:	462a      	mov	r2, r5
 8017ad8:	4601      	mov	r1, r0
 8017ada:	4620      	mov	r0, r4
 8017adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ae0:	f000 b818 	b.w	8017b14 <_kill_r>
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d00a      	beq.n	8017afe <_raise_r+0x4c>
 8017ae8:	1c59      	adds	r1, r3, #1
 8017aea:	d103      	bne.n	8017af4 <_raise_r+0x42>
 8017aec:	2316      	movs	r3, #22
 8017aee:	6003      	str	r3, [r0, #0]
 8017af0:	2001      	movs	r0, #1
 8017af2:	e7e7      	b.n	8017ac4 <_raise_r+0x12>
 8017af4:	2400      	movs	r4, #0
 8017af6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017afa:	4628      	mov	r0, r5
 8017afc:	4798      	blx	r3
 8017afe:	2000      	movs	r0, #0
 8017b00:	e7e0      	b.n	8017ac4 <_raise_r+0x12>
	...

08017b04 <raise>:
 8017b04:	4b02      	ldr	r3, [pc, #8]	; (8017b10 <raise+0xc>)
 8017b06:	4601      	mov	r1, r0
 8017b08:	6818      	ldr	r0, [r3, #0]
 8017b0a:	f7ff bfd2 	b.w	8017ab2 <_raise_r>
 8017b0e:	bf00      	nop
 8017b10:	200003ac 	.word	0x200003ac

08017b14 <_kill_r>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	4d07      	ldr	r5, [pc, #28]	; (8017b34 <_kill_r+0x20>)
 8017b18:	2300      	movs	r3, #0
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	4608      	mov	r0, r1
 8017b1e:	4611      	mov	r1, r2
 8017b20:	602b      	str	r3, [r5, #0]
 8017b22:	f7fb fa0b 	bl	8012f3c <_kill>
 8017b26:	1c43      	adds	r3, r0, #1
 8017b28:	d102      	bne.n	8017b30 <_kill_r+0x1c>
 8017b2a:	682b      	ldr	r3, [r5, #0]
 8017b2c:	b103      	cbz	r3, 8017b30 <_kill_r+0x1c>
 8017b2e:	6023      	str	r3, [r4, #0]
 8017b30:	bd38      	pop	{r3, r4, r5, pc}
 8017b32:	bf00      	nop
 8017b34:	20033970 	.word	0x20033970

08017b38 <_getpid_r>:
 8017b38:	f7fb b9f8 	b.w	8012f2c <_getpid>
 8017b3c:	0000      	movs	r0, r0
	...

08017b40 <cos>:
 8017b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b42:	ec53 2b10 	vmov	r2, r3, d0
 8017b46:	4824      	ldr	r0, [pc, #144]	; (8017bd8 <cos+0x98>)
 8017b48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017b4c:	4281      	cmp	r1, r0
 8017b4e:	dc06      	bgt.n	8017b5e <cos+0x1e>
 8017b50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8017bd0 <cos+0x90>
 8017b54:	f001 fe14 	bl	8019780 <__kernel_cos>
 8017b58:	ec51 0b10 	vmov	r0, r1, d0
 8017b5c:	e007      	b.n	8017b6e <cos+0x2e>
 8017b5e:	481f      	ldr	r0, [pc, #124]	; (8017bdc <cos+0x9c>)
 8017b60:	4281      	cmp	r1, r0
 8017b62:	dd09      	ble.n	8017b78 <cos+0x38>
 8017b64:	ee10 0a10 	vmov	r0, s0
 8017b68:	4619      	mov	r1, r3
 8017b6a:	f7e8 fbad 	bl	80002c8 <__aeabi_dsub>
 8017b6e:	ec41 0b10 	vmov	d0, r0, r1
 8017b72:	b005      	add	sp, #20
 8017b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b78:	4668      	mov	r0, sp
 8017b7a:	f001 fb41 	bl	8019200 <__ieee754_rem_pio2>
 8017b7e:	f000 0003 	and.w	r0, r0, #3
 8017b82:	2801      	cmp	r0, #1
 8017b84:	d007      	beq.n	8017b96 <cos+0x56>
 8017b86:	2802      	cmp	r0, #2
 8017b88:	d012      	beq.n	8017bb0 <cos+0x70>
 8017b8a:	b9c0      	cbnz	r0, 8017bbe <cos+0x7e>
 8017b8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b90:	ed9d 0b00 	vldr	d0, [sp]
 8017b94:	e7de      	b.n	8017b54 <cos+0x14>
 8017b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b9a:	ed9d 0b00 	vldr	d0, [sp]
 8017b9e:	f002 f9f7 	bl	8019f90 <__kernel_sin>
 8017ba2:	ec53 2b10 	vmov	r2, r3, d0
 8017ba6:	ee10 0a10 	vmov	r0, s0
 8017baa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017bae:	e7de      	b.n	8017b6e <cos+0x2e>
 8017bb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017bb4:	ed9d 0b00 	vldr	d0, [sp]
 8017bb8:	f001 fde2 	bl	8019780 <__kernel_cos>
 8017bbc:	e7f1      	b.n	8017ba2 <cos+0x62>
 8017bbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017bc2:	ed9d 0b00 	vldr	d0, [sp]
 8017bc6:	2001      	movs	r0, #1
 8017bc8:	f002 f9e2 	bl	8019f90 <__kernel_sin>
 8017bcc:	e7c4      	b.n	8017b58 <cos+0x18>
 8017bce:	bf00      	nop
	...
 8017bd8:	3fe921fb 	.word	0x3fe921fb
 8017bdc:	7fefffff 	.word	0x7fefffff

08017be0 <sin>:
 8017be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017be2:	ec53 2b10 	vmov	r2, r3, d0
 8017be6:	4826      	ldr	r0, [pc, #152]	; (8017c80 <sin+0xa0>)
 8017be8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017bec:	4281      	cmp	r1, r0
 8017bee:	dc07      	bgt.n	8017c00 <sin+0x20>
 8017bf0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8017c78 <sin+0x98>
 8017bf4:	2000      	movs	r0, #0
 8017bf6:	f002 f9cb 	bl	8019f90 <__kernel_sin>
 8017bfa:	ec51 0b10 	vmov	r0, r1, d0
 8017bfe:	e007      	b.n	8017c10 <sin+0x30>
 8017c00:	4820      	ldr	r0, [pc, #128]	; (8017c84 <sin+0xa4>)
 8017c02:	4281      	cmp	r1, r0
 8017c04:	dd09      	ble.n	8017c1a <sin+0x3a>
 8017c06:	ee10 0a10 	vmov	r0, s0
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	f7e8 fb5c 	bl	80002c8 <__aeabi_dsub>
 8017c10:	ec41 0b10 	vmov	d0, r0, r1
 8017c14:	b005      	add	sp, #20
 8017c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c1a:	4668      	mov	r0, sp
 8017c1c:	f001 faf0 	bl	8019200 <__ieee754_rem_pio2>
 8017c20:	f000 0003 	and.w	r0, r0, #3
 8017c24:	2801      	cmp	r0, #1
 8017c26:	d008      	beq.n	8017c3a <sin+0x5a>
 8017c28:	2802      	cmp	r0, #2
 8017c2a:	d00d      	beq.n	8017c48 <sin+0x68>
 8017c2c:	b9d0      	cbnz	r0, 8017c64 <sin+0x84>
 8017c2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c32:	ed9d 0b00 	vldr	d0, [sp]
 8017c36:	2001      	movs	r0, #1
 8017c38:	e7dd      	b.n	8017bf6 <sin+0x16>
 8017c3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c3e:	ed9d 0b00 	vldr	d0, [sp]
 8017c42:	f001 fd9d 	bl	8019780 <__kernel_cos>
 8017c46:	e7d8      	b.n	8017bfa <sin+0x1a>
 8017c48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c4c:	ed9d 0b00 	vldr	d0, [sp]
 8017c50:	2001      	movs	r0, #1
 8017c52:	f002 f99d 	bl	8019f90 <__kernel_sin>
 8017c56:	ec53 2b10 	vmov	r2, r3, d0
 8017c5a:	ee10 0a10 	vmov	r0, s0
 8017c5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017c62:	e7d5      	b.n	8017c10 <sin+0x30>
 8017c64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017c68:	ed9d 0b00 	vldr	d0, [sp]
 8017c6c:	f001 fd88 	bl	8019780 <__kernel_cos>
 8017c70:	e7f1      	b.n	8017c56 <sin+0x76>
 8017c72:	bf00      	nop
 8017c74:	f3af 8000 	nop.w
	...
 8017c80:	3fe921fb 	.word	0x3fe921fb
 8017c84:	7fefffff 	.word	0x7fefffff

08017c88 <acos>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	ed2d 8b02 	vpush	{d8}
 8017c8e:	ec55 4b10 	vmov	r4, r5, d0
 8017c92:	f000 f955 	bl	8017f40 <__ieee754_acos>
 8017c96:	4b16      	ldr	r3, [pc, #88]	; (8017cf0 <acos+0x68>)
 8017c98:	eeb0 8a40 	vmov.f32	s16, s0
 8017c9c:	eef0 8a60 	vmov.f32	s17, s1
 8017ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	d01c      	beq.n	8017ce2 <acos+0x5a>
 8017ca8:	4622      	mov	r2, r4
 8017caa:	462b      	mov	r3, r5
 8017cac:	4620      	mov	r0, r4
 8017cae:	4629      	mov	r1, r5
 8017cb0:	f7e8 ff5c 	bl	8000b6c <__aeabi_dcmpun>
 8017cb4:	b9a8      	cbnz	r0, 8017ce2 <acos+0x5a>
 8017cb6:	ec45 4b10 	vmov	d0, r4, r5
 8017cba:	f002 fbc9 	bl	801a450 <fabs>
 8017cbe:	4b0d      	ldr	r3, [pc, #52]	; (8017cf4 <acos+0x6c>)
 8017cc0:	ec51 0b10 	vmov	r0, r1, d0
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	f7e8 ff47 	bl	8000b58 <__aeabi_dcmpgt>
 8017cca:	b150      	cbz	r0, 8017ce2 <acos+0x5a>
 8017ccc:	f7fb fa5e 	bl	801318c <__errno>
 8017cd0:	ecbd 8b02 	vpop	{d8}
 8017cd4:	2321      	movs	r3, #33	; 0x21
 8017cd6:	6003      	str	r3, [r0, #0]
 8017cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cdc:	4806      	ldr	r0, [pc, #24]	; (8017cf8 <acos+0x70>)
 8017cde:	f7ff bd97 	b.w	8017810 <nan>
 8017ce2:	eeb0 0a48 	vmov.f32	s0, s16
 8017ce6:	eef0 0a68 	vmov.f32	s1, s17
 8017cea:	ecbd 8b02 	vpop	{d8}
 8017cee:	bd38      	pop	{r3, r4, r5, pc}
 8017cf0:	20000580 	.word	0x20000580
 8017cf4:	3ff00000 	.word	0x3ff00000
 8017cf8:	0801c900 	.word	0x0801c900

08017cfc <atan2>:
 8017cfc:	f000 bb80 	b.w	8018400 <__ieee754_atan2>

08017d00 <fmod>:
 8017d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d02:	ed2d 8b02 	vpush	{d8}
 8017d06:	ec57 6b10 	vmov	r6, r7, d0
 8017d0a:	ec55 4b11 	vmov	r4, r5, d1
 8017d0e:	f000 fc41 	bl	8018594 <__ieee754_fmod>
 8017d12:	4b18      	ldr	r3, [pc, #96]	; (8017d74 <fmod+0x74>)
 8017d14:	eeb0 8a40 	vmov.f32	s16, s0
 8017d18:	eef0 8a60 	vmov.f32	s17, s1
 8017d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8017d20:	3301      	adds	r3, #1
 8017d22:	d020      	beq.n	8017d66 <fmod+0x66>
 8017d24:	4622      	mov	r2, r4
 8017d26:	462b      	mov	r3, r5
 8017d28:	4620      	mov	r0, r4
 8017d2a:	4629      	mov	r1, r5
 8017d2c:	f7e8 ff1e 	bl	8000b6c <__aeabi_dcmpun>
 8017d30:	b9c8      	cbnz	r0, 8017d66 <fmod+0x66>
 8017d32:	4632      	mov	r2, r6
 8017d34:	463b      	mov	r3, r7
 8017d36:	4630      	mov	r0, r6
 8017d38:	4639      	mov	r1, r7
 8017d3a:	f7e8 ff17 	bl	8000b6c <__aeabi_dcmpun>
 8017d3e:	b990      	cbnz	r0, 8017d66 <fmod+0x66>
 8017d40:	2200      	movs	r2, #0
 8017d42:	2300      	movs	r3, #0
 8017d44:	4620      	mov	r0, r4
 8017d46:	4629      	mov	r1, r5
 8017d48:	f7e8 fede 	bl	8000b08 <__aeabi_dcmpeq>
 8017d4c:	b158      	cbz	r0, 8017d66 <fmod+0x66>
 8017d4e:	f7fb fa1d 	bl	801318c <__errno>
 8017d52:	2321      	movs	r3, #33	; 0x21
 8017d54:	6003      	str	r3, [r0, #0]
 8017d56:	2200      	movs	r2, #0
 8017d58:	2300      	movs	r3, #0
 8017d5a:	4610      	mov	r0, r2
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	f7e8 fd95 	bl	800088c <__aeabi_ddiv>
 8017d62:	ec41 0b18 	vmov	d8, r0, r1
 8017d66:	eeb0 0a48 	vmov.f32	s0, s16
 8017d6a:	eef0 0a68 	vmov.f32	s1, s17
 8017d6e:	ecbd 8b02 	vpop	{d8}
 8017d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d74:	20000580 	.word	0x20000580

08017d78 <pow>:
 8017d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d7c:	ec59 8b10 	vmov	r8, r9, d0
 8017d80:	ec57 6b11 	vmov	r6, r7, d1
 8017d84:	f000 fd18 	bl	80187b8 <__ieee754_pow>
 8017d88:	4b4e      	ldr	r3, [pc, #312]	; (8017ec4 <pow+0x14c>)
 8017d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8017d8e:	3301      	adds	r3, #1
 8017d90:	ec55 4b10 	vmov	r4, r5, d0
 8017d94:	d015      	beq.n	8017dc2 <pow+0x4a>
 8017d96:	4632      	mov	r2, r6
 8017d98:	463b      	mov	r3, r7
 8017d9a:	4630      	mov	r0, r6
 8017d9c:	4639      	mov	r1, r7
 8017d9e:	f7e8 fee5 	bl	8000b6c <__aeabi_dcmpun>
 8017da2:	b970      	cbnz	r0, 8017dc2 <pow+0x4a>
 8017da4:	4642      	mov	r2, r8
 8017da6:	464b      	mov	r3, r9
 8017da8:	4640      	mov	r0, r8
 8017daa:	4649      	mov	r1, r9
 8017dac:	f7e8 fede 	bl	8000b6c <__aeabi_dcmpun>
 8017db0:	2200      	movs	r2, #0
 8017db2:	2300      	movs	r3, #0
 8017db4:	b148      	cbz	r0, 8017dca <pow+0x52>
 8017db6:	4630      	mov	r0, r6
 8017db8:	4639      	mov	r1, r7
 8017dba:	f7e8 fea5 	bl	8000b08 <__aeabi_dcmpeq>
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d17d      	bne.n	8017ebe <pow+0x146>
 8017dc2:	ec45 4b10 	vmov	d0, r4, r5
 8017dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dca:	4640      	mov	r0, r8
 8017dcc:	4649      	mov	r1, r9
 8017dce:	f7e8 fe9b 	bl	8000b08 <__aeabi_dcmpeq>
 8017dd2:	b1e0      	cbz	r0, 8017e0e <pow+0x96>
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	4630      	mov	r0, r6
 8017dda:	4639      	mov	r1, r7
 8017ddc:	f7e8 fe94 	bl	8000b08 <__aeabi_dcmpeq>
 8017de0:	2800      	cmp	r0, #0
 8017de2:	d16c      	bne.n	8017ebe <pow+0x146>
 8017de4:	ec47 6b10 	vmov	d0, r6, r7
 8017de8:	f002 fb3b 	bl	801a462 <finite>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d0e8      	beq.n	8017dc2 <pow+0x4a>
 8017df0:	2200      	movs	r2, #0
 8017df2:	2300      	movs	r3, #0
 8017df4:	4630      	mov	r0, r6
 8017df6:	4639      	mov	r1, r7
 8017df8:	f7e8 fe90 	bl	8000b1c <__aeabi_dcmplt>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	d0e0      	beq.n	8017dc2 <pow+0x4a>
 8017e00:	f7fb f9c4 	bl	801318c <__errno>
 8017e04:	2321      	movs	r3, #33	; 0x21
 8017e06:	6003      	str	r3, [r0, #0]
 8017e08:	2400      	movs	r4, #0
 8017e0a:	4d2f      	ldr	r5, [pc, #188]	; (8017ec8 <pow+0x150>)
 8017e0c:	e7d9      	b.n	8017dc2 <pow+0x4a>
 8017e0e:	ec45 4b10 	vmov	d0, r4, r5
 8017e12:	f002 fb26 	bl	801a462 <finite>
 8017e16:	bbb8      	cbnz	r0, 8017e88 <pow+0x110>
 8017e18:	ec49 8b10 	vmov	d0, r8, r9
 8017e1c:	f002 fb21 	bl	801a462 <finite>
 8017e20:	b390      	cbz	r0, 8017e88 <pow+0x110>
 8017e22:	ec47 6b10 	vmov	d0, r6, r7
 8017e26:	f002 fb1c 	bl	801a462 <finite>
 8017e2a:	b368      	cbz	r0, 8017e88 <pow+0x110>
 8017e2c:	4622      	mov	r2, r4
 8017e2e:	462b      	mov	r3, r5
 8017e30:	4620      	mov	r0, r4
 8017e32:	4629      	mov	r1, r5
 8017e34:	f7e8 fe9a 	bl	8000b6c <__aeabi_dcmpun>
 8017e38:	b160      	cbz	r0, 8017e54 <pow+0xdc>
 8017e3a:	f7fb f9a7 	bl	801318c <__errno>
 8017e3e:	2321      	movs	r3, #33	; 0x21
 8017e40:	6003      	str	r3, [r0, #0]
 8017e42:	2200      	movs	r2, #0
 8017e44:	2300      	movs	r3, #0
 8017e46:	4610      	mov	r0, r2
 8017e48:	4619      	mov	r1, r3
 8017e4a:	f7e8 fd1f 	bl	800088c <__aeabi_ddiv>
 8017e4e:	4604      	mov	r4, r0
 8017e50:	460d      	mov	r5, r1
 8017e52:	e7b6      	b.n	8017dc2 <pow+0x4a>
 8017e54:	f7fb f99a 	bl	801318c <__errno>
 8017e58:	2322      	movs	r3, #34	; 0x22
 8017e5a:	6003      	str	r3, [r0, #0]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	2300      	movs	r3, #0
 8017e60:	4640      	mov	r0, r8
 8017e62:	4649      	mov	r1, r9
 8017e64:	f7e8 fe5a 	bl	8000b1c <__aeabi_dcmplt>
 8017e68:	2400      	movs	r4, #0
 8017e6a:	b158      	cbz	r0, 8017e84 <pow+0x10c>
 8017e6c:	ec47 6b10 	vmov	d0, r6, r7
 8017e70:	f002 fb82 	bl	801a578 <rint>
 8017e74:	4632      	mov	r2, r6
 8017e76:	ec51 0b10 	vmov	r0, r1, d0
 8017e7a:	463b      	mov	r3, r7
 8017e7c:	f7e8 fe44 	bl	8000b08 <__aeabi_dcmpeq>
 8017e80:	2800      	cmp	r0, #0
 8017e82:	d0c2      	beq.n	8017e0a <pow+0x92>
 8017e84:	4d11      	ldr	r5, [pc, #68]	; (8017ecc <pow+0x154>)
 8017e86:	e79c      	b.n	8017dc2 <pow+0x4a>
 8017e88:	2200      	movs	r2, #0
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	4629      	mov	r1, r5
 8017e90:	f7e8 fe3a 	bl	8000b08 <__aeabi_dcmpeq>
 8017e94:	2800      	cmp	r0, #0
 8017e96:	d094      	beq.n	8017dc2 <pow+0x4a>
 8017e98:	ec49 8b10 	vmov	d0, r8, r9
 8017e9c:	f002 fae1 	bl	801a462 <finite>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d08e      	beq.n	8017dc2 <pow+0x4a>
 8017ea4:	ec47 6b10 	vmov	d0, r6, r7
 8017ea8:	f002 fadb 	bl	801a462 <finite>
 8017eac:	2800      	cmp	r0, #0
 8017eae:	d088      	beq.n	8017dc2 <pow+0x4a>
 8017eb0:	f7fb f96c 	bl	801318c <__errno>
 8017eb4:	2322      	movs	r3, #34	; 0x22
 8017eb6:	6003      	str	r3, [r0, #0]
 8017eb8:	2400      	movs	r4, #0
 8017eba:	2500      	movs	r5, #0
 8017ebc:	e781      	b.n	8017dc2 <pow+0x4a>
 8017ebe:	4d04      	ldr	r5, [pc, #16]	; (8017ed0 <pow+0x158>)
 8017ec0:	2400      	movs	r4, #0
 8017ec2:	e77e      	b.n	8017dc2 <pow+0x4a>
 8017ec4:	20000580 	.word	0x20000580
 8017ec8:	fff00000 	.word	0xfff00000
 8017ecc:	7ff00000 	.word	0x7ff00000
 8017ed0:	3ff00000 	.word	0x3ff00000

08017ed4 <sqrt>:
 8017ed4:	b538      	push	{r3, r4, r5, lr}
 8017ed6:	ed2d 8b02 	vpush	{d8}
 8017eda:	ec55 4b10 	vmov	r4, r5, d0
 8017ede:	f001 fb99 	bl	8019614 <__ieee754_sqrt>
 8017ee2:	4b15      	ldr	r3, [pc, #84]	; (8017f38 <sqrt+0x64>)
 8017ee4:	eeb0 8a40 	vmov.f32	s16, s0
 8017ee8:	eef0 8a60 	vmov.f32	s17, s1
 8017eec:	f993 3000 	ldrsb.w	r3, [r3]
 8017ef0:	3301      	adds	r3, #1
 8017ef2:	d019      	beq.n	8017f28 <sqrt+0x54>
 8017ef4:	4622      	mov	r2, r4
 8017ef6:	462b      	mov	r3, r5
 8017ef8:	4620      	mov	r0, r4
 8017efa:	4629      	mov	r1, r5
 8017efc:	f7e8 fe36 	bl	8000b6c <__aeabi_dcmpun>
 8017f00:	b990      	cbnz	r0, 8017f28 <sqrt+0x54>
 8017f02:	2200      	movs	r2, #0
 8017f04:	2300      	movs	r3, #0
 8017f06:	4620      	mov	r0, r4
 8017f08:	4629      	mov	r1, r5
 8017f0a:	f7e8 fe07 	bl	8000b1c <__aeabi_dcmplt>
 8017f0e:	b158      	cbz	r0, 8017f28 <sqrt+0x54>
 8017f10:	f7fb f93c 	bl	801318c <__errno>
 8017f14:	2321      	movs	r3, #33	; 0x21
 8017f16:	6003      	str	r3, [r0, #0]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	4610      	mov	r0, r2
 8017f1e:	4619      	mov	r1, r3
 8017f20:	f7e8 fcb4 	bl	800088c <__aeabi_ddiv>
 8017f24:	ec41 0b18 	vmov	d8, r0, r1
 8017f28:	eeb0 0a48 	vmov.f32	s0, s16
 8017f2c:	eef0 0a68 	vmov.f32	s1, s17
 8017f30:	ecbd 8b02 	vpop	{d8}
 8017f34:	bd38      	pop	{r3, r4, r5, pc}
 8017f36:	bf00      	nop
 8017f38:	20000580 	.word	0x20000580
 8017f3c:	00000000 	.word	0x00000000

08017f40 <__ieee754_acos>:
 8017f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f44:	ec55 4b10 	vmov	r4, r5, d0
 8017f48:	49b7      	ldr	r1, [pc, #732]	; (8018228 <__ieee754_acos+0x2e8>)
 8017f4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017f4e:	428b      	cmp	r3, r1
 8017f50:	dd1b      	ble.n	8017f8a <__ieee754_acos+0x4a>
 8017f52:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8017f56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017f5a:	4323      	orrs	r3, r4
 8017f5c:	d106      	bne.n	8017f6c <__ieee754_acos+0x2c>
 8017f5e:	2d00      	cmp	r5, #0
 8017f60:	f300 8211 	bgt.w	8018386 <__ieee754_acos+0x446>
 8017f64:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80181c0 <__ieee754_acos+0x280>
 8017f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6c:	ee10 2a10 	vmov	r2, s0
 8017f70:	462b      	mov	r3, r5
 8017f72:	ee10 0a10 	vmov	r0, s0
 8017f76:	4629      	mov	r1, r5
 8017f78:	f7e8 f9a6 	bl	80002c8 <__aeabi_dsub>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	460b      	mov	r3, r1
 8017f80:	f7e8 fc84 	bl	800088c <__aeabi_ddiv>
 8017f84:	ec41 0b10 	vmov	d0, r0, r1
 8017f88:	e7ee      	b.n	8017f68 <__ieee754_acos+0x28>
 8017f8a:	49a8      	ldr	r1, [pc, #672]	; (801822c <__ieee754_acos+0x2ec>)
 8017f8c:	428b      	cmp	r3, r1
 8017f8e:	f300 8087 	bgt.w	80180a0 <__ieee754_acos+0x160>
 8017f92:	4aa7      	ldr	r2, [pc, #668]	; (8018230 <__ieee754_acos+0x2f0>)
 8017f94:	4293      	cmp	r3, r2
 8017f96:	f340 81f9 	ble.w	801838c <__ieee754_acos+0x44c>
 8017f9a:	ee10 2a10 	vmov	r2, s0
 8017f9e:	ee10 0a10 	vmov	r0, s0
 8017fa2:	462b      	mov	r3, r5
 8017fa4:	4629      	mov	r1, r5
 8017fa6:	f7e8 fb47 	bl	8000638 <__aeabi_dmul>
 8017faa:	a387      	add	r3, pc, #540	; (adr r3, 80181c8 <__ieee754_acos+0x288>)
 8017fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb0:	4606      	mov	r6, r0
 8017fb2:	460f      	mov	r7, r1
 8017fb4:	f7e8 fb40 	bl	8000638 <__aeabi_dmul>
 8017fb8:	a385      	add	r3, pc, #532	; (adr r3, 80181d0 <__ieee754_acos+0x290>)
 8017fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fbe:	f7e8 f985 	bl	80002cc <__adddf3>
 8017fc2:	4632      	mov	r2, r6
 8017fc4:	463b      	mov	r3, r7
 8017fc6:	f7e8 fb37 	bl	8000638 <__aeabi_dmul>
 8017fca:	a383      	add	r3, pc, #524	; (adr r3, 80181d8 <__ieee754_acos+0x298>)
 8017fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fd0:	f7e8 f97a 	bl	80002c8 <__aeabi_dsub>
 8017fd4:	4632      	mov	r2, r6
 8017fd6:	463b      	mov	r3, r7
 8017fd8:	f7e8 fb2e 	bl	8000638 <__aeabi_dmul>
 8017fdc:	a380      	add	r3, pc, #512	; (adr r3, 80181e0 <__ieee754_acos+0x2a0>)
 8017fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe2:	f7e8 f973 	bl	80002cc <__adddf3>
 8017fe6:	4632      	mov	r2, r6
 8017fe8:	463b      	mov	r3, r7
 8017fea:	f7e8 fb25 	bl	8000638 <__aeabi_dmul>
 8017fee:	a37e      	add	r3, pc, #504	; (adr r3, 80181e8 <__ieee754_acos+0x2a8>)
 8017ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff4:	f7e8 f968 	bl	80002c8 <__aeabi_dsub>
 8017ff8:	4632      	mov	r2, r6
 8017ffa:	463b      	mov	r3, r7
 8017ffc:	f7e8 fb1c 	bl	8000638 <__aeabi_dmul>
 8018000:	a37b      	add	r3, pc, #492	; (adr r3, 80181f0 <__ieee754_acos+0x2b0>)
 8018002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018006:	f7e8 f961 	bl	80002cc <__adddf3>
 801800a:	4632      	mov	r2, r6
 801800c:	463b      	mov	r3, r7
 801800e:	f7e8 fb13 	bl	8000638 <__aeabi_dmul>
 8018012:	a379      	add	r3, pc, #484	; (adr r3, 80181f8 <__ieee754_acos+0x2b8>)
 8018014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018018:	4680      	mov	r8, r0
 801801a:	4689      	mov	r9, r1
 801801c:	4630      	mov	r0, r6
 801801e:	4639      	mov	r1, r7
 8018020:	f7e8 fb0a 	bl	8000638 <__aeabi_dmul>
 8018024:	a376      	add	r3, pc, #472	; (adr r3, 8018200 <__ieee754_acos+0x2c0>)
 8018026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802a:	f7e8 f94d 	bl	80002c8 <__aeabi_dsub>
 801802e:	4632      	mov	r2, r6
 8018030:	463b      	mov	r3, r7
 8018032:	f7e8 fb01 	bl	8000638 <__aeabi_dmul>
 8018036:	a374      	add	r3, pc, #464	; (adr r3, 8018208 <__ieee754_acos+0x2c8>)
 8018038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803c:	f7e8 f946 	bl	80002cc <__adddf3>
 8018040:	4632      	mov	r2, r6
 8018042:	463b      	mov	r3, r7
 8018044:	f7e8 faf8 	bl	8000638 <__aeabi_dmul>
 8018048:	a371      	add	r3, pc, #452	; (adr r3, 8018210 <__ieee754_acos+0x2d0>)
 801804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804e:	f7e8 f93b 	bl	80002c8 <__aeabi_dsub>
 8018052:	4632      	mov	r2, r6
 8018054:	463b      	mov	r3, r7
 8018056:	f7e8 faef 	bl	8000638 <__aeabi_dmul>
 801805a:	4b76      	ldr	r3, [pc, #472]	; (8018234 <__ieee754_acos+0x2f4>)
 801805c:	2200      	movs	r2, #0
 801805e:	f7e8 f935 	bl	80002cc <__adddf3>
 8018062:	4602      	mov	r2, r0
 8018064:	460b      	mov	r3, r1
 8018066:	4640      	mov	r0, r8
 8018068:	4649      	mov	r1, r9
 801806a:	f7e8 fc0f 	bl	800088c <__aeabi_ddiv>
 801806e:	4622      	mov	r2, r4
 8018070:	462b      	mov	r3, r5
 8018072:	f7e8 fae1 	bl	8000638 <__aeabi_dmul>
 8018076:	4602      	mov	r2, r0
 8018078:	460b      	mov	r3, r1
 801807a:	a167      	add	r1, pc, #412	; (adr r1, 8018218 <__ieee754_acos+0x2d8>)
 801807c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018080:	f7e8 f922 	bl	80002c8 <__aeabi_dsub>
 8018084:	4602      	mov	r2, r0
 8018086:	460b      	mov	r3, r1
 8018088:	4620      	mov	r0, r4
 801808a:	4629      	mov	r1, r5
 801808c:	f7e8 f91c 	bl	80002c8 <__aeabi_dsub>
 8018090:	4602      	mov	r2, r0
 8018092:	460b      	mov	r3, r1
 8018094:	a162      	add	r1, pc, #392	; (adr r1, 8018220 <__ieee754_acos+0x2e0>)
 8018096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801809a:	f7e8 f915 	bl	80002c8 <__aeabi_dsub>
 801809e:	e771      	b.n	8017f84 <__ieee754_acos+0x44>
 80180a0:	2d00      	cmp	r5, #0
 80180a2:	f280 80cb 	bge.w	801823c <__ieee754_acos+0x2fc>
 80180a6:	ee10 0a10 	vmov	r0, s0
 80180aa:	4b62      	ldr	r3, [pc, #392]	; (8018234 <__ieee754_acos+0x2f4>)
 80180ac:	2200      	movs	r2, #0
 80180ae:	4629      	mov	r1, r5
 80180b0:	f7e8 f90c 	bl	80002cc <__adddf3>
 80180b4:	4b60      	ldr	r3, [pc, #384]	; (8018238 <__ieee754_acos+0x2f8>)
 80180b6:	2200      	movs	r2, #0
 80180b8:	f7e8 fabe 	bl	8000638 <__aeabi_dmul>
 80180bc:	a342      	add	r3, pc, #264	; (adr r3, 80181c8 <__ieee754_acos+0x288>)
 80180be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c2:	4604      	mov	r4, r0
 80180c4:	460d      	mov	r5, r1
 80180c6:	f7e8 fab7 	bl	8000638 <__aeabi_dmul>
 80180ca:	a341      	add	r3, pc, #260	; (adr r3, 80181d0 <__ieee754_acos+0x290>)
 80180cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d0:	f7e8 f8fc 	bl	80002cc <__adddf3>
 80180d4:	4622      	mov	r2, r4
 80180d6:	462b      	mov	r3, r5
 80180d8:	f7e8 faae 	bl	8000638 <__aeabi_dmul>
 80180dc:	a33e      	add	r3, pc, #248	; (adr r3, 80181d8 <__ieee754_acos+0x298>)
 80180de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e2:	f7e8 f8f1 	bl	80002c8 <__aeabi_dsub>
 80180e6:	4622      	mov	r2, r4
 80180e8:	462b      	mov	r3, r5
 80180ea:	f7e8 faa5 	bl	8000638 <__aeabi_dmul>
 80180ee:	a33c      	add	r3, pc, #240	; (adr r3, 80181e0 <__ieee754_acos+0x2a0>)
 80180f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f4:	f7e8 f8ea 	bl	80002cc <__adddf3>
 80180f8:	4622      	mov	r2, r4
 80180fa:	462b      	mov	r3, r5
 80180fc:	f7e8 fa9c 	bl	8000638 <__aeabi_dmul>
 8018100:	a339      	add	r3, pc, #228	; (adr r3, 80181e8 <__ieee754_acos+0x2a8>)
 8018102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018106:	f7e8 f8df 	bl	80002c8 <__aeabi_dsub>
 801810a:	4622      	mov	r2, r4
 801810c:	462b      	mov	r3, r5
 801810e:	f7e8 fa93 	bl	8000638 <__aeabi_dmul>
 8018112:	a337      	add	r3, pc, #220	; (adr r3, 80181f0 <__ieee754_acos+0x2b0>)
 8018114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018118:	f7e8 f8d8 	bl	80002cc <__adddf3>
 801811c:	4622      	mov	r2, r4
 801811e:	462b      	mov	r3, r5
 8018120:	f7e8 fa8a 	bl	8000638 <__aeabi_dmul>
 8018124:	ec45 4b10 	vmov	d0, r4, r5
 8018128:	4680      	mov	r8, r0
 801812a:	4689      	mov	r9, r1
 801812c:	f001 fa72 	bl	8019614 <__ieee754_sqrt>
 8018130:	a331      	add	r3, pc, #196	; (adr r3, 80181f8 <__ieee754_acos+0x2b8>)
 8018132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018136:	4620      	mov	r0, r4
 8018138:	4629      	mov	r1, r5
 801813a:	ec57 6b10 	vmov	r6, r7, d0
 801813e:	f7e8 fa7b 	bl	8000638 <__aeabi_dmul>
 8018142:	a32f      	add	r3, pc, #188	; (adr r3, 8018200 <__ieee754_acos+0x2c0>)
 8018144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018148:	f7e8 f8be 	bl	80002c8 <__aeabi_dsub>
 801814c:	4622      	mov	r2, r4
 801814e:	462b      	mov	r3, r5
 8018150:	f7e8 fa72 	bl	8000638 <__aeabi_dmul>
 8018154:	a32c      	add	r3, pc, #176	; (adr r3, 8018208 <__ieee754_acos+0x2c8>)
 8018156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801815a:	f7e8 f8b7 	bl	80002cc <__adddf3>
 801815e:	4622      	mov	r2, r4
 8018160:	462b      	mov	r3, r5
 8018162:	f7e8 fa69 	bl	8000638 <__aeabi_dmul>
 8018166:	a32a      	add	r3, pc, #168	; (adr r3, 8018210 <__ieee754_acos+0x2d0>)
 8018168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816c:	f7e8 f8ac 	bl	80002c8 <__aeabi_dsub>
 8018170:	4622      	mov	r2, r4
 8018172:	462b      	mov	r3, r5
 8018174:	f7e8 fa60 	bl	8000638 <__aeabi_dmul>
 8018178:	4b2e      	ldr	r3, [pc, #184]	; (8018234 <__ieee754_acos+0x2f4>)
 801817a:	2200      	movs	r2, #0
 801817c:	f7e8 f8a6 	bl	80002cc <__adddf3>
 8018180:	4602      	mov	r2, r0
 8018182:	460b      	mov	r3, r1
 8018184:	4640      	mov	r0, r8
 8018186:	4649      	mov	r1, r9
 8018188:	f7e8 fb80 	bl	800088c <__aeabi_ddiv>
 801818c:	4632      	mov	r2, r6
 801818e:	463b      	mov	r3, r7
 8018190:	f7e8 fa52 	bl	8000638 <__aeabi_dmul>
 8018194:	a320      	add	r3, pc, #128	; (adr r3, 8018218 <__ieee754_acos+0x2d8>)
 8018196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801819a:	f7e8 f895 	bl	80002c8 <__aeabi_dsub>
 801819e:	4632      	mov	r2, r6
 80181a0:	463b      	mov	r3, r7
 80181a2:	f7e8 f893 	bl	80002cc <__adddf3>
 80181a6:	4602      	mov	r2, r0
 80181a8:	460b      	mov	r3, r1
 80181aa:	f7e8 f88f 	bl	80002cc <__adddf3>
 80181ae:	4602      	mov	r2, r0
 80181b0:	460b      	mov	r3, r1
 80181b2:	a103      	add	r1, pc, #12	; (adr r1, 80181c0 <__ieee754_acos+0x280>)
 80181b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80181b8:	e76f      	b.n	801809a <__ieee754_acos+0x15a>
 80181ba:	bf00      	nop
 80181bc:	f3af 8000 	nop.w
 80181c0:	54442d18 	.word	0x54442d18
 80181c4:	400921fb 	.word	0x400921fb
 80181c8:	0dfdf709 	.word	0x0dfdf709
 80181cc:	3f023de1 	.word	0x3f023de1
 80181d0:	7501b288 	.word	0x7501b288
 80181d4:	3f49efe0 	.word	0x3f49efe0
 80181d8:	b5688f3b 	.word	0xb5688f3b
 80181dc:	3fa48228 	.word	0x3fa48228
 80181e0:	0e884455 	.word	0x0e884455
 80181e4:	3fc9c155 	.word	0x3fc9c155
 80181e8:	03eb6f7d 	.word	0x03eb6f7d
 80181ec:	3fd4d612 	.word	0x3fd4d612
 80181f0:	55555555 	.word	0x55555555
 80181f4:	3fc55555 	.word	0x3fc55555
 80181f8:	b12e9282 	.word	0xb12e9282
 80181fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8018200:	1b8d0159 	.word	0x1b8d0159
 8018204:	3fe6066c 	.word	0x3fe6066c
 8018208:	9c598ac8 	.word	0x9c598ac8
 801820c:	40002ae5 	.word	0x40002ae5
 8018210:	1c8a2d4b 	.word	0x1c8a2d4b
 8018214:	40033a27 	.word	0x40033a27
 8018218:	33145c07 	.word	0x33145c07
 801821c:	3c91a626 	.word	0x3c91a626
 8018220:	54442d18 	.word	0x54442d18
 8018224:	3ff921fb 	.word	0x3ff921fb
 8018228:	3fefffff 	.word	0x3fefffff
 801822c:	3fdfffff 	.word	0x3fdfffff
 8018230:	3c600000 	.word	0x3c600000
 8018234:	3ff00000 	.word	0x3ff00000
 8018238:	3fe00000 	.word	0x3fe00000
 801823c:	ee10 2a10 	vmov	r2, s0
 8018240:	462b      	mov	r3, r5
 8018242:	496d      	ldr	r1, [pc, #436]	; (80183f8 <__ieee754_acos+0x4b8>)
 8018244:	2000      	movs	r0, #0
 8018246:	f7e8 f83f 	bl	80002c8 <__aeabi_dsub>
 801824a:	4b6c      	ldr	r3, [pc, #432]	; (80183fc <__ieee754_acos+0x4bc>)
 801824c:	2200      	movs	r2, #0
 801824e:	f7e8 f9f3 	bl	8000638 <__aeabi_dmul>
 8018252:	4604      	mov	r4, r0
 8018254:	460d      	mov	r5, r1
 8018256:	ec45 4b10 	vmov	d0, r4, r5
 801825a:	f001 f9db 	bl	8019614 <__ieee754_sqrt>
 801825e:	a34e      	add	r3, pc, #312	; (adr r3, 8018398 <__ieee754_acos+0x458>)
 8018260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018264:	4620      	mov	r0, r4
 8018266:	4629      	mov	r1, r5
 8018268:	ec59 8b10 	vmov	r8, r9, d0
 801826c:	f7e8 f9e4 	bl	8000638 <__aeabi_dmul>
 8018270:	a34b      	add	r3, pc, #300	; (adr r3, 80183a0 <__ieee754_acos+0x460>)
 8018272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018276:	f7e8 f829 	bl	80002cc <__adddf3>
 801827a:	4622      	mov	r2, r4
 801827c:	462b      	mov	r3, r5
 801827e:	f7e8 f9db 	bl	8000638 <__aeabi_dmul>
 8018282:	a349      	add	r3, pc, #292	; (adr r3, 80183a8 <__ieee754_acos+0x468>)
 8018284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018288:	f7e8 f81e 	bl	80002c8 <__aeabi_dsub>
 801828c:	4622      	mov	r2, r4
 801828e:	462b      	mov	r3, r5
 8018290:	f7e8 f9d2 	bl	8000638 <__aeabi_dmul>
 8018294:	a346      	add	r3, pc, #280	; (adr r3, 80183b0 <__ieee754_acos+0x470>)
 8018296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801829a:	f7e8 f817 	bl	80002cc <__adddf3>
 801829e:	4622      	mov	r2, r4
 80182a0:	462b      	mov	r3, r5
 80182a2:	f7e8 f9c9 	bl	8000638 <__aeabi_dmul>
 80182a6:	a344      	add	r3, pc, #272	; (adr r3, 80183b8 <__ieee754_acos+0x478>)
 80182a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ac:	f7e8 f80c 	bl	80002c8 <__aeabi_dsub>
 80182b0:	4622      	mov	r2, r4
 80182b2:	462b      	mov	r3, r5
 80182b4:	f7e8 f9c0 	bl	8000638 <__aeabi_dmul>
 80182b8:	a341      	add	r3, pc, #260	; (adr r3, 80183c0 <__ieee754_acos+0x480>)
 80182ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182be:	f7e8 f805 	bl	80002cc <__adddf3>
 80182c2:	4622      	mov	r2, r4
 80182c4:	462b      	mov	r3, r5
 80182c6:	f7e8 f9b7 	bl	8000638 <__aeabi_dmul>
 80182ca:	a33f      	add	r3, pc, #252	; (adr r3, 80183c8 <__ieee754_acos+0x488>)
 80182cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d0:	4682      	mov	sl, r0
 80182d2:	468b      	mov	fp, r1
 80182d4:	4620      	mov	r0, r4
 80182d6:	4629      	mov	r1, r5
 80182d8:	f7e8 f9ae 	bl	8000638 <__aeabi_dmul>
 80182dc:	a33c      	add	r3, pc, #240	; (adr r3, 80183d0 <__ieee754_acos+0x490>)
 80182de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e2:	f7e7 fff1 	bl	80002c8 <__aeabi_dsub>
 80182e6:	4622      	mov	r2, r4
 80182e8:	462b      	mov	r3, r5
 80182ea:	f7e8 f9a5 	bl	8000638 <__aeabi_dmul>
 80182ee:	a33a      	add	r3, pc, #232	; (adr r3, 80183d8 <__ieee754_acos+0x498>)
 80182f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182f4:	f7e7 ffea 	bl	80002cc <__adddf3>
 80182f8:	4622      	mov	r2, r4
 80182fa:	462b      	mov	r3, r5
 80182fc:	f7e8 f99c 	bl	8000638 <__aeabi_dmul>
 8018300:	a337      	add	r3, pc, #220	; (adr r3, 80183e0 <__ieee754_acos+0x4a0>)
 8018302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018306:	f7e7 ffdf 	bl	80002c8 <__aeabi_dsub>
 801830a:	4622      	mov	r2, r4
 801830c:	462b      	mov	r3, r5
 801830e:	f7e8 f993 	bl	8000638 <__aeabi_dmul>
 8018312:	4b39      	ldr	r3, [pc, #228]	; (80183f8 <__ieee754_acos+0x4b8>)
 8018314:	2200      	movs	r2, #0
 8018316:	f7e7 ffd9 	bl	80002cc <__adddf3>
 801831a:	4602      	mov	r2, r0
 801831c:	460b      	mov	r3, r1
 801831e:	4650      	mov	r0, sl
 8018320:	4659      	mov	r1, fp
 8018322:	f7e8 fab3 	bl	800088c <__aeabi_ddiv>
 8018326:	4642      	mov	r2, r8
 8018328:	464b      	mov	r3, r9
 801832a:	f7e8 f985 	bl	8000638 <__aeabi_dmul>
 801832e:	2600      	movs	r6, #0
 8018330:	4682      	mov	sl, r0
 8018332:	468b      	mov	fp, r1
 8018334:	4632      	mov	r2, r6
 8018336:	464b      	mov	r3, r9
 8018338:	4630      	mov	r0, r6
 801833a:	4649      	mov	r1, r9
 801833c:	f7e8 f97c 	bl	8000638 <__aeabi_dmul>
 8018340:	4602      	mov	r2, r0
 8018342:	460b      	mov	r3, r1
 8018344:	4620      	mov	r0, r4
 8018346:	4629      	mov	r1, r5
 8018348:	f7e7 ffbe 	bl	80002c8 <__aeabi_dsub>
 801834c:	4632      	mov	r2, r6
 801834e:	4604      	mov	r4, r0
 8018350:	460d      	mov	r5, r1
 8018352:	464b      	mov	r3, r9
 8018354:	4640      	mov	r0, r8
 8018356:	4649      	mov	r1, r9
 8018358:	f7e7 ffb8 	bl	80002cc <__adddf3>
 801835c:	4602      	mov	r2, r0
 801835e:	460b      	mov	r3, r1
 8018360:	4620      	mov	r0, r4
 8018362:	4629      	mov	r1, r5
 8018364:	f7e8 fa92 	bl	800088c <__aeabi_ddiv>
 8018368:	4602      	mov	r2, r0
 801836a:	460b      	mov	r3, r1
 801836c:	4650      	mov	r0, sl
 801836e:	4659      	mov	r1, fp
 8018370:	f7e7 ffac 	bl	80002cc <__adddf3>
 8018374:	4632      	mov	r2, r6
 8018376:	464b      	mov	r3, r9
 8018378:	f7e7 ffa8 	bl	80002cc <__adddf3>
 801837c:	4602      	mov	r2, r0
 801837e:	460b      	mov	r3, r1
 8018380:	f7e7 ffa4 	bl	80002cc <__adddf3>
 8018384:	e5fe      	b.n	8017f84 <__ieee754_acos+0x44>
 8018386:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80183e8 <__ieee754_acos+0x4a8>
 801838a:	e5ed      	b.n	8017f68 <__ieee754_acos+0x28>
 801838c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80183f0 <__ieee754_acos+0x4b0>
 8018390:	e5ea      	b.n	8017f68 <__ieee754_acos+0x28>
 8018392:	bf00      	nop
 8018394:	f3af 8000 	nop.w
 8018398:	0dfdf709 	.word	0x0dfdf709
 801839c:	3f023de1 	.word	0x3f023de1
 80183a0:	7501b288 	.word	0x7501b288
 80183a4:	3f49efe0 	.word	0x3f49efe0
 80183a8:	b5688f3b 	.word	0xb5688f3b
 80183ac:	3fa48228 	.word	0x3fa48228
 80183b0:	0e884455 	.word	0x0e884455
 80183b4:	3fc9c155 	.word	0x3fc9c155
 80183b8:	03eb6f7d 	.word	0x03eb6f7d
 80183bc:	3fd4d612 	.word	0x3fd4d612
 80183c0:	55555555 	.word	0x55555555
 80183c4:	3fc55555 	.word	0x3fc55555
 80183c8:	b12e9282 	.word	0xb12e9282
 80183cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80183d0:	1b8d0159 	.word	0x1b8d0159
 80183d4:	3fe6066c 	.word	0x3fe6066c
 80183d8:	9c598ac8 	.word	0x9c598ac8
 80183dc:	40002ae5 	.word	0x40002ae5
 80183e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80183e4:	40033a27 	.word	0x40033a27
	...
 80183f0:	54442d18 	.word	0x54442d18
 80183f4:	3ff921fb 	.word	0x3ff921fb
 80183f8:	3ff00000 	.word	0x3ff00000
 80183fc:	3fe00000 	.word	0x3fe00000

08018400 <__ieee754_atan2>:
 8018400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018404:	ec57 6b11 	vmov	r6, r7, d1
 8018408:	4273      	negs	r3, r6
 801840a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8018590 <__ieee754_atan2+0x190>
 801840e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018412:	4333      	orrs	r3, r6
 8018414:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018418:	4573      	cmp	r3, lr
 801841a:	ec51 0b10 	vmov	r0, r1, d0
 801841e:	ee11 8a10 	vmov	r8, s2
 8018422:	d80a      	bhi.n	801843a <__ieee754_atan2+0x3a>
 8018424:	4244      	negs	r4, r0
 8018426:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801842a:	4304      	orrs	r4, r0
 801842c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018430:	4574      	cmp	r4, lr
 8018432:	ee10 9a10 	vmov	r9, s0
 8018436:	468c      	mov	ip, r1
 8018438:	d907      	bls.n	801844a <__ieee754_atan2+0x4a>
 801843a:	4632      	mov	r2, r6
 801843c:	463b      	mov	r3, r7
 801843e:	f7e7 ff45 	bl	80002cc <__adddf3>
 8018442:	ec41 0b10 	vmov	d0, r0, r1
 8018446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801844a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801844e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018452:	4334      	orrs	r4, r6
 8018454:	d103      	bne.n	801845e <__ieee754_atan2+0x5e>
 8018456:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801845a:	f001 be59 	b.w	801a110 <atan>
 801845e:	17bc      	asrs	r4, r7, #30
 8018460:	f004 0402 	and.w	r4, r4, #2
 8018464:	ea53 0909 	orrs.w	r9, r3, r9
 8018468:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801846c:	d107      	bne.n	801847e <__ieee754_atan2+0x7e>
 801846e:	2c02      	cmp	r4, #2
 8018470:	d060      	beq.n	8018534 <__ieee754_atan2+0x134>
 8018472:	2c03      	cmp	r4, #3
 8018474:	d1e5      	bne.n	8018442 <__ieee754_atan2+0x42>
 8018476:	a142      	add	r1, pc, #264	; (adr r1, 8018580 <__ieee754_atan2+0x180>)
 8018478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801847c:	e7e1      	b.n	8018442 <__ieee754_atan2+0x42>
 801847e:	ea52 0808 	orrs.w	r8, r2, r8
 8018482:	d106      	bne.n	8018492 <__ieee754_atan2+0x92>
 8018484:	f1bc 0f00 	cmp.w	ip, #0
 8018488:	da5f      	bge.n	801854a <__ieee754_atan2+0x14a>
 801848a:	a13f      	add	r1, pc, #252	; (adr r1, 8018588 <__ieee754_atan2+0x188>)
 801848c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018490:	e7d7      	b.n	8018442 <__ieee754_atan2+0x42>
 8018492:	4572      	cmp	r2, lr
 8018494:	d10f      	bne.n	80184b6 <__ieee754_atan2+0xb6>
 8018496:	4293      	cmp	r3, r2
 8018498:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801849c:	d107      	bne.n	80184ae <__ieee754_atan2+0xae>
 801849e:	2c02      	cmp	r4, #2
 80184a0:	d84c      	bhi.n	801853c <__ieee754_atan2+0x13c>
 80184a2:	4b35      	ldr	r3, [pc, #212]	; (8018578 <__ieee754_atan2+0x178>)
 80184a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80184a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80184ac:	e7c9      	b.n	8018442 <__ieee754_atan2+0x42>
 80184ae:	2c02      	cmp	r4, #2
 80184b0:	d848      	bhi.n	8018544 <__ieee754_atan2+0x144>
 80184b2:	4b32      	ldr	r3, [pc, #200]	; (801857c <__ieee754_atan2+0x17c>)
 80184b4:	e7f6      	b.n	80184a4 <__ieee754_atan2+0xa4>
 80184b6:	4573      	cmp	r3, lr
 80184b8:	d0e4      	beq.n	8018484 <__ieee754_atan2+0x84>
 80184ba:	1a9b      	subs	r3, r3, r2
 80184bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80184c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80184c4:	da1e      	bge.n	8018504 <__ieee754_atan2+0x104>
 80184c6:	2f00      	cmp	r7, #0
 80184c8:	da01      	bge.n	80184ce <__ieee754_atan2+0xce>
 80184ca:	323c      	adds	r2, #60	; 0x3c
 80184cc:	db1e      	blt.n	801850c <__ieee754_atan2+0x10c>
 80184ce:	4632      	mov	r2, r6
 80184d0:	463b      	mov	r3, r7
 80184d2:	f7e8 f9db 	bl	800088c <__aeabi_ddiv>
 80184d6:	ec41 0b10 	vmov	d0, r0, r1
 80184da:	f001 ffb9 	bl	801a450 <fabs>
 80184de:	f001 fe17 	bl	801a110 <atan>
 80184e2:	ec51 0b10 	vmov	r0, r1, d0
 80184e6:	2c01      	cmp	r4, #1
 80184e8:	d013      	beq.n	8018512 <__ieee754_atan2+0x112>
 80184ea:	2c02      	cmp	r4, #2
 80184ec:	d015      	beq.n	801851a <__ieee754_atan2+0x11a>
 80184ee:	2c00      	cmp	r4, #0
 80184f0:	d0a7      	beq.n	8018442 <__ieee754_atan2+0x42>
 80184f2:	a319      	add	r3, pc, #100	; (adr r3, 8018558 <__ieee754_atan2+0x158>)
 80184f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184f8:	f7e7 fee6 	bl	80002c8 <__aeabi_dsub>
 80184fc:	a318      	add	r3, pc, #96	; (adr r3, 8018560 <__ieee754_atan2+0x160>)
 80184fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018502:	e014      	b.n	801852e <__ieee754_atan2+0x12e>
 8018504:	a118      	add	r1, pc, #96	; (adr r1, 8018568 <__ieee754_atan2+0x168>)
 8018506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801850a:	e7ec      	b.n	80184e6 <__ieee754_atan2+0xe6>
 801850c:	2000      	movs	r0, #0
 801850e:	2100      	movs	r1, #0
 8018510:	e7e9      	b.n	80184e6 <__ieee754_atan2+0xe6>
 8018512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018516:	4619      	mov	r1, r3
 8018518:	e793      	b.n	8018442 <__ieee754_atan2+0x42>
 801851a:	a30f      	add	r3, pc, #60	; (adr r3, 8018558 <__ieee754_atan2+0x158>)
 801851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018520:	f7e7 fed2 	bl	80002c8 <__aeabi_dsub>
 8018524:	4602      	mov	r2, r0
 8018526:	460b      	mov	r3, r1
 8018528:	a10d      	add	r1, pc, #52	; (adr r1, 8018560 <__ieee754_atan2+0x160>)
 801852a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801852e:	f7e7 fecb 	bl	80002c8 <__aeabi_dsub>
 8018532:	e786      	b.n	8018442 <__ieee754_atan2+0x42>
 8018534:	a10a      	add	r1, pc, #40	; (adr r1, 8018560 <__ieee754_atan2+0x160>)
 8018536:	e9d1 0100 	ldrd	r0, r1, [r1]
 801853a:	e782      	b.n	8018442 <__ieee754_atan2+0x42>
 801853c:	a10c      	add	r1, pc, #48	; (adr r1, 8018570 <__ieee754_atan2+0x170>)
 801853e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018542:	e77e      	b.n	8018442 <__ieee754_atan2+0x42>
 8018544:	2000      	movs	r0, #0
 8018546:	2100      	movs	r1, #0
 8018548:	e77b      	b.n	8018442 <__ieee754_atan2+0x42>
 801854a:	a107      	add	r1, pc, #28	; (adr r1, 8018568 <__ieee754_atan2+0x168>)
 801854c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018550:	e777      	b.n	8018442 <__ieee754_atan2+0x42>
 8018552:	bf00      	nop
 8018554:	f3af 8000 	nop.w
 8018558:	33145c07 	.word	0x33145c07
 801855c:	3ca1a626 	.word	0x3ca1a626
 8018560:	54442d18 	.word	0x54442d18
 8018564:	400921fb 	.word	0x400921fb
 8018568:	54442d18 	.word	0x54442d18
 801856c:	3ff921fb 	.word	0x3ff921fb
 8018570:	54442d18 	.word	0x54442d18
 8018574:	3fe921fb 	.word	0x3fe921fb
 8018578:	0801c908 	.word	0x0801c908
 801857c:	0801c920 	.word	0x0801c920
 8018580:	54442d18 	.word	0x54442d18
 8018584:	c00921fb 	.word	0xc00921fb
 8018588:	54442d18 	.word	0x54442d18
 801858c:	bff921fb 	.word	0xbff921fb
 8018590:	7ff00000 	.word	0x7ff00000

08018594 <__ieee754_fmod>:
 8018594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018598:	ec53 2b11 	vmov	r2, r3, d1
 801859c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80185a0:	ea5e 0402 	orrs.w	r4, lr, r2
 80185a4:	ec51 0b10 	vmov	r0, r1, d0
 80185a8:	ee11 7a10 	vmov	r7, s2
 80185ac:	ee11 ca10 	vmov	ip, s2
 80185b0:	461e      	mov	r6, r3
 80185b2:	d00d      	beq.n	80185d0 <__ieee754_fmod+0x3c>
 80185b4:	4c7a      	ldr	r4, [pc, #488]	; (80187a0 <__ieee754_fmod+0x20c>)
 80185b6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80185ba:	45a0      	cmp	r8, r4
 80185bc:	4689      	mov	r9, r1
 80185be:	dc07      	bgt.n	80185d0 <__ieee754_fmod+0x3c>
 80185c0:	4254      	negs	r4, r2
 80185c2:	4d78      	ldr	r5, [pc, #480]	; (80187a4 <__ieee754_fmod+0x210>)
 80185c4:	4314      	orrs	r4, r2
 80185c6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80185ca:	42ac      	cmp	r4, r5
 80185cc:	46ab      	mov	fp, r5
 80185ce:	d909      	bls.n	80185e4 <__ieee754_fmod+0x50>
 80185d0:	f7e8 f832 	bl	8000638 <__aeabi_dmul>
 80185d4:	4602      	mov	r2, r0
 80185d6:	460b      	mov	r3, r1
 80185d8:	f7e8 f958 	bl	800088c <__aeabi_ddiv>
 80185dc:	ec41 0b10 	vmov	d0, r0, r1
 80185e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e4:	45f0      	cmp	r8, lr
 80185e6:	ee10 aa10 	vmov	sl, s0
 80185ea:	ee10 4a10 	vmov	r4, s0
 80185ee:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80185f2:	dc0a      	bgt.n	801860a <__ieee754_fmod+0x76>
 80185f4:	dbf2      	blt.n	80185dc <__ieee754_fmod+0x48>
 80185f6:	4290      	cmp	r0, r2
 80185f8:	d3f0      	bcc.n	80185dc <__ieee754_fmod+0x48>
 80185fa:	d106      	bne.n	801860a <__ieee754_fmod+0x76>
 80185fc:	4a6a      	ldr	r2, [pc, #424]	; (80187a8 <__ieee754_fmod+0x214>)
 80185fe:	0fed      	lsrs	r5, r5, #31
 8018600:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8018604:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018608:	e7e8      	b.n	80185dc <__ieee754_fmod+0x48>
 801860a:	ea19 0f0b 	tst.w	r9, fp
 801860e:	d14a      	bne.n	80186a6 <__ieee754_fmod+0x112>
 8018610:	f1b8 0f00 	cmp.w	r8, #0
 8018614:	d13f      	bne.n	8018696 <__ieee754_fmod+0x102>
 8018616:	4965      	ldr	r1, [pc, #404]	; (80187ac <__ieee754_fmod+0x218>)
 8018618:	4653      	mov	r3, sl
 801861a:	2b00      	cmp	r3, #0
 801861c:	dc38      	bgt.n	8018690 <__ieee754_fmod+0xfc>
 801861e:	4b61      	ldr	r3, [pc, #388]	; (80187a4 <__ieee754_fmod+0x210>)
 8018620:	4033      	ands	r3, r6
 8018622:	2b00      	cmp	r3, #0
 8018624:	d14f      	bne.n	80186c6 <__ieee754_fmod+0x132>
 8018626:	f1be 0f00 	cmp.w	lr, #0
 801862a:	d144      	bne.n	80186b6 <__ieee754_fmod+0x122>
 801862c:	4a5f      	ldr	r2, [pc, #380]	; (80187ac <__ieee754_fmod+0x218>)
 801862e:	463b      	mov	r3, r7
 8018630:	2b00      	cmp	r3, #0
 8018632:	dc3d      	bgt.n	80186b0 <__ieee754_fmod+0x11c>
 8018634:	4b5e      	ldr	r3, [pc, #376]	; (80187b0 <__ieee754_fmod+0x21c>)
 8018636:	4299      	cmp	r1, r3
 8018638:	db4a      	blt.n	80186d0 <__ieee754_fmod+0x13c>
 801863a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801863e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018642:	485b      	ldr	r0, [pc, #364]	; (80187b0 <__ieee754_fmod+0x21c>)
 8018644:	4282      	cmp	r2, r0
 8018646:	db57      	blt.n	80186f8 <__ieee754_fmod+0x164>
 8018648:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801864c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8018650:	1a89      	subs	r1, r1, r2
 8018652:	1b98      	subs	r0, r3, r6
 8018654:	eba4 070c 	sub.w	r7, r4, ip
 8018658:	2900      	cmp	r1, #0
 801865a:	d164      	bne.n	8018726 <__ieee754_fmod+0x192>
 801865c:	4564      	cmp	r4, ip
 801865e:	bf38      	it	cc
 8018660:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8018664:	2800      	cmp	r0, #0
 8018666:	bfa4      	itt	ge
 8018668:	463c      	movge	r4, r7
 801866a:	4603      	movge	r3, r0
 801866c:	ea53 0104 	orrs.w	r1, r3, r4
 8018670:	d0c4      	beq.n	80185fc <__ieee754_fmod+0x68>
 8018672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018676:	db6b      	blt.n	8018750 <__ieee754_fmod+0x1bc>
 8018678:	494d      	ldr	r1, [pc, #308]	; (80187b0 <__ieee754_fmod+0x21c>)
 801867a:	428a      	cmp	r2, r1
 801867c:	db6e      	blt.n	801875c <__ieee754_fmod+0x1c8>
 801867e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018682:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8018686:	431d      	orrs	r5, r3
 8018688:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801868c:	4620      	mov	r0, r4
 801868e:	e7a5      	b.n	80185dc <__ieee754_fmod+0x48>
 8018690:	3901      	subs	r1, #1
 8018692:	005b      	lsls	r3, r3, #1
 8018694:	e7c1      	b.n	801861a <__ieee754_fmod+0x86>
 8018696:	4946      	ldr	r1, [pc, #280]	; (80187b0 <__ieee754_fmod+0x21c>)
 8018698:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801869c:	2b00      	cmp	r3, #0
 801869e:	ddbe      	ble.n	801861e <__ieee754_fmod+0x8a>
 80186a0:	3901      	subs	r1, #1
 80186a2:	005b      	lsls	r3, r3, #1
 80186a4:	e7fa      	b.n	801869c <__ieee754_fmod+0x108>
 80186a6:	ea4f 5128 	mov.w	r1, r8, asr #20
 80186aa:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80186ae:	e7b6      	b.n	801861e <__ieee754_fmod+0x8a>
 80186b0:	3a01      	subs	r2, #1
 80186b2:	005b      	lsls	r3, r3, #1
 80186b4:	e7bc      	b.n	8018630 <__ieee754_fmod+0x9c>
 80186b6:	4a3e      	ldr	r2, [pc, #248]	; (80187b0 <__ieee754_fmod+0x21c>)
 80186b8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80186bc:	2b00      	cmp	r3, #0
 80186be:	ddb9      	ble.n	8018634 <__ieee754_fmod+0xa0>
 80186c0:	3a01      	subs	r2, #1
 80186c2:	005b      	lsls	r3, r3, #1
 80186c4:	e7fa      	b.n	80186bc <__ieee754_fmod+0x128>
 80186c6:	ea4f 522e 	mov.w	r2, lr, asr #20
 80186ca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80186ce:	e7b1      	b.n	8018634 <__ieee754_fmod+0xa0>
 80186d0:	1a5c      	subs	r4, r3, r1
 80186d2:	2c1f      	cmp	r4, #31
 80186d4:	dc0a      	bgt.n	80186ec <__ieee754_fmod+0x158>
 80186d6:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80186da:	fa08 f804 	lsl.w	r8, r8, r4
 80186de:	fa2a f303 	lsr.w	r3, sl, r3
 80186e2:	ea43 0308 	orr.w	r3, r3, r8
 80186e6:	fa0a f404 	lsl.w	r4, sl, r4
 80186ea:	e7aa      	b.n	8018642 <__ieee754_fmod+0xae>
 80186ec:	4b31      	ldr	r3, [pc, #196]	; (80187b4 <__ieee754_fmod+0x220>)
 80186ee:	1a5b      	subs	r3, r3, r1
 80186f0:	fa0a f303 	lsl.w	r3, sl, r3
 80186f4:	2400      	movs	r4, #0
 80186f6:	e7a4      	b.n	8018642 <__ieee754_fmod+0xae>
 80186f8:	eba0 0c02 	sub.w	ip, r0, r2
 80186fc:	f1bc 0f1f 	cmp.w	ip, #31
 8018700:	dc0a      	bgt.n	8018718 <__ieee754_fmod+0x184>
 8018702:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8018706:	fa0e fe0c 	lsl.w	lr, lr, ip
 801870a:	fa27 f606 	lsr.w	r6, r7, r6
 801870e:	ea46 060e 	orr.w	r6, r6, lr
 8018712:	fa07 fc0c 	lsl.w	ip, r7, ip
 8018716:	e79b      	b.n	8018650 <__ieee754_fmod+0xbc>
 8018718:	4e26      	ldr	r6, [pc, #152]	; (80187b4 <__ieee754_fmod+0x220>)
 801871a:	1ab6      	subs	r6, r6, r2
 801871c:	fa07 f606 	lsl.w	r6, r7, r6
 8018720:	f04f 0c00 	mov.w	ip, #0
 8018724:	e794      	b.n	8018650 <__ieee754_fmod+0xbc>
 8018726:	4564      	cmp	r4, ip
 8018728:	bf38      	it	cc
 801872a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 801872e:	2800      	cmp	r0, #0
 8018730:	da05      	bge.n	801873e <__ieee754_fmod+0x1aa>
 8018732:	0fe0      	lsrs	r0, r4, #31
 8018734:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018738:	0064      	lsls	r4, r4, #1
 801873a:	3901      	subs	r1, #1
 801873c:	e789      	b.n	8018652 <__ieee754_fmod+0xbe>
 801873e:	ea50 0307 	orrs.w	r3, r0, r7
 8018742:	f43f af5b 	beq.w	80185fc <__ieee754_fmod+0x68>
 8018746:	0ffb      	lsrs	r3, r7, #31
 8018748:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801874c:	007c      	lsls	r4, r7, #1
 801874e:	e7f4      	b.n	801873a <__ieee754_fmod+0x1a6>
 8018750:	0fe1      	lsrs	r1, r4, #31
 8018752:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018756:	0064      	lsls	r4, r4, #1
 8018758:	3a01      	subs	r2, #1
 801875a:	e78a      	b.n	8018672 <__ieee754_fmod+0xde>
 801875c:	1a89      	subs	r1, r1, r2
 801875e:	2914      	cmp	r1, #20
 8018760:	dc0a      	bgt.n	8018778 <__ieee754_fmod+0x1e4>
 8018762:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018766:	fa03 f202 	lsl.w	r2, r3, r2
 801876a:	40cc      	lsrs	r4, r1
 801876c:	4322      	orrs	r2, r4
 801876e:	410b      	asrs	r3, r1
 8018770:	ea43 0105 	orr.w	r1, r3, r5
 8018774:	4610      	mov	r0, r2
 8018776:	e731      	b.n	80185dc <__ieee754_fmod+0x48>
 8018778:	291f      	cmp	r1, #31
 801877a:	dc07      	bgt.n	801878c <__ieee754_fmod+0x1f8>
 801877c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018780:	40cc      	lsrs	r4, r1
 8018782:	fa03 f202 	lsl.w	r2, r3, r2
 8018786:	4322      	orrs	r2, r4
 8018788:	462b      	mov	r3, r5
 801878a:	e7f1      	b.n	8018770 <__ieee754_fmod+0x1dc>
 801878c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8018790:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018794:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8018798:	32e2      	adds	r2, #226	; 0xe2
 801879a:	fa43 f202 	asr.w	r2, r3, r2
 801879e:	e7f3      	b.n	8018788 <__ieee754_fmod+0x1f4>
 80187a0:	7fefffff 	.word	0x7fefffff
 80187a4:	7ff00000 	.word	0x7ff00000
 80187a8:	0801c938 	.word	0x0801c938
 80187ac:	fffffbed 	.word	0xfffffbed
 80187b0:	fffffc02 	.word	0xfffffc02
 80187b4:	fffffbe2 	.word	0xfffffbe2

080187b8 <__ieee754_pow>:
 80187b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187bc:	ed2d 8b06 	vpush	{d8-d10}
 80187c0:	b08d      	sub	sp, #52	; 0x34
 80187c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80187c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80187ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80187ce:	ea56 0100 	orrs.w	r1, r6, r0
 80187d2:	ec53 2b10 	vmov	r2, r3, d0
 80187d6:	f000 84d1 	beq.w	801917c <__ieee754_pow+0x9c4>
 80187da:	497f      	ldr	r1, [pc, #508]	; (80189d8 <__ieee754_pow+0x220>)
 80187dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80187e0:	428c      	cmp	r4, r1
 80187e2:	ee10 8a10 	vmov	r8, s0
 80187e6:	4699      	mov	r9, r3
 80187e8:	dc09      	bgt.n	80187fe <__ieee754_pow+0x46>
 80187ea:	d103      	bne.n	80187f4 <__ieee754_pow+0x3c>
 80187ec:	b97a      	cbnz	r2, 801880e <__ieee754_pow+0x56>
 80187ee:	42a6      	cmp	r6, r4
 80187f0:	dd02      	ble.n	80187f8 <__ieee754_pow+0x40>
 80187f2:	e00c      	b.n	801880e <__ieee754_pow+0x56>
 80187f4:	428e      	cmp	r6, r1
 80187f6:	dc02      	bgt.n	80187fe <__ieee754_pow+0x46>
 80187f8:	428e      	cmp	r6, r1
 80187fa:	d110      	bne.n	801881e <__ieee754_pow+0x66>
 80187fc:	b178      	cbz	r0, 801881e <__ieee754_pow+0x66>
 80187fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018802:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018806:	ea54 0308 	orrs.w	r3, r4, r8
 801880a:	f000 84b7 	beq.w	801917c <__ieee754_pow+0x9c4>
 801880e:	4873      	ldr	r0, [pc, #460]	; (80189dc <__ieee754_pow+0x224>)
 8018810:	b00d      	add	sp, #52	; 0x34
 8018812:	ecbd 8b06 	vpop	{d8-d10}
 8018816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801881a:	f7fe bff9 	b.w	8017810 <nan>
 801881e:	f1b9 0f00 	cmp.w	r9, #0
 8018822:	da36      	bge.n	8018892 <__ieee754_pow+0xda>
 8018824:	496e      	ldr	r1, [pc, #440]	; (80189e0 <__ieee754_pow+0x228>)
 8018826:	428e      	cmp	r6, r1
 8018828:	dc51      	bgt.n	80188ce <__ieee754_pow+0x116>
 801882a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801882e:	428e      	cmp	r6, r1
 8018830:	f340 84af 	ble.w	8019192 <__ieee754_pow+0x9da>
 8018834:	1531      	asrs	r1, r6, #20
 8018836:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801883a:	2914      	cmp	r1, #20
 801883c:	dd0f      	ble.n	801885e <__ieee754_pow+0xa6>
 801883e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8018842:	fa20 fc01 	lsr.w	ip, r0, r1
 8018846:	fa0c f101 	lsl.w	r1, ip, r1
 801884a:	4281      	cmp	r1, r0
 801884c:	f040 84a1 	bne.w	8019192 <__ieee754_pow+0x9da>
 8018850:	f00c 0c01 	and.w	ip, ip, #1
 8018854:	f1cc 0102 	rsb	r1, ip, #2
 8018858:	9100      	str	r1, [sp, #0]
 801885a:	b180      	cbz	r0, 801887e <__ieee754_pow+0xc6>
 801885c:	e059      	b.n	8018912 <__ieee754_pow+0x15a>
 801885e:	2800      	cmp	r0, #0
 8018860:	d155      	bne.n	801890e <__ieee754_pow+0x156>
 8018862:	f1c1 0114 	rsb	r1, r1, #20
 8018866:	fa46 fc01 	asr.w	ip, r6, r1
 801886a:	fa0c f101 	lsl.w	r1, ip, r1
 801886e:	42b1      	cmp	r1, r6
 8018870:	f040 848c 	bne.w	801918c <__ieee754_pow+0x9d4>
 8018874:	f00c 0c01 	and.w	ip, ip, #1
 8018878:	f1cc 0102 	rsb	r1, ip, #2
 801887c:	9100      	str	r1, [sp, #0]
 801887e:	4959      	ldr	r1, [pc, #356]	; (80189e4 <__ieee754_pow+0x22c>)
 8018880:	428e      	cmp	r6, r1
 8018882:	d12d      	bne.n	80188e0 <__ieee754_pow+0x128>
 8018884:	2f00      	cmp	r7, #0
 8018886:	da79      	bge.n	801897c <__ieee754_pow+0x1c4>
 8018888:	4956      	ldr	r1, [pc, #344]	; (80189e4 <__ieee754_pow+0x22c>)
 801888a:	2000      	movs	r0, #0
 801888c:	f7e7 fffe 	bl	800088c <__aeabi_ddiv>
 8018890:	e016      	b.n	80188c0 <__ieee754_pow+0x108>
 8018892:	2100      	movs	r1, #0
 8018894:	9100      	str	r1, [sp, #0]
 8018896:	2800      	cmp	r0, #0
 8018898:	d13b      	bne.n	8018912 <__ieee754_pow+0x15a>
 801889a:	494f      	ldr	r1, [pc, #316]	; (80189d8 <__ieee754_pow+0x220>)
 801889c:	428e      	cmp	r6, r1
 801889e:	d1ee      	bne.n	801887e <__ieee754_pow+0xc6>
 80188a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80188a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80188a8:	ea53 0308 	orrs.w	r3, r3, r8
 80188ac:	f000 8466 	beq.w	801917c <__ieee754_pow+0x9c4>
 80188b0:	4b4d      	ldr	r3, [pc, #308]	; (80189e8 <__ieee754_pow+0x230>)
 80188b2:	429c      	cmp	r4, r3
 80188b4:	dd0d      	ble.n	80188d2 <__ieee754_pow+0x11a>
 80188b6:	2f00      	cmp	r7, #0
 80188b8:	f280 8464 	bge.w	8019184 <__ieee754_pow+0x9cc>
 80188bc:	2000      	movs	r0, #0
 80188be:	2100      	movs	r1, #0
 80188c0:	ec41 0b10 	vmov	d0, r0, r1
 80188c4:	b00d      	add	sp, #52	; 0x34
 80188c6:	ecbd 8b06 	vpop	{d8-d10}
 80188ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ce:	2102      	movs	r1, #2
 80188d0:	e7e0      	b.n	8018894 <__ieee754_pow+0xdc>
 80188d2:	2f00      	cmp	r7, #0
 80188d4:	daf2      	bge.n	80188bc <__ieee754_pow+0x104>
 80188d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80188da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80188de:	e7ef      	b.n	80188c0 <__ieee754_pow+0x108>
 80188e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80188e4:	d104      	bne.n	80188f0 <__ieee754_pow+0x138>
 80188e6:	4610      	mov	r0, r2
 80188e8:	4619      	mov	r1, r3
 80188ea:	f7e7 fea5 	bl	8000638 <__aeabi_dmul>
 80188ee:	e7e7      	b.n	80188c0 <__ieee754_pow+0x108>
 80188f0:	493e      	ldr	r1, [pc, #248]	; (80189ec <__ieee754_pow+0x234>)
 80188f2:	428f      	cmp	r7, r1
 80188f4:	d10d      	bne.n	8018912 <__ieee754_pow+0x15a>
 80188f6:	f1b9 0f00 	cmp.w	r9, #0
 80188fa:	db0a      	blt.n	8018912 <__ieee754_pow+0x15a>
 80188fc:	ec43 2b10 	vmov	d0, r2, r3
 8018900:	b00d      	add	sp, #52	; 0x34
 8018902:	ecbd 8b06 	vpop	{d8-d10}
 8018906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801890a:	f000 be83 	b.w	8019614 <__ieee754_sqrt>
 801890e:	2100      	movs	r1, #0
 8018910:	9100      	str	r1, [sp, #0]
 8018912:	ec43 2b10 	vmov	d0, r2, r3
 8018916:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801891a:	f001 fd99 	bl	801a450 <fabs>
 801891e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018922:	ec51 0b10 	vmov	r0, r1, d0
 8018926:	f1b8 0f00 	cmp.w	r8, #0
 801892a:	d12a      	bne.n	8018982 <__ieee754_pow+0x1ca>
 801892c:	b12c      	cbz	r4, 801893a <__ieee754_pow+0x182>
 801892e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80189e4 <__ieee754_pow+0x22c>
 8018932:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8018936:	45e6      	cmp	lr, ip
 8018938:	d123      	bne.n	8018982 <__ieee754_pow+0x1ca>
 801893a:	2f00      	cmp	r7, #0
 801893c:	da05      	bge.n	801894a <__ieee754_pow+0x192>
 801893e:	4602      	mov	r2, r0
 8018940:	460b      	mov	r3, r1
 8018942:	2000      	movs	r0, #0
 8018944:	4927      	ldr	r1, [pc, #156]	; (80189e4 <__ieee754_pow+0x22c>)
 8018946:	f7e7 ffa1 	bl	800088c <__aeabi_ddiv>
 801894a:	f1b9 0f00 	cmp.w	r9, #0
 801894e:	dab7      	bge.n	80188c0 <__ieee754_pow+0x108>
 8018950:	9b00      	ldr	r3, [sp, #0]
 8018952:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018956:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801895a:	4323      	orrs	r3, r4
 801895c:	d108      	bne.n	8018970 <__ieee754_pow+0x1b8>
 801895e:	4602      	mov	r2, r0
 8018960:	460b      	mov	r3, r1
 8018962:	4610      	mov	r0, r2
 8018964:	4619      	mov	r1, r3
 8018966:	f7e7 fcaf 	bl	80002c8 <__aeabi_dsub>
 801896a:	4602      	mov	r2, r0
 801896c:	460b      	mov	r3, r1
 801896e:	e78d      	b.n	801888c <__ieee754_pow+0xd4>
 8018970:	9b00      	ldr	r3, [sp, #0]
 8018972:	2b01      	cmp	r3, #1
 8018974:	d1a4      	bne.n	80188c0 <__ieee754_pow+0x108>
 8018976:	4602      	mov	r2, r0
 8018978:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801897c:	4610      	mov	r0, r2
 801897e:	4619      	mov	r1, r3
 8018980:	e79e      	b.n	80188c0 <__ieee754_pow+0x108>
 8018982:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018986:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 801898a:	950a      	str	r5, [sp, #40]	; 0x28
 801898c:	9d00      	ldr	r5, [sp, #0]
 801898e:	46ac      	mov	ip, r5
 8018990:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018992:	ea5c 0505 	orrs.w	r5, ip, r5
 8018996:	d0e4      	beq.n	8018962 <__ieee754_pow+0x1aa>
 8018998:	4b15      	ldr	r3, [pc, #84]	; (80189f0 <__ieee754_pow+0x238>)
 801899a:	429e      	cmp	r6, r3
 801899c:	f340 80fc 	ble.w	8018b98 <__ieee754_pow+0x3e0>
 80189a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80189a4:	429e      	cmp	r6, r3
 80189a6:	4b10      	ldr	r3, [pc, #64]	; (80189e8 <__ieee754_pow+0x230>)
 80189a8:	dd07      	ble.n	80189ba <__ieee754_pow+0x202>
 80189aa:	429c      	cmp	r4, r3
 80189ac:	dc0a      	bgt.n	80189c4 <__ieee754_pow+0x20c>
 80189ae:	2f00      	cmp	r7, #0
 80189b0:	da84      	bge.n	80188bc <__ieee754_pow+0x104>
 80189b2:	a307      	add	r3, pc, #28	; (adr r3, 80189d0 <__ieee754_pow+0x218>)
 80189b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b8:	e795      	b.n	80188e6 <__ieee754_pow+0x12e>
 80189ba:	429c      	cmp	r4, r3
 80189bc:	dbf7      	blt.n	80189ae <__ieee754_pow+0x1f6>
 80189be:	4b09      	ldr	r3, [pc, #36]	; (80189e4 <__ieee754_pow+0x22c>)
 80189c0:	429c      	cmp	r4, r3
 80189c2:	dd17      	ble.n	80189f4 <__ieee754_pow+0x23c>
 80189c4:	2f00      	cmp	r7, #0
 80189c6:	dcf4      	bgt.n	80189b2 <__ieee754_pow+0x1fa>
 80189c8:	e778      	b.n	80188bc <__ieee754_pow+0x104>
 80189ca:	bf00      	nop
 80189cc:	f3af 8000 	nop.w
 80189d0:	8800759c 	.word	0x8800759c
 80189d4:	7e37e43c 	.word	0x7e37e43c
 80189d8:	7ff00000 	.word	0x7ff00000
 80189dc:	0801c900 	.word	0x0801c900
 80189e0:	433fffff 	.word	0x433fffff
 80189e4:	3ff00000 	.word	0x3ff00000
 80189e8:	3fefffff 	.word	0x3fefffff
 80189ec:	3fe00000 	.word	0x3fe00000
 80189f0:	41e00000 	.word	0x41e00000
 80189f4:	4b64      	ldr	r3, [pc, #400]	; (8018b88 <__ieee754_pow+0x3d0>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	f7e7 fc66 	bl	80002c8 <__aeabi_dsub>
 80189fc:	a356      	add	r3, pc, #344	; (adr r3, 8018b58 <__ieee754_pow+0x3a0>)
 80189fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a02:	4604      	mov	r4, r0
 8018a04:	460d      	mov	r5, r1
 8018a06:	f7e7 fe17 	bl	8000638 <__aeabi_dmul>
 8018a0a:	a355      	add	r3, pc, #340	; (adr r3, 8018b60 <__ieee754_pow+0x3a8>)
 8018a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a10:	4606      	mov	r6, r0
 8018a12:	460f      	mov	r7, r1
 8018a14:	4620      	mov	r0, r4
 8018a16:	4629      	mov	r1, r5
 8018a18:	f7e7 fe0e 	bl	8000638 <__aeabi_dmul>
 8018a1c:	4b5b      	ldr	r3, [pc, #364]	; (8018b8c <__ieee754_pow+0x3d4>)
 8018a1e:	4682      	mov	sl, r0
 8018a20:	468b      	mov	fp, r1
 8018a22:	2200      	movs	r2, #0
 8018a24:	4620      	mov	r0, r4
 8018a26:	4629      	mov	r1, r5
 8018a28:	f7e7 fe06 	bl	8000638 <__aeabi_dmul>
 8018a2c:	4602      	mov	r2, r0
 8018a2e:	460b      	mov	r3, r1
 8018a30:	a14d      	add	r1, pc, #308	; (adr r1, 8018b68 <__ieee754_pow+0x3b0>)
 8018a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a36:	f7e7 fc47 	bl	80002c8 <__aeabi_dsub>
 8018a3a:	4622      	mov	r2, r4
 8018a3c:	462b      	mov	r3, r5
 8018a3e:	f7e7 fdfb 	bl	8000638 <__aeabi_dmul>
 8018a42:	4602      	mov	r2, r0
 8018a44:	460b      	mov	r3, r1
 8018a46:	2000      	movs	r0, #0
 8018a48:	4951      	ldr	r1, [pc, #324]	; (8018b90 <__ieee754_pow+0x3d8>)
 8018a4a:	f7e7 fc3d 	bl	80002c8 <__aeabi_dsub>
 8018a4e:	4622      	mov	r2, r4
 8018a50:	4680      	mov	r8, r0
 8018a52:	4689      	mov	r9, r1
 8018a54:	462b      	mov	r3, r5
 8018a56:	4620      	mov	r0, r4
 8018a58:	4629      	mov	r1, r5
 8018a5a:	f7e7 fded 	bl	8000638 <__aeabi_dmul>
 8018a5e:	4602      	mov	r2, r0
 8018a60:	460b      	mov	r3, r1
 8018a62:	4640      	mov	r0, r8
 8018a64:	4649      	mov	r1, r9
 8018a66:	f7e7 fde7 	bl	8000638 <__aeabi_dmul>
 8018a6a:	a341      	add	r3, pc, #260	; (adr r3, 8018b70 <__ieee754_pow+0x3b8>)
 8018a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a70:	f7e7 fde2 	bl	8000638 <__aeabi_dmul>
 8018a74:	4602      	mov	r2, r0
 8018a76:	460b      	mov	r3, r1
 8018a78:	4650      	mov	r0, sl
 8018a7a:	4659      	mov	r1, fp
 8018a7c:	f7e7 fc24 	bl	80002c8 <__aeabi_dsub>
 8018a80:	4602      	mov	r2, r0
 8018a82:	460b      	mov	r3, r1
 8018a84:	4680      	mov	r8, r0
 8018a86:	4689      	mov	r9, r1
 8018a88:	4630      	mov	r0, r6
 8018a8a:	4639      	mov	r1, r7
 8018a8c:	f7e7 fc1e 	bl	80002cc <__adddf3>
 8018a90:	2400      	movs	r4, #0
 8018a92:	4632      	mov	r2, r6
 8018a94:	463b      	mov	r3, r7
 8018a96:	4620      	mov	r0, r4
 8018a98:	460d      	mov	r5, r1
 8018a9a:	f7e7 fc15 	bl	80002c8 <__aeabi_dsub>
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	460b      	mov	r3, r1
 8018aa2:	4640      	mov	r0, r8
 8018aa4:	4649      	mov	r1, r9
 8018aa6:	f7e7 fc0f 	bl	80002c8 <__aeabi_dsub>
 8018aaa:	9b00      	ldr	r3, [sp, #0]
 8018aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018aae:	3b01      	subs	r3, #1
 8018ab0:	4313      	orrs	r3, r2
 8018ab2:	4682      	mov	sl, r0
 8018ab4:	468b      	mov	fp, r1
 8018ab6:	f040 81f1 	bne.w	8018e9c <__ieee754_pow+0x6e4>
 8018aba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018b78 <__ieee754_pow+0x3c0>
 8018abe:	eeb0 8a47 	vmov.f32	s16, s14
 8018ac2:	eef0 8a67 	vmov.f32	s17, s15
 8018ac6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018aca:	2600      	movs	r6, #0
 8018acc:	4632      	mov	r2, r6
 8018ace:	463b      	mov	r3, r7
 8018ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ad4:	f7e7 fbf8 	bl	80002c8 <__aeabi_dsub>
 8018ad8:	4622      	mov	r2, r4
 8018ada:	462b      	mov	r3, r5
 8018adc:	f7e7 fdac 	bl	8000638 <__aeabi_dmul>
 8018ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ae4:	4680      	mov	r8, r0
 8018ae6:	4689      	mov	r9, r1
 8018ae8:	4650      	mov	r0, sl
 8018aea:	4659      	mov	r1, fp
 8018aec:	f7e7 fda4 	bl	8000638 <__aeabi_dmul>
 8018af0:	4602      	mov	r2, r0
 8018af2:	460b      	mov	r3, r1
 8018af4:	4640      	mov	r0, r8
 8018af6:	4649      	mov	r1, r9
 8018af8:	f7e7 fbe8 	bl	80002cc <__adddf3>
 8018afc:	4632      	mov	r2, r6
 8018afe:	463b      	mov	r3, r7
 8018b00:	4680      	mov	r8, r0
 8018b02:	4689      	mov	r9, r1
 8018b04:	4620      	mov	r0, r4
 8018b06:	4629      	mov	r1, r5
 8018b08:	f7e7 fd96 	bl	8000638 <__aeabi_dmul>
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	4604      	mov	r4, r0
 8018b10:	460d      	mov	r5, r1
 8018b12:	4602      	mov	r2, r0
 8018b14:	4649      	mov	r1, r9
 8018b16:	4640      	mov	r0, r8
 8018b18:	f7e7 fbd8 	bl	80002cc <__adddf3>
 8018b1c:	4b1d      	ldr	r3, [pc, #116]	; (8018b94 <__ieee754_pow+0x3dc>)
 8018b1e:	4299      	cmp	r1, r3
 8018b20:	ec45 4b19 	vmov	d9, r4, r5
 8018b24:	4606      	mov	r6, r0
 8018b26:	460f      	mov	r7, r1
 8018b28:	468b      	mov	fp, r1
 8018b2a:	f340 82fe 	ble.w	801912a <__ieee754_pow+0x972>
 8018b2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018b32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018b36:	4303      	orrs	r3, r0
 8018b38:	f000 81f0 	beq.w	8018f1c <__ieee754_pow+0x764>
 8018b3c:	a310      	add	r3, pc, #64	; (adr r3, 8018b80 <__ieee754_pow+0x3c8>)
 8018b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b42:	ec51 0b18 	vmov	r0, r1, d8
 8018b46:	f7e7 fd77 	bl	8000638 <__aeabi_dmul>
 8018b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8018b80 <__ieee754_pow+0x3c8>)
 8018b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b50:	e6cb      	b.n	80188ea <__ieee754_pow+0x132>
 8018b52:	bf00      	nop
 8018b54:	f3af 8000 	nop.w
 8018b58:	60000000 	.word	0x60000000
 8018b5c:	3ff71547 	.word	0x3ff71547
 8018b60:	f85ddf44 	.word	0xf85ddf44
 8018b64:	3e54ae0b 	.word	0x3e54ae0b
 8018b68:	55555555 	.word	0x55555555
 8018b6c:	3fd55555 	.word	0x3fd55555
 8018b70:	652b82fe 	.word	0x652b82fe
 8018b74:	3ff71547 	.word	0x3ff71547
 8018b78:	00000000 	.word	0x00000000
 8018b7c:	bff00000 	.word	0xbff00000
 8018b80:	8800759c 	.word	0x8800759c
 8018b84:	7e37e43c 	.word	0x7e37e43c
 8018b88:	3ff00000 	.word	0x3ff00000
 8018b8c:	3fd00000 	.word	0x3fd00000
 8018b90:	3fe00000 	.word	0x3fe00000
 8018b94:	408fffff 	.word	0x408fffff
 8018b98:	4bd7      	ldr	r3, [pc, #860]	; (8018ef8 <__ieee754_pow+0x740>)
 8018b9a:	ea03 0309 	and.w	r3, r3, r9
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	b92b      	cbnz	r3, 8018bae <__ieee754_pow+0x3f6>
 8018ba2:	4bd6      	ldr	r3, [pc, #856]	; (8018efc <__ieee754_pow+0x744>)
 8018ba4:	f7e7 fd48 	bl	8000638 <__aeabi_dmul>
 8018ba8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018bac:	460c      	mov	r4, r1
 8018bae:	1523      	asrs	r3, r4, #20
 8018bb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018bb4:	4413      	add	r3, r2
 8018bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8018bb8:	4bd1      	ldr	r3, [pc, #836]	; (8018f00 <__ieee754_pow+0x748>)
 8018bba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018bbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018bc2:	429c      	cmp	r4, r3
 8018bc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018bc8:	dd08      	ble.n	8018bdc <__ieee754_pow+0x424>
 8018bca:	4bce      	ldr	r3, [pc, #824]	; (8018f04 <__ieee754_pow+0x74c>)
 8018bcc:	429c      	cmp	r4, r3
 8018bce:	f340 8163 	ble.w	8018e98 <__ieee754_pow+0x6e0>
 8018bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8018bd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018bdc:	2400      	movs	r4, #0
 8018bde:	00e3      	lsls	r3, r4, #3
 8018be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018be2:	4bc9      	ldr	r3, [pc, #804]	; (8018f08 <__ieee754_pow+0x750>)
 8018be4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018be8:	ed93 7b00 	vldr	d7, [r3]
 8018bec:	4629      	mov	r1, r5
 8018bee:	ec53 2b17 	vmov	r2, r3, d7
 8018bf2:	eeb0 8a47 	vmov.f32	s16, s14
 8018bf6:	eef0 8a67 	vmov.f32	s17, s15
 8018bfa:	4682      	mov	sl, r0
 8018bfc:	f7e7 fb64 	bl	80002c8 <__aeabi_dsub>
 8018c00:	4652      	mov	r2, sl
 8018c02:	4606      	mov	r6, r0
 8018c04:	460f      	mov	r7, r1
 8018c06:	462b      	mov	r3, r5
 8018c08:	ec51 0b18 	vmov	r0, r1, d8
 8018c0c:	f7e7 fb5e 	bl	80002cc <__adddf3>
 8018c10:	4602      	mov	r2, r0
 8018c12:	460b      	mov	r3, r1
 8018c14:	2000      	movs	r0, #0
 8018c16:	49bd      	ldr	r1, [pc, #756]	; (8018f0c <__ieee754_pow+0x754>)
 8018c18:	f7e7 fe38 	bl	800088c <__aeabi_ddiv>
 8018c1c:	ec41 0b19 	vmov	d9, r0, r1
 8018c20:	4602      	mov	r2, r0
 8018c22:	460b      	mov	r3, r1
 8018c24:	4630      	mov	r0, r6
 8018c26:	4639      	mov	r1, r7
 8018c28:	f7e7 fd06 	bl	8000638 <__aeabi_dmul>
 8018c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018c30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018c38:	2300      	movs	r3, #0
 8018c3a:	9304      	str	r3, [sp, #16]
 8018c3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018c40:	46ab      	mov	fp, r5
 8018c42:	106d      	asrs	r5, r5, #1
 8018c44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018c48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018c4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018c50:	2200      	movs	r2, #0
 8018c52:	4640      	mov	r0, r8
 8018c54:	4649      	mov	r1, r9
 8018c56:	4614      	mov	r4, r2
 8018c58:	461d      	mov	r5, r3
 8018c5a:	f7e7 fced 	bl	8000638 <__aeabi_dmul>
 8018c5e:	4602      	mov	r2, r0
 8018c60:	460b      	mov	r3, r1
 8018c62:	4630      	mov	r0, r6
 8018c64:	4639      	mov	r1, r7
 8018c66:	f7e7 fb2f 	bl	80002c8 <__aeabi_dsub>
 8018c6a:	ec53 2b18 	vmov	r2, r3, d8
 8018c6e:	4606      	mov	r6, r0
 8018c70:	460f      	mov	r7, r1
 8018c72:	4620      	mov	r0, r4
 8018c74:	4629      	mov	r1, r5
 8018c76:	f7e7 fb27 	bl	80002c8 <__aeabi_dsub>
 8018c7a:	4602      	mov	r2, r0
 8018c7c:	460b      	mov	r3, r1
 8018c7e:	4650      	mov	r0, sl
 8018c80:	4659      	mov	r1, fp
 8018c82:	f7e7 fb21 	bl	80002c8 <__aeabi_dsub>
 8018c86:	4642      	mov	r2, r8
 8018c88:	464b      	mov	r3, r9
 8018c8a:	f7e7 fcd5 	bl	8000638 <__aeabi_dmul>
 8018c8e:	4602      	mov	r2, r0
 8018c90:	460b      	mov	r3, r1
 8018c92:	4630      	mov	r0, r6
 8018c94:	4639      	mov	r1, r7
 8018c96:	f7e7 fb17 	bl	80002c8 <__aeabi_dsub>
 8018c9a:	ec53 2b19 	vmov	r2, r3, d9
 8018c9e:	f7e7 fccb 	bl	8000638 <__aeabi_dmul>
 8018ca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018ca6:	ec41 0b18 	vmov	d8, r0, r1
 8018caa:	4610      	mov	r0, r2
 8018cac:	4619      	mov	r1, r3
 8018cae:	f7e7 fcc3 	bl	8000638 <__aeabi_dmul>
 8018cb2:	a37d      	add	r3, pc, #500	; (adr r3, 8018ea8 <__ieee754_pow+0x6f0>)
 8018cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cb8:	4604      	mov	r4, r0
 8018cba:	460d      	mov	r5, r1
 8018cbc:	f7e7 fcbc 	bl	8000638 <__aeabi_dmul>
 8018cc0:	a37b      	add	r3, pc, #492	; (adr r3, 8018eb0 <__ieee754_pow+0x6f8>)
 8018cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc6:	f7e7 fb01 	bl	80002cc <__adddf3>
 8018cca:	4622      	mov	r2, r4
 8018ccc:	462b      	mov	r3, r5
 8018cce:	f7e7 fcb3 	bl	8000638 <__aeabi_dmul>
 8018cd2:	a379      	add	r3, pc, #484	; (adr r3, 8018eb8 <__ieee754_pow+0x700>)
 8018cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cd8:	f7e7 faf8 	bl	80002cc <__adddf3>
 8018cdc:	4622      	mov	r2, r4
 8018cde:	462b      	mov	r3, r5
 8018ce0:	f7e7 fcaa 	bl	8000638 <__aeabi_dmul>
 8018ce4:	a376      	add	r3, pc, #472	; (adr r3, 8018ec0 <__ieee754_pow+0x708>)
 8018ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cea:	f7e7 faef 	bl	80002cc <__adddf3>
 8018cee:	4622      	mov	r2, r4
 8018cf0:	462b      	mov	r3, r5
 8018cf2:	f7e7 fca1 	bl	8000638 <__aeabi_dmul>
 8018cf6:	a374      	add	r3, pc, #464	; (adr r3, 8018ec8 <__ieee754_pow+0x710>)
 8018cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cfc:	f7e7 fae6 	bl	80002cc <__adddf3>
 8018d00:	4622      	mov	r2, r4
 8018d02:	462b      	mov	r3, r5
 8018d04:	f7e7 fc98 	bl	8000638 <__aeabi_dmul>
 8018d08:	a371      	add	r3, pc, #452	; (adr r3, 8018ed0 <__ieee754_pow+0x718>)
 8018d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0e:	f7e7 fadd 	bl	80002cc <__adddf3>
 8018d12:	4622      	mov	r2, r4
 8018d14:	4606      	mov	r6, r0
 8018d16:	460f      	mov	r7, r1
 8018d18:	462b      	mov	r3, r5
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	4629      	mov	r1, r5
 8018d1e:	f7e7 fc8b 	bl	8000638 <__aeabi_dmul>
 8018d22:	4602      	mov	r2, r0
 8018d24:	460b      	mov	r3, r1
 8018d26:	4630      	mov	r0, r6
 8018d28:	4639      	mov	r1, r7
 8018d2a:	f7e7 fc85 	bl	8000638 <__aeabi_dmul>
 8018d2e:	4642      	mov	r2, r8
 8018d30:	4604      	mov	r4, r0
 8018d32:	460d      	mov	r5, r1
 8018d34:	464b      	mov	r3, r9
 8018d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018d3a:	f7e7 fac7 	bl	80002cc <__adddf3>
 8018d3e:	ec53 2b18 	vmov	r2, r3, d8
 8018d42:	f7e7 fc79 	bl	8000638 <__aeabi_dmul>
 8018d46:	4622      	mov	r2, r4
 8018d48:	462b      	mov	r3, r5
 8018d4a:	f7e7 fabf 	bl	80002cc <__adddf3>
 8018d4e:	4642      	mov	r2, r8
 8018d50:	4682      	mov	sl, r0
 8018d52:	468b      	mov	fp, r1
 8018d54:	464b      	mov	r3, r9
 8018d56:	4640      	mov	r0, r8
 8018d58:	4649      	mov	r1, r9
 8018d5a:	f7e7 fc6d 	bl	8000638 <__aeabi_dmul>
 8018d5e:	4b6c      	ldr	r3, [pc, #432]	; (8018f10 <__ieee754_pow+0x758>)
 8018d60:	2200      	movs	r2, #0
 8018d62:	4606      	mov	r6, r0
 8018d64:	460f      	mov	r7, r1
 8018d66:	f7e7 fab1 	bl	80002cc <__adddf3>
 8018d6a:	4652      	mov	r2, sl
 8018d6c:	465b      	mov	r3, fp
 8018d6e:	f7e7 faad 	bl	80002cc <__adddf3>
 8018d72:	9c04      	ldr	r4, [sp, #16]
 8018d74:	460d      	mov	r5, r1
 8018d76:	4622      	mov	r2, r4
 8018d78:	460b      	mov	r3, r1
 8018d7a:	4640      	mov	r0, r8
 8018d7c:	4649      	mov	r1, r9
 8018d7e:	f7e7 fc5b 	bl	8000638 <__aeabi_dmul>
 8018d82:	4b63      	ldr	r3, [pc, #396]	; (8018f10 <__ieee754_pow+0x758>)
 8018d84:	4680      	mov	r8, r0
 8018d86:	4689      	mov	r9, r1
 8018d88:	2200      	movs	r2, #0
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	4629      	mov	r1, r5
 8018d8e:	f7e7 fa9b 	bl	80002c8 <__aeabi_dsub>
 8018d92:	4632      	mov	r2, r6
 8018d94:	463b      	mov	r3, r7
 8018d96:	f7e7 fa97 	bl	80002c8 <__aeabi_dsub>
 8018d9a:	4602      	mov	r2, r0
 8018d9c:	460b      	mov	r3, r1
 8018d9e:	4650      	mov	r0, sl
 8018da0:	4659      	mov	r1, fp
 8018da2:	f7e7 fa91 	bl	80002c8 <__aeabi_dsub>
 8018da6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018daa:	f7e7 fc45 	bl	8000638 <__aeabi_dmul>
 8018dae:	4622      	mov	r2, r4
 8018db0:	4606      	mov	r6, r0
 8018db2:	460f      	mov	r7, r1
 8018db4:	462b      	mov	r3, r5
 8018db6:	ec51 0b18 	vmov	r0, r1, d8
 8018dba:	f7e7 fc3d 	bl	8000638 <__aeabi_dmul>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	4630      	mov	r0, r6
 8018dc4:	4639      	mov	r1, r7
 8018dc6:	f7e7 fa81 	bl	80002cc <__adddf3>
 8018dca:	4606      	mov	r6, r0
 8018dcc:	460f      	mov	r7, r1
 8018dce:	4602      	mov	r2, r0
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	4640      	mov	r0, r8
 8018dd4:	4649      	mov	r1, r9
 8018dd6:	f7e7 fa79 	bl	80002cc <__adddf3>
 8018dda:	9c04      	ldr	r4, [sp, #16]
 8018ddc:	a33e      	add	r3, pc, #248	; (adr r3, 8018ed8 <__ieee754_pow+0x720>)
 8018dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de2:	4620      	mov	r0, r4
 8018de4:	460d      	mov	r5, r1
 8018de6:	f7e7 fc27 	bl	8000638 <__aeabi_dmul>
 8018dea:	4642      	mov	r2, r8
 8018dec:	ec41 0b18 	vmov	d8, r0, r1
 8018df0:	464b      	mov	r3, r9
 8018df2:	4620      	mov	r0, r4
 8018df4:	4629      	mov	r1, r5
 8018df6:	f7e7 fa67 	bl	80002c8 <__aeabi_dsub>
 8018dfa:	4602      	mov	r2, r0
 8018dfc:	460b      	mov	r3, r1
 8018dfe:	4630      	mov	r0, r6
 8018e00:	4639      	mov	r1, r7
 8018e02:	f7e7 fa61 	bl	80002c8 <__aeabi_dsub>
 8018e06:	a336      	add	r3, pc, #216	; (adr r3, 8018ee0 <__ieee754_pow+0x728>)
 8018e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e0c:	f7e7 fc14 	bl	8000638 <__aeabi_dmul>
 8018e10:	a335      	add	r3, pc, #212	; (adr r3, 8018ee8 <__ieee754_pow+0x730>)
 8018e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e16:	4606      	mov	r6, r0
 8018e18:	460f      	mov	r7, r1
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	4629      	mov	r1, r5
 8018e1e:	f7e7 fc0b 	bl	8000638 <__aeabi_dmul>
 8018e22:	4602      	mov	r2, r0
 8018e24:	460b      	mov	r3, r1
 8018e26:	4630      	mov	r0, r6
 8018e28:	4639      	mov	r1, r7
 8018e2a:	f7e7 fa4f 	bl	80002cc <__adddf3>
 8018e2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018e30:	4b38      	ldr	r3, [pc, #224]	; (8018f14 <__ieee754_pow+0x75c>)
 8018e32:	4413      	add	r3, r2
 8018e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e38:	f7e7 fa48 	bl	80002cc <__adddf3>
 8018e3c:	4682      	mov	sl, r0
 8018e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e40:	468b      	mov	fp, r1
 8018e42:	f7e7 fb8f 	bl	8000564 <__aeabi_i2d>
 8018e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018e48:	4b33      	ldr	r3, [pc, #204]	; (8018f18 <__ieee754_pow+0x760>)
 8018e4a:	4413      	add	r3, r2
 8018e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018e50:	4606      	mov	r6, r0
 8018e52:	460f      	mov	r7, r1
 8018e54:	4652      	mov	r2, sl
 8018e56:	465b      	mov	r3, fp
 8018e58:	ec51 0b18 	vmov	r0, r1, d8
 8018e5c:	f7e7 fa36 	bl	80002cc <__adddf3>
 8018e60:	4642      	mov	r2, r8
 8018e62:	464b      	mov	r3, r9
 8018e64:	f7e7 fa32 	bl	80002cc <__adddf3>
 8018e68:	4632      	mov	r2, r6
 8018e6a:	463b      	mov	r3, r7
 8018e6c:	f7e7 fa2e 	bl	80002cc <__adddf3>
 8018e70:	9c04      	ldr	r4, [sp, #16]
 8018e72:	4632      	mov	r2, r6
 8018e74:	463b      	mov	r3, r7
 8018e76:	4620      	mov	r0, r4
 8018e78:	460d      	mov	r5, r1
 8018e7a:	f7e7 fa25 	bl	80002c8 <__aeabi_dsub>
 8018e7e:	4642      	mov	r2, r8
 8018e80:	464b      	mov	r3, r9
 8018e82:	f7e7 fa21 	bl	80002c8 <__aeabi_dsub>
 8018e86:	ec53 2b18 	vmov	r2, r3, d8
 8018e8a:	f7e7 fa1d 	bl	80002c8 <__aeabi_dsub>
 8018e8e:	4602      	mov	r2, r0
 8018e90:	460b      	mov	r3, r1
 8018e92:	4650      	mov	r0, sl
 8018e94:	4659      	mov	r1, fp
 8018e96:	e606      	b.n	8018aa6 <__ieee754_pow+0x2ee>
 8018e98:	2401      	movs	r4, #1
 8018e9a:	e6a0      	b.n	8018bde <__ieee754_pow+0x426>
 8018e9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018ef0 <__ieee754_pow+0x738>
 8018ea0:	e60d      	b.n	8018abe <__ieee754_pow+0x306>
 8018ea2:	bf00      	nop
 8018ea4:	f3af 8000 	nop.w
 8018ea8:	4a454eef 	.word	0x4a454eef
 8018eac:	3fca7e28 	.word	0x3fca7e28
 8018eb0:	93c9db65 	.word	0x93c9db65
 8018eb4:	3fcd864a 	.word	0x3fcd864a
 8018eb8:	a91d4101 	.word	0xa91d4101
 8018ebc:	3fd17460 	.word	0x3fd17460
 8018ec0:	518f264d 	.word	0x518f264d
 8018ec4:	3fd55555 	.word	0x3fd55555
 8018ec8:	db6fabff 	.word	0xdb6fabff
 8018ecc:	3fdb6db6 	.word	0x3fdb6db6
 8018ed0:	33333303 	.word	0x33333303
 8018ed4:	3fe33333 	.word	0x3fe33333
 8018ed8:	e0000000 	.word	0xe0000000
 8018edc:	3feec709 	.word	0x3feec709
 8018ee0:	dc3a03fd 	.word	0xdc3a03fd
 8018ee4:	3feec709 	.word	0x3feec709
 8018ee8:	145b01f5 	.word	0x145b01f5
 8018eec:	be3e2fe0 	.word	0xbe3e2fe0
 8018ef0:	00000000 	.word	0x00000000
 8018ef4:	3ff00000 	.word	0x3ff00000
 8018ef8:	7ff00000 	.word	0x7ff00000
 8018efc:	43400000 	.word	0x43400000
 8018f00:	0003988e 	.word	0x0003988e
 8018f04:	000bb679 	.word	0x000bb679
 8018f08:	0801c948 	.word	0x0801c948
 8018f0c:	3ff00000 	.word	0x3ff00000
 8018f10:	40080000 	.word	0x40080000
 8018f14:	0801c968 	.word	0x0801c968
 8018f18:	0801c958 	.word	0x0801c958
 8018f1c:	a3b5      	add	r3, pc, #724	; (adr r3, 80191f4 <__ieee754_pow+0xa3c>)
 8018f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f22:	4640      	mov	r0, r8
 8018f24:	4649      	mov	r1, r9
 8018f26:	f7e7 f9d1 	bl	80002cc <__adddf3>
 8018f2a:	4622      	mov	r2, r4
 8018f2c:	ec41 0b1a 	vmov	d10, r0, r1
 8018f30:	462b      	mov	r3, r5
 8018f32:	4630      	mov	r0, r6
 8018f34:	4639      	mov	r1, r7
 8018f36:	f7e7 f9c7 	bl	80002c8 <__aeabi_dsub>
 8018f3a:	4602      	mov	r2, r0
 8018f3c:	460b      	mov	r3, r1
 8018f3e:	ec51 0b1a 	vmov	r0, r1, d10
 8018f42:	f7e7 fe09 	bl	8000b58 <__aeabi_dcmpgt>
 8018f46:	2800      	cmp	r0, #0
 8018f48:	f47f adf8 	bne.w	8018b3c <__ieee754_pow+0x384>
 8018f4c:	4aa4      	ldr	r2, [pc, #656]	; (80191e0 <__ieee754_pow+0xa28>)
 8018f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018f52:	4293      	cmp	r3, r2
 8018f54:	f340 810b 	ble.w	801916e <__ieee754_pow+0x9b6>
 8018f58:	151b      	asrs	r3, r3, #20
 8018f5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018f5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018f62:	fa4a f303 	asr.w	r3, sl, r3
 8018f66:	445b      	add	r3, fp
 8018f68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018f6c:	4e9d      	ldr	r6, [pc, #628]	; (80191e4 <__ieee754_pow+0xa2c>)
 8018f6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018f72:	4116      	asrs	r6, r2
 8018f74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018f78:	2000      	movs	r0, #0
 8018f7a:	ea23 0106 	bic.w	r1, r3, r6
 8018f7e:	f1c2 0214 	rsb	r2, r2, #20
 8018f82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018f86:	fa4a fa02 	asr.w	sl, sl, r2
 8018f8a:	f1bb 0f00 	cmp.w	fp, #0
 8018f8e:	4602      	mov	r2, r0
 8018f90:	460b      	mov	r3, r1
 8018f92:	4620      	mov	r0, r4
 8018f94:	4629      	mov	r1, r5
 8018f96:	bfb8      	it	lt
 8018f98:	f1ca 0a00 	rsblt	sl, sl, #0
 8018f9c:	f7e7 f994 	bl	80002c8 <__aeabi_dsub>
 8018fa0:	ec41 0b19 	vmov	d9, r0, r1
 8018fa4:	4642      	mov	r2, r8
 8018fa6:	464b      	mov	r3, r9
 8018fa8:	ec51 0b19 	vmov	r0, r1, d9
 8018fac:	f7e7 f98e 	bl	80002cc <__adddf3>
 8018fb0:	2400      	movs	r4, #0
 8018fb2:	a379      	add	r3, pc, #484	; (adr r3, 8019198 <__ieee754_pow+0x9e0>)
 8018fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fb8:	4620      	mov	r0, r4
 8018fba:	460d      	mov	r5, r1
 8018fbc:	f7e7 fb3c 	bl	8000638 <__aeabi_dmul>
 8018fc0:	ec53 2b19 	vmov	r2, r3, d9
 8018fc4:	4606      	mov	r6, r0
 8018fc6:	460f      	mov	r7, r1
 8018fc8:	4620      	mov	r0, r4
 8018fca:	4629      	mov	r1, r5
 8018fcc:	f7e7 f97c 	bl	80002c8 <__aeabi_dsub>
 8018fd0:	4602      	mov	r2, r0
 8018fd2:	460b      	mov	r3, r1
 8018fd4:	4640      	mov	r0, r8
 8018fd6:	4649      	mov	r1, r9
 8018fd8:	f7e7 f976 	bl	80002c8 <__aeabi_dsub>
 8018fdc:	a370      	add	r3, pc, #448	; (adr r3, 80191a0 <__ieee754_pow+0x9e8>)
 8018fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fe2:	f7e7 fb29 	bl	8000638 <__aeabi_dmul>
 8018fe6:	a370      	add	r3, pc, #448	; (adr r3, 80191a8 <__ieee754_pow+0x9f0>)
 8018fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fec:	4680      	mov	r8, r0
 8018fee:	4689      	mov	r9, r1
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	4629      	mov	r1, r5
 8018ff4:	f7e7 fb20 	bl	8000638 <__aeabi_dmul>
 8018ff8:	4602      	mov	r2, r0
 8018ffa:	460b      	mov	r3, r1
 8018ffc:	4640      	mov	r0, r8
 8018ffe:	4649      	mov	r1, r9
 8019000:	f7e7 f964 	bl	80002cc <__adddf3>
 8019004:	4604      	mov	r4, r0
 8019006:	460d      	mov	r5, r1
 8019008:	4602      	mov	r2, r0
 801900a:	460b      	mov	r3, r1
 801900c:	4630      	mov	r0, r6
 801900e:	4639      	mov	r1, r7
 8019010:	f7e7 f95c 	bl	80002cc <__adddf3>
 8019014:	4632      	mov	r2, r6
 8019016:	463b      	mov	r3, r7
 8019018:	4680      	mov	r8, r0
 801901a:	4689      	mov	r9, r1
 801901c:	f7e7 f954 	bl	80002c8 <__aeabi_dsub>
 8019020:	4602      	mov	r2, r0
 8019022:	460b      	mov	r3, r1
 8019024:	4620      	mov	r0, r4
 8019026:	4629      	mov	r1, r5
 8019028:	f7e7 f94e 	bl	80002c8 <__aeabi_dsub>
 801902c:	4642      	mov	r2, r8
 801902e:	4606      	mov	r6, r0
 8019030:	460f      	mov	r7, r1
 8019032:	464b      	mov	r3, r9
 8019034:	4640      	mov	r0, r8
 8019036:	4649      	mov	r1, r9
 8019038:	f7e7 fafe 	bl	8000638 <__aeabi_dmul>
 801903c:	a35c      	add	r3, pc, #368	; (adr r3, 80191b0 <__ieee754_pow+0x9f8>)
 801903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019042:	4604      	mov	r4, r0
 8019044:	460d      	mov	r5, r1
 8019046:	f7e7 faf7 	bl	8000638 <__aeabi_dmul>
 801904a:	a35b      	add	r3, pc, #364	; (adr r3, 80191b8 <__ieee754_pow+0xa00>)
 801904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019050:	f7e7 f93a 	bl	80002c8 <__aeabi_dsub>
 8019054:	4622      	mov	r2, r4
 8019056:	462b      	mov	r3, r5
 8019058:	f7e7 faee 	bl	8000638 <__aeabi_dmul>
 801905c:	a358      	add	r3, pc, #352	; (adr r3, 80191c0 <__ieee754_pow+0xa08>)
 801905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019062:	f7e7 f933 	bl	80002cc <__adddf3>
 8019066:	4622      	mov	r2, r4
 8019068:	462b      	mov	r3, r5
 801906a:	f7e7 fae5 	bl	8000638 <__aeabi_dmul>
 801906e:	a356      	add	r3, pc, #344	; (adr r3, 80191c8 <__ieee754_pow+0xa10>)
 8019070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019074:	f7e7 f928 	bl	80002c8 <__aeabi_dsub>
 8019078:	4622      	mov	r2, r4
 801907a:	462b      	mov	r3, r5
 801907c:	f7e7 fadc 	bl	8000638 <__aeabi_dmul>
 8019080:	a353      	add	r3, pc, #332	; (adr r3, 80191d0 <__ieee754_pow+0xa18>)
 8019082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019086:	f7e7 f921 	bl	80002cc <__adddf3>
 801908a:	4622      	mov	r2, r4
 801908c:	462b      	mov	r3, r5
 801908e:	f7e7 fad3 	bl	8000638 <__aeabi_dmul>
 8019092:	4602      	mov	r2, r0
 8019094:	460b      	mov	r3, r1
 8019096:	4640      	mov	r0, r8
 8019098:	4649      	mov	r1, r9
 801909a:	f7e7 f915 	bl	80002c8 <__aeabi_dsub>
 801909e:	4604      	mov	r4, r0
 80190a0:	460d      	mov	r5, r1
 80190a2:	4602      	mov	r2, r0
 80190a4:	460b      	mov	r3, r1
 80190a6:	4640      	mov	r0, r8
 80190a8:	4649      	mov	r1, r9
 80190aa:	f7e7 fac5 	bl	8000638 <__aeabi_dmul>
 80190ae:	2200      	movs	r2, #0
 80190b0:	ec41 0b19 	vmov	d9, r0, r1
 80190b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80190b8:	4620      	mov	r0, r4
 80190ba:	4629      	mov	r1, r5
 80190bc:	f7e7 f904 	bl	80002c8 <__aeabi_dsub>
 80190c0:	4602      	mov	r2, r0
 80190c2:	460b      	mov	r3, r1
 80190c4:	ec51 0b19 	vmov	r0, r1, d9
 80190c8:	f7e7 fbe0 	bl	800088c <__aeabi_ddiv>
 80190cc:	4632      	mov	r2, r6
 80190ce:	4604      	mov	r4, r0
 80190d0:	460d      	mov	r5, r1
 80190d2:	463b      	mov	r3, r7
 80190d4:	4640      	mov	r0, r8
 80190d6:	4649      	mov	r1, r9
 80190d8:	f7e7 faae 	bl	8000638 <__aeabi_dmul>
 80190dc:	4632      	mov	r2, r6
 80190de:	463b      	mov	r3, r7
 80190e0:	f7e7 f8f4 	bl	80002cc <__adddf3>
 80190e4:	4602      	mov	r2, r0
 80190e6:	460b      	mov	r3, r1
 80190e8:	4620      	mov	r0, r4
 80190ea:	4629      	mov	r1, r5
 80190ec:	f7e7 f8ec 	bl	80002c8 <__aeabi_dsub>
 80190f0:	4642      	mov	r2, r8
 80190f2:	464b      	mov	r3, r9
 80190f4:	f7e7 f8e8 	bl	80002c8 <__aeabi_dsub>
 80190f8:	460b      	mov	r3, r1
 80190fa:	4602      	mov	r2, r0
 80190fc:	493a      	ldr	r1, [pc, #232]	; (80191e8 <__ieee754_pow+0xa30>)
 80190fe:	2000      	movs	r0, #0
 8019100:	f7e7 f8e2 	bl	80002c8 <__aeabi_dsub>
 8019104:	e9cd 0100 	strd	r0, r1, [sp]
 8019108:	9b01      	ldr	r3, [sp, #4]
 801910a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801910e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019112:	da2f      	bge.n	8019174 <__ieee754_pow+0x9bc>
 8019114:	4650      	mov	r0, sl
 8019116:	ed9d 0b00 	vldr	d0, [sp]
 801911a:	f001 fab9 	bl	801a690 <scalbn>
 801911e:	ec51 0b10 	vmov	r0, r1, d0
 8019122:	ec53 2b18 	vmov	r2, r3, d8
 8019126:	f7ff bbe0 	b.w	80188ea <__ieee754_pow+0x132>
 801912a:	4b30      	ldr	r3, [pc, #192]	; (80191ec <__ieee754_pow+0xa34>)
 801912c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019130:	429e      	cmp	r6, r3
 8019132:	f77f af0b 	ble.w	8018f4c <__ieee754_pow+0x794>
 8019136:	4b2e      	ldr	r3, [pc, #184]	; (80191f0 <__ieee754_pow+0xa38>)
 8019138:	440b      	add	r3, r1
 801913a:	4303      	orrs	r3, r0
 801913c:	d00b      	beq.n	8019156 <__ieee754_pow+0x99e>
 801913e:	a326      	add	r3, pc, #152	; (adr r3, 80191d8 <__ieee754_pow+0xa20>)
 8019140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019144:	ec51 0b18 	vmov	r0, r1, d8
 8019148:	f7e7 fa76 	bl	8000638 <__aeabi_dmul>
 801914c:	a322      	add	r3, pc, #136	; (adr r3, 80191d8 <__ieee754_pow+0xa20>)
 801914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019152:	f7ff bbca 	b.w	80188ea <__ieee754_pow+0x132>
 8019156:	4622      	mov	r2, r4
 8019158:	462b      	mov	r3, r5
 801915a:	f7e7 f8b5 	bl	80002c8 <__aeabi_dsub>
 801915e:	4642      	mov	r2, r8
 8019160:	464b      	mov	r3, r9
 8019162:	f7e7 fcef 	bl	8000b44 <__aeabi_dcmpge>
 8019166:	2800      	cmp	r0, #0
 8019168:	f43f aef0 	beq.w	8018f4c <__ieee754_pow+0x794>
 801916c:	e7e7      	b.n	801913e <__ieee754_pow+0x986>
 801916e:	f04f 0a00 	mov.w	sl, #0
 8019172:	e717      	b.n	8018fa4 <__ieee754_pow+0x7ec>
 8019174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019178:	4619      	mov	r1, r3
 801917a:	e7d2      	b.n	8019122 <__ieee754_pow+0x96a>
 801917c:	491a      	ldr	r1, [pc, #104]	; (80191e8 <__ieee754_pow+0xa30>)
 801917e:	2000      	movs	r0, #0
 8019180:	f7ff bb9e 	b.w	80188c0 <__ieee754_pow+0x108>
 8019184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019188:	f7ff bb9a 	b.w	80188c0 <__ieee754_pow+0x108>
 801918c:	9000      	str	r0, [sp, #0]
 801918e:	f7ff bb76 	b.w	801887e <__ieee754_pow+0xc6>
 8019192:	2100      	movs	r1, #0
 8019194:	f7ff bb60 	b.w	8018858 <__ieee754_pow+0xa0>
 8019198:	00000000 	.word	0x00000000
 801919c:	3fe62e43 	.word	0x3fe62e43
 80191a0:	fefa39ef 	.word	0xfefa39ef
 80191a4:	3fe62e42 	.word	0x3fe62e42
 80191a8:	0ca86c39 	.word	0x0ca86c39
 80191ac:	be205c61 	.word	0xbe205c61
 80191b0:	72bea4d0 	.word	0x72bea4d0
 80191b4:	3e663769 	.word	0x3e663769
 80191b8:	c5d26bf1 	.word	0xc5d26bf1
 80191bc:	3ebbbd41 	.word	0x3ebbbd41
 80191c0:	af25de2c 	.word	0xaf25de2c
 80191c4:	3f11566a 	.word	0x3f11566a
 80191c8:	16bebd93 	.word	0x16bebd93
 80191cc:	3f66c16c 	.word	0x3f66c16c
 80191d0:	5555553e 	.word	0x5555553e
 80191d4:	3fc55555 	.word	0x3fc55555
 80191d8:	c2f8f359 	.word	0xc2f8f359
 80191dc:	01a56e1f 	.word	0x01a56e1f
 80191e0:	3fe00000 	.word	0x3fe00000
 80191e4:	000fffff 	.word	0x000fffff
 80191e8:	3ff00000 	.word	0x3ff00000
 80191ec:	4090cbff 	.word	0x4090cbff
 80191f0:	3f6f3400 	.word	0x3f6f3400
 80191f4:	652b82fe 	.word	0x652b82fe
 80191f8:	3c971547 	.word	0x3c971547
 80191fc:	00000000 	.word	0x00000000

08019200 <__ieee754_rem_pio2>:
 8019200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019204:	ed2d 8b02 	vpush	{d8}
 8019208:	ec55 4b10 	vmov	r4, r5, d0
 801920c:	4bca      	ldr	r3, [pc, #808]	; (8019538 <__ieee754_rem_pio2+0x338>)
 801920e:	b08b      	sub	sp, #44	; 0x2c
 8019210:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8019214:	4598      	cmp	r8, r3
 8019216:	4682      	mov	sl, r0
 8019218:	9502      	str	r5, [sp, #8]
 801921a:	dc08      	bgt.n	801922e <__ieee754_rem_pio2+0x2e>
 801921c:	2200      	movs	r2, #0
 801921e:	2300      	movs	r3, #0
 8019220:	ed80 0b00 	vstr	d0, [r0]
 8019224:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019228:	f04f 0b00 	mov.w	fp, #0
 801922c:	e028      	b.n	8019280 <__ieee754_rem_pio2+0x80>
 801922e:	4bc3      	ldr	r3, [pc, #780]	; (801953c <__ieee754_rem_pio2+0x33c>)
 8019230:	4598      	cmp	r8, r3
 8019232:	dc78      	bgt.n	8019326 <__ieee754_rem_pio2+0x126>
 8019234:	9b02      	ldr	r3, [sp, #8]
 8019236:	4ec2      	ldr	r6, [pc, #776]	; (8019540 <__ieee754_rem_pio2+0x340>)
 8019238:	2b00      	cmp	r3, #0
 801923a:	ee10 0a10 	vmov	r0, s0
 801923e:	a3b0      	add	r3, pc, #704	; (adr r3, 8019500 <__ieee754_rem_pio2+0x300>)
 8019240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019244:	4629      	mov	r1, r5
 8019246:	dd39      	ble.n	80192bc <__ieee754_rem_pio2+0xbc>
 8019248:	f7e7 f83e 	bl	80002c8 <__aeabi_dsub>
 801924c:	45b0      	cmp	r8, r6
 801924e:	4604      	mov	r4, r0
 8019250:	460d      	mov	r5, r1
 8019252:	d01b      	beq.n	801928c <__ieee754_rem_pio2+0x8c>
 8019254:	a3ac      	add	r3, pc, #688	; (adr r3, 8019508 <__ieee754_rem_pio2+0x308>)
 8019256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801925a:	f7e7 f835 	bl	80002c8 <__aeabi_dsub>
 801925e:	4602      	mov	r2, r0
 8019260:	460b      	mov	r3, r1
 8019262:	e9ca 2300 	strd	r2, r3, [sl]
 8019266:	4620      	mov	r0, r4
 8019268:	4629      	mov	r1, r5
 801926a:	f7e7 f82d 	bl	80002c8 <__aeabi_dsub>
 801926e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019508 <__ieee754_rem_pio2+0x308>)
 8019270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019274:	f7e7 f828 	bl	80002c8 <__aeabi_dsub>
 8019278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801927c:	f04f 0b01 	mov.w	fp, #1
 8019280:	4658      	mov	r0, fp
 8019282:	b00b      	add	sp, #44	; 0x2c
 8019284:	ecbd 8b02 	vpop	{d8}
 8019288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801928c:	a3a0      	add	r3, pc, #640	; (adr r3, 8019510 <__ieee754_rem_pio2+0x310>)
 801928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019292:	f7e7 f819 	bl	80002c8 <__aeabi_dsub>
 8019296:	a3a0      	add	r3, pc, #640	; (adr r3, 8019518 <__ieee754_rem_pio2+0x318>)
 8019298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801929c:	4604      	mov	r4, r0
 801929e:	460d      	mov	r5, r1
 80192a0:	f7e7 f812 	bl	80002c8 <__aeabi_dsub>
 80192a4:	4602      	mov	r2, r0
 80192a6:	460b      	mov	r3, r1
 80192a8:	e9ca 2300 	strd	r2, r3, [sl]
 80192ac:	4620      	mov	r0, r4
 80192ae:	4629      	mov	r1, r5
 80192b0:	f7e7 f80a 	bl	80002c8 <__aeabi_dsub>
 80192b4:	a398      	add	r3, pc, #608	; (adr r3, 8019518 <__ieee754_rem_pio2+0x318>)
 80192b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ba:	e7db      	b.n	8019274 <__ieee754_rem_pio2+0x74>
 80192bc:	f7e7 f806 	bl	80002cc <__adddf3>
 80192c0:	45b0      	cmp	r8, r6
 80192c2:	4604      	mov	r4, r0
 80192c4:	460d      	mov	r5, r1
 80192c6:	d016      	beq.n	80192f6 <__ieee754_rem_pio2+0xf6>
 80192c8:	a38f      	add	r3, pc, #572	; (adr r3, 8019508 <__ieee754_rem_pio2+0x308>)
 80192ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ce:	f7e6 fffd 	bl	80002cc <__adddf3>
 80192d2:	4602      	mov	r2, r0
 80192d4:	460b      	mov	r3, r1
 80192d6:	e9ca 2300 	strd	r2, r3, [sl]
 80192da:	4620      	mov	r0, r4
 80192dc:	4629      	mov	r1, r5
 80192de:	f7e6 fff3 	bl	80002c8 <__aeabi_dsub>
 80192e2:	a389      	add	r3, pc, #548	; (adr r3, 8019508 <__ieee754_rem_pio2+0x308>)
 80192e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192e8:	f7e6 fff0 	bl	80002cc <__adddf3>
 80192ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80192f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80192f4:	e7c4      	b.n	8019280 <__ieee754_rem_pio2+0x80>
 80192f6:	a386      	add	r3, pc, #536	; (adr r3, 8019510 <__ieee754_rem_pio2+0x310>)
 80192f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192fc:	f7e6 ffe6 	bl	80002cc <__adddf3>
 8019300:	a385      	add	r3, pc, #532	; (adr r3, 8019518 <__ieee754_rem_pio2+0x318>)
 8019302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019306:	4604      	mov	r4, r0
 8019308:	460d      	mov	r5, r1
 801930a:	f7e6 ffdf 	bl	80002cc <__adddf3>
 801930e:	4602      	mov	r2, r0
 8019310:	460b      	mov	r3, r1
 8019312:	e9ca 2300 	strd	r2, r3, [sl]
 8019316:	4620      	mov	r0, r4
 8019318:	4629      	mov	r1, r5
 801931a:	f7e6 ffd5 	bl	80002c8 <__aeabi_dsub>
 801931e:	a37e      	add	r3, pc, #504	; (adr r3, 8019518 <__ieee754_rem_pio2+0x318>)
 8019320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019324:	e7e0      	b.n	80192e8 <__ieee754_rem_pio2+0xe8>
 8019326:	4b87      	ldr	r3, [pc, #540]	; (8019544 <__ieee754_rem_pio2+0x344>)
 8019328:	4598      	cmp	r8, r3
 801932a:	f300 80d9 	bgt.w	80194e0 <__ieee754_rem_pio2+0x2e0>
 801932e:	f001 f88f 	bl	801a450 <fabs>
 8019332:	ec55 4b10 	vmov	r4, r5, d0
 8019336:	ee10 0a10 	vmov	r0, s0
 801933a:	a379      	add	r3, pc, #484	; (adr r3, 8019520 <__ieee754_rem_pio2+0x320>)
 801933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019340:	4629      	mov	r1, r5
 8019342:	f7e7 f979 	bl	8000638 <__aeabi_dmul>
 8019346:	4b80      	ldr	r3, [pc, #512]	; (8019548 <__ieee754_rem_pio2+0x348>)
 8019348:	2200      	movs	r2, #0
 801934a:	f7e6 ffbf 	bl	80002cc <__adddf3>
 801934e:	f7e7 fc23 	bl	8000b98 <__aeabi_d2iz>
 8019352:	4683      	mov	fp, r0
 8019354:	f7e7 f906 	bl	8000564 <__aeabi_i2d>
 8019358:	4602      	mov	r2, r0
 801935a:	460b      	mov	r3, r1
 801935c:	ec43 2b18 	vmov	d8, r2, r3
 8019360:	a367      	add	r3, pc, #412	; (adr r3, 8019500 <__ieee754_rem_pio2+0x300>)
 8019362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019366:	f7e7 f967 	bl	8000638 <__aeabi_dmul>
 801936a:	4602      	mov	r2, r0
 801936c:	460b      	mov	r3, r1
 801936e:	4620      	mov	r0, r4
 8019370:	4629      	mov	r1, r5
 8019372:	f7e6 ffa9 	bl	80002c8 <__aeabi_dsub>
 8019376:	a364      	add	r3, pc, #400	; (adr r3, 8019508 <__ieee754_rem_pio2+0x308>)
 8019378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801937c:	4606      	mov	r6, r0
 801937e:	460f      	mov	r7, r1
 8019380:	ec51 0b18 	vmov	r0, r1, d8
 8019384:	f7e7 f958 	bl	8000638 <__aeabi_dmul>
 8019388:	f1bb 0f1f 	cmp.w	fp, #31
 801938c:	4604      	mov	r4, r0
 801938e:	460d      	mov	r5, r1
 8019390:	dc0d      	bgt.n	80193ae <__ieee754_rem_pio2+0x1ae>
 8019392:	4b6e      	ldr	r3, [pc, #440]	; (801954c <__ieee754_rem_pio2+0x34c>)
 8019394:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8019398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801939c:	4543      	cmp	r3, r8
 801939e:	d006      	beq.n	80193ae <__ieee754_rem_pio2+0x1ae>
 80193a0:	4622      	mov	r2, r4
 80193a2:	462b      	mov	r3, r5
 80193a4:	4630      	mov	r0, r6
 80193a6:	4639      	mov	r1, r7
 80193a8:	f7e6 ff8e 	bl	80002c8 <__aeabi_dsub>
 80193ac:	e00f      	b.n	80193ce <__ieee754_rem_pio2+0x1ce>
 80193ae:	462b      	mov	r3, r5
 80193b0:	4622      	mov	r2, r4
 80193b2:	4630      	mov	r0, r6
 80193b4:	4639      	mov	r1, r7
 80193b6:	f7e6 ff87 	bl	80002c8 <__aeabi_dsub>
 80193ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80193be:	9303      	str	r3, [sp, #12]
 80193c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80193c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80193c8:	f1b8 0f10 	cmp.w	r8, #16
 80193cc:	dc02      	bgt.n	80193d4 <__ieee754_rem_pio2+0x1d4>
 80193ce:	e9ca 0100 	strd	r0, r1, [sl]
 80193d2:	e039      	b.n	8019448 <__ieee754_rem_pio2+0x248>
 80193d4:	a34e      	add	r3, pc, #312	; (adr r3, 8019510 <__ieee754_rem_pio2+0x310>)
 80193d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193da:	ec51 0b18 	vmov	r0, r1, d8
 80193de:	f7e7 f92b 	bl	8000638 <__aeabi_dmul>
 80193e2:	4604      	mov	r4, r0
 80193e4:	460d      	mov	r5, r1
 80193e6:	4602      	mov	r2, r0
 80193e8:	460b      	mov	r3, r1
 80193ea:	4630      	mov	r0, r6
 80193ec:	4639      	mov	r1, r7
 80193ee:	f7e6 ff6b 	bl	80002c8 <__aeabi_dsub>
 80193f2:	4602      	mov	r2, r0
 80193f4:	460b      	mov	r3, r1
 80193f6:	4680      	mov	r8, r0
 80193f8:	4689      	mov	r9, r1
 80193fa:	4630      	mov	r0, r6
 80193fc:	4639      	mov	r1, r7
 80193fe:	f7e6 ff63 	bl	80002c8 <__aeabi_dsub>
 8019402:	4622      	mov	r2, r4
 8019404:	462b      	mov	r3, r5
 8019406:	f7e6 ff5f 	bl	80002c8 <__aeabi_dsub>
 801940a:	a343      	add	r3, pc, #268	; (adr r3, 8019518 <__ieee754_rem_pio2+0x318>)
 801940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019410:	4604      	mov	r4, r0
 8019412:	460d      	mov	r5, r1
 8019414:	ec51 0b18 	vmov	r0, r1, d8
 8019418:	f7e7 f90e 	bl	8000638 <__aeabi_dmul>
 801941c:	4622      	mov	r2, r4
 801941e:	462b      	mov	r3, r5
 8019420:	f7e6 ff52 	bl	80002c8 <__aeabi_dsub>
 8019424:	4602      	mov	r2, r0
 8019426:	460b      	mov	r3, r1
 8019428:	4604      	mov	r4, r0
 801942a:	460d      	mov	r5, r1
 801942c:	4640      	mov	r0, r8
 801942e:	4649      	mov	r1, r9
 8019430:	f7e6 ff4a 	bl	80002c8 <__aeabi_dsub>
 8019434:	9a03      	ldr	r2, [sp, #12]
 8019436:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801943a:	1ad3      	subs	r3, r2, r3
 801943c:	2b31      	cmp	r3, #49	; 0x31
 801943e:	dc24      	bgt.n	801948a <__ieee754_rem_pio2+0x28a>
 8019440:	e9ca 0100 	strd	r0, r1, [sl]
 8019444:	4646      	mov	r6, r8
 8019446:	464f      	mov	r7, r9
 8019448:	e9da 8900 	ldrd	r8, r9, [sl]
 801944c:	4630      	mov	r0, r6
 801944e:	4642      	mov	r2, r8
 8019450:	464b      	mov	r3, r9
 8019452:	4639      	mov	r1, r7
 8019454:	f7e6 ff38 	bl	80002c8 <__aeabi_dsub>
 8019458:	462b      	mov	r3, r5
 801945a:	4622      	mov	r2, r4
 801945c:	f7e6 ff34 	bl	80002c8 <__aeabi_dsub>
 8019460:	9b02      	ldr	r3, [sp, #8]
 8019462:	2b00      	cmp	r3, #0
 8019464:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019468:	f6bf af0a 	bge.w	8019280 <__ieee754_rem_pio2+0x80>
 801946c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019470:	f8ca 3004 	str.w	r3, [sl, #4]
 8019474:	f8ca 8000 	str.w	r8, [sl]
 8019478:	f8ca 0008 	str.w	r0, [sl, #8]
 801947c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019480:	f8ca 300c 	str.w	r3, [sl, #12]
 8019484:	f1cb 0b00 	rsb	fp, fp, #0
 8019488:	e6fa      	b.n	8019280 <__ieee754_rem_pio2+0x80>
 801948a:	a327      	add	r3, pc, #156	; (adr r3, 8019528 <__ieee754_rem_pio2+0x328>)
 801948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019490:	ec51 0b18 	vmov	r0, r1, d8
 8019494:	f7e7 f8d0 	bl	8000638 <__aeabi_dmul>
 8019498:	4604      	mov	r4, r0
 801949a:	460d      	mov	r5, r1
 801949c:	4602      	mov	r2, r0
 801949e:	460b      	mov	r3, r1
 80194a0:	4640      	mov	r0, r8
 80194a2:	4649      	mov	r1, r9
 80194a4:	f7e6 ff10 	bl	80002c8 <__aeabi_dsub>
 80194a8:	4602      	mov	r2, r0
 80194aa:	460b      	mov	r3, r1
 80194ac:	4606      	mov	r6, r0
 80194ae:	460f      	mov	r7, r1
 80194b0:	4640      	mov	r0, r8
 80194b2:	4649      	mov	r1, r9
 80194b4:	f7e6 ff08 	bl	80002c8 <__aeabi_dsub>
 80194b8:	4622      	mov	r2, r4
 80194ba:	462b      	mov	r3, r5
 80194bc:	f7e6 ff04 	bl	80002c8 <__aeabi_dsub>
 80194c0:	a31b      	add	r3, pc, #108	; (adr r3, 8019530 <__ieee754_rem_pio2+0x330>)
 80194c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c6:	4604      	mov	r4, r0
 80194c8:	460d      	mov	r5, r1
 80194ca:	ec51 0b18 	vmov	r0, r1, d8
 80194ce:	f7e7 f8b3 	bl	8000638 <__aeabi_dmul>
 80194d2:	4622      	mov	r2, r4
 80194d4:	462b      	mov	r3, r5
 80194d6:	f7e6 fef7 	bl	80002c8 <__aeabi_dsub>
 80194da:	4604      	mov	r4, r0
 80194dc:	460d      	mov	r5, r1
 80194de:	e75f      	b.n	80193a0 <__ieee754_rem_pio2+0x1a0>
 80194e0:	4b1b      	ldr	r3, [pc, #108]	; (8019550 <__ieee754_rem_pio2+0x350>)
 80194e2:	4598      	cmp	r8, r3
 80194e4:	dd36      	ble.n	8019554 <__ieee754_rem_pio2+0x354>
 80194e6:	ee10 2a10 	vmov	r2, s0
 80194ea:	462b      	mov	r3, r5
 80194ec:	4620      	mov	r0, r4
 80194ee:	4629      	mov	r1, r5
 80194f0:	f7e6 feea 	bl	80002c8 <__aeabi_dsub>
 80194f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80194f8:	e9ca 0100 	strd	r0, r1, [sl]
 80194fc:	e694      	b.n	8019228 <__ieee754_rem_pio2+0x28>
 80194fe:	bf00      	nop
 8019500:	54400000 	.word	0x54400000
 8019504:	3ff921fb 	.word	0x3ff921fb
 8019508:	1a626331 	.word	0x1a626331
 801950c:	3dd0b461 	.word	0x3dd0b461
 8019510:	1a600000 	.word	0x1a600000
 8019514:	3dd0b461 	.word	0x3dd0b461
 8019518:	2e037073 	.word	0x2e037073
 801951c:	3ba3198a 	.word	0x3ba3198a
 8019520:	6dc9c883 	.word	0x6dc9c883
 8019524:	3fe45f30 	.word	0x3fe45f30
 8019528:	2e000000 	.word	0x2e000000
 801952c:	3ba3198a 	.word	0x3ba3198a
 8019530:	252049c1 	.word	0x252049c1
 8019534:	397b839a 	.word	0x397b839a
 8019538:	3fe921fb 	.word	0x3fe921fb
 801953c:	4002d97b 	.word	0x4002d97b
 8019540:	3ff921fb 	.word	0x3ff921fb
 8019544:	413921fb 	.word	0x413921fb
 8019548:	3fe00000 	.word	0x3fe00000
 801954c:	0801c978 	.word	0x0801c978
 8019550:	7fefffff 	.word	0x7fefffff
 8019554:	ea4f 5428 	mov.w	r4, r8, asr #20
 8019558:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801955c:	ee10 0a10 	vmov	r0, s0
 8019560:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8019564:	ee10 6a10 	vmov	r6, s0
 8019568:	460f      	mov	r7, r1
 801956a:	f7e7 fb15 	bl	8000b98 <__aeabi_d2iz>
 801956e:	f7e6 fff9 	bl	8000564 <__aeabi_i2d>
 8019572:	4602      	mov	r2, r0
 8019574:	460b      	mov	r3, r1
 8019576:	4630      	mov	r0, r6
 8019578:	4639      	mov	r1, r7
 801957a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801957e:	f7e6 fea3 	bl	80002c8 <__aeabi_dsub>
 8019582:	4b22      	ldr	r3, [pc, #136]	; (801960c <__ieee754_rem_pio2+0x40c>)
 8019584:	2200      	movs	r2, #0
 8019586:	f7e7 f857 	bl	8000638 <__aeabi_dmul>
 801958a:	460f      	mov	r7, r1
 801958c:	4606      	mov	r6, r0
 801958e:	f7e7 fb03 	bl	8000b98 <__aeabi_d2iz>
 8019592:	f7e6 ffe7 	bl	8000564 <__aeabi_i2d>
 8019596:	4602      	mov	r2, r0
 8019598:	460b      	mov	r3, r1
 801959a:	4630      	mov	r0, r6
 801959c:	4639      	mov	r1, r7
 801959e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80195a2:	f7e6 fe91 	bl	80002c8 <__aeabi_dsub>
 80195a6:	4b19      	ldr	r3, [pc, #100]	; (801960c <__ieee754_rem_pio2+0x40c>)
 80195a8:	2200      	movs	r2, #0
 80195aa:	f7e7 f845 	bl	8000638 <__aeabi_dmul>
 80195ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80195b2:	ad04      	add	r5, sp, #16
 80195b4:	f04f 0803 	mov.w	r8, #3
 80195b8:	46a9      	mov	r9, r5
 80195ba:	2600      	movs	r6, #0
 80195bc:	2700      	movs	r7, #0
 80195be:	4632      	mov	r2, r6
 80195c0:	463b      	mov	r3, r7
 80195c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80195c6:	46c3      	mov	fp, r8
 80195c8:	3d08      	subs	r5, #8
 80195ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80195ce:	f7e7 fa9b 	bl	8000b08 <__aeabi_dcmpeq>
 80195d2:	2800      	cmp	r0, #0
 80195d4:	d1f3      	bne.n	80195be <__ieee754_rem_pio2+0x3be>
 80195d6:	4b0e      	ldr	r3, [pc, #56]	; (8019610 <__ieee754_rem_pio2+0x410>)
 80195d8:	9301      	str	r3, [sp, #4]
 80195da:	2302      	movs	r3, #2
 80195dc:	9300      	str	r3, [sp, #0]
 80195de:	4622      	mov	r2, r4
 80195e0:	465b      	mov	r3, fp
 80195e2:	4651      	mov	r1, sl
 80195e4:	4648      	mov	r0, r9
 80195e6:	f000 f993 	bl	8019910 <__kernel_rem_pio2>
 80195ea:	9b02      	ldr	r3, [sp, #8]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	4683      	mov	fp, r0
 80195f0:	f6bf ae46 	bge.w	8019280 <__ieee754_rem_pio2+0x80>
 80195f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80195f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80195fc:	f8ca 3004 	str.w	r3, [sl, #4]
 8019600:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019604:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019608:	e73a      	b.n	8019480 <__ieee754_rem_pio2+0x280>
 801960a:	bf00      	nop
 801960c:	41700000 	.word	0x41700000
 8019610:	0801c9f8 	.word	0x0801c9f8

08019614 <__ieee754_sqrt>:
 8019614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019618:	ec55 4b10 	vmov	r4, r5, d0
 801961c:	4e56      	ldr	r6, [pc, #344]	; (8019778 <__ieee754_sqrt+0x164>)
 801961e:	43ae      	bics	r6, r5
 8019620:	ee10 0a10 	vmov	r0, s0
 8019624:	ee10 3a10 	vmov	r3, s0
 8019628:	4629      	mov	r1, r5
 801962a:	462a      	mov	r2, r5
 801962c:	d110      	bne.n	8019650 <__ieee754_sqrt+0x3c>
 801962e:	ee10 2a10 	vmov	r2, s0
 8019632:	462b      	mov	r3, r5
 8019634:	f7e7 f800 	bl	8000638 <__aeabi_dmul>
 8019638:	4602      	mov	r2, r0
 801963a:	460b      	mov	r3, r1
 801963c:	4620      	mov	r0, r4
 801963e:	4629      	mov	r1, r5
 8019640:	f7e6 fe44 	bl	80002cc <__adddf3>
 8019644:	4604      	mov	r4, r0
 8019646:	460d      	mov	r5, r1
 8019648:	ec45 4b10 	vmov	d0, r4, r5
 801964c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019650:	2d00      	cmp	r5, #0
 8019652:	dc10      	bgt.n	8019676 <__ieee754_sqrt+0x62>
 8019654:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019658:	4330      	orrs	r0, r6
 801965a:	d0f5      	beq.n	8019648 <__ieee754_sqrt+0x34>
 801965c:	b15d      	cbz	r5, 8019676 <__ieee754_sqrt+0x62>
 801965e:	ee10 2a10 	vmov	r2, s0
 8019662:	462b      	mov	r3, r5
 8019664:	ee10 0a10 	vmov	r0, s0
 8019668:	f7e6 fe2e 	bl	80002c8 <__aeabi_dsub>
 801966c:	4602      	mov	r2, r0
 801966e:	460b      	mov	r3, r1
 8019670:	f7e7 f90c 	bl	800088c <__aeabi_ddiv>
 8019674:	e7e6      	b.n	8019644 <__ieee754_sqrt+0x30>
 8019676:	1509      	asrs	r1, r1, #20
 8019678:	d076      	beq.n	8019768 <__ieee754_sqrt+0x154>
 801967a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801967e:	07ce      	lsls	r6, r1, #31
 8019680:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8019684:	bf5e      	ittt	pl
 8019686:	0fda      	lsrpl	r2, r3, #31
 8019688:	005b      	lslpl	r3, r3, #1
 801968a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801968e:	0fda      	lsrs	r2, r3, #31
 8019690:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8019694:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019698:	2000      	movs	r0, #0
 801969a:	106d      	asrs	r5, r5, #1
 801969c:	005b      	lsls	r3, r3, #1
 801969e:	f04f 0e16 	mov.w	lr, #22
 80196a2:	4684      	mov	ip, r0
 80196a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80196a8:	eb0c 0401 	add.w	r4, ip, r1
 80196ac:	4294      	cmp	r4, r2
 80196ae:	bfde      	ittt	le
 80196b0:	1b12      	suble	r2, r2, r4
 80196b2:	eb04 0c01 	addle.w	ip, r4, r1
 80196b6:	1840      	addle	r0, r0, r1
 80196b8:	0052      	lsls	r2, r2, #1
 80196ba:	f1be 0e01 	subs.w	lr, lr, #1
 80196be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80196c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80196c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80196ca:	d1ed      	bne.n	80196a8 <__ieee754_sqrt+0x94>
 80196cc:	4671      	mov	r1, lr
 80196ce:	2720      	movs	r7, #32
 80196d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80196d4:	4562      	cmp	r2, ip
 80196d6:	eb04 060e 	add.w	r6, r4, lr
 80196da:	dc02      	bgt.n	80196e2 <__ieee754_sqrt+0xce>
 80196dc:	d113      	bne.n	8019706 <__ieee754_sqrt+0xf2>
 80196de:	429e      	cmp	r6, r3
 80196e0:	d811      	bhi.n	8019706 <__ieee754_sqrt+0xf2>
 80196e2:	2e00      	cmp	r6, #0
 80196e4:	eb06 0e04 	add.w	lr, r6, r4
 80196e8:	da43      	bge.n	8019772 <__ieee754_sqrt+0x15e>
 80196ea:	f1be 0f00 	cmp.w	lr, #0
 80196ee:	db40      	blt.n	8019772 <__ieee754_sqrt+0x15e>
 80196f0:	f10c 0801 	add.w	r8, ip, #1
 80196f4:	eba2 020c 	sub.w	r2, r2, ip
 80196f8:	429e      	cmp	r6, r3
 80196fa:	bf88      	it	hi
 80196fc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8019700:	1b9b      	subs	r3, r3, r6
 8019702:	4421      	add	r1, r4
 8019704:	46c4      	mov	ip, r8
 8019706:	0052      	lsls	r2, r2, #1
 8019708:	3f01      	subs	r7, #1
 801970a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801970e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019712:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019716:	d1dd      	bne.n	80196d4 <__ieee754_sqrt+0xc0>
 8019718:	4313      	orrs	r3, r2
 801971a:	d006      	beq.n	801972a <__ieee754_sqrt+0x116>
 801971c:	1c4c      	adds	r4, r1, #1
 801971e:	bf13      	iteet	ne
 8019720:	3101      	addne	r1, #1
 8019722:	3001      	addeq	r0, #1
 8019724:	4639      	moveq	r1, r7
 8019726:	f021 0101 	bicne.w	r1, r1, #1
 801972a:	1043      	asrs	r3, r0, #1
 801972c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019730:	0849      	lsrs	r1, r1, #1
 8019732:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019736:	07c2      	lsls	r2, r0, #31
 8019738:	bf48      	it	mi
 801973a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801973e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8019742:	460c      	mov	r4, r1
 8019744:	463d      	mov	r5, r7
 8019746:	e77f      	b.n	8019648 <__ieee754_sqrt+0x34>
 8019748:	0ada      	lsrs	r2, r3, #11
 801974a:	3815      	subs	r0, #21
 801974c:	055b      	lsls	r3, r3, #21
 801974e:	2a00      	cmp	r2, #0
 8019750:	d0fa      	beq.n	8019748 <__ieee754_sqrt+0x134>
 8019752:	02d7      	lsls	r7, r2, #11
 8019754:	d50a      	bpl.n	801976c <__ieee754_sqrt+0x158>
 8019756:	f1c1 0420 	rsb	r4, r1, #32
 801975a:	fa23 f404 	lsr.w	r4, r3, r4
 801975e:	1e4d      	subs	r5, r1, #1
 8019760:	408b      	lsls	r3, r1
 8019762:	4322      	orrs	r2, r4
 8019764:	1b41      	subs	r1, r0, r5
 8019766:	e788      	b.n	801967a <__ieee754_sqrt+0x66>
 8019768:	4608      	mov	r0, r1
 801976a:	e7f0      	b.n	801974e <__ieee754_sqrt+0x13a>
 801976c:	0052      	lsls	r2, r2, #1
 801976e:	3101      	adds	r1, #1
 8019770:	e7ef      	b.n	8019752 <__ieee754_sqrt+0x13e>
 8019772:	46e0      	mov	r8, ip
 8019774:	e7be      	b.n	80196f4 <__ieee754_sqrt+0xe0>
 8019776:	bf00      	nop
 8019778:	7ff00000 	.word	0x7ff00000
 801977c:	00000000 	.word	0x00000000

08019780 <__kernel_cos>:
 8019780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019784:	ec57 6b10 	vmov	r6, r7, d0
 8019788:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801978c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019790:	ed8d 1b00 	vstr	d1, [sp]
 8019794:	da07      	bge.n	80197a6 <__kernel_cos+0x26>
 8019796:	ee10 0a10 	vmov	r0, s0
 801979a:	4639      	mov	r1, r7
 801979c:	f7e7 f9fc 	bl	8000b98 <__aeabi_d2iz>
 80197a0:	2800      	cmp	r0, #0
 80197a2:	f000 8088 	beq.w	80198b6 <__kernel_cos+0x136>
 80197a6:	4632      	mov	r2, r6
 80197a8:	463b      	mov	r3, r7
 80197aa:	4630      	mov	r0, r6
 80197ac:	4639      	mov	r1, r7
 80197ae:	f7e6 ff43 	bl	8000638 <__aeabi_dmul>
 80197b2:	4b51      	ldr	r3, [pc, #324]	; (80198f8 <__kernel_cos+0x178>)
 80197b4:	2200      	movs	r2, #0
 80197b6:	4604      	mov	r4, r0
 80197b8:	460d      	mov	r5, r1
 80197ba:	f7e6 ff3d 	bl	8000638 <__aeabi_dmul>
 80197be:	a340      	add	r3, pc, #256	; (adr r3, 80198c0 <__kernel_cos+0x140>)
 80197c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c4:	4682      	mov	sl, r0
 80197c6:	468b      	mov	fp, r1
 80197c8:	4620      	mov	r0, r4
 80197ca:	4629      	mov	r1, r5
 80197cc:	f7e6 ff34 	bl	8000638 <__aeabi_dmul>
 80197d0:	a33d      	add	r3, pc, #244	; (adr r3, 80198c8 <__kernel_cos+0x148>)
 80197d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d6:	f7e6 fd79 	bl	80002cc <__adddf3>
 80197da:	4622      	mov	r2, r4
 80197dc:	462b      	mov	r3, r5
 80197de:	f7e6 ff2b 	bl	8000638 <__aeabi_dmul>
 80197e2:	a33b      	add	r3, pc, #236	; (adr r3, 80198d0 <__kernel_cos+0x150>)
 80197e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e8:	f7e6 fd6e 	bl	80002c8 <__aeabi_dsub>
 80197ec:	4622      	mov	r2, r4
 80197ee:	462b      	mov	r3, r5
 80197f0:	f7e6 ff22 	bl	8000638 <__aeabi_dmul>
 80197f4:	a338      	add	r3, pc, #224	; (adr r3, 80198d8 <__kernel_cos+0x158>)
 80197f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197fa:	f7e6 fd67 	bl	80002cc <__adddf3>
 80197fe:	4622      	mov	r2, r4
 8019800:	462b      	mov	r3, r5
 8019802:	f7e6 ff19 	bl	8000638 <__aeabi_dmul>
 8019806:	a336      	add	r3, pc, #216	; (adr r3, 80198e0 <__kernel_cos+0x160>)
 8019808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801980c:	f7e6 fd5c 	bl	80002c8 <__aeabi_dsub>
 8019810:	4622      	mov	r2, r4
 8019812:	462b      	mov	r3, r5
 8019814:	f7e6 ff10 	bl	8000638 <__aeabi_dmul>
 8019818:	a333      	add	r3, pc, #204	; (adr r3, 80198e8 <__kernel_cos+0x168>)
 801981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801981e:	f7e6 fd55 	bl	80002cc <__adddf3>
 8019822:	4622      	mov	r2, r4
 8019824:	462b      	mov	r3, r5
 8019826:	f7e6 ff07 	bl	8000638 <__aeabi_dmul>
 801982a:	4622      	mov	r2, r4
 801982c:	462b      	mov	r3, r5
 801982e:	f7e6 ff03 	bl	8000638 <__aeabi_dmul>
 8019832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019836:	4604      	mov	r4, r0
 8019838:	460d      	mov	r5, r1
 801983a:	4630      	mov	r0, r6
 801983c:	4639      	mov	r1, r7
 801983e:	f7e6 fefb 	bl	8000638 <__aeabi_dmul>
 8019842:	460b      	mov	r3, r1
 8019844:	4602      	mov	r2, r0
 8019846:	4629      	mov	r1, r5
 8019848:	4620      	mov	r0, r4
 801984a:	f7e6 fd3d 	bl	80002c8 <__aeabi_dsub>
 801984e:	4b2b      	ldr	r3, [pc, #172]	; (80198fc <__kernel_cos+0x17c>)
 8019850:	4598      	cmp	r8, r3
 8019852:	4606      	mov	r6, r0
 8019854:	460f      	mov	r7, r1
 8019856:	dc10      	bgt.n	801987a <__kernel_cos+0xfa>
 8019858:	4602      	mov	r2, r0
 801985a:	460b      	mov	r3, r1
 801985c:	4650      	mov	r0, sl
 801985e:	4659      	mov	r1, fp
 8019860:	f7e6 fd32 	bl	80002c8 <__aeabi_dsub>
 8019864:	460b      	mov	r3, r1
 8019866:	4926      	ldr	r1, [pc, #152]	; (8019900 <__kernel_cos+0x180>)
 8019868:	4602      	mov	r2, r0
 801986a:	2000      	movs	r0, #0
 801986c:	f7e6 fd2c 	bl	80002c8 <__aeabi_dsub>
 8019870:	ec41 0b10 	vmov	d0, r0, r1
 8019874:	b003      	add	sp, #12
 8019876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801987a:	4b22      	ldr	r3, [pc, #136]	; (8019904 <__kernel_cos+0x184>)
 801987c:	4920      	ldr	r1, [pc, #128]	; (8019900 <__kernel_cos+0x180>)
 801987e:	4598      	cmp	r8, r3
 8019880:	bfcc      	ite	gt
 8019882:	4d21      	ldrgt	r5, [pc, #132]	; (8019908 <__kernel_cos+0x188>)
 8019884:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019888:	2400      	movs	r4, #0
 801988a:	4622      	mov	r2, r4
 801988c:	462b      	mov	r3, r5
 801988e:	2000      	movs	r0, #0
 8019890:	f7e6 fd1a 	bl	80002c8 <__aeabi_dsub>
 8019894:	4622      	mov	r2, r4
 8019896:	4680      	mov	r8, r0
 8019898:	4689      	mov	r9, r1
 801989a:	462b      	mov	r3, r5
 801989c:	4650      	mov	r0, sl
 801989e:	4659      	mov	r1, fp
 80198a0:	f7e6 fd12 	bl	80002c8 <__aeabi_dsub>
 80198a4:	4632      	mov	r2, r6
 80198a6:	463b      	mov	r3, r7
 80198a8:	f7e6 fd0e 	bl	80002c8 <__aeabi_dsub>
 80198ac:	4602      	mov	r2, r0
 80198ae:	460b      	mov	r3, r1
 80198b0:	4640      	mov	r0, r8
 80198b2:	4649      	mov	r1, r9
 80198b4:	e7da      	b.n	801986c <__kernel_cos+0xec>
 80198b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80198f0 <__kernel_cos+0x170>
 80198ba:	e7db      	b.n	8019874 <__kernel_cos+0xf4>
 80198bc:	f3af 8000 	nop.w
 80198c0:	be8838d4 	.word	0xbe8838d4
 80198c4:	bda8fae9 	.word	0xbda8fae9
 80198c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80198cc:	3e21ee9e 	.word	0x3e21ee9e
 80198d0:	809c52ad 	.word	0x809c52ad
 80198d4:	3e927e4f 	.word	0x3e927e4f
 80198d8:	19cb1590 	.word	0x19cb1590
 80198dc:	3efa01a0 	.word	0x3efa01a0
 80198e0:	16c15177 	.word	0x16c15177
 80198e4:	3f56c16c 	.word	0x3f56c16c
 80198e8:	5555554c 	.word	0x5555554c
 80198ec:	3fa55555 	.word	0x3fa55555
 80198f0:	00000000 	.word	0x00000000
 80198f4:	3ff00000 	.word	0x3ff00000
 80198f8:	3fe00000 	.word	0x3fe00000
 80198fc:	3fd33332 	.word	0x3fd33332
 8019900:	3ff00000 	.word	0x3ff00000
 8019904:	3fe90000 	.word	0x3fe90000
 8019908:	3fd20000 	.word	0x3fd20000
 801990c:	00000000 	.word	0x00000000

08019910 <__kernel_rem_pio2>:
 8019910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019914:	ed2d 8b02 	vpush	{d8}
 8019918:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801991c:	f112 0f14 	cmn.w	r2, #20
 8019920:	9308      	str	r3, [sp, #32]
 8019922:	9101      	str	r1, [sp, #4]
 8019924:	4bc6      	ldr	r3, [pc, #792]	; (8019c40 <__kernel_rem_pio2+0x330>)
 8019926:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8019928:	9009      	str	r0, [sp, #36]	; 0x24
 801992a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801992e:	9304      	str	r3, [sp, #16]
 8019930:	9b08      	ldr	r3, [sp, #32]
 8019932:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8019936:	bfa8      	it	ge
 8019938:	1ed4      	subge	r4, r2, #3
 801993a:	9306      	str	r3, [sp, #24]
 801993c:	bfb2      	itee	lt
 801993e:	2400      	movlt	r4, #0
 8019940:	2318      	movge	r3, #24
 8019942:	fb94 f4f3 	sdivge	r4, r4, r3
 8019946:	f06f 0317 	mvn.w	r3, #23
 801994a:	fb04 3303 	mla	r3, r4, r3, r3
 801994e:	eb03 0a02 	add.w	sl, r3, r2
 8019952:	9b04      	ldr	r3, [sp, #16]
 8019954:	9a06      	ldr	r2, [sp, #24]
 8019956:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8019c30 <__kernel_rem_pio2+0x320>
 801995a:	eb03 0802 	add.w	r8, r3, r2
 801995e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019960:	1aa7      	subs	r7, r4, r2
 8019962:	ae20      	add	r6, sp, #128	; 0x80
 8019964:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019968:	2500      	movs	r5, #0
 801996a:	4545      	cmp	r5, r8
 801996c:	dd18      	ble.n	80199a0 <__kernel_rem_pio2+0x90>
 801996e:	9b08      	ldr	r3, [sp, #32]
 8019970:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019974:	aa20      	add	r2, sp, #128	; 0x80
 8019976:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8019c30 <__kernel_rem_pio2+0x320>
 801997a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801997e:	f1c3 0301 	rsb	r3, r3, #1
 8019982:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8019986:	9307      	str	r3, [sp, #28]
 8019988:	9b07      	ldr	r3, [sp, #28]
 801998a:	9a04      	ldr	r2, [sp, #16]
 801998c:	4443      	add	r3, r8
 801998e:	429a      	cmp	r2, r3
 8019990:	db2f      	blt.n	80199f2 <__kernel_rem_pio2+0xe2>
 8019992:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019996:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801999a:	462f      	mov	r7, r5
 801999c:	2600      	movs	r6, #0
 801999e:	e01b      	b.n	80199d8 <__kernel_rem_pio2+0xc8>
 80199a0:	42ef      	cmn	r7, r5
 80199a2:	d407      	bmi.n	80199b4 <__kernel_rem_pio2+0xa4>
 80199a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80199a8:	f7e6 fddc 	bl	8000564 <__aeabi_i2d>
 80199ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 80199b0:	3501      	adds	r5, #1
 80199b2:	e7da      	b.n	801996a <__kernel_rem_pio2+0x5a>
 80199b4:	ec51 0b18 	vmov	r0, r1, d8
 80199b8:	e7f8      	b.n	80199ac <__kernel_rem_pio2+0x9c>
 80199ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80199be:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80199c2:	f7e6 fe39 	bl	8000638 <__aeabi_dmul>
 80199c6:	4602      	mov	r2, r0
 80199c8:	460b      	mov	r3, r1
 80199ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199ce:	f7e6 fc7d 	bl	80002cc <__adddf3>
 80199d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80199d6:	3601      	adds	r6, #1
 80199d8:	9b06      	ldr	r3, [sp, #24]
 80199da:	429e      	cmp	r6, r3
 80199dc:	f1a7 0708 	sub.w	r7, r7, #8
 80199e0:	ddeb      	ble.n	80199ba <__kernel_rem_pio2+0xaa>
 80199e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80199e6:	3508      	adds	r5, #8
 80199e8:	ecab 7b02 	vstmia	fp!, {d7}
 80199ec:	f108 0801 	add.w	r8, r8, #1
 80199f0:	e7ca      	b.n	8019988 <__kernel_rem_pio2+0x78>
 80199f2:	9b04      	ldr	r3, [sp, #16]
 80199f4:	aa0c      	add	r2, sp, #48	; 0x30
 80199f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80199fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80199fc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80199fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019a02:	9c04      	ldr	r4, [sp, #16]
 8019a04:	930a      	str	r3, [sp, #40]	; 0x28
 8019a06:	ab98      	add	r3, sp, #608	; 0x260
 8019a08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019a0c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019a10:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8019a14:	f8cd b008 	str.w	fp, [sp, #8]
 8019a18:	4625      	mov	r5, r4
 8019a1a:	2d00      	cmp	r5, #0
 8019a1c:	dc78      	bgt.n	8019b10 <__kernel_rem_pio2+0x200>
 8019a1e:	ec47 6b10 	vmov	d0, r6, r7
 8019a22:	4650      	mov	r0, sl
 8019a24:	f000 fe34 	bl	801a690 <scalbn>
 8019a28:	ec57 6b10 	vmov	r6, r7, d0
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019a32:	ee10 0a10 	vmov	r0, s0
 8019a36:	4639      	mov	r1, r7
 8019a38:	f7e6 fdfe 	bl	8000638 <__aeabi_dmul>
 8019a3c:	ec41 0b10 	vmov	d0, r0, r1
 8019a40:	f000 fd1a 	bl	801a478 <floor>
 8019a44:	4b7f      	ldr	r3, [pc, #508]	; (8019c44 <__kernel_rem_pio2+0x334>)
 8019a46:	ec51 0b10 	vmov	r0, r1, d0
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	f7e6 fdf4 	bl	8000638 <__aeabi_dmul>
 8019a50:	4602      	mov	r2, r0
 8019a52:	460b      	mov	r3, r1
 8019a54:	4630      	mov	r0, r6
 8019a56:	4639      	mov	r1, r7
 8019a58:	f7e6 fc36 	bl	80002c8 <__aeabi_dsub>
 8019a5c:	460f      	mov	r7, r1
 8019a5e:	4606      	mov	r6, r0
 8019a60:	f7e7 f89a 	bl	8000b98 <__aeabi_d2iz>
 8019a64:	9007      	str	r0, [sp, #28]
 8019a66:	f7e6 fd7d 	bl	8000564 <__aeabi_i2d>
 8019a6a:	4602      	mov	r2, r0
 8019a6c:	460b      	mov	r3, r1
 8019a6e:	4630      	mov	r0, r6
 8019a70:	4639      	mov	r1, r7
 8019a72:	f7e6 fc29 	bl	80002c8 <__aeabi_dsub>
 8019a76:	f1ba 0f00 	cmp.w	sl, #0
 8019a7a:	4606      	mov	r6, r0
 8019a7c:	460f      	mov	r7, r1
 8019a7e:	dd70      	ble.n	8019b62 <__kernel_rem_pio2+0x252>
 8019a80:	1e62      	subs	r2, r4, #1
 8019a82:	ab0c      	add	r3, sp, #48	; 0x30
 8019a84:	9d07      	ldr	r5, [sp, #28]
 8019a86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019a8a:	f1ca 0118 	rsb	r1, sl, #24
 8019a8e:	fa40 f301 	asr.w	r3, r0, r1
 8019a92:	441d      	add	r5, r3
 8019a94:	408b      	lsls	r3, r1
 8019a96:	1ac0      	subs	r0, r0, r3
 8019a98:	ab0c      	add	r3, sp, #48	; 0x30
 8019a9a:	9507      	str	r5, [sp, #28]
 8019a9c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019aa0:	f1ca 0317 	rsb	r3, sl, #23
 8019aa4:	fa40 f303 	asr.w	r3, r0, r3
 8019aa8:	9302      	str	r3, [sp, #8]
 8019aaa:	9b02      	ldr	r3, [sp, #8]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	dd66      	ble.n	8019b7e <__kernel_rem_pio2+0x26e>
 8019ab0:	9b07      	ldr	r3, [sp, #28]
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	3301      	adds	r3, #1
 8019ab6:	9307      	str	r3, [sp, #28]
 8019ab8:	4615      	mov	r5, r2
 8019aba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019abe:	4294      	cmp	r4, r2
 8019ac0:	f300 8099 	bgt.w	8019bf6 <__kernel_rem_pio2+0x2e6>
 8019ac4:	f1ba 0f00 	cmp.w	sl, #0
 8019ac8:	dd07      	ble.n	8019ada <__kernel_rem_pio2+0x1ca>
 8019aca:	f1ba 0f01 	cmp.w	sl, #1
 8019ace:	f000 80a5 	beq.w	8019c1c <__kernel_rem_pio2+0x30c>
 8019ad2:	f1ba 0f02 	cmp.w	sl, #2
 8019ad6:	f000 80c1 	beq.w	8019c5c <__kernel_rem_pio2+0x34c>
 8019ada:	9b02      	ldr	r3, [sp, #8]
 8019adc:	2b02      	cmp	r3, #2
 8019ade:	d14e      	bne.n	8019b7e <__kernel_rem_pio2+0x26e>
 8019ae0:	4632      	mov	r2, r6
 8019ae2:	463b      	mov	r3, r7
 8019ae4:	4958      	ldr	r1, [pc, #352]	; (8019c48 <__kernel_rem_pio2+0x338>)
 8019ae6:	2000      	movs	r0, #0
 8019ae8:	f7e6 fbee 	bl	80002c8 <__aeabi_dsub>
 8019aec:	4606      	mov	r6, r0
 8019aee:	460f      	mov	r7, r1
 8019af0:	2d00      	cmp	r5, #0
 8019af2:	d044      	beq.n	8019b7e <__kernel_rem_pio2+0x26e>
 8019af4:	4650      	mov	r0, sl
 8019af6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8019c38 <__kernel_rem_pio2+0x328>
 8019afa:	f000 fdc9 	bl	801a690 <scalbn>
 8019afe:	4630      	mov	r0, r6
 8019b00:	4639      	mov	r1, r7
 8019b02:	ec53 2b10 	vmov	r2, r3, d0
 8019b06:	f7e6 fbdf 	bl	80002c8 <__aeabi_dsub>
 8019b0a:	4606      	mov	r6, r0
 8019b0c:	460f      	mov	r7, r1
 8019b0e:	e036      	b.n	8019b7e <__kernel_rem_pio2+0x26e>
 8019b10:	4b4e      	ldr	r3, [pc, #312]	; (8019c4c <__kernel_rem_pio2+0x33c>)
 8019b12:	2200      	movs	r2, #0
 8019b14:	4630      	mov	r0, r6
 8019b16:	4639      	mov	r1, r7
 8019b18:	f7e6 fd8e 	bl	8000638 <__aeabi_dmul>
 8019b1c:	f7e7 f83c 	bl	8000b98 <__aeabi_d2iz>
 8019b20:	f7e6 fd20 	bl	8000564 <__aeabi_i2d>
 8019b24:	4b4a      	ldr	r3, [pc, #296]	; (8019c50 <__kernel_rem_pio2+0x340>)
 8019b26:	2200      	movs	r2, #0
 8019b28:	4680      	mov	r8, r0
 8019b2a:	4689      	mov	r9, r1
 8019b2c:	f7e6 fd84 	bl	8000638 <__aeabi_dmul>
 8019b30:	4602      	mov	r2, r0
 8019b32:	460b      	mov	r3, r1
 8019b34:	4630      	mov	r0, r6
 8019b36:	4639      	mov	r1, r7
 8019b38:	f7e6 fbc6 	bl	80002c8 <__aeabi_dsub>
 8019b3c:	f7e7 f82c 	bl	8000b98 <__aeabi_d2iz>
 8019b40:	9b02      	ldr	r3, [sp, #8]
 8019b42:	f843 0b04 	str.w	r0, [r3], #4
 8019b46:	3d01      	subs	r5, #1
 8019b48:	9302      	str	r3, [sp, #8]
 8019b4a:	ab70      	add	r3, sp, #448	; 0x1c0
 8019b4c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b54:	4640      	mov	r0, r8
 8019b56:	4649      	mov	r1, r9
 8019b58:	f7e6 fbb8 	bl	80002cc <__adddf3>
 8019b5c:	4606      	mov	r6, r0
 8019b5e:	460f      	mov	r7, r1
 8019b60:	e75b      	b.n	8019a1a <__kernel_rem_pio2+0x10a>
 8019b62:	d105      	bne.n	8019b70 <__kernel_rem_pio2+0x260>
 8019b64:	1e63      	subs	r3, r4, #1
 8019b66:	aa0c      	add	r2, sp, #48	; 0x30
 8019b68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019b6c:	15c3      	asrs	r3, r0, #23
 8019b6e:	e79b      	b.n	8019aa8 <__kernel_rem_pio2+0x198>
 8019b70:	4b38      	ldr	r3, [pc, #224]	; (8019c54 <__kernel_rem_pio2+0x344>)
 8019b72:	2200      	movs	r2, #0
 8019b74:	f7e6 ffe6 	bl	8000b44 <__aeabi_dcmpge>
 8019b78:	2800      	cmp	r0, #0
 8019b7a:	d139      	bne.n	8019bf0 <__kernel_rem_pio2+0x2e0>
 8019b7c:	9002      	str	r0, [sp, #8]
 8019b7e:	2200      	movs	r2, #0
 8019b80:	2300      	movs	r3, #0
 8019b82:	4630      	mov	r0, r6
 8019b84:	4639      	mov	r1, r7
 8019b86:	f7e6 ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 8019b8a:	2800      	cmp	r0, #0
 8019b8c:	f000 80b4 	beq.w	8019cf8 <__kernel_rem_pio2+0x3e8>
 8019b90:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8019b94:	465b      	mov	r3, fp
 8019b96:	2200      	movs	r2, #0
 8019b98:	9904      	ldr	r1, [sp, #16]
 8019b9a:	428b      	cmp	r3, r1
 8019b9c:	da65      	bge.n	8019c6a <__kernel_rem_pio2+0x35a>
 8019b9e:	2a00      	cmp	r2, #0
 8019ba0:	d07b      	beq.n	8019c9a <__kernel_rem_pio2+0x38a>
 8019ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8019ba4:	f1aa 0a18 	sub.w	sl, sl, #24
 8019ba8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	f000 80a0 	beq.w	8019cf2 <__kernel_rem_pio2+0x3e2>
 8019bb2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8019c38 <__kernel_rem_pio2+0x328>
 8019bb6:	4650      	mov	r0, sl
 8019bb8:	f000 fd6a 	bl	801a690 <scalbn>
 8019bbc:	4f23      	ldr	r7, [pc, #140]	; (8019c4c <__kernel_rem_pio2+0x33c>)
 8019bbe:	ec55 4b10 	vmov	r4, r5, d0
 8019bc2:	46d8      	mov	r8, fp
 8019bc4:	2600      	movs	r6, #0
 8019bc6:	f1b8 0f00 	cmp.w	r8, #0
 8019bca:	f280 80cf 	bge.w	8019d6c <__kernel_rem_pio2+0x45c>
 8019bce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8019c30 <__kernel_rem_pio2+0x320>
 8019bd2:	465f      	mov	r7, fp
 8019bd4:	f04f 0800 	mov.w	r8, #0
 8019bd8:	2f00      	cmp	r7, #0
 8019bda:	f2c0 80fd 	blt.w	8019dd8 <__kernel_rem_pio2+0x4c8>
 8019bde:	ab70      	add	r3, sp, #448	; 0x1c0
 8019be0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8019c58 <__kernel_rem_pio2+0x348>
 8019be4:	ec55 4b18 	vmov	r4, r5, d8
 8019be8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8019bec:	2600      	movs	r6, #0
 8019bee:	e0e5      	b.n	8019dbc <__kernel_rem_pio2+0x4ac>
 8019bf0:	2302      	movs	r3, #2
 8019bf2:	9302      	str	r3, [sp, #8]
 8019bf4:	e75c      	b.n	8019ab0 <__kernel_rem_pio2+0x1a0>
 8019bf6:	f8db 3000 	ldr.w	r3, [fp]
 8019bfa:	b955      	cbnz	r5, 8019c12 <__kernel_rem_pio2+0x302>
 8019bfc:	b123      	cbz	r3, 8019c08 <__kernel_rem_pio2+0x2f8>
 8019bfe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8019c02:	f8cb 3000 	str.w	r3, [fp]
 8019c06:	2301      	movs	r3, #1
 8019c08:	3201      	adds	r2, #1
 8019c0a:	f10b 0b04 	add.w	fp, fp, #4
 8019c0e:	461d      	mov	r5, r3
 8019c10:	e755      	b.n	8019abe <__kernel_rem_pio2+0x1ae>
 8019c12:	1acb      	subs	r3, r1, r3
 8019c14:	f8cb 3000 	str.w	r3, [fp]
 8019c18:	462b      	mov	r3, r5
 8019c1a:	e7f5      	b.n	8019c08 <__kernel_rem_pio2+0x2f8>
 8019c1c:	1e62      	subs	r2, r4, #1
 8019c1e:	ab0c      	add	r3, sp, #48	; 0x30
 8019c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019c28:	a90c      	add	r1, sp, #48	; 0x30
 8019c2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8019c2e:	e754      	b.n	8019ada <__kernel_rem_pio2+0x1ca>
	...
 8019c3c:	3ff00000 	.word	0x3ff00000
 8019c40:	0801cb40 	.word	0x0801cb40
 8019c44:	40200000 	.word	0x40200000
 8019c48:	3ff00000 	.word	0x3ff00000
 8019c4c:	3e700000 	.word	0x3e700000
 8019c50:	41700000 	.word	0x41700000
 8019c54:	3fe00000 	.word	0x3fe00000
 8019c58:	0801cb00 	.word	0x0801cb00
 8019c5c:	1e62      	subs	r2, r4, #1
 8019c5e:	ab0c      	add	r3, sp, #48	; 0x30
 8019c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019c68:	e7de      	b.n	8019c28 <__kernel_rem_pio2+0x318>
 8019c6a:	a90c      	add	r1, sp, #48	; 0x30
 8019c6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8019c70:	3b01      	subs	r3, #1
 8019c72:	430a      	orrs	r2, r1
 8019c74:	e790      	b.n	8019b98 <__kernel_rem_pio2+0x288>
 8019c76:	3301      	adds	r3, #1
 8019c78:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8019c7c:	2900      	cmp	r1, #0
 8019c7e:	d0fa      	beq.n	8019c76 <__kernel_rem_pio2+0x366>
 8019c80:	9a08      	ldr	r2, [sp, #32]
 8019c82:	18e3      	adds	r3, r4, r3
 8019c84:	18a6      	adds	r6, r4, r2
 8019c86:	aa20      	add	r2, sp, #128	; 0x80
 8019c88:	1c65      	adds	r5, r4, #1
 8019c8a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8019c8e:	9302      	str	r3, [sp, #8]
 8019c90:	9b02      	ldr	r3, [sp, #8]
 8019c92:	42ab      	cmp	r3, r5
 8019c94:	da04      	bge.n	8019ca0 <__kernel_rem_pio2+0x390>
 8019c96:	461c      	mov	r4, r3
 8019c98:	e6b5      	b.n	8019a06 <__kernel_rem_pio2+0xf6>
 8019c9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	e7eb      	b.n	8019c78 <__kernel_rem_pio2+0x368>
 8019ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019ca6:	f7e6 fc5d 	bl	8000564 <__aeabi_i2d>
 8019caa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cb0:	46b3      	mov	fp, r6
 8019cb2:	461c      	mov	r4, r3
 8019cb4:	2700      	movs	r7, #0
 8019cb6:	f04f 0800 	mov.w	r8, #0
 8019cba:	f04f 0900 	mov.w	r9, #0
 8019cbe:	9b06      	ldr	r3, [sp, #24]
 8019cc0:	429f      	cmp	r7, r3
 8019cc2:	dd06      	ble.n	8019cd2 <__kernel_rem_pio2+0x3c2>
 8019cc4:	ab70      	add	r3, sp, #448	; 0x1c0
 8019cc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019cca:	e9c3 8900 	strd	r8, r9, [r3]
 8019cce:	3501      	adds	r5, #1
 8019cd0:	e7de      	b.n	8019c90 <__kernel_rem_pio2+0x380>
 8019cd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8019cd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8019cda:	f7e6 fcad 	bl	8000638 <__aeabi_dmul>
 8019cde:	4602      	mov	r2, r0
 8019ce0:	460b      	mov	r3, r1
 8019ce2:	4640      	mov	r0, r8
 8019ce4:	4649      	mov	r1, r9
 8019ce6:	f7e6 faf1 	bl	80002cc <__adddf3>
 8019cea:	3701      	adds	r7, #1
 8019cec:	4680      	mov	r8, r0
 8019cee:	4689      	mov	r9, r1
 8019cf0:	e7e5      	b.n	8019cbe <__kernel_rem_pio2+0x3ae>
 8019cf2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019cf6:	e754      	b.n	8019ba2 <__kernel_rem_pio2+0x292>
 8019cf8:	ec47 6b10 	vmov	d0, r6, r7
 8019cfc:	f1ca 0000 	rsb	r0, sl, #0
 8019d00:	f000 fcc6 	bl	801a690 <scalbn>
 8019d04:	ec57 6b10 	vmov	r6, r7, d0
 8019d08:	4b9f      	ldr	r3, [pc, #636]	; (8019f88 <__kernel_rem_pio2+0x678>)
 8019d0a:	ee10 0a10 	vmov	r0, s0
 8019d0e:	2200      	movs	r2, #0
 8019d10:	4639      	mov	r1, r7
 8019d12:	f7e6 ff17 	bl	8000b44 <__aeabi_dcmpge>
 8019d16:	b300      	cbz	r0, 8019d5a <__kernel_rem_pio2+0x44a>
 8019d18:	4b9c      	ldr	r3, [pc, #624]	; (8019f8c <__kernel_rem_pio2+0x67c>)
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	4630      	mov	r0, r6
 8019d1e:	4639      	mov	r1, r7
 8019d20:	f7e6 fc8a 	bl	8000638 <__aeabi_dmul>
 8019d24:	f7e6 ff38 	bl	8000b98 <__aeabi_d2iz>
 8019d28:	4605      	mov	r5, r0
 8019d2a:	f7e6 fc1b 	bl	8000564 <__aeabi_i2d>
 8019d2e:	4b96      	ldr	r3, [pc, #600]	; (8019f88 <__kernel_rem_pio2+0x678>)
 8019d30:	2200      	movs	r2, #0
 8019d32:	f7e6 fc81 	bl	8000638 <__aeabi_dmul>
 8019d36:	460b      	mov	r3, r1
 8019d38:	4602      	mov	r2, r0
 8019d3a:	4639      	mov	r1, r7
 8019d3c:	4630      	mov	r0, r6
 8019d3e:	f7e6 fac3 	bl	80002c8 <__aeabi_dsub>
 8019d42:	f7e6 ff29 	bl	8000b98 <__aeabi_d2iz>
 8019d46:	f104 0b01 	add.w	fp, r4, #1
 8019d4a:	ab0c      	add	r3, sp, #48	; 0x30
 8019d4c:	f10a 0a18 	add.w	sl, sl, #24
 8019d50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019d54:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8019d58:	e72b      	b.n	8019bb2 <__kernel_rem_pio2+0x2a2>
 8019d5a:	4630      	mov	r0, r6
 8019d5c:	4639      	mov	r1, r7
 8019d5e:	f7e6 ff1b 	bl	8000b98 <__aeabi_d2iz>
 8019d62:	ab0c      	add	r3, sp, #48	; 0x30
 8019d64:	46a3      	mov	fp, r4
 8019d66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019d6a:	e722      	b.n	8019bb2 <__kernel_rem_pio2+0x2a2>
 8019d6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8019d6e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8019d72:	ab0c      	add	r3, sp, #48	; 0x30
 8019d74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019d78:	f7e6 fbf4 	bl	8000564 <__aeabi_i2d>
 8019d7c:	4622      	mov	r2, r4
 8019d7e:	462b      	mov	r3, r5
 8019d80:	f7e6 fc5a 	bl	8000638 <__aeabi_dmul>
 8019d84:	4632      	mov	r2, r6
 8019d86:	e9c9 0100 	strd	r0, r1, [r9]
 8019d8a:	463b      	mov	r3, r7
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	4629      	mov	r1, r5
 8019d90:	f7e6 fc52 	bl	8000638 <__aeabi_dmul>
 8019d94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8019d98:	4604      	mov	r4, r0
 8019d9a:	460d      	mov	r5, r1
 8019d9c:	e713      	b.n	8019bc6 <__kernel_rem_pio2+0x2b6>
 8019d9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8019da2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8019da6:	f7e6 fc47 	bl	8000638 <__aeabi_dmul>
 8019daa:	4602      	mov	r2, r0
 8019dac:	460b      	mov	r3, r1
 8019dae:	4620      	mov	r0, r4
 8019db0:	4629      	mov	r1, r5
 8019db2:	f7e6 fa8b 	bl	80002cc <__adddf3>
 8019db6:	3601      	adds	r6, #1
 8019db8:	4604      	mov	r4, r0
 8019dba:	460d      	mov	r5, r1
 8019dbc:	9b04      	ldr	r3, [sp, #16]
 8019dbe:	429e      	cmp	r6, r3
 8019dc0:	dc01      	bgt.n	8019dc6 <__kernel_rem_pio2+0x4b6>
 8019dc2:	45b0      	cmp	r8, r6
 8019dc4:	daeb      	bge.n	8019d9e <__kernel_rem_pio2+0x48e>
 8019dc6:	ab48      	add	r3, sp, #288	; 0x120
 8019dc8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019dcc:	e9c3 4500 	strd	r4, r5, [r3]
 8019dd0:	3f01      	subs	r7, #1
 8019dd2:	f108 0801 	add.w	r8, r8, #1
 8019dd6:	e6ff      	b.n	8019bd8 <__kernel_rem_pio2+0x2c8>
 8019dd8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8019dda:	2b02      	cmp	r3, #2
 8019ddc:	dc0b      	bgt.n	8019df6 <__kernel_rem_pio2+0x4e6>
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	dc6e      	bgt.n	8019ec0 <__kernel_rem_pio2+0x5b0>
 8019de2:	d045      	beq.n	8019e70 <__kernel_rem_pio2+0x560>
 8019de4:	9b07      	ldr	r3, [sp, #28]
 8019de6:	f003 0007 	and.w	r0, r3, #7
 8019dea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8019dee:	ecbd 8b02 	vpop	{d8}
 8019df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8019df8:	2b03      	cmp	r3, #3
 8019dfa:	d1f3      	bne.n	8019de4 <__kernel_rem_pio2+0x4d4>
 8019dfc:	ab48      	add	r3, sp, #288	; 0x120
 8019dfe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8019e02:	46d0      	mov	r8, sl
 8019e04:	46d9      	mov	r9, fp
 8019e06:	f1b9 0f00 	cmp.w	r9, #0
 8019e0a:	f1a8 0808 	sub.w	r8, r8, #8
 8019e0e:	dc64      	bgt.n	8019eda <__kernel_rem_pio2+0x5ca>
 8019e10:	465c      	mov	r4, fp
 8019e12:	2c01      	cmp	r4, #1
 8019e14:	f1aa 0a08 	sub.w	sl, sl, #8
 8019e18:	dc7e      	bgt.n	8019f18 <__kernel_rem_pio2+0x608>
 8019e1a:	2000      	movs	r0, #0
 8019e1c:	2100      	movs	r1, #0
 8019e1e:	f1bb 0f01 	cmp.w	fp, #1
 8019e22:	f300 8097 	bgt.w	8019f54 <__kernel_rem_pio2+0x644>
 8019e26:	9b02      	ldr	r3, [sp, #8]
 8019e28:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8019e2c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	f040 8099 	bne.w	8019f68 <__kernel_rem_pio2+0x658>
 8019e36:	9b01      	ldr	r3, [sp, #4]
 8019e38:	e9c3 5600 	strd	r5, r6, [r3]
 8019e3c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8019e40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8019e44:	e7ce      	b.n	8019de4 <__kernel_rem_pio2+0x4d4>
 8019e46:	ab48      	add	r3, sp, #288	; 0x120
 8019e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e50:	f7e6 fa3c 	bl	80002cc <__adddf3>
 8019e54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019e58:	f1bb 0f00 	cmp.w	fp, #0
 8019e5c:	daf3      	bge.n	8019e46 <__kernel_rem_pio2+0x536>
 8019e5e:	9b02      	ldr	r3, [sp, #8]
 8019e60:	b113      	cbz	r3, 8019e68 <__kernel_rem_pio2+0x558>
 8019e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019e66:	4619      	mov	r1, r3
 8019e68:	9b01      	ldr	r3, [sp, #4]
 8019e6a:	e9c3 0100 	strd	r0, r1, [r3]
 8019e6e:	e7b9      	b.n	8019de4 <__kernel_rem_pio2+0x4d4>
 8019e70:	2000      	movs	r0, #0
 8019e72:	2100      	movs	r1, #0
 8019e74:	e7f0      	b.n	8019e58 <__kernel_rem_pio2+0x548>
 8019e76:	ab48      	add	r3, sp, #288	; 0x120
 8019e78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e80:	f7e6 fa24 	bl	80002cc <__adddf3>
 8019e84:	3c01      	subs	r4, #1
 8019e86:	2c00      	cmp	r4, #0
 8019e88:	daf5      	bge.n	8019e76 <__kernel_rem_pio2+0x566>
 8019e8a:	9b02      	ldr	r3, [sp, #8]
 8019e8c:	b1e3      	cbz	r3, 8019ec8 <__kernel_rem_pio2+0x5b8>
 8019e8e:	4602      	mov	r2, r0
 8019e90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019e94:	9c01      	ldr	r4, [sp, #4]
 8019e96:	e9c4 2300 	strd	r2, r3, [r4]
 8019e9a:	4602      	mov	r2, r0
 8019e9c:	460b      	mov	r3, r1
 8019e9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8019ea2:	f7e6 fa11 	bl	80002c8 <__aeabi_dsub>
 8019ea6:	ad4a      	add	r5, sp, #296	; 0x128
 8019ea8:	2401      	movs	r4, #1
 8019eaa:	45a3      	cmp	fp, r4
 8019eac:	da0f      	bge.n	8019ece <__kernel_rem_pio2+0x5be>
 8019eae:	9b02      	ldr	r3, [sp, #8]
 8019eb0:	b113      	cbz	r3, 8019eb8 <__kernel_rem_pio2+0x5a8>
 8019eb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019eb6:	4619      	mov	r1, r3
 8019eb8:	9b01      	ldr	r3, [sp, #4]
 8019eba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019ebe:	e791      	b.n	8019de4 <__kernel_rem_pio2+0x4d4>
 8019ec0:	465c      	mov	r4, fp
 8019ec2:	2000      	movs	r0, #0
 8019ec4:	2100      	movs	r1, #0
 8019ec6:	e7de      	b.n	8019e86 <__kernel_rem_pio2+0x576>
 8019ec8:	4602      	mov	r2, r0
 8019eca:	460b      	mov	r3, r1
 8019ecc:	e7e2      	b.n	8019e94 <__kernel_rem_pio2+0x584>
 8019ece:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8019ed2:	f7e6 f9fb 	bl	80002cc <__adddf3>
 8019ed6:	3401      	adds	r4, #1
 8019ed8:	e7e7      	b.n	8019eaa <__kernel_rem_pio2+0x59a>
 8019eda:	e9d8 4500 	ldrd	r4, r5, [r8]
 8019ede:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	4632      	mov	r2, r6
 8019ee6:	463b      	mov	r3, r7
 8019ee8:	4629      	mov	r1, r5
 8019eea:	f7e6 f9ef 	bl	80002cc <__adddf3>
 8019eee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019ef2:	4602      	mov	r2, r0
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	4629      	mov	r1, r5
 8019efa:	f7e6 f9e5 	bl	80002c8 <__aeabi_dsub>
 8019efe:	4632      	mov	r2, r6
 8019f00:	463b      	mov	r3, r7
 8019f02:	f7e6 f9e3 	bl	80002cc <__adddf3>
 8019f06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019f0a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8019f0e:	ed88 7b00 	vstr	d7, [r8]
 8019f12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8019f16:	e776      	b.n	8019e06 <__kernel_rem_pio2+0x4f6>
 8019f18:	e9da 8900 	ldrd	r8, r9, [sl]
 8019f1c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8019f20:	4640      	mov	r0, r8
 8019f22:	4632      	mov	r2, r6
 8019f24:	463b      	mov	r3, r7
 8019f26:	4649      	mov	r1, r9
 8019f28:	f7e6 f9d0 	bl	80002cc <__adddf3>
 8019f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019f30:	4602      	mov	r2, r0
 8019f32:	460b      	mov	r3, r1
 8019f34:	4640      	mov	r0, r8
 8019f36:	4649      	mov	r1, r9
 8019f38:	f7e6 f9c6 	bl	80002c8 <__aeabi_dsub>
 8019f3c:	4632      	mov	r2, r6
 8019f3e:	463b      	mov	r3, r7
 8019f40:	f7e6 f9c4 	bl	80002cc <__adddf3>
 8019f44:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019f48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019f4c:	ed8a 7b00 	vstr	d7, [sl]
 8019f50:	3c01      	subs	r4, #1
 8019f52:	e75e      	b.n	8019e12 <__kernel_rem_pio2+0x502>
 8019f54:	ab48      	add	r3, sp, #288	; 0x120
 8019f56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5e:	f7e6 f9b5 	bl	80002cc <__adddf3>
 8019f62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019f66:	e75a      	b.n	8019e1e <__kernel_rem_pio2+0x50e>
 8019f68:	9b01      	ldr	r3, [sp, #4]
 8019f6a:	9a01      	ldr	r2, [sp, #4]
 8019f6c:	601d      	str	r5, [r3, #0]
 8019f6e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8019f72:	605c      	str	r4, [r3, #4]
 8019f74:	609f      	str	r7, [r3, #8]
 8019f76:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8019f7a:	60d3      	str	r3, [r2, #12]
 8019f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f80:	6110      	str	r0, [r2, #16]
 8019f82:	6153      	str	r3, [r2, #20]
 8019f84:	e72e      	b.n	8019de4 <__kernel_rem_pio2+0x4d4>
 8019f86:	bf00      	nop
 8019f88:	41700000 	.word	0x41700000
 8019f8c:	3e700000 	.word	0x3e700000

08019f90 <__kernel_sin>:
 8019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f94:	ed2d 8b04 	vpush	{d8-d9}
 8019f98:	eeb0 8a41 	vmov.f32	s16, s2
 8019f9c:	eef0 8a61 	vmov.f32	s17, s3
 8019fa0:	ec55 4b10 	vmov	r4, r5, d0
 8019fa4:	b083      	sub	sp, #12
 8019fa6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019faa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019fae:	9001      	str	r0, [sp, #4]
 8019fb0:	da06      	bge.n	8019fc0 <__kernel_sin+0x30>
 8019fb2:	ee10 0a10 	vmov	r0, s0
 8019fb6:	4629      	mov	r1, r5
 8019fb8:	f7e6 fdee 	bl	8000b98 <__aeabi_d2iz>
 8019fbc:	2800      	cmp	r0, #0
 8019fbe:	d051      	beq.n	801a064 <__kernel_sin+0xd4>
 8019fc0:	4622      	mov	r2, r4
 8019fc2:	462b      	mov	r3, r5
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	4629      	mov	r1, r5
 8019fc8:	f7e6 fb36 	bl	8000638 <__aeabi_dmul>
 8019fcc:	4682      	mov	sl, r0
 8019fce:	468b      	mov	fp, r1
 8019fd0:	4602      	mov	r2, r0
 8019fd2:	460b      	mov	r3, r1
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	4629      	mov	r1, r5
 8019fd8:	f7e6 fb2e 	bl	8000638 <__aeabi_dmul>
 8019fdc:	a341      	add	r3, pc, #260	; (adr r3, 801a0e4 <__kernel_sin+0x154>)
 8019fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe2:	4680      	mov	r8, r0
 8019fe4:	4689      	mov	r9, r1
 8019fe6:	4650      	mov	r0, sl
 8019fe8:	4659      	mov	r1, fp
 8019fea:	f7e6 fb25 	bl	8000638 <__aeabi_dmul>
 8019fee:	a33f      	add	r3, pc, #252	; (adr r3, 801a0ec <__kernel_sin+0x15c>)
 8019ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ff4:	f7e6 f968 	bl	80002c8 <__aeabi_dsub>
 8019ff8:	4652      	mov	r2, sl
 8019ffa:	465b      	mov	r3, fp
 8019ffc:	f7e6 fb1c 	bl	8000638 <__aeabi_dmul>
 801a000:	a33c      	add	r3, pc, #240	; (adr r3, 801a0f4 <__kernel_sin+0x164>)
 801a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a006:	f7e6 f961 	bl	80002cc <__adddf3>
 801a00a:	4652      	mov	r2, sl
 801a00c:	465b      	mov	r3, fp
 801a00e:	f7e6 fb13 	bl	8000638 <__aeabi_dmul>
 801a012:	a33a      	add	r3, pc, #232	; (adr r3, 801a0fc <__kernel_sin+0x16c>)
 801a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a018:	f7e6 f956 	bl	80002c8 <__aeabi_dsub>
 801a01c:	4652      	mov	r2, sl
 801a01e:	465b      	mov	r3, fp
 801a020:	f7e6 fb0a 	bl	8000638 <__aeabi_dmul>
 801a024:	a337      	add	r3, pc, #220	; (adr r3, 801a104 <__kernel_sin+0x174>)
 801a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a02a:	f7e6 f94f 	bl	80002cc <__adddf3>
 801a02e:	9b01      	ldr	r3, [sp, #4]
 801a030:	4606      	mov	r6, r0
 801a032:	460f      	mov	r7, r1
 801a034:	b9eb      	cbnz	r3, 801a072 <__kernel_sin+0xe2>
 801a036:	4602      	mov	r2, r0
 801a038:	460b      	mov	r3, r1
 801a03a:	4650      	mov	r0, sl
 801a03c:	4659      	mov	r1, fp
 801a03e:	f7e6 fafb 	bl	8000638 <__aeabi_dmul>
 801a042:	a325      	add	r3, pc, #148	; (adr r3, 801a0d8 <__kernel_sin+0x148>)
 801a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a048:	f7e6 f93e 	bl	80002c8 <__aeabi_dsub>
 801a04c:	4642      	mov	r2, r8
 801a04e:	464b      	mov	r3, r9
 801a050:	f7e6 faf2 	bl	8000638 <__aeabi_dmul>
 801a054:	4602      	mov	r2, r0
 801a056:	460b      	mov	r3, r1
 801a058:	4620      	mov	r0, r4
 801a05a:	4629      	mov	r1, r5
 801a05c:	f7e6 f936 	bl	80002cc <__adddf3>
 801a060:	4604      	mov	r4, r0
 801a062:	460d      	mov	r5, r1
 801a064:	ec45 4b10 	vmov	d0, r4, r5
 801a068:	b003      	add	sp, #12
 801a06a:	ecbd 8b04 	vpop	{d8-d9}
 801a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a072:	4b1b      	ldr	r3, [pc, #108]	; (801a0e0 <__kernel_sin+0x150>)
 801a074:	ec51 0b18 	vmov	r0, r1, d8
 801a078:	2200      	movs	r2, #0
 801a07a:	f7e6 fadd 	bl	8000638 <__aeabi_dmul>
 801a07e:	4632      	mov	r2, r6
 801a080:	ec41 0b19 	vmov	d9, r0, r1
 801a084:	463b      	mov	r3, r7
 801a086:	4640      	mov	r0, r8
 801a088:	4649      	mov	r1, r9
 801a08a:	f7e6 fad5 	bl	8000638 <__aeabi_dmul>
 801a08e:	4602      	mov	r2, r0
 801a090:	460b      	mov	r3, r1
 801a092:	ec51 0b19 	vmov	r0, r1, d9
 801a096:	f7e6 f917 	bl	80002c8 <__aeabi_dsub>
 801a09a:	4652      	mov	r2, sl
 801a09c:	465b      	mov	r3, fp
 801a09e:	f7e6 facb 	bl	8000638 <__aeabi_dmul>
 801a0a2:	ec53 2b18 	vmov	r2, r3, d8
 801a0a6:	f7e6 f90f 	bl	80002c8 <__aeabi_dsub>
 801a0aa:	a30b      	add	r3, pc, #44	; (adr r3, 801a0d8 <__kernel_sin+0x148>)
 801a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0b0:	4606      	mov	r6, r0
 801a0b2:	460f      	mov	r7, r1
 801a0b4:	4640      	mov	r0, r8
 801a0b6:	4649      	mov	r1, r9
 801a0b8:	f7e6 fabe 	bl	8000638 <__aeabi_dmul>
 801a0bc:	4602      	mov	r2, r0
 801a0be:	460b      	mov	r3, r1
 801a0c0:	4630      	mov	r0, r6
 801a0c2:	4639      	mov	r1, r7
 801a0c4:	f7e6 f902 	bl	80002cc <__adddf3>
 801a0c8:	4602      	mov	r2, r0
 801a0ca:	460b      	mov	r3, r1
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	4629      	mov	r1, r5
 801a0d0:	f7e6 f8fa 	bl	80002c8 <__aeabi_dsub>
 801a0d4:	e7c4      	b.n	801a060 <__kernel_sin+0xd0>
 801a0d6:	bf00      	nop
 801a0d8:	55555549 	.word	0x55555549
 801a0dc:	3fc55555 	.word	0x3fc55555
 801a0e0:	3fe00000 	.word	0x3fe00000
 801a0e4:	5acfd57c 	.word	0x5acfd57c
 801a0e8:	3de5d93a 	.word	0x3de5d93a
 801a0ec:	8a2b9ceb 	.word	0x8a2b9ceb
 801a0f0:	3e5ae5e6 	.word	0x3e5ae5e6
 801a0f4:	57b1fe7d 	.word	0x57b1fe7d
 801a0f8:	3ec71de3 	.word	0x3ec71de3
 801a0fc:	19c161d5 	.word	0x19c161d5
 801a100:	3f2a01a0 	.word	0x3f2a01a0
 801a104:	1110f8a6 	.word	0x1110f8a6
 801a108:	3f811111 	.word	0x3f811111
 801a10c:	00000000 	.word	0x00000000

0801a110 <atan>:
 801a110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a114:	ec55 4b10 	vmov	r4, r5, d0
 801a118:	4bc3      	ldr	r3, [pc, #780]	; (801a428 <atan+0x318>)
 801a11a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a11e:	429e      	cmp	r6, r3
 801a120:	46ab      	mov	fp, r5
 801a122:	dd18      	ble.n	801a156 <atan+0x46>
 801a124:	4bc1      	ldr	r3, [pc, #772]	; (801a42c <atan+0x31c>)
 801a126:	429e      	cmp	r6, r3
 801a128:	dc01      	bgt.n	801a12e <atan+0x1e>
 801a12a:	d109      	bne.n	801a140 <atan+0x30>
 801a12c:	b144      	cbz	r4, 801a140 <atan+0x30>
 801a12e:	4622      	mov	r2, r4
 801a130:	462b      	mov	r3, r5
 801a132:	4620      	mov	r0, r4
 801a134:	4629      	mov	r1, r5
 801a136:	f7e6 f8c9 	bl	80002cc <__adddf3>
 801a13a:	4604      	mov	r4, r0
 801a13c:	460d      	mov	r5, r1
 801a13e:	e006      	b.n	801a14e <atan+0x3e>
 801a140:	f1bb 0f00 	cmp.w	fp, #0
 801a144:	f300 8131 	bgt.w	801a3aa <atan+0x29a>
 801a148:	a59b      	add	r5, pc, #620	; (adr r5, 801a3b8 <atan+0x2a8>)
 801a14a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a14e:	ec45 4b10 	vmov	d0, r4, r5
 801a152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a156:	4bb6      	ldr	r3, [pc, #728]	; (801a430 <atan+0x320>)
 801a158:	429e      	cmp	r6, r3
 801a15a:	dc14      	bgt.n	801a186 <atan+0x76>
 801a15c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a160:	429e      	cmp	r6, r3
 801a162:	dc0d      	bgt.n	801a180 <atan+0x70>
 801a164:	a396      	add	r3, pc, #600	; (adr r3, 801a3c0 <atan+0x2b0>)
 801a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a16a:	ee10 0a10 	vmov	r0, s0
 801a16e:	4629      	mov	r1, r5
 801a170:	f7e6 f8ac 	bl	80002cc <__adddf3>
 801a174:	4baf      	ldr	r3, [pc, #700]	; (801a434 <atan+0x324>)
 801a176:	2200      	movs	r2, #0
 801a178:	f7e6 fcee 	bl	8000b58 <__aeabi_dcmpgt>
 801a17c:	2800      	cmp	r0, #0
 801a17e:	d1e6      	bne.n	801a14e <atan+0x3e>
 801a180:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a184:	e02b      	b.n	801a1de <atan+0xce>
 801a186:	f000 f963 	bl	801a450 <fabs>
 801a18a:	4bab      	ldr	r3, [pc, #684]	; (801a438 <atan+0x328>)
 801a18c:	429e      	cmp	r6, r3
 801a18e:	ec55 4b10 	vmov	r4, r5, d0
 801a192:	f300 80bf 	bgt.w	801a314 <atan+0x204>
 801a196:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a19a:	429e      	cmp	r6, r3
 801a19c:	f300 80a0 	bgt.w	801a2e0 <atan+0x1d0>
 801a1a0:	ee10 2a10 	vmov	r2, s0
 801a1a4:	ee10 0a10 	vmov	r0, s0
 801a1a8:	462b      	mov	r3, r5
 801a1aa:	4629      	mov	r1, r5
 801a1ac:	f7e6 f88e 	bl	80002cc <__adddf3>
 801a1b0:	4ba0      	ldr	r3, [pc, #640]	; (801a434 <atan+0x324>)
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	f7e6 f888 	bl	80002c8 <__aeabi_dsub>
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	4606      	mov	r6, r0
 801a1bc:	460f      	mov	r7, r1
 801a1be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	4629      	mov	r1, r5
 801a1c6:	f7e6 f881 	bl	80002cc <__adddf3>
 801a1ca:	4602      	mov	r2, r0
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	4630      	mov	r0, r6
 801a1d0:	4639      	mov	r1, r7
 801a1d2:	f7e6 fb5b 	bl	800088c <__aeabi_ddiv>
 801a1d6:	f04f 0a00 	mov.w	sl, #0
 801a1da:	4604      	mov	r4, r0
 801a1dc:	460d      	mov	r5, r1
 801a1de:	4622      	mov	r2, r4
 801a1e0:	462b      	mov	r3, r5
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	4629      	mov	r1, r5
 801a1e6:	f7e6 fa27 	bl	8000638 <__aeabi_dmul>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	4680      	mov	r8, r0
 801a1f0:	4689      	mov	r9, r1
 801a1f2:	f7e6 fa21 	bl	8000638 <__aeabi_dmul>
 801a1f6:	a374      	add	r3, pc, #464	; (adr r3, 801a3c8 <atan+0x2b8>)
 801a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1fc:	4606      	mov	r6, r0
 801a1fe:	460f      	mov	r7, r1
 801a200:	f7e6 fa1a 	bl	8000638 <__aeabi_dmul>
 801a204:	a372      	add	r3, pc, #456	; (adr r3, 801a3d0 <atan+0x2c0>)
 801a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a20a:	f7e6 f85f 	bl	80002cc <__adddf3>
 801a20e:	4632      	mov	r2, r6
 801a210:	463b      	mov	r3, r7
 801a212:	f7e6 fa11 	bl	8000638 <__aeabi_dmul>
 801a216:	a370      	add	r3, pc, #448	; (adr r3, 801a3d8 <atan+0x2c8>)
 801a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21c:	f7e6 f856 	bl	80002cc <__adddf3>
 801a220:	4632      	mov	r2, r6
 801a222:	463b      	mov	r3, r7
 801a224:	f7e6 fa08 	bl	8000638 <__aeabi_dmul>
 801a228:	a36d      	add	r3, pc, #436	; (adr r3, 801a3e0 <atan+0x2d0>)
 801a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a22e:	f7e6 f84d 	bl	80002cc <__adddf3>
 801a232:	4632      	mov	r2, r6
 801a234:	463b      	mov	r3, r7
 801a236:	f7e6 f9ff 	bl	8000638 <__aeabi_dmul>
 801a23a:	a36b      	add	r3, pc, #428	; (adr r3, 801a3e8 <atan+0x2d8>)
 801a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a240:	f7e6 f844 	bl	80002cc <__adddf3>
 801a244:	4632      	mov	r2, r6
 801a246:	463b      	mov	r3, r7
 801a248:	f7e6 f9f6 	bl	8000638 <__aeabi_dmul>
 801a24c:	a368      	add	r3, pc, #416	; (adr r3, 801a3f0 <atan+0x2e0>)
 801a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a252:	f7e6 f83b 	bl	80002cc <__adddf3>
 801a256:	4642      	mov	r2, r8
 801a258:	464b      	mov	r3, r9
 801a25a:	f7e6 f9ed 	bl	8000638 <__aeabi_dmul>
 801a25e:	a366      	add	r3, pc, #408	; (adr r3, 801a3f8 <atan+0x2e8>)
 801a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a264:	4680      	mov	r8, r0
 801a266:	4689      	mov	r9, r1
 801a268:	4630      	mov	r0, r6
 801a26a:	4639      	mov	r1, r7
 801a26c:	f7e6 f9e4 	bl	8000638 <__aeabi_dmul>
 801a270:	a363      	add	r3, pc, #396	; (adr r3, 801a400 <atan+0x2f0>)
 801a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a276:	f7e6 f827 	bl	80002c8 <__aeabi_dsub>
 801a27a:	4632      	mov	r2, r6
 801a27c:	463b      	mov	r3, r7
 801a27e:	f7e6 f9db 	bl	8000638 <__aeabi_dmul>
 801a282:	a361      	add	r3, pc, #388	; (adr r3, 801a408 <atan+0x2f8>)
 801a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a288:	f7e6 f81e 	bl	80002c8 <__aeabi_dsub>
 801a28c:	4632      	mov	r2, r6
 801a28e:	463b      	mov	r3, r7
 801a290:	f7e6 f9d2 	bl	8000638 <__aeabi_dmul>
 801a294:	a35e      	add	r3, pc, #376	; (adr r3, 801a410 <atan+0x300>)
 801a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a29a:	f7e6 f815 	bl	80002c8 <__aeabi_dsub>
 801a29e:	4632      	mov	r2, r6
 801a2a0:	463b      	mov	r3, r7
 801a2a2:	f7e6 f9c9 	bl	8000638 <__aeabi_dmul>
 801a2a6:	a35c      	add	r3, pc, #368	; (adr r3, 801a418 <atan+0x308>)
 801a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ac:	f7e6 f80c 	bl	80002c8 <__aeabi_dsub>
 801a2b0:	4632      	mov	r2, r6
 801a2b2:	463b      	mov	r3, r7
 801a2b4:	f7e6 f9c0 	bl	8000638 <__aeabi_dmul>
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	4640      	mov	r0, r8
 801a2be:	4649      	mov	r1, r9
 801a2c0:	f7e6 f804 	bl	80002cc <__adddf3>
 801a2c4:	4622      	mov	r2, r4
 801a2c6:	462b      	mov	r3, r5
 801a2c8:	f7e6 f9b6 	bl	8000638 <__aeabi_dmul>
 801a2cc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801a2d0:	4602      	mov	r2, r0
 801a2d2:	460b      	mov	r3, r1
 801a2d4:	d14b      	bne.n	801a36e <atan+0x25e>
 801a2d6:	4620      	mov	r0, r4
 801a2d8:	4629      	mov	r1, r5
 801a2da:	f7e5 fff5 	bl	80002c8 <__aeabi_dsub>
 801a2de:	e72c      	b.n	801a13a <atan+0x2a>
 801a2e0:	ee10 0a10 	vmov	r0, s0
 801a2e4:	4b53      	ldr	r3, [pc, #332]	; (801a434 <atan+0x324>)
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	4629      	mov	r1, r5
 801a2ea:	f7e5 ffed 	bl	80002c8 <__aeabi_dsub>
 801a2ee:	4b51      	ldr	r3, [pc, #324]	; (801a434 <atan+0x324>)
 801a2f0:	4606      	mov	r6, r0
 801a2f2:	460f      	mov	r7, r1
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	4629      	mov	r1, r5
 801a2fa:	f7e5 ffe7 	bl	80002cc <__adddf3>
 801a2fe:	4602      	mov	r2, r0
 801a300:	460b      	mov	r3, r1
 801a302:	4630      	mov	r0, r6
 801a304:	4639      	mov	r1, r7
 801a306:	f7e6 fac1 	bl	800088c <__aeabi_ddiv>
 801a30a:	f04f 0a01 	mov.w	sl, #1
 801a30e:	4604      	mov	r4, r0
 801a310:	460d      	mov	r5, r1
 801a312:	e764      	b.n	801a1de <atan+0xce>
 801a314:	4b49      	ldr	r3, [pc, #292]	; (801a43c <atan+0x32c>)
 801a316:	429e      	cmp	r6, r3
 801a318:	da1d      	bge.n	801a356 <atan+0x246>
 801a31a:	ee10 0a10 	vmov	r0, s0
 801a31e:	4b48      	ldr	r3, [pc, #288]	; (801a440 <atan+0x330>)
 801a320:	2200      	movs	r2, #0
 801a322:	4629      	mov	r1, r5
 801a324:	f7e5 ffd0 	bl	80002c8 <__aeabi_dsub>
 801a328:	4b45      	ldr	r3, [pc, #276]	; (801a440 <atan+0x330>)
 801a32a:	4606      	mov	r6, r0
 801a32c:	460f      	mov	r7, r1
 801a32e:	2200      	movs	r2, #0
 801a330:	4620      	mov	r0, r4
 801a332:	4629      	mov	r1, r5
 801a334:	f7e6 f980 	bl	8000638 <__aeabi_dmul>
 801a338:	4b3e      	ldr	r3, [pc, #248]	; (801a434 <atan+0x324>)
 801a33a:	2200      	movs	r2, #0
 801a33c:	f7e5 ffc6 	bl	80002cc <__adddf3>
 801a340:	4602      	mov	r2, r0
 801a342:	460b      	mov	r3, r1
 801a344:	4630      	mov	r0, r6
 801a346:	4639      	mov	r1, r7
 801a348:	f7e6 faa0 	bl	800088c <__aeabi_ddiv>
 801a34c:	f04f 0a02 	mov.w	sl, #2
 801a350:	4604      	mov	r4, r0
 801a352:	460d      	mov	r5, r1
 801a354:	e743      	b.n	801a1de <atan+0xce>
 801a356:	462b      	mov	r3, r5
 801a358:	ee10 2a10 	vmov	r2, s0
 801a35c:	4939      	ldr	r1, [pc, #228]	; (801a444 <atan+0x334>)
 801a35e:	2000      	movs	r0, #0
 801a360:	f7e6 fa94 	bl	800088c <__aeabi_ddiv>
 801a364:	f04f 0a03 	mov.w	sl, #3
 801a368:	4604      	mov	r4, r0
 801a36a:	460d      	mov	r5, r1
 801a36c:	e737      	b.n	801a1de <atan+0xce>
 801a36e:	4b36      	ldr	r3, [pc, #216]	; (801a448 <atan+0x338>)
 801a370:	4e36      	ldr	r6, [pc, #216]	; (801a44c <atan+0x33c>)
 801a372:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a376:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a37a:	e9da 2300 	ldrd	r2, r3, [sl]
 801a37e:	f7e5 ffa3 	bl	80002c8 <__aeabi_dsub>
 801a382:	4622      	mov	r2, r4
 801a384:	462b      	mov	r3, r5
 801a386:	f7e5 ff9f 	bl	80002c8 <__aeabi_dsub>
 801a38a:	4602      	mov	r2, r0
 801a38c:	460b      	mov	r3, r1
 801a38e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a392:	f7e5 ff99 	bl	80002c8 <__aeabi_dsub>
 801a396:	f1bb 0f00 	cmp.w	fp, #0
 801a39a:	4604      	mov	r4, r0
 801a39c:	460d      	mov	r5, r1
 801a39e:	f6bf aed6 	bge.w	801a14e <atan+0x3e>
 801a3a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a3a6:	461d      	mov	r5, r3
 801a3a8:	e6d1      	b.n	801a14e <atan+0x3e>
 801a3aa:	a51d      	add	r5, pc, #116	; (adr r5, 801a420 <atan+0x310>)
 801a3ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a3b0:	e6cd      	b.n	801a14e <atan+0x3e>
 801a3b2:	bf00      	nop
 801a3b4:	f3af 8000 	nop.w
 801a3b8:	54442d18 	.word	0x54442d18
 801a3bc:	bff921fb 	.word	0xbff921fb
 801a3c0:	8800759c 	.word	0x8800759c
 801a3c4:	7e37e43c 	.word	0x7e37e43c
 801a3c8:	e322da11 	.word	0xe322da11
 801a3cc:	3f90ad3a 	.word	0x3f90ad3a
 801a3d0:	24760deb 	.word	0x24760deb
 801a3d4:	3fa97b4b 	.word	0x3fa97b4b
 801a3d8:	a0d03d51 	.word	0xa0d03d51
 801a3dc:	3fb10d66 	.word	0x3fb10d66
 801a3e0:	c54c206e 	.word	0xc54c206e
 801a3e4:	3fb745cd 	.word	0x3fb745cd
 801a3e8:	920083ff 	.word	0x920083ff
 801a3ec:	3fc24924 	.word	0x3fc24924
 801a3f0:	5555550d 	.word	0x5555550d
 801a3f4:	3fd55555 	.word	0x3fd55555
 801a3f8:	2c6a6c2f 	.word	0x2c6a6c2f
 801a3fc:	bfa2b444 	.word	0xbfa2b444
 801a400:	52defd9a 	.word	0x52defd9a
 801a404:	3fadde2d 	.word	0x3fadde2d
 801a408:	af749a6d 	.word	0xaf749a6d
 801a40c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a410:	fe231671 	.word	0xfe231671
 801a414:	3fbc71c6 	.word	0x3fbc71c6
 801a418:	9998ebc4 	.word	0x9998ebc4
 801a41c:	3fc99999 	.word	0x3fc99999
 801a420:	54442d18 	.word	0x54442d18
 801a424:	3ff921fb 	.word	0x3ff921fb
 801a428:	440fffff 	.word	0x440fffff
 801a42c:	7ff00000 	.word	0x7ff00000
 801a430:	3fdbffff 	.word	0x3fdbffff
 801a434:	3ff00000 	.word	0x3ff00000
 801a438:	3ff2ffff 	.word	0x3ff2ffff
 801a43c:	40038000 	.word	0x40038000
 801a440:	3ff80000 	.word	0x3ff80000
 801a444:	bff00000 	.word	0xbff00000
 801a448:	0801cb70 	.word	0x0801cb70
 801a44c:	0801cb50 	.word	0x0801cb50

0801a450 <fabs>:
 801a450:	ec51 0b10 	vmov	r0, r1, d0
 801a454:	ee10 2a10 	vmov	r2, s0
 801a458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a45c:	ec43 2b10 	vmov	d0, r2, r3
 801a460:	4770      	bx	lr

0801a462 <finite>:
 801a462:	b082      	sub	sp, #8
 801a464:	ed8d 0b00 	vstr	d0, [sp]
 801a468:	9801      	ldr	r0, [sp, #4]
 801a46a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a46e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a472:	0fc0      	lsrs	r0, r0, #31
 801a474:	b002      	add	sp, #8
 801a476:	4770      	bx	lr

0801a478 <floor>:
 801a478:	ec51 0b10 	vmov	r0, r1, d0
 801a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a480:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a484:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a488:	2e13      	cmp	r6, #19
 801a48a:	ee10 5a10 	vmov	r5, s0
 801a48e:	ee10 8a10 	vmov	r8, s0
 801a492:	460c      	mov	r4, r1
 801a494:	dc32      	bgt.n	801a4fc <floor+0x84>
 801a496:	2e00      	cmp	r6, #0
 801a498:	da14      	bge.n	801a4c4 <floor+0x4c>
 801a49a:	a333      	add	r3, pc, #204	; (adr r3, 801a568 <floor+0xf0>)
 801a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4a0:	f7e5 ff14 	bl	80002cc <__adddf3>
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	f7e6 fb56 	bl	8000b58 <__aeabi_dcmpgt>
 801a4ac:	b138      	cbz	r0, 801a4be <floor+0x46>
 801a4ae:	2c00      	cmp	r4, #0
 801a4b0:	da57      	bge.n	801a562 <floor+0xea>
 801a4b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a4b6:	431d      	orrs	r5, r3
 801a4b8:	d001      	beq.n	801a4be <floor+0x46>
 801a4ba:	4c2d      	ldr	r4, [pc, #180]	; (801a570 <floor+0xf8>)
 801a4bc:	2500      	movs	r5, #0
 801a4be:	4621      	mov	r1, r4
 801a4c0:	4628      	mov	r0, r5
 801a4c2:	e025      	b.n	801a510 <floor+0x98>
 801a4c4:	4f2b      	ldr	r7, [pc, #172]	; (801a574 <floor+0xfc>)
 801a4c6:	4137      	asrs	r7, r6
 801a4c8:	ea01 0307 	and.w	r3, r1, r7
 801a4cc:	4303      	orrs	r3, r0
 801a4ce:	d01f      	beq.n	801a510 <floor+0x98>
 801a4d0:	a325      	add	r3, pc, #148	; (adr r3, 801a568 <floor+0xf0>)
 801a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d6:	f7e5 fef9 	bl	80002cc <__adddf3>
 801a4da:	2200      	movs	r2, #0
 801a4dc:	2300      	movs	r3, #0
 801a4de:	f7e6 fb3b 	bl	8000b58 <__aeabi_dcmpgt>
 801a4e2:	2800      	cmp	r0, #0
 801a4e4:	d0eb      	beq.n	801a4be <floor+0x46>
 801a4e6:	2c00      	cmp	r4, #0
 801a4e8:	bfbe      	ittt	lt
 801a4ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a4ee:	fa43 f606 	asrlt.w	r6, r3, r6
 801a4f2:	19a4      	addlt	r4, r4, r6
 801a4f4:	ea24 0407 	bic.w	r4, r4, r7
 801a4f8:	2500      	movs	r5, #0
 801a4fa:	e7e0      	b.n	801a4be <floor+0x46>
 801a4fc:	2e33      	cmp	r6, #51	; 0x33
 801a4fe:	dd0b      	ble.n	801a518 <floor+0xa0>
 801a500:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a504:	d104      	bne.n	801a510 <floor+0x98>
 801a506:	ee10 2a10 	vmov	r2, s0
 801a50a:	460b      	mov	r3, r1
 801a50c:	f7e5 fede 	bl	80002cc <__adddf3>
 801a510:	ec41 0b10 	vmov	d0, r0, r1
 801a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a518:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a520:	fa23 f707 	lsr.w	r7, r3, r7
 801a524:	4207      	tst	r7, r0
 801a526:	d0f3      	beq.n	801a510 <floor+0x98>
 801a528:	a30f      	add	r3, pc, #60	; (adr r3, 801a568 <floor+0xf0>)
 801a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a52e:	f7e5 fecd 	bl	80002cc <__adddf3>
 801a532:	2200      	movs	r2, #0
 801a534:	2300      	movs	r3, #0
 801a536:	f7e6 fb0f 	bl	8000b58 <__aeabi_dcmpgt>
 801a53a:	2800      	cmp	r0, #0
 801a53c:	d0bf      	beq.n	801a4be <floor+0x46>
 801a53e:	2c00      	cmp	r4, #0
 801a540:	da02      	bge.n	801a548 <floor+0xd0>
 801a542:	2e14      	cmp	r6, #20
 801a544:	d103      	bne.n	801a54e <floor+0xd6>
 801a546:	3401      	adds	r4, #1
 801a548:	ea25 0507 	bic.w	r5, r5, r7
 801a54c:	e7b7      	b.n	801a4be <floor+0x46>
 801a54e:	2301      	movs	r3, #1
 801a550:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a554:	fa03 f606 	lsl.w	r6, r3, r6
 801a558:	4435      	add	r5, r6
 801a55a:	4545      	cmp	r5, r8
 801a55c:	bf38      	it	cc
 801a55e:	18e4      	addcc	r4, r4, r3
 801a560:	e7f2      	b.n	801a548 <floor+0xd0>
 801a562:	2500      	movs	r5, #0
 801a564:	462c      	mov	r4, r5
 801a566:	e7aa      	b.n	801a4be <floor+0x46>
 801a568:	8800759c 	.word	0x8800759c
 801a56c:	7e37e43c 	.word	0x7e37e43c
 801a570:	bff00000 	.word	0xbff00000
 801a574:	000fffff 	.word	0x000fffff

0801a578 <rint>:
 801a578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a57a:	ec51 0b10 	vmov	r0, r1, d0
 801a57e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a582:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a586:	2e13      	cmp	r6, #19
 801a588:	ee10 4a10 	vmov	r4, s0
 801a58c:	460b      	mov	r3, r1
 801a58e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a592:	dc58      	bgt.n	801a646 <rint+0xce>
 801a594:	2e00      	cmp	r6, #0
 801a596:	da2b      	bge.n	801a5f0 <rint+0x78>
 801a598:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a59c:	4302      	orrs	r2, r0
 801a59e:	d023      	beq.n	801a5e8 <rint+0x70>
 801a5a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a5a4:	4302      	orrs	r2, r0
 801a5a6:	4254      	negs	r4, r2
 801a5a8:	4314      	orrs	r4, r2
 801a5aa:	0c4b      	lsrs	r3, r1, #17
 801a5ac:	0b24      	lsrs	r4, r4, #12
 801a5ae:	045b      	lsls	r3, r3, #17
 801a5b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a5b4:	ea44 0103 	orr.w	r1, r4, r3
 801a5b8:	4b32      	ldr	r3, [pc, #200]	; (801a684 <rint+0x10c>)
 801a5ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a5be:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a5c2:	4602      	mov	r2, r0
 801a5c4:	460b      	mov	r3, r1
 801a5c6:	4630      	mov	r0, r6
 801a5c8:	4639      	mov	r1, r7
 801a5ca:	f7e5 fe7f 	bl	80002cc <__adddf3>
 801a5ce:	e9cd 0100 	strd	r0, r1, [sp]
 801a5d2:	463b      	mov	r3, r7
 801a5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5d8:	4632      	mov	r2, r6
 801a5da:	f7e5 fe75 	bl	80002c8 <__aeabi_dsub>
 801a5de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a5e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a5e6:	4639      	mov	r1, r7
 801a5e8:	ec41 0b10 	vmov	d0, r0, r1
 801a5ec:	b003      	add	sp, #12
 801a5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5f0:	4a25      	ldr	r2, [pc, #148]	; (801a688 <rint+0x110>)
 801a5f2:	4132      	asrs	r2, r6
 801a5f4:	ea01 0702 	and.w	r7, r1, r2
 801a5f8:	4307      	orrs	r7, r0
 801a5fa:	d0f5      	beq.n	801a5e8 <rint+0x70>
 801a5fc:	0851      	lsrs	r1, r2, #1
 801a5fe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a602:	4314      	orrs	r4, r2
 801a604:	d00c      	beq.n	801a620 <rint+0xa8>
 801a606:	ea23 0201 	bic.w	r2, r3, r1
 801a60a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a60e:	2e13      	cmp	r6, #19
 801a610:	fa43 f606 	asr.w	r6, r3, r6
 801a614:	bf0c      	ite	eq
 801a616:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a61a:	2400      	movne	r4, #0
 801a61c:	ea42 0306 	orr.w	r3, r2, r6
 801a620:	4918      	ldr	r1, [pc, #96]	; (801a684 <rint+0x10c>)
 801a622:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a626:	4622      	mov	r2, r4
 801a628:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a62c:	4620      	mov	r0, r4
 801a62e:	4629      	mov	r1, r5
 801a630:	f7e5 fe4c 	bl	80002cc <__adddf3>
 801a634:	e9cd 0100 	strd	r0, r1, [sp]
 801a638:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a63c:	4622      	mov	r2, r4
 801a63e:	462b      	mov	r3, r5
 801a640:	f7e5 fe42 	bl	80002c8 <__aeabi_dsub>
 801a644:	e7d0      	b.n	801a5e8 <rint+0x70>
 801a646:	2e33      	cmp	r6, #51	; 0x33
 801a648:	dd07      	ble.n	801a65a <rint+0xe2>
 801a64a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a64e:	d1cb      	bne.n	801a5e8 <rint+0x70>
 801a650:	ee10 2a10 	vmov	r2, s0
 801a654:	f7e5 fe3a 	bl	80002cc <__adddf3>
 801a658:	e7c6      	b.n	801a5e8 <rint+0x70>
 801a65a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a65e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801a662:	40d6      	lsrs	r6, r2
 801a664:	4230      	tst	r0, r6
 801a666:	d0bf      	beq.n	801a5e8 <rint+0x70>
 801a668:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a66c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a670:	bf1f      	itttt	ne
 801a672:	ea24 0101 	bicne.w	r1, r4, r1
 801a676:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a67a:	fa44 f202 	asrne.w	r2, r4, r2
 801a67e:	ea41 0402 	orrne.w	r4, r1, r2
 801a682:	e7cd      	b.n	801a620 <rint+0xa8>
 801a684:	0801cb90 	.word	0x0801cb90
 801a688:	000fffff 	.word	0x000fffff
 801a68c:	00000000 	.word	0x00000000

0801a690 <scalbn>:
 801a690:	b570      	push	{r4, r5, r6, lr}
 801a692:	ec55 4b10 	vmov	r4, r5, d0
 801a696:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a69a:	4606      	mov	r6, r0
 801a69c:	462b      	mov	r3, r5
 801a69e:	b99a      	cbnz	r2, 801a6c8 <scalbn+0x38>
 801a6a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a6a4:	4323      	orrs	r3, r4
 801a6a6:	d036      	beq.n	801a716 <scalbn+0x86>
 801a6a8:	4b39      	ldr	r3, [pc, #228]	; (801a790 <scalbn+0x100>)
 801a6aa:	4629      	mov	r1, r5
 801a6ac:	ee10 0a10 	vmov	r0, s0
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	f7e5 ffc1 	bl	8000638 <__aeabi_dmul>
 801a6b6:	4b37      	ldr	r3, [pc, #220]	; (801a794 <scalbn+0x104>)
 801a6b8:	429e      	cmp	r6, r3
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	460d      	mov	r5, r1
 801a6be:	da10      	bge.n	801a6e2 <scalbn+0x52>
 801a6c0:	a32b      	add	r3, pc, #172	; (adr r3, 801a770 <scalbn+0xe0>)
 801a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c6:	e03a      	b.n	801a73e <scalbn+0xae>
 801a6c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a6cc:	428a      	cmp	r2, r1
 801a6ce:	d10c      	bne.n	801a6ea <scalbn+0x5a>
 801a6d0:	ee10 2a10 	vmov	r2, s0
 801a6d4:	4620      	mov	r0, r4
 801a6d6:	4629      	mov	r1, r5
 801a6d8:	f7e5 fdf8 	bl	80002cc <__adddf3>
 801a6dc:	4604      	mov	r4, r0
 801a6de:	460d      	mov	r5, r1
 801a6e0:	e019      	b.n	801a716 <scalbn+0x86>
 801a6e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a6e6:	460b      	mov	r3, r1
 801a6e8:	3a36      	subs	r2, #54	; 0x36
 801a6ea:	4432      	add	r2, r6
 801a6ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a6f0:	428a      	cmp	r2, r1
 801a6f2:	dd08      	ble.n	801a706 <scalbn+0x76>
 801a6f4:	2d00      	cmp	r5, #0
 801a6f6:	a120      	add	r1, pc, #128	; (adr r1, 801a778 <scalbn+0xe8>)
 801a6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6fc:	da1c      	bge.n	801a738 <scalbn+0xa8>
 801a6fe:	a120      	add	r1, pc, #128	; (adr r1, 801a780 <scalbn+0xf0>)
 801a700:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a704:	e018      	b.n	801a738 <scalbn+0xa8>
 801a706:	2a00      	cmp	r2, #0
 801a708:	dd08      	ble.n	801a71c <scalbn+0x8c>
 801a70a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a70e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a716:	ec45 4b10 	vmov	d0, r4, r5
 801a71a:	bd70      	pop	{r4, r5, r6, pc}
 801a71c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a720:	da19      	bge.n	801a756 <scalbn+0xc6>
 801a722:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a726:	429e      	cmp	r6, r3
 801a728:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a72c:	dd0a      	ble.n	801a744 <scalbn+0xb4>
 801a72e:	a112      	add	r1, pc, #72	; (adr r1, 801a778 <scalbn+0xe8>)
 801a730:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d1e2      	bne.n	801a6fe <scalbn+0x6e>
 801a738:	a30f      	add	r3, pc, #60	; (adr r3, 801a778 <scalbn+0xe8>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 ff7b 	bl	8000638 <__aeabi_dmul>
 801a742:	e7cb      	b.n	801a6dc <scalbn+0x4c>
 801a744:	a10a      	add	r1, pc, #40	; (adr r1, 801a770 <scalbn+0xe0>)
 801a746:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d0b8      	beq.n	801a6c0 <scalbn+0x30>
 801a74e:	a10e      	add	r1, pc, #56	; (adr r1, 801a788 <scalbn+0xf8>)
 801a750:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a754:	e7b4      	b.n	801a6c0 <scalbn+0x30>
 801a756:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a75a:	3236      	adds	r2, #54	; 0x36
 801a75c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a760:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a764:	4620      	mov	r0, r4
 801a766:	4b0c      	ldr	r3, [pc, #48]	; (801a798 <scalbn+0x108>)
 801a768:	2200      	movs	r2, #0
 801a76a:	e7e8      	b.n	801a73e <scalbn+0xae>
 801a76c:	f3af 8000 	nop.w
 801a770:	c2f8f359 	.word	0xc2f8f359
 801a774:	01a56e1f 	.word	0x01a56e1f
 801a778:	8800759c 	.word	0x8800759c
 801a77c:	7e37e43c 	.word	0x7e37e43c
 801a780:	8800759c 	.word	0x8800759c
 801a784:	fe37e43c 	.word	0xfe37e43c
 801a788:	c2f8f359 	.word	0xc2f8f359
 801a78c:	81a56e1f 	.word	0x81a56e1f
 801a790:	43500000 	.word	0x43500000
 801a794:	ffff3cb0 	.word	0xffff3cb0
 801a798:	3c900000 	.word	0x3c900000

0801a79c <_init>:
 801a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a79e:	bf00      	nop
 801a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7a2:	bc08      	pop	{r3}
 801a7a4:	469e      	mov	lr, r3
 801a7a6:	4770      	bx	lr

0801a7a8 <_fini>:
 801a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7aa:	bf00      	nop
 801a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7ae:	bc08      	pop	{r3}
 801a7b0:	469e      	mov	lr, r3
 801a7b2:	4770      	bx	lr
